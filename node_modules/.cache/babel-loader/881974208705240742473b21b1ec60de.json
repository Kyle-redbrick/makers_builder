{"ast":null,"code":"import _toConsumableArray from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Tabs/Container.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as tabActions from \"../../Store/Reducer/tabs\";\nimport View from \"./View\";\nimport { URL } from \"../../../../Common/Util/Constant\";\nimport stringify from \"json-stringify-safe\";\nimport Stomp from \"stompjs\"; // 위즈라이브 전용 1v4 탭\n\nvar DATA_TYPE_LOG = \"DATA_TYPE_LOG\";\n\nvar Container =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Container, _Component);\n\n  function Container(props) {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Container).call(this, props)); // create mq\n\n    _this.shouldComponentUpdate = function (nextProps, nextState) {\n      // log : 사용자 인터렉션 화면 상태값 (스니펫, 채팅, api, 속성 등..)\n      // const { isTutor, log } = this.props;\n      if (stringify(_this.props.log) !== stringify(nextProps.log)) {\n        _this.mqSend(nextProps.log);\n      }\n\n      return true;\n    };\n\n    _this.handleSelectTab = function (_ref) {\n      var tabNum = _ref.tabNum,\n          email = _ref.email,\n          pId = _ref.pId;\n\n      _this.setState({\n        selectedTab: tabNum\n      }, function () {\n        return _this.props.setCurrentUser({\n          email: email,\n          pId: pId\n        });\n      });\n    };\n\n    _this.mqConnect = function (mqReadyCallback, mqErrorCallback) {\n      if (!_this.mq) return;\n      _this.mq.client = Stomp.client(URL.MQ);\n      _this.mq.client.debug = null;\n      _this.mq.client.reconnect_delay = 5000;\n      var client = _this.mq.client;\n      var headers = {\n        login: \"wizschool\",\n        passcode: \"Wizschool2018!!\",\n        host: \"/\"\n      };\n      var randomString = Math.random().toString(36).substr(2, 5);\n      headers[\"client-id\"] = _this.props.email + _this.props.roomId + randomString;\n      client.connect(headers, function (frame) {\n        if (mqReadyCallback) mqReadyCallback();\n      }, function (err) {\n        if (mqErrorCallback) mqErrorCallback(err);\n      });\n    };\n\n    _this.mqSubscribe = function () {\n      if (!_this.mq) return;\n      var _this$mq = _this.mq,\n          client = _this$mq.client,\n          topicName = _this$mq.topicName;\n      _this.mq.subscription = client.subscribe(topicName, function (msg) {\n        var recvData = msg.body;\n        var senderId = msg.headers.senderId; // if (senderId !== this.props.email) {\n\n        if (_this.props.isTutor) {\n          var _JSON$parse = JSON.parse(recvData),\n              log = _JSON$parse.log;\n\n          _this.setState({\n            senderEmail: senderId,\n            log: log\n          }); // console.log({ log });\n          // animation: false\n          // api: false\n          // chatbot: false\n          // game: false\n          // gameFullScreen: false\n          // property: false\n          // publish: false\n          // selectedApi: \"ID_ALL\"\n          // selectedSprite: \"신규\"\n          // sound: false\n          // soundBox: false\n          // spriteBox: false\n          // spriteCatagory: \"\"\n\n        } else {// console.log(\"This is data that sending of me\");\n          }\n      });\n    };\n\n    _this.mqSend = function (data) {\n      var _this$mq2 = _this.mq,\n          client = _this$mq2.client,\n          topicName = _this$mq2.topicName;\n      var _this$props = _this.props,\n          isTutor = _this$props.isTutor,\n          email = _this$props.email;\n      var sendHeaders = {\n        \"content-type\": \"application/json\",\n        senderId: email\n      };\n\n      if (!isTutor) {\n        client.send(topicName, sendHeaders, stringify({\n          type: DATA_TYPE_LOG,\n          log: data\n        }));\n      }\n    };\n\n    _this.mqDisconnect = function () {\n      var _this$mq3 = _this.mq,\n          client = _this$mq3.client,\n          subscription = _this$mq3.subscription;\n\n      if (client) {\n        if (subscription) {\n          subscription.unsubscribe();\n        }\n\n        client.disconnect();\n      }\n    };\n\n    _this.mq = {\n      topicName: \"/topic/wizlive\".concat(_this.props.roomId, \"-\").concat(_this.props.tutorEmail),\n      client: null,\n      subscription: null\n    }; // init state\n\n    _this.state = {\n      selectedTab: 0,\n      log: {},\n      senderEmail: \"\",\n      students: []\n    }; // currentUser를 자기 자신으로 초기 세팅\n\n    _this.props.setCurrentUser({\n      email: _this.props.email,\n      pId: _this.props.pId\n    });\n\n    _this.mqConnect(function () {\n      // mq ready\n      _this.mqSubscribe();\n    });\n\n    return _this;\n  } //MARK:- life cycle\n\n\n  _createClass(Container, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      // remote feed에서 학생들이 추가 될 때\n      if (prevProps.students.length !== this.props.students.length) {\n        this.setState({\n          students: this.props.students\n        });\n      } // 학생 상태보기 log가 변경 될 때\n\n\n      if (this.props.isTutor && JSON.stringify(prevState.log) !== JSON.stringify(this.state.log)) {\n        this.setState(function (prevState) {\n          return {\n            students: prevState.students.map(function (student) {\n              if (student.email === _this2.state.senderEmail) {\n                return _objectSpread({}, student, {\n                  log: _this2.state.log\n                });\n              } else {\n                return student;\n              }\n            })\n          };\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.mqDisconnect();\n    } //MARK:- onClicks\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          isTutor = _this$props2.isTutor,\n          email = _this$props2.email,\n          tutorEmail = _this$props2.tutorEmail,\n          pId = _this$props2.pId,\n          tutor = _this$props2.tutor,\n          name = _this$props2.name,\n          isMonitor = _this$props2.isMonitor;\n      var _this$state = this.state,\n          selectedTab = _this$state.selectedTab,\n          students = _this$state.students;\n      var handleSelectTab = this.handleSelectTab; // remote feed에서 붙은 학생들 중에 자기 자신은 제외\n\n      var _students = students.filter(function (student) {\n        return student.email !== email;\n      });\n\n      var handleTabs = function handleTabs() {\n        if (isTutor) {\n          var tabs = [{\n            email: tutorEmail,\n            pId: pId,\n            name: name\n          }].concat(_toConsumableArray(_students)).reduce(function (acc, cur, i) {\n            return acc.concat(_objectSpread({}, cur, {\n              // num: i === 0 ? \"T\" : i\n              num: i === 0 ? \"T\" : \"S\"\n            }));\n          }, []);\n          return tabs;\n        } else {\n          var _tabs = [{\n            email: email,\n            pId: pId,\n            name: name\n          }].concat(_toConsumableArray(_students), _toConsumableArray(tutor)).reduce(function (acc, cur, i) {\n            return acc.concat(_objectSpread({}, cur, {\n              // num: cur.email === tutorEmail ? \"T\" : i + 1\n              num: cur.email === tutorEmail ? \"T\" : \"S\"\n            }));\n          }, []);\n\n          return _tabs;\n        }\n      };\n\n      return React.createElement(View, {\n        selectedTab: selectedTab,\n        handleSelectTab: handleSelectTab,\n        tabs: handleTabs(),\n        isMonitor: isMonitor,\n        email: email,\n        isTutor: isTutor,\n        tutorEmail: tutorEmail // log={log}\n        // senderEmail={senderEmail}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    students: state.tabs.students,\n    tutor: state.tabs.tutor,\n    email: state.userinfo.email,\n    log: state.webrtc.log\n  };\n}, {\n  setCurrentUser: tabActions.setCurrentUser\n})(Container);","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Tabs/Container.js"],"names":["React","Component","connect","tabActions","View","URL","stringify","Stomp","DATA_TYPE_LOG","Container","props","shouldComponentUpdate","nextProps","nextState","log","mqSend","handleSelectTab","tabNum","email","pId","setState","selectedTab","setCurrentUser","mqConnect","mqReadyCallback","mqErrorCallback","mq","client","MQ","debug","reconnect_delay","headers","login","passcode","host","randomString","Math","random","toString","substr","roomId","frame","err","mqSubscribe","topicName","subscription","subscribe","msg","recvData","body","senderId","isTutor","JSON","parse","senderEmail","data","sendHeaders","send","type","mqDisconnect","unsubscribe","disconnect","tutorEmail","state","students","prevProps","prevState","length","map","student","tutor","name","isMonitor","_students","filter","handleTabs","tabs","reduce","acc","cur","i","concat","num","userinfo","webrtc"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as tabActions from \"../../Store/Reducer/tabs\";\nimport View from \"./View\";\nimport { URL } from \"../../../../Common/Util/Constant\";\nimport stringify from \"json-stringify-safe\";\nimport Stomp from \"stompjs\";\n\n// 위즈라이브 전용 1v4 탭\nconst DATA_TYPE_LOG = \"DATA_TYPE_LOG\";\nclass Container extends Component {\n  constructor(props) {\n    super(props);\n\n    // create mq\n    this.mq = {\n      topicName: `/topic/wizlive${this.props.roomId}-${this.props.tutorEmail}`,\n      client: null,\n      subscription: null\n    };\n\n    // init state\n    this.state = {\n      selectedTab: 0,\n      log: {},\n      senderEmail: \"\",\n      students: []\n    };\n\n    // currentUser를 자기 자신으로 초기 세팅\n    this.props.setCurrentUser({ email: this.props.email, pId: this.props.pId });\n\n    this.mqConnect(() => {\n      // mq ready\n      this.mqSubscribe();\n    });\n  }\n\n  //MARK:- life cycle\n  shouldComponentUpdate = (nextProps, nextState) => {\n    // log : 사용자 인터렉션 화면 상태값 (스니펫, 채팅, api, 속성 등..)\n    // const { isTutor, log } = this.props;\n    if (stringify(this.props.log) !== stringify(nextProps.log)) {\n      this.mqSend(nextProps.log);\n    }\n    return true;\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    // remote feed에서 학생들이 추가 될 때\n    if (prevProps.students.length !== this.props.students.length) {\n      this.setState({ students: this.props.students });\n    }\n    // 학생 상태보기 log가 변경 될 때\n    if (\n      this.props.isTutor &&\n      JSON.stringify(prevState.log) !== JSON.stringify(this.state.log)\n    ) {\n      this.setState(prevState => ({\n        students: prevState.students.map(student => {\n          if (student.email === this.state.senderEmail) {\n            return { ...student, log: this.state.log };\n          } else {\n            return student;\n          }\n        })\n      }));\n    }\n  }\n\n  componentWillUnmount() {\n    this.mqDisconnect();\n  }\n\n  //MARK:- onClicks\n  handleSelectTab = ({ tabNum, email, pId }) => {\n    this.setState({ selectedTab: tabNum }, () =>\n      this.props.setCurrentUser({ email, pId })\n    );\n  };\n\n  //MARK:- private\n  mqConnect = (mqReadyCallback, mqErrorCallback) => {\n    if (!this.mq) return;\n\n    this.mq.client = Stomp.client(URL.MQ);\n    this.mq.client.debug = null;\n    this.mq.client.reconnect_delay = 5000;\n\n    const { client } = this.mq;\n    const headers = {\n      login: \"wizschool\",\n      passcode: \"Wizschool2018!!\",\n      host: \"/\"\n    };\n    const randomString = Math.random()\n      .toString(36)\n      .substr(2, 5);\n    headers[\"client-id\"] = this.props.email + this.props.roomId + randomString;\n\n    client.connect(\n      headers,\n      frame => {\n        if (mqReadyCallback) mqReadyCallback();\n      },\n      err => {\n        if (mqErrorCallback) mqErrorCallback(err);\n      }\n    );\n  };\n\n  mqSubscribe = () => {\n    if (!this.mq) return;\n\n    const { client, topicName } = this.mq;\n    this.mq.subscription = client.subscribe(topicName, msg => {\n      const recvData = msg.body;\n      const senderId = msg.headers.senderId;\n      // if (senderId !== this.props.email) {\n      if (this.props.isTutor) {\n        const { /*type,*/ log } = JSON.parse(recvData);\n        this.setState({ senderEmail: senderId, log });\n        // console.log({ log });\n        // animation: false\n        // api: false\n        // chatbot: false\n        // game: false\n        // gameFullScreen: false\n        // property: false\n        // publish: false\n        // selectedApi: \"ID_ALL\"\n        // selectedSprite: \"신규\"\n        // sound: false\n        // soundBox: false\n        // spriteBox: false\n        // spriteCatagory: \"\"\n      } else {\n        // console.log(\"This is data that sending of me\");\n      }\n    });\n  };\n\n  mqSend = data => {\n    const { client, topicName } = this.mq;\n    const { isTutor, email } = this.props;\n    const sendHeaders = {\n      \"content-type\": \"application/json\",\n      senderId: email\n    };\n    if (!isTutor) {\n      client.send(\n        topicName,\n        sendHeaders,\n        stringify({ type: DATA_TYPE_LOG, log: data })\n      );\n    }\n  };\n\n  mqDisconnect = () => {\n    const { client, subscription } = this.mq;\n    if (client) {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n      client.disconnect();\n    }\n  };\n\n  render() {\n    const {\n      isTutor,\n      email,\n      tutorEmail,\n      // students,\n      pId,\n      tutor,\n      name,\n      isMonitor\n    } = this.props;\n\n    const { selectedTab, students } = this.state;\n\n    const { handleSelectTab } = this;\n\n    // remote feed에서 붙은 학생들 중에 자기 자신은 제외\n    const _students = students.filter(student => student.email !== email);\n    const handleTabs = () => {\n      if (isTutor) {\n        const tabs = [{ email: tutorEmail, pId, name }, ..._students].reduce(\n          (acc, cur, i) => {\n            return acc.concat({\n              ...cur,\n              // num: i === 0 ? \"T\" : i\n              num: i === 0 ? \"T\" : \"S\"\n            });\n          },\n          []\n        );\n        return tabs;\n      } else {\n        const tabs = [{ email, pId, name }, ..._students, ...tutor].reduce(\n          (acc, cur, i) => {\n            return acc.concat({\n              ...cur,\n              // num: cur.email === tutorEmail ? \"T\" : i + 1\n              num: cur.email === tutorEmail ? \"T\" : \"S\"\n            });\n          },\n          []\n        );\n        return tabs;\n      }\n    };\n\n    return (\n      <View\n        selectedTab={selectedTab}\n        handleSelectTab={handleSelectTab}\n        tabs={handleTabs()}\n        isMonitor={isMonitor}\n        email={email}\n        isTutor={isTutor}\n        tutorEmail={tutorEmail}\n        // log={log}\n        // senderEmail={senderEmail}\n      />\n    );\n  }\n}\n\nexport default connect(\n  state => {\n    return {\n      students: state.tabs.students,\n      tutor: state.tabs.tutor,\n      email: state.userinfo.email,\n      log: state.webrtc.log\n    };\n  },\n  {\n    setCurrentUser: tabActions.setCurrentUser\n  }\n)(Container);\n"]},"metadata":{},"sourceType":"module"}