{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport React__default, { createContext, useEffect, useMemo, useState, useContext, useCallback } from 'react';\nimport { stubbedPublicClientApplication, InteractionStatus, Logger, WrapperSKU, EventType, EventMessageUtils, AccountEntity, InteractionType } from '@azure/msal-browser';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/*\r\n * Stubbed context implementation\r\n * Only used when there is no provider, which is an unsupported scenario\r\n */\n\nvar defaultMsalContext = {\n  instance: stubbedPublicClientApplication,\n  inProgress: InteractionStatus.None,\n  accounts: [],\n  logger: /*#__PURE__*/new Logger({})\n};\nvar MsalContext = /*#__PURE__*/createContext(defaultMsalContext);\nvar MsalConsumer = MsalContext.Consumer;\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nfunction getChildrenOrFunction(children, args) {\n  if (typeof children === \"function\") {\n    return children(args);\n  }\n\n  return children;\n}\n/**\r\n * Helper function to determine whether 2 arrays are equal\r\n * Used to avoid unnecessary state updates\r\n * @param arrayA\r\n * @param arrayB\r\n */\n\n\nfunction accountArraysAreEqual(arrayA, arrayB) {\n  if (arrayA.length !== arrayB.length) {\n    return false;\n  }\n\n  var comparisonArray = _toConsumableArray(arrayB);\n\n  return arrayA.every(function (elementA) {\n    var elementB = comparisonArray.shift();\n\n    if (!elementA || !elementB) {\n      return false;\n    }\n\n    return elementA.homeAccountId === elementB.homeAccountId && elementA.localAccountId === elementB.localAccountId && elementA.username === elementB.username;\n  });\n}\n/* eslint-disable header/header */\n\n\nvar name = \"@azure/msal-react\";\nvar version = \"1.0.1\";\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nfunction MsalProvider(_ref) {\n  var instance = _ref.instance,\n      children = _ref.children;\n  useEffect(function () {\n    instance.initializeWrapperLibrary(WrapperSKU.React, version);\n  }, [instance]); // Create a logger instance for msal-react with the same options as PublicClientApplication\n\n  var logger = useMemo(function () {\n    return instance.getLogger().clone(name, version);\n  }, [instance]); // State hook to store accounts\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      accounts = _useState2[0],\n      setAccounts = _useState2[1]; // State hook to store in progress value\n\n\n  var _useState3 = useState(InteractionStatus.Startup),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inProgress = _useState4[0],\n      setInProgress = _useState4[1];\n\n  useEffect(function () {\n    var callbackId = instance.addEventCallback(function (message) {\n      switch (message.eventType) {\n        case EventType.LOGIN_SUCCESS:\n        case EventType.SSO_SILENT_SUCCESS:\n        case EventType.HANDLE_REDIRECT_END:\n        case EventType.LOGIN_FAILURE:\n        case EventType.SSO_SILENT_FAILURE:\n        case EventType.LOGOUT_END:\n        case EventType.ACQUIRE_TOKEN_SUCCESS:\n        case EventType.ACQUIRE_TOKEN_FAILURE:\n          var currentAccounts = instance.getAllAccounts();\n\n          if (!accountArraysAreEqual(currentAccounts, accounts)) {\n            logger.info(\"MsalProvider - updating account state\");\n            setAccounts(currentAccounts);\n          } else {\n            logger.info(\"MsalProvider - no account changes\");\n          }\n\n          break;\n      }\n    });\n    logger.verbose(\"MsalProvider - Registered event callback with id: \".concat(callbackId));\n    return function () {\n      // Remove callback when component unmounts or accounts change\n      if (callbackId) {\n        logger.verbose(\"MsalProvider - Removing event callback \".concat(callbackId));\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, [instance, accounts, logger]);\n  useEffect(function () {\n    var callbackId = instance.addEventCallback(function (message) {\n      var status = EventMessageUtils.getInteractionStatusFromEvent(message);\n\n      if (status !== null) {\n        logger.info(\"MsalProvider - \".concat(message.eventType, \" results in setting inProgress to \").concat(status));\n        setInProgress(status);\n      }\n    });\n    logger.verbose(\"MsalProvider - Registered event callback with id: \".concat(callbackId));\n    instance.handleRedirectPromise().catch(function () {\n      // Errors should be handled by listening to the LOGIN_FAILURE event\n      return;\n    });\n    return function () {\n      if (callbackId) {\n        logger.verbose(\"MsalProvider - Removing event callback \".concat(callbackId));\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, [instance, logger]);\n  var contextValue = {\n    instance: instance,\n    inProgress: inProgress,\n    accounts: accounts,\n    logger: logger\n  };\n  return React__default.createElement(MsalContext.Provider, {\n    value: contextValue\n  }, children);\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Returns Msal Context values\r\n */\n\n\nvar useMsal = function useMsal() {\n  return useContext(MsalContext);\n};\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nfunction getAccount(instance, accountIdentifiers) {\n  var allAccounts = instance.getAllAccounts();\n\n  if (allAccounts.length > 0 && (accountIdentifiers.homeAccountId || accountIdentifiers.localAccountId || accountIdentifiers.username)) {\n    var matchedAccounts = allAccounts.filter(function (accountObj) {\n      if (accountIdentifiers.username && accountIdentifiers.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n        return false;\n      }\n\n      if (accountIdentifiers.homeAccountId && accountIdentifiers.homeAccountId.toLowerCase() !== accountObj.homeAccountId.toLowerCase()) {\n        return false;\n      }\n\n      if (accountIdentifiers.localAccountId && accountIdentifiers.localAccountId.toLowerCase() !== accountObj.localAccountId.toLowerCase()) {\n        return false;\n      }\n\n      return true;\n    });\n    return matchedAccounts[0] || null;\n  } else {\n    return null;\n  }\n}\n/**\r\n * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in\r\n * @param accountIdentifiers\r\n */\n\n\nfunction useAccount(accountIdentifiers) {\n  var _useMsal = useMsal(),\n      instance = _useMsal.instance,\n      inProgress = _useMsal.inProgress;\n\n  var initialStateValue = inProgress === InteractionStatus.Startup ? null : getAccount(instance, accountIdentifiers);\n\n  var _useState5 = useState(initialStateValue),\n      _useState6 = _slicedToArray(_useState5, 2),\n      account = _useState6[0],\n      setAccount = _useState6[1];\n\n  useEffect(function () {\n    var currentAccount = getAccount(instance, accountIdentifiers);\n\n    if (!AccountEntity.accountInfoIsEqual(account, currentAccount, true)) {\n      setAccount(currentAccount);\n    }\n  }, [inProgress, accountIdentifiers, instance, account]);\n  return account;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nfunction isAuthenticated(allAccounts, account, matchAccount) {\n  if (matchAccount && (matchAccount.username || matchAccount.homeAccountId || matchAccount.localAccountId)) {\n    return !!account;\n  }\n\n  return allAccounts.length > 0;\n}\n/**\r\n * Returns whether or not a user is currently signed-in. Optionally provide 1 or more accountIdentifiers to determine if a specific user is signed-in\r\n * @param matchAccount\r\n */\n\n\nfunction useIsAuthenticated(matchAccount) {\n  var _useMsal2 = useMsal(),\n      allAccounts = _useMsal2.accounts,\n      inProgress = _useMsal2.inProgress;\n\n  var account = useAccount(matchAccount || {});\n  var initialStateValue = inProgress === InteractionStatus.Startup ? false : isAuthenticated(allAccounts, account, matchAccount);\n\n  var _useState7 = useState(initialStateValue),\n      _useState8 = _slicedToArray(_useState7, 2),\n      hasAuthenticated = _useState8[0],\n      setHasAuthenticated = _useState8[1];\n\n  useEffect(function () {\n    setHasAuthenticated(isAuthenticated(allAccounts, account, matchAccount));\n  }, [allAccounts, account, matchAccount]);\n  return hasAuthenticated;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Renders child components if user is authenticated\r\n * @param props\r\n */\n\n\nfunction AuthenticatedTemplate(_ref2) {\n  var username = _ref2.username,\n      homeAccountId = _ref2.homeAccountId,\n      localAccountId = _ref2.localAccountId,\n      children = _ref2.children;\n  var context = useMsal();\n  var accountIdentifier = useMemo(function () {\n    return {\n      username: username,\n      homeAccountId: homeAccountId,\n      localAccountId: localAccountId\n    };\n  }, [username, homeAccountId, localAccountId]);\n  var isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n  if (isAuthenticated && context.inProgress !== InteractionStatus.Startup) {\n    return React__default.createElement(React__default.Fragment, null, getChildrenOrFunction(children, context));\n  }\n\n  return null;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Renders child components if user is unauthenticated\r\n * @param props\r\n */\n\n\nfunction UnauthenticatedTemplate(_ref3) {\n  var username = _ref3.username,\n      homeAccountId = _ref3.homeAccountId,\n      localAccountId = _ref3.localAccountId,\n      children = _ref3.children;\n  var context = useMsal();\n  var accountIdentifier = useMemo(function () {\n    return {\n      username: username,\n      homeAccountId: homeAccountId,\n      localAccountId: localAccountId\n    };\n  }, [username, homeAccountId, localAccountId]);\n  var isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n  if (!isAuthenticated && context.inProgress !== InteractionStatus.Startup && context.inProgress !== InteractionStatus.HandleRedirect) {\n    return React__default.createElement(React__default.Fragment, null, getChildrenOrFunction(children, context));\n  }\n\n  return null;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Invokes a login call if a user is not currently signed-in. Failed logins can be retried using the login callback returned.\r\n * Optionally provide a request object to be used in the login call.\r\n * Optionally provide a specific user that should be logged in.\r\n * @param interactionType\r\n * @param authenticationRequest\r\n * @param accountIdentifiers\r\n */\n\n\nfunction useMsalAuthentication(interactionType, authenticationRequest, accountIdentifiers) {\n  var _useMsal3 = useMsal(),\n      instance = _useMsal3.instance,\n      inProgress = _useMsal3.inProgress,\n      logger = _useMsal3.logger;\n\n  var isAuthenticated = useIsAuthenticated(accountIdentifiers);\n\n  var _useState9 = useState([null, null]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      _useState10$ = _slicedToArray(_useState10[0], 2),\n      result = _useState10$[0],\n      error = _useState10$[1],\n      setResponse = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      hasBeenCalled = _useState12[0],\n      setHasBeenCalled = _useState12[1];\n\n  var login = useCallback( /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(callbackInteractionType, callbackRequest) {\n      var loginType, loginRequest;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              loginType = callbackInteractionType || interactionType;\n              loginRequest = callbackRequest || authenticationRequest;\n              _context.t0 = loginType;\n              _context.next = _context.t0 === InteractionType.Popup ? 5 : _context.t0 === InteractionType.Redirect ? 7 : _context.t0 === InteractionType.Silent ? 9 : 11;\n              break;\n\n            case 5:\n              logger.verbose(\"useMsalAuthentication - Calling loginPopup\");\n              return _context.abrupt(\"return\", instance.loginPopup(loginRequest));\n\n            case 7:\n              // This promise is not expected to resolve due to full frame redirect\n              logger.verbose(\"useMsalAuthentication - Calling loginRedirect\");\n              return _context.abrupt(\"return\", instance.loginRedirect(loginRequest).then(null));\n\n            case 9:\n              logger.verbose(\"useMsalAuthentication - Calling ssoSilent\");\n              return _context.abrupt(\"return\", instance.ssoSilent(loginRequest));\n\n            case 11:\n              throw \"Invalid interaction type provided.\";\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), [instance, interactionType, authenticationRequest, logger]);\n  useEffect(function () {\n    var callbackId = instance.addEventCallback(function (message) {\n      switch (message.eventType) {\n        case EventType.LOGIN_SUCCESS:\n        case EventType.SSO_SILENT_SUCCESS:\n          if (message.payload) {\n            setResponse([message.payload, null]);\n          }\n\n          break;\n\n        case EventType.LOGIN_FAILURE:\n        case EventType.SSO_SILENT_FAILURE:\n          if (message.error) {\n            setResponse([null, message.error]);\n          }\n\n          break;\n      }\n    });\n    logger.verbose(\"useMsalAuthentication - Registered event callback with id: \".concat(callbackId));\n    return function () {\n      if (callbackId) {\n        logger.verbose(\"useMsalAuthentication - Removing event callback \".concat(callbackId));\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, [instance, logger]);\n  useEffect(function () {\n    if (!hasBeenCalled && !error && !isAuthenticated && inProgress === InteractionStatus.None) {\n      logger.info(\"useMsalAuthentication - No user is authenticated, attempting to login\"); // Ensure login is only called one time from within this hook, any subsequent login attempts should use the callback returned\n\n      setHasBeenCalled(true);\n      login().catch(function () {\n        // Errors are handled by the event handler above\n        return;\n      });\n    }\n  }, [isAuthenticated, inProgress, error, hasBeenCalled, login, logger]);\n  return {\n    login: login,\n    result: result,\n    error: error\n  };\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Attempts to authenticate user if not already authenticated, then renders child components\r\n * @param props\r\n */\n\n\nfunction MsalAuthenticationTemplate(_ref5) {\n  var interactionType = _ref5.interactionType,\n      username = _ref5.username,\n      homeAccountId = _ref5.homeAccountId,\n      localAccountId = _ref5.localAccountId,\n      authenticationRequest = _ref5.authenticationRequest,\n      LoadingComponent = _ref5.loadingComponent,\n      ErrorComponent = _ref5.errorComponent,\n      children = _ref5.children;\n  var accountIdentifier = useMemo(function () {\n    return {\n      username: username,\n      homeAccountId: homeAccountId,\n      localAccountId: localAccountId\n    };\n  }, [username, homeAccountId, localAccountId]);\n  var context = useMsal();\n  var msalAuthResult = useMsalAuthentication(interactionType, authenticationRequest, accountIdentifier);\n  var isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n  if (msalAuthResult.error && context.inProgress === InteractionStatus.None) {\n    if (!!ErrorComponent) {\n      return React__default.createElement(ErrorComponent, Object.assign({}, msalAuthResult));\n    }\n\n    throw msalAuthResult.error;\n  }\n\n  if (isAuthenticated) {\n    return React__default.createElement(React__default.Fragment, null, getChildrenOrFunction(children, msalAuthResult));\n  }\n\n  if (!!LoadingComponent && context.inProgress !== InteractionStatus.None) {\n    return React__default.createElement(LoadingComponent, Object.assign({}, context));\n  }\n\n  return null;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Higher order component wraps provided component with msal by injecting msal context values into the component's props\r\n * @param Component\r\n */\n\n\nvar withMsal = function withMsal(Component) {\n  var ComponentWithMsal = function ComponentWithMsal(props) {\n    var msal = useMsal();\n    return React__default.createElement(Component, Object.assign({}, props, {\n      msalContext: msal\n    }));\n  };\n\n  var componentName = Component.displayName || Component.name || \"Component\";\n  ComponentWithMsal.displayName = \"withMsal(\".concat(componentName, \")\");\n  return ComponentWithMsal;\n};\n\nexport { AuthenticatedTemplate, MsalAuthenticationTemplate, MsalConsumer, MsalContext, MsalProvider, UnauthenticatedTemplate, useAccount, useIsAuthenticated, useMsal, useMsalAuthentication, withMsal };","map":null,"metadata":{},"sourceType":"module"}