{"ast":null,"code":"import _classCallCheck from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/astroboy/src/Page/Builder3D/Component/Toolbar/Container.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as builderReducer from \"../../Store/Reducer/builder\";\nimport * as interactionReducer from \"../../Store/Reducer/interaction\";\nimport View from \"./View\";\n\nvar Container = /*#__PURE__*/function (_Component) {\n  _inherits(Container, _Component);\n\n  var _super = _createSuper(Container);\n\n  function Container(props) {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _super.call(this, props);\n\n    _this.onClickPlay = function () {\n      _this.props.setIsPlaying(true);\n    };\n\n    _this.onClickGizmoType = function (gizmoType) {\n      var currentGizmoType = _this.props.currentGizmoType;\n\n      _this.props.selectGizmoType(gizmoType === currentGizmoType ? null : gizmoType);\n    };\n\n    _this.onClickCameraView = function () {\n      _this.props.setIsCameraViewOn(!_this.props.isCameraViewOn);\n    };\n\n    _this.state = {\n      availableGizmoTypes: []\n    };\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.currentGameObjectId !== this.props.currentGameObjectId) {\n        this.onChangeCurrentGameObject();\n      }\n    }\n  }, {\n    key: \"onChangeCurrentGameObject\",\n    value: function onChangeCurrentGameObject() {\n      var _this$props = this.props,\n          currentGameObject = _this$props.currentGameObject,\n          babylonPreview = _this$props.babylonPreview;\n\n      if (currentGameObject) {\n        try {\n          var currentBabylonScene = babylonPreview.currentScene;\n          var currentBabylongGameObject = currentBabylonScene.getGameObject(currentGameObject.id);\n          var availableGizmoTypes = currentBabylongGameObject.constructor.getAvailableGizmoTypes();\n          this.setState({\n            availableGizmoTypes: availableGizmoTypes\n          });\n        } catch (_unused) {\n          this.setState({\n            availableGizmoTypes: []\n          });\n        }\n      } else {\n        this.setState({\n          availableGizmoTypes: []\n        });\n      }\n    } // onClickMenu = () => {};\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var currentGizmoType = this.props.currentGizmoType;\n      var availableGizmoTypes = this.state.availableGizmoTypes;\n      return React.createElement(View, {\n        currentGizmoType: currentGizmoType,\n        availableGizmoTypes: availableGizmoTypes // onClickMenu={this.onClickMenu}\n        ,\n        onClickPlay: this.onClickPlay,\n        onClickCameraView: this.onClickCameraView,\n        onClickGizmoType: this.onClickGizmoType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport default connect(function (state) {\n  var game = state.game,\n      interaction = state.interaction,\n      builder = state.builder;\n  var scenes = game.scenes;\n  var currentSceneId = interaction.currentSceneId,\n      currentGizmoType = interaction.currentGizmoType;\n  var babylonPreview = builder.babylonPreview,\n      isCameraViewOn = builder.isCameraViewOn;\n  var currentScene = currentSceneId && scenes[currentSceneId];\n  var currentGameObjects = currentScene ? currentScene.gameObjects : {};\n  var currentGameObjectId = currentSceneId ? state.interaction.currentGameObjectIds[currentSceneId] : null;\n  var currentGameObject = currentGameObjects[currentGameObjectId];\n  return {\n    babylonPreview: babylonPreview,\n    isCameraViewOn: isCameraViewOn,\n    currentGizmoType: currentGizmoType,\n    currentGameObjectId: currentGameObjectId,\n    currentGameObject: currentGameObject\n  };\n}, {\n  setIsPlaying: builderReducer.setIsPlaying,\n  setIsMenuOn: builderReducer.setIsMenuOn,\n  setIsCameraViewOn: builderReducer.setIsCameraViewOn,\n  selectGizmoType: interactionReducer.selectGizmoType\n})(withRouter(Container));","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/astroboy/src/Page/Builder3D/Component/Toolbar/Container.js"],"names":["React","Component","withRouter","connect","builderReducer","interactionReducer","View","Container","props","onClickPlay","setIsPlaying","onClickGizmoType","gizmoType","currentGizmoType","selectGizmoType","onClickCameraView","setIsCameraViewOn","isCameraViewOn","state","availableGizmoTypes","prevProps","currentGameObjectId","onChangeCurrentGameObject","currentGameObject","babylonPreview","currentBabylonScene","currentScene","currentBabylongGameObject","getGameObject","id","constructor","getAvailableGizmoTypes","setState","game","interaction","builder","scenes","currentSceneId","currentGameObjects","gameObjects","currentGameObjectIds","setIsMenuOn"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as builderReducer from \"../../Store/Reducer/builder\";\nimport * as interactionReducer from \"../../Store/Reducer/interaction\";\nimport View from \"./View\";\n\nclass Container extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { availableGizmoTypes: [] };\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.currentGameObjectId !== this.props.currentGameObjectId) {\n      this.onChangeCurrentGameObject();\n    }\n  }\n  onChangeCurrentGameObject() {\n    const { currentGameObject, babylonPreview } = this.props;\n    if (currentGameObject) {\n      try {\n        const currentBabylonScene = babylonPreview.currentScene;\n        const currentBabylongGameObject = currentBabylonScene.getGameObject(\n          currentGameObject.id\n        );\n        const availableGizmoTypes = currentBabylongGameObject.constructor.getAvailableGizmoTypes();\n        this.setState({ availableGizmoTypes });\n      } catch {\n        this.setState({ availableGizmoTypes: [] });\n      }\n    } else {\n      this.setState({ availableGizmoTypes: [] });\n    }\n  }\n\n  // onClickMenu = () => {};\n  onClickPlay = () => {\n    this.props.setIsPlaying(true);\n  };\n  onClickGizmoType = gizmoType => {\n    const { currentGizmoType } = this.props;\n    this.props.selectGizmoType(\n      gizmoType === currentGizmoType ? null : gizmoType\n    );\n  };\n  onClickCameraView = () => {\n    this.props.setIsCameraViewOn(!this.props.isCameraViewOn);\n  };\n\n  render() {\n    const { currentGizmoType } = this.props;\n    const { availableGizmoTypes } = this.state;\n    return (\n      <View\n        currentGizmoType={currentGizmoType}\n        availableGizmoTypes={availableGizmoTypes}\n        // onClickMenu={this.onClickMenu}\n        onClickPlay={this.onClickPlay}\n        onClickCameraView={this.onClickCameraView}\n        onClickGizmoType={this.onClickGizmoType}\n      />\n    );\n  }\n}\n\nexport default connect(\n  state => {\n    const { game, interaction, builder } = state;\n    const { scenes } = game;\n    const { currentSceneId, currentGizmoType } = interaction;\n    const { babylonPreview, isCameraViewOn } = builder;\n\n    const currentScene = currentSceneId && scenes[currentSceneId];\n    const currentGameObjects = currentScene ? currentScene.gameObjects : {};\n    const currentGameObjectId = currentSceneId\n      ? state.interaction.currentGameObjectIds[currentSceneId]\n      : null;\n    const currentGameObject = currentGameObjects[currentGameObjectId];\n\n    return {\n      babylonPreview,\n      isCameraViewOn,\n      currentGizmoType,\n      currentGameObjectId,\n      currentGameObject\n    };\n  },\n  {\n    setIsPlaying: builderReducer.setIsPlaying,\n    setIsMenuOn: builderReducer.setIsMenuOn,\n    setIsCameraViewOn: builderReducer.setIsCameraViewOn,\n    selectGizmoType: interactionReducer.selectGizmoType\n  }\n)(withRouter(Container));\n"]},"metadata":{},"sourceType":"module"}