{"ast":null,"code":"import _objectSpread from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { MODE, GRAMMAR, BLOCK, DATA } from \"../Util/Type\";\nexport var Context = /*#__PURE__*/function () {\n  function Context() {\n    var _this = this;\n\n    _classCallCheck(this, Context);\n\n    this.getBlockById = function (blockId) {\n      var lines = _this.getLines();\n\n      for (var i = 0; i < lines.length; i++) {\n        var line = lines[i];\n        var blocks = line.getBlocks();\n\n        for (var j = 0; j < blocks.length; j++) {\n          var block = blocks[j];\n          if (block.id === blockId) return block;\n        }\n      }\n\n      return null;\n    };\n\n    this.lines = [new Line({\n      parent: this\n    })];\n    this.focusedLineIndex = -1;\n    this.focusedBlockIndex = -1;\n    this.editingBlockIndex = -1;\n    this.focusedCategory = null;\n  }\n\n  _createClass(Context, [{\n    key: \"setFocusedLine\",\n    value: function setFocusedLine(line) {\n      if (line) {\n        this.focusedLineIndex = this.getLines().indexOf(line);\n        this.focusedBlockIndex = -1;\n        this.editingBlockIndex = -1;\n      } else {\n        this.focusedLineIndex = -1;\n        this.focusedBlockIndex = -1;\n        this.editingBlockIndex = -1;\n      }\n    }\n  }, {\n    key: \"getFocusedLine\",\n    value: function getFocusedLine() {\n      return this.getLines()[this.focusedLineIndex];\n    }\n  }, {\n    key: \"setFocusedBlock\",\n    value: function setFocusedBlock(block) {\n      if (block) {\n        var pos = this.getPosFor(block);\n        this.focusedLineIndex = pos.lineIndex;\n        this.focusedBlockIndex = pos.blockIndex;\n        this.editingBlockIndex = -1;\n        this.focusedCategory = null;\n      } else {\n        this.focusedLineIndex = -1;\n        this.focusedBlockIndex = -1;\n        this.editingBlockIndex = -1;\n        this.focusedCategory = null;\n      }\n    }\n  }, {\n    key: \"getPosFor\",\n    value: function getPosFor(block) {\n      var lines = this.getLines();\n\n      for (var lineIndex in lines) {\n        var line = lines[lineIndex];\n        var blocks = line.getBlocks();\n\n        for (var blockIndex in blocks) {\n          if (block === blocks[blockIndex]) {\n            return {\n              lineIndex: lineIndex,\n              blockIndex: blockIndex\n            };\n          }\n        }\n      }\n\n      return {\n        lineIndex: -1,\n        blockIndex: -1\n      };\n    }\n  }, {\n    key: \"getFocusedBlock\",\n    value: function getFocusedBlock() {\n      var focusedLine = this.getFocusedLine();\n\n      if (focusedLine) {\n        var blocks = focusedLine.getBlocks();\n        return blocks[this.focusedBlockIndex];\n      }\n    }\n  }, {\n    key: \"checkEditableBlock\",\n    value: function checkEditableBlock(block) {\n      if (block && block.blockType === BLOCK.CONSTANT && (block.dataType === DATA.NUMBER && block.data === \"number\" || block.dataType === DATA.STRING && block.data === \"text\" || block.dataType === DATA.POSITION)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"setEditingBlock\",\n    value: function setEditingBlock(block) {\n      if (block) {\n        var pos = this.getPosFor(block);\n        this.focusedLineIndex = pos.lineIndex;\n        this.focusedBlockIndex = pos.blockIndex;\n        this.editingBlockIndex = pos.blockIndex;\n      } else {\n        this.editingBlockIndex = -1;\n      }\n    }\n  }, {\n    key: \"getEditingBlock\",\n    value: function getEditingBlock() {\n      var focusedLine = this.getFocusedLine();\n\n      if (focusedLine) {\n        var blocks = focusedLine.getBlocks();\n        return blocks[this.editingBlockIndex];\n      }\n    }\n  }, {\n    key: \"getLines\",\n    value: function getLines() {\n      var lines = [];\n\n      var walk = function walk(node) {\n        if (node instanceof Line) {\n          lines.push(node);\n          walk(node.block);\n        } else if (node instanceof Block) {\n          if (node.blockType === BLOCK.CALLBACK && !node.getParentLine().folded) {\n            node.data.forEach(function (line) {\n              return walk(line);\n            });\n          } else {\n            if (node.childs) {\n              node.childs.forEach(function (child) {\n                walk(child);\n              });\n            }\n          }\n        }\n      };\n\n      for (var i = 0; i < this.lines.length; i++) {\n        var line = this.lines[i];\n        walk(line);\n      }\n\n      var lineNum = 0;\n      lines.forEach(function (line) {\n        if (line.block.mode !== MODE.EMPTY) {\n          line.lineNum = ++lineNum;\n        } else {\n          line.lineNum = null;\n        }\n      });\n      return lines;\n    }\n  }, {\n    key: \"getLineAt\",\n    value: function getLineAt(lineNum) {\n      return this.getLines()[lineNum];\n    }\n  }, {\n    key: \"addLine\",\n    value: function addLine(line) {\n      line.parent = this;\n      line.lineNum = this.lines.length;\n      this.lines.push(line);\n    }\n  }, {\n    key: \"swapLine\",\n    value: function swapLine(first, second) {\n      if (first === second) return false;\n      if (first.getChildLines().indexOf(second) > -1) return false;\n      var firstParent = first.parent;\n      var firstLines = first.getSiblingLines();\n      var firstIndex = firstLines.indexOf(first);\n      var secondParent = second.parent;\n      var secondLines = second.getSiblingLines();\n      var secondIndex = secondLines.indexOf(second); // if (second.block.mode === MODE.EMPTY) {\n      //   // 호버된 라인이 비어있으면 이전 인덱스에 붙이기\n      //   if (firstParent === secondParent) {\n      //     if (firstLines[firstIndex] === secondLines[secondIndex - 1])\n      //       return false;\n      //     firstLines.splice(firstIndex, 1);\n      //     secondLines.splice(secondIndex - 1, 0, first);\n      //   } else {\n      //     firstLines.splice(firstIndex, 1);\n      //     secondLines.splice(secondIndex, 0, first);\n      //     first.parent = secondParent;\n      //   }\n      // } else {\n\n      if (firstParent === secondParent) {\n        // 같은 부모를 가지면 스왑\n        firstLines[firstIndex] = second;\n        second.parent = firstParent;\n        secondLines[secondIndex] = first;\n        first.parent = secondParent;\n      } else {\n        // 다른 부모를 가지면 호버된 라인의 부모에게 드래그 중인 라인을 전달\n        firstLines.splice(firstIndex, 1);\n        secondLines.splice(secondIndex, 0, first);\n        first.parent = secondParent;\n      } // }\n\n\n      return true;\n    }\n  }, {\n    key: \"deleteLine\",\n    value: function deleteLine(line) {\n      var lines = line.parent instanceof Context ? line.parent.lines : line.parent.data;\n      var index = lines.indexOf(line);\n      if (index > -1) lines.splice(index, 1);\n    }\n  }, {\n    key: \"convertToJson\",\n    value: function convertToJson() {\n      return {\n        lines: this.lines.map(function (line) {\n          return line.convertToJson();\n        }),\n        focusedLineIndex: this.focusedLineIndex,\n        focusedBlockIndex: this.focusedBlockIndex,\n        editingBlockIndex: this.editingBlockIndex,\n        focusedCategory: this.focusedCategory\n      };\n    }\n  }, {\n    key: \"convertToJavascript\",\n    value: function convertToJavascript() {\n      return Context.convertLinesToJavascript(this.lines);\n    }\n  }], [{\n    key: \"generateId\",\n    value: function generateId() {\n      var charSet = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n      var id = \"\";\n\n      for (var i = 0; i < 6; i++) {\n        var index = Math.floor(Math.random() * charSet.length);\n        id += charSet.substring(index, index + 1);\n      }\n\n      return id;\n    }\n  }, {\n    key: \"convertLinesToJavascript\",\n    value: function convertLinesToJavascript(lines) {\n      return lines.reduce(function (prev, line, index) {\n        return \"\".concat(prev).concat(index !== 0 ? \"\\n\" : \"\").concat(line.convertToJavascript());\n      }, \"\");\n    }\n  }, {\n    key: \"convertFromJson\",\n    value: function convertFromJson(json) {\n      var context = new Context();\n      var lines = json.lines.map(function (line) {\n        return Line.convertFromJson(line, context);\n      });\n      context.lines = lines;\n      context.focusedLineIndex = json.focusedLineIndex;\n      context.focusedBlockIndex = json.focusedBlockIndex;\n      context.editingBlockIndex = json.editingBlockIndex;\n      context.focusedCategory = json.focusedCategory;\n      return context;\n    }\n  }]);\n\n  return Context;\n}();\nexport var Line = /*#__PURE__*/function () {\n  function Line() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Line);\n\n    this.id = props.id || Context.generateId();\n    this.parent = props.parent;\n    this.block = Block.createDefault({\n      parent: this\n    });\n    this.lineNum = null;\n    this.folded = false;\n    this.disabled = false;\n  }\n\n  _createClass(Line, [{\n    key: \"getDepth\",\n    value: function getDepth() {\n      var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.parent instanceof Context) {\n        return depth;\n      } else if (this.parent instanceof Block) {\n        return this.parent.getParentLine().getDepth() + 1;\n      }\n    }\n  }, {\n    key: \"getNextLine\",\n    value: function getNextLine() {\n      var lines = this.parent instanceof Context ? this.parent.lines : this.parent.data;\n      var currentIndex = lines.indexOf(this);\n      return lines[currentIndex + 1];\n    }\n  }, {\n    key: \"getParentLine\",\n    value: function getParentLine() {\n      if (this.parent instanceof Block) {\n        return this.parent.getParentLine();\n      }\n    }\n  }, {\n    key: \"getSiblingLines\",\n    value: function getSiblingLines() {\n      return this.parent instanceof Context ? this.parent.lines : this.parent.data;\n    }\n  }, {\n    key: \"getChildLines\",\n    value: function getChildLines() {\n      return this.getBlocks({\n        callback: true\n      }).reduce(function (childLines, block) {\n        return block.blockType === BLOCK.CALLBACK ? [].concat(childLines, block.data.reduce(function (lines, line) {\n          return [].concat(lines, line, line.getChildLines());\n        }, [])) : childLines;\n      }, []);\n    }\n  }, {\n    key: \"getBlocks\",\n    value: function getBlocks() {\n      var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _option$callback = option.callback,\n          callback = _option$callback === void 0 ? false : _option$callback;\n      var blocks = [];\n\n      var walk = function walk(block) {\n        switch (block.blockType) {\n          case BLOCK.OPERATOR:\n            walk(block.childs[0]);\n            blocks.push(block);\n            walk(block.childs[1]);\n            break;\n\n          case BLOCK.CALLBACK:\n            if (callback) {\n              blocks.push(block);\n            }\n\n            break;\n\n          default:\n            blocks.push(block);\n\n            if (block.childs) {\n              block.childs.forEach(function (child) {\n                walk(child);\n              });\n            }\n\n            break;\n        }\n      };\n\n      walk(this.block);\n      return blocks;\n    }\n  }, {\n    key: \"getBlockAt\",\n    value: function getBlockAt(blockNum) {\n      return this.getBlocks()[blockNum];\n    }\n  }, {\n    key: \"hasCallback\",\n    value: function hasCallback() {\n      var hasCallback = function hasCallback(block) {\n        if (block.blockType === BLOCK.CALLBACK) {\n          return true;\n        } else {\n          return block.childs ? block.childs.reduce(function (prev, child) {\n            return prev || hasCallback(child);\n          }, false) : false;\n        }\n      };\n\n      return hasCallback(this.block);\n    }\n  }, {\n    key: \"getCallback\",\n    value: function getCallback() {\n      var getCallback = function getCallback(block) {\n        if (block.blockType === BLOCK.CALLBACK) {\n          return block;\n        } else {\n          return block.childs ? block.childs.reduce(function (prev, child) {\n            return prev || getCallback(child);\n          }, undefined) : undefined;\n        }\n      };\n\n      return getCallback(this.block);\n    }\n  }, {\n    key: \"fold\",\n    value: function fold() {\n      if (this.hasCallback()) {\n        this.folded = true;\n      }\n    }\n  }, {\n    key: \"unfold\",\n    value: function unfold() {\n      this.folded = false;\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      this.disabled = false;\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.disabled = true;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      var clone = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n      clone.id = Context.generateId();\n      clone.block = this.block.copy();\n      clone.block.parent = clone;\n      return clone;\n    }\n  }, {\n    key: \"add\",\n    value: function add(line) {\n      if (!(line && line instanceof Line)) return;\n      var callbackBlock = this.getCallback();\n\n      if (callbackBlock) {\n        line.parent = callbackBlock;\n        callbackBlock.data.unshift(line);\n      } else {\n        var lines = this.parent instanceof Context ? this.parent.lines : this.parent.data;\n        var index = lines.indexOf(this);\n        line.parent = this.parent;\n\n        if (this.block.mode === MODE.EMPTY) {\n          if (this === lines[lines.length - 1]) {\n            lines.splice(index, 0, line);\n          } else {\n            lines.splice(index, 1, line);\n          }\n        } else {\n          lines.splice(index + 1, 0, line);\n        }\n      }\n    }\n  }, {\n    key: \"convertToJson\",\n    value: function convertToJson() {\n      return {\n        id: this.id,\n        block: this.block.convertToJson(),\n        folded: this.folded,\n        disabled: this.disabled\n      };\n    }\n  }, {\n    key: \"convertToJavascript\",\n    value: function convertToJavascript() {\n      if (this.disabled) return \"\";\n      return \"\".concat(this.block.convertToJavascript());\n    }\n  }], [{\n    key: \"convertFromJson\",\n    value: function convertFromJson(json, parent) {\n      var line = new Line({\n        id: json.id,\n        parent: parent\n      });\n      line.block = Block.convertFromJson(json.block, line);\n      line.folded = json.folded;\n      line.disabled = json.disabled;\n      return line;\n    }\n  }]);\n\n  return Line;\n}();\nexport var Block = /*#__PURE__*/function () {\n  function Block() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Block);\n\n    this.id = props.id || Context.generateId();\n    this.mode = props.mode;\n    this.grammars = props.grammars;\n    this.grammar = props.grammar;\n    this.blockTypes = props.blockTypes;\n    this.blockType = props.blockType;\n    this.parentDataTypes = props.parentDataTypes;\n    this.dataTypes = props.dataTypes;\n    this.dataType = props.dataType;\n    this.data = props.data;\n    this.parent = props.parent;\n    this.childs = props.childs;\n  }\n  /**\n   * 라인의 시작점이 될 기본 빈 블록을 생성\n   * @static\n   * @param parent - 부모가 될 라인\n   */\n\n\n  _createClass(Block, [{\n    key: \"copy\",\n    value: function copy() {\n      var clone = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n      clone.id = Context.generateId();\n      clone.grammars = JSON.parse(JSON.stringify(this.grammars));\n      clone.blockTypes = JSON.parse(JSON.stringify(this.blockTypes));\n      clone.dataTypes = JSON.parse(JSON.stringify(this.dataTypes));\n      clone.childs = clone.childs ? this.childs.map(function (child) {\n        var childClone = child.copy();\n        childClone.parent = clone;\n        return childClone;\n      }) : undefined;\n\n      if (this.blockType === BLOCK.CALLBACK && this.data) {\n        clone.data = this.data.map(function (line) {\n          var lineClone = line.copy();\n          lineClone.parent = clone;\n          return lineClone;\n        });\n      }\n\n      return clone;\n    }\n  }, {\n    key: \"replaceWith\",\n    value: function replaceWith(newBlock) {\n      var parent = this.parent;\n\n      if (parent instanceof Line) {\n        parent.block = newBlock;\n      } else {\n        for (var i = 0; i < parent.childs.length; i++) {\n          var block = parent.childs[i];\n\n          if (block === this) {\n            parent.childs[i] = newBlock;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"findEmptyBlock\",\n    value: function findEmptyBlock() {\n      var sibling = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (this.mode === MODE.EMPTY) {\n        return this;\n      } else if (this.blockType === BLOCK.CALLBACK) {\n        for (var i = 0; i < this.data.length; i++) {\n          var line = this.data[i].block.findEmptyBlock(false);\n          if (line) return line;\n        }\n      } else {\n        if (this.childs) {\n          for (var _i = 0; _i < this.childs.length; _i++) {\n            var child = this.childs[_i].findEmptyBlock(false);\n\n            if (child) return child;\n          }\n        }\n\n        if (sibling && this.parent instanceof Block) {\n          var parent = this.parent.findEmptyBlock(false);\n          if (parent) return parent;\n        }\n\n        return null;\n      }\n    }\n  }, {\n    key: \"findSubjectParent\",\n    value: function findSubjectParent() {\n      if (this.parent instanceof Block) {\n        if (this.parent.grammar === GRAMMAR.SUBJECT) {\n          return this.parent;\n        } else {\n          return this.parent.findSubjectParent();\n        }\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"getParentLine\",\n    value: function getParentLine() {\n      if (this.parent instanceof Line) {\n        return this.parent;\n      } else {\n        return this.parent.getParentLine();\n      }\n    }\n  }, {\n    key: \"getParentAction\",\n    value: function getParentAction() {\n      if (this.parent instanceof Block) {\n        if (this.parent.blockType === BLOCK.ACTION) {\n          return this.parent;\n        } else {\n          return this.parent.getParentAction();\n        }\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"convertToJson\",\n    value: function convertToJson() {\n      var id = this.id,\n          mode = this.mode,\n          grammars = this.grammars,\n          grammar = this.grammar,\n          blockTypes = this.blockTypes,\n          blockType = this.blockType,\n          parentDataTypes = this.parentDataTypes,\n          dataTypes = this.dataTypes,\n          dataType = this.dataType,\n          data = this.data,\n          childs = this.childs;\n      return {\n        id: id,\n        mode: mode,\n        grammars: grammars,\n        grammar: grammar,\n        blockTypes: blockTypes,\n        blockType: blockType,\n        parentDataTypes: parentDataTypes,\n        dataTypes: dataTypes,\n        dataType: dataType,\n        data: blockType === BLOCK.CALLBACK ? data.map(function (line) {\n          return line.convertToJson();\n        }) : data,\n        childs: childs ? childs.map(function (child) {\n          return child.convertToJson();\n        }) : undefined\n      };\n    }\n  }, {\n    key: \"convertToJavascript\",\n    value: function convertToJavascript() {\n      if (this.mode !== MODE.INSTANCE) return \"\";\n      var childsCode = \"\";\n\n      if (this.childs && this.childs.length > 0) {\n        childsCode = this.childs.reduce(function (prev, child, index) {\n          return prev + (index ? \", \" : \"\") + child.convertToJavascript();\n        }, \"\");\n      }\n\n      switch (this.blockType) {\n        case BLOCK.SPRITE:\n          if (this.dataType === DATA.SOUND) {\n            return \"\".concat(childsCode);\n          } else if (this.grammar === GRAMMAR.OBJECTIVE && this.childs.length <= 0) {\n            return \"\\\"\".concat(this.data, \"\\\"\");\n          } else {\n            return \"getSprite(\\\"\".concat(this.data, \"\\\")\").concat(childsCode);\n          }\n\n        case BLOCK.VARIABLE:\n          return \"global.\".concat(this.data).concat(childsCode);\n\n        case BLOCK.PROPERTY:\n          if (this.grammar === GRAMMAR.SUBJECT) {\n            return \"\".concat(this.childs[0].convertToJavascript());\n          } else {\n            return \".get\".concat(this.data[0].toUpperCase() + this.data.slice(1), \"()\");\n          }\n\n        case BLOCK.ACTION:\n          switch (this.data) {\n            case \"set\":\n              if (this.parent.blockType === BLOCK.PROPERTY) {\n                return \".set\".concat(this.parent.data[0].toUpperCase() + this.parent.data.slice(1), \"(\").concat(childsCode, \")\");\n              } else {\n                return \"=\".concat(childsCode);\n              }\n\n            case \"onTouch\":\n            case \"onTouchUp\":\n              var touchAPI = this.data;\n\n              if (this.parent.dataType === DATA.SCREEN) {\n                touchAPI = {\n                  onTouch: \"onScreenClick\",\n                  onTouchUp: \"onScreenClickUp\"\n                }[touchAPI] || touchAPI;\n              }\n\n              return \".\".concat(touchAPI, \"(\").concat(childsCode, \")\");\n\n            case \"move\":\n            case \"go\":\n              var directionBlock = this.childs[0];\n              var distance = this.childs[1].convertToJavascript();\n\n              if (directionBlock.dataType === DATA.DIRECTION) {\n                switch (directionBlock.data) {\n                  case \"up\":\n                    return \".\".concat(this.data, \"Y(\").concat(distance, \"*(-1))\");\n\n                  case \"down\":\n                    return \".\".concat(this.data, \"Y(\").concat(distance, \")\");\n\n                  case \"right\":\n                    return \".\".concat(this.data, \"X(\").concat(distance, \")\");\n\n                  case \"left\":\n                    return \".\".concat(this.data, \"X(\").concat(distance, \"*(-1))\");\n\n                  default:\n                    console.warn(\"Block convertToJavascript: unhandled direction data -\", this.data, directionBlock.data);\n                    return \"\";\n                }\n              } else {\n                switch (directionBlock.data) {\n                  case \"x\":\n                    return \".\".concat(this.data, \"X(\").concat(distance, \")\");\n\n                  case \"y\":\n                    return \".\".concat(this.data, \"Y(\").concat(distance, \")\");\n\n                  default:\n                    console.warn(\"Block convertToJavascript: unhandled axis data -\", this.data, directionBlock.data);\n                    return \"\";\n                }\n              }\n\n            case \"moveTo\":\n            case \"goTo\":\n              var positionBlock = this.childs[0];\n\n              switch (positionBlock.dataType) {\n                case DATA.SPRITE:\n                case DATA.TEXT:\n                  return \".\".concat(this.data, \"Sprite(\").concat(positionBlock.convertToJavascript(), \")\");\n\n                case DATA.POSITION:\n                  return \".\".concat(this.data, \"(\").concat(positionBlock.data.x, \",\").concat(positionBlock.data.y, \")\");\n\n                case DATA.TOUCH:\n                  return \".\".concat(this.data, \"MousePointer()\");\n\n                case DATA.RANDOM:\n                  return \".\".concat(this.data, \"Random()\");\n\n                default:\n                  console.warn(\"Block convertToJavascript: unhandled position dataType -\", this.data, positionBlock.dataType);\n                  return \"\";\n              }\n\n            case \"turnTo\":\n              var degreeBlock = this.childs[0];\n\n              switch (degreeBlock.dataType) {\n                case DATA.SPRITE:\n                case DATA.TEXT:\n                  return \".\".concat(this.data, \"Sprite(\").concat(degreeBlock.convertToJavascript(), \")\");\n\n                case DATA.TOUCH:\n                  return \".\".concat(this.data, \"MousePointer()\");\n\n                default:\n                  console.warn(\"Block convertToJavascript: unhandled position dataType -\", this.data, degreeBlock.dataType);\n                  return \"\";\n              }\n\n            case \"say\":\n              return \".say(\".concat(childsCode, \",3)\");\n\n            case \"playAnimation\":\n              return \".playAnimation(\".concat(childsCode, \",true)\");\n\n            case \"setCollision\":\n              var collideBlock = this.childs[0];\n\n              if (collideBlock.dataType === DATA.SCREEN) {\n                return \".setCollideScene(true)\";\n              } else {\n                return \".\".concat(this.data, \"(\").concat(childsCode, \")\");\n              }\n\n            case \"bind\":\n              var bindSprite = this.childs[0].convertToJavascript();\n              var bindSpeed = this.childs[1].convertToJavascript();\n              return \".onJoystick(function(degree,force){\\n                var maxSpeed=\".concat(bindSpeed, \"\\n                var sprite=getSprite(\").concat(bindSprite, \")\\n                sprite.setVelocityFromDegree(degree,force,maxSpeed)\\n            })\");\n\n            default:\n              if (this.parent.dataType === DATA.SOUND) {\n                return \"\".concat(this.data, \"Sound(\\\"\").concat(this.parent.data, \"\\\")\");\n              } else {\n                return \".\".concat(this.data, \"(\").concat(childsCode, \")\");\n              }\n\n          }\n\n        case BLOCK.CALLBACK:\n          return \"function(){\\n\".concat(Context.convertLinesToJavascript(this.data), \"\\n}\");\n\n        case BLOCK.CONSTANT:\n          if (this.dataType === DATA.NUMBER || this.dataType === DATA.BOOLEAN) {\n            return \"\".concat(this.data);\n          } else {\n            return \"\\\"\".concat(this.data, \"\\\"\");\n          }\n\n        case BLOCK.OPERATOR:\n          var prevCode = this.childs[0].convertToJavascript();\n          var nextCode = this.childs[1].convertToJavascript();\n          return \"\".concat(prevCode).concat(this.data).concat(nextCode);\n\n        case BLOCK.UTIL:\n          switch (this.data) {\n            case \"repeat\":\n              return \"for(let i=0; i<\".concat(this.childs[0].data, \"; i++){\\n\").concat(Context.convertLinesToJavascript(this.childs[1].data), \"\\n}\");\n\n            case \"if\":\n              return \"if(\".concat(this.childs[0].convertToJavascript(), \"){\\n\").concat(Context.convertLinesToJavascript(this.childs[1].data), \"\\n}\");\n\n            case \"else if\":\n              return \"else if(\".concat(this.childs[0].convertToJavascript(), \"){\\n\").concat(Context.convertLinesToJavascript(this.childs[1].data), \"\\n}\");\n\n            case \"else\":\n              return \"else{\\n\".concat(Context.convertLinesToJavascript(this.childs[0].data), \"\\n}\");\n\n            case \"clone\":\n              return \".clone()\".concat(childsCode);\n\n            case \"mobile\":\n              if (this.childs[0].data === \"onShake\") {\n                return \"onShake(\".concat(this.childs[0].childs[0].convertToJavascript(), \")\");\n              } else if (this.childs[0].data === \"vibrate\") {\n                return \"vibrate()\";\n              }\n\n              break;\n\n            default:\n              console.warn(\"Block convertToJavascript: unhandled util data -\", this.data);\n              return \"\";\n          }\n\n          break;\n\n        case BLOCK.FUNCTION:\n        default:\n          console.warn(\"Block convertToJavascript: unhandled blockType -\", this.blockType);\n      }\n    }\n  }], [{\n    key: \"createDefault\",\n    value: function createDefault(_ref) {\n      var _grammars, _dataTypes;\n\n      var parent = _ref.parent;\n      return Block.createEmpty({\n        grammars: (_grammars = {}, _defineProperty(_grammars, BLOCK.SPRITE, GRAMMAR.SUBJECT), _defineProperty(_grammars, BLOCK.VARIABLE, GRAMMAR.SUBJECT), _defineProperty(_grammars, BLOCK.FUNCTION, GRAMMAR.SUBJECT), _defineProperty(_grammars, BLOCK.UTIL, GRAMMAR.SUBJECT), _grammars),\n        blockTypes: [BLOCK.SPRITE, BLOCK.VARIABLE, BLOCK.FUNCTION, BLOCK.UTIL],\n        dataTypes: (_dataTypes = {}, _defineProperty(_dataTypes, BLOCK.SPRITE, [DATA.SPRITE, DATA.SCREEN, DATA.JOYSTICK, DATA.TEXT, DATA.SOUND]), _defineProperty(_dataTypes, BLOCK.VARIABLE, [DATA.SPRITE, DATA.FUNCTION]), _defineProperty(_dataTypes, BLOCK.FUNCTION, [DATA.FUNCTION]), _defineProperty(_dataTypes, BLOCK.UTIL, [DATA.UTIL, DATA.MOBILE]), _dataTypes),\n        parent: parent\n      });\n    }\n    /**\n     * 빈 블록을 생성\n     * @static\n     * @param grammars - 블록 타입 별 문법, {blockType:grammar}\n     * @param blockTypes - 가능한 블록의 타입들, [blockType]\n     * @param dataTypes - 선택한 블록 타입으로 가능한 데이터 타입들, {blockType:[dataType]}\n     * @param parent - 블록의 부모 노드 (라인,블록)\n     */\n\n  }, {\n    key: \"createEmpty\",\n    value: function createEmpty(_ref2) {\n      var grammars = _ref2.grammars,\n          blockTypes = _ref2.blockTypes,\n          dataTypes = _ref2.dataTypes,\n          parent = _ref2.parent;\n      return new Block({\n        mode: MODE.EMPTY,\n        grammars: grammars,\n        blockTypes: JSON.parse(JSON.stringify(blockTypes)),\n        dataTypes: dataTypes,\n        parent: parent\n      });\n    }\n    /**\n     * 프로토타입 블록을 생성\n     * @static\n     * @param blockType - 블록의 타입\n     * @param dataType - 블록의 데이터 타입\n     * @param data - 블록에 담긴 데이터\n     */\n\n  }, {\n    key: \"createPrototype\",\n    value: function createPrototype(_ref3) {\n      var blockType = _ref3.blockType,\n          parentDataTypes = _ref3.parentDataTypes,\n          dataType = _ref3.dataType,\n          data = _ref3.data,\n          childs = _ref3.childs;\n      return new Block({\n        mode: MODE.PROTOTYPE,\n        blockType: blockType,\n        parentDataTypes: parentDataTypes,\n        dataType: dataType,\n        data: data,\n        childs: childs\n      });\n    }\n    /**\n     * 인스턴스 블록을 생성, 이전 블록과 프로토타입 블록을 결합\n     * @static\n     * @param prevBlock - 이전 블록 (빈 블록, 인스턴스 블록)\n     * @param prototypeBlock - 프로토타입 블록\n     */\n\n  }, {\n    key: \"createInstance\",\n    value: function createInstance(_ref4) {\n      var prevBlock = _ref4.prevBlock,\n          prototypeBlock = _ref4.prototypeBlock;\n      // 이전 블록과 선택한 프로토타입 블록의 정보 합치기\n      var instanceBlock = new Block({\n        mode: MODE.INSTANCE,\n        grammars: prevBlock.grammars,\n        grammar: prevBlock.grammars[prototypeBlock.blockType],\n        blockTypes: prevBlock.blockTypes,\n        blockType: prototypeBlock.blockType,\n        parentDataTypes: prototypeBlock.parentDataTypes,\n        dataTypes: prevBlock.dataTypes,\n        dataType: prototypeBlock.dataType,\n        data: prototypeBlock.data,\n        parent: prevBlock.parent\n      }); // 액션 타입 블록의 데이터 타입은 부모의 데이터 타입을 따르게 함\n\n      if (prototypeBlock.blockType === BLOCK.ACTION) {\n        instanceBlock.dataType = prevBlock.parent.dataType;\n      }\n\n      if (prototypeBlock.childs) {\n        // 프로토타입에 자식들에 대한 정보가 있으면 카피 + 부모 정보 업데이트 해준 뒤 대입\n        instanceBlock.childs = prototypeBlock.childs.map(function (child) {\n          var clone = child.copy();\n          clone.parent = instanceBlock;\n\n          if (clone.blockType === BLOCK.CALLBACK) {\n            clone.data = [new Line({\n              parent: clone\n            })];\n          }\n\n          return clone;\n        });\n      } else {\n        // 프로토타입에 자식들에 대한 정보가 없으면 인스턴스 스펙에 맞는 자식들을 계산해서 대입\n        instanceBlock.childs = Block.createChilds(instanceBlock);\n      } // 상수 블록을 넣을 수 있는 자식 블록에는 연산자 블록도 들어갈 수 있게 처리 (중첩 불가)\n\n\n      if (instanceBlock.blockType !== BLOCK.OPERATOR) {\n        for (var i = 0; i < instanceBlock.childs.length; i++) {\n          var child = instanceBlock.childs[i];\n\n          if (child.blockTypes.indexOf(BLOCK.CONSTANT) > -1) {\n            child.blockTypes.push(BLOCK.OPERATOR);\n            child.grammars[BLOCK.OPERATOR] = child.grammars[BLOCK.CONSTANT];\n            child.dataTypes[BLOCK.OPERATOR] = child.dataTypes[BLOCK.CONSTANT];\n          }\n        }\n      }\n\n      return instanceBlock;\n    }\n    /**\n     * 인스턴스 블록에 알맞는 자식 노드들을 반환\n     * @static\n     * @param instanceBlock - 인스턴스 블록\n     */\n\n  }, {\n    key: \"createChilds\",\n    value: function createChilds(instanceBlock) {\n      if (instanceBlock.mode !== MODE.INSTANCE) return;\n      var grammar = instanceBlock.grammar,\n          blockType = instanceBlock.blockType,\n          dataType = instanceBlock.dataType;\n      var childs = [];\n\n      switch (blockType) {\n        case BLOCK.SPRITE:\n          if (grammar === GRAMMAR.SUBJECT) {\n            var _grammars2, _dataTypes2;\n\n            childs.push({\n              grammars: (_grammars2 = {}, _defineProperty(_grammars2, BLOCK.PROPERTY, GRAMMAR.SUBJECT), _defineProperty(_grammars2, BLOCK.UTIL, GRAMMAR.SUBJECT), _defineProperty(_grammars2, BLOCK.ACTION, GRAMMAR.VERB), _grammars2),\n              blockTypes: [BLOCK.PROPERTY, BLOCK.ACTION, BLOCK.UTIL],\n              dataTypes: (_dataTypes2 = {}, _defineProperty(_dataTypes2, BLOCK.PROPERTY, [DATA.NUMBER, DATA.STRING, DATA.BOOLEAN]), _defineProperty(_dataTypes2, BLOCK.ACTION, [instanceBlock.dataType]), _defineProperty(_dataTypes2, BLOCK.UTIL, [DATA.SPRITE]), _dataTypes2)\n            });\n          } else if (grammar === GRAMMAR.OBJECTIVE) {\n            var parentAction = instanceBlock.getParentAction();\n\n            if (parentAction && parentAction.data === \"set\") {\n              var _grammars3, _dataTypes3;\n\n              childs.push({\n                grammars: (_grammars3 = {}, _defineProperty(_grammars3, BLOCK.PROPERTY, GRAMMAR.OBJECTIVE), _defineProperty(_grammars3, BLOCK.UTIL, GRAMMAR.OBJECTIVE), _grammars3),\n                blockTypes: [BLOCK.PROPERTY, BLOCK.UTIL],\n                dataTypes: (_dataTypes3 = {}, _defineProperty(_dataTypes3, BLOCK.PROPERTY, [parentAction.dataType]), _defineProperty(_dataTypes3, BLOCK.UTIL, [DATA.SPRITE]), _dataTypes3)\n              });\n            } else {\n              var dataTypes = new Set();\n\n              for (var key in instanceBlock.dataTypes) {\n                for (var i = 0; i < instanceBlock.dataTypes[key].length; i++) {\n                  var _dataType = instanceBlock.dataTypes[key][i];\n\n                  if ([DATA.NUMBER, DATA.STRING, DATA.BOOLEAN].indexOf(_dataType) > -1) {\n                    dataTypes.add(_dataType);\n                  }\n                }\n              }\n\n              dataTypes = Array.from(dataTypes);\n\n              if (dataTypes.length > 0) {\n                childs.push({\n                  grammars: _defineProperty({}, BLOCK.PROPERTY, GRAMMAR.OBJECTIVE),\n                  blockTypes: [BLOCK.PROPERTY],\n                  dataTypes: _defineProperty({}, BLOCK.PROPERTY, dataTypes)\n                });\n              }\n            }\n          }\n\n          break;\n\n        case BLOCK.VARIABLE:\n          if (grammar === GRAMMAR.SUBJECT) {\n            if (dataType === DATA.FUNCTION) {// 커스텀 함수에 정의된 목적어들 세팅\n            } else {\n              var _grammars5, _dataTypes5;\n\n              childs.push({\n                grammars: (_grammars5 = {}, _defineProperty(_grammars5, BLOCK.PROPERTY, GRAMMAR.SUBJECT), _defineProperty(_grammars5, BLOCK.ACTION, GRAMMAR.VERB), _grammars5),\n                blockTypes: [BLOCK.PROPERTY, BLOCK.ACTION],\n                dataTypes: (_dataTypes5 = {}, _defineProperty(_dataTypes5, BLOCK.PROPERTY, [DATA.NUMBER, DATA.STRING, DATA.BOOLEAN]), _defineProperty(_dataTypes5, BLOCK.ACTION, [instanceBlock.dataType]), _dataTypes5)\n              });\n            }\n          } else {\n            if (dataType !== DATA.FUNCTION) {\n              childs.push({\n                grammars: _defineProperty({}, BLOCK.PROPERTY, GRAMMAR.OBJECTIVE),\n                blockTypes: [BLOCK.PROPERTY],\n                dataTypes: _defineProperty({}, BLOCK.PROPERTY, [DATA.NUMBER, DATA.STRING, DATA.BOOLEAN])\n              });\n            }\n          }\n\n          break;\n\n        case BLOCK.PROPERTY:\n          if (grammar === GRAMMAR.SUBJECT) {\n            childs.push({\n              grammars: _defineProperty({}, BLOCK.ACTION, GRAMMAR.VERB),\n              blockTypes: [BLOCK.ACTION],\n              dataTypes: _defineProperty({}, BLOCK.ACTION, [instanceBlock.dataType])\n            });\n          }\n\n          break;\n\n        case BLOCK.ACTION:\n          if (instanceBlock.data === \"set\") {\n            var _grammars8, _dataTypes8;\n\n            childs.push({\n              grammars: (_grammars8 = {}, _defineProperty(_grammars8, BLOCK.CONSTANT, GRAMMAR.OBJECTIVE), _defineProperty(_grammars8, BLOCK.VARIABLE, GRAMMAR.OBJECTIVE), _defineProperty(_grammars8, BLOCK.SPRITE, GRAMMAR.OBJECTIVE), _grammars8),\n              blockTypes: [BLOCK.CONSTANT, BLOCK.VARIABLE, BLOCK.SPRITE],\n              dataTypes: (_dataTypes8 = {}, _defineProperty(_dataTypes8, BLOCK.CONSTANT, [instanceBlock.dataType]), _defineProperty(_dataTypes8, BLOCK.VARIABLE, [instanceBlock.dataType]), _defineProperty(_dataTypes8, BLOCK.SPRITE, [DATA.SPRITE, DATA.TEXT]), _dataTypes8)\n            });\n          }\n\n          break;\n\n        case BLOCK.UTIL:\n          if (instanceBlock.data === \"clone\" && instanceBlock.grammar === GRAMMAR.SUBJECT) {\n            var _grammars9, _dataTypes9;\n\n            childs.push({\n              grammars: (_grammars9 = {}, _defineProperty(_grammars9, BLOCK.PROPERTY, GRAMMAR.SUBJECT), _defineProperty(_grammars9, BLOCK.UTIL, GRAMMAR.SUBJECT), _grammars9),\n              blockTypes: [BLOCK.PROPERTY, BLOCK.ACTION],\n              dataTypes: (_dataTypes9 = {}, _defineProperty(_dataTypes9, BLOCK.PROPERTY, [DATA.NUMBER, DATA.STRING, DATA.BOOLEAN]), _defineProperty(_dataTypes9, BLOCK.ACTION, [instanceBlock.dataType]), _dataTypes9)\n            });\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      return childs.map(function (child) {\n        return Block.createEmpty(_objectSpread({}, child, {\n          parent: instanceBlock\n        }));\n      });\n    }\n  }, {\n    key: \"createCallback\",\n    value: function createCallback() {\n      var callbackBlock = new Block({\n        mode: MODE.INSTANCE,\n        grammars: _defineProperty({}, BLOCK.CALLBACK, GRAMMAR.OBJECTIVE),\n        grammar: GRAMMAR.OBJECTIVE,\n        blockTypes: [BLOCK.CALLBACK],\n        blockType: BLOCK.CALLBACK,\n        dataTypes: _defineProperty({}, BLOCK.CALLBACK, [GRAMMAR.LINES]),\n        dataType: BLOCK.LINES\n      });\n      return callbackBlock;\n    }\n  }, {\n    key: \"convertFromJson\",\n    value: function convertFromJson(json, parent) {\n      var block = new Block(_objectSpread({}, json));\n      block.data = block.blockType === BLOCK.CALLBACK ? block.data.map(function (line) {\n        return Line.convertFromJson(line, block);\n      }) : block.data;\n      block.childs = json.childs ? json.childs.map(function (child) {\n        return Block.convertFromJson(child, block);\n      }) : undefined;\n      block.parent = parent;\n      return block;\n    }\n  }]);\n\n  return Block;\n}();","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Editor/Component/OOBCEditor/Class/index.js"],"names":["MODE","GRAMMAR","BLOCK","DATA","Context","getBlockById","blockId","lines","getLines","i","length","line","blocks","getBlocks","j","block","id","Line","parent","focusedLineIndex","focusedBlockIndex","editingBlockIndex","focusedCategory","indexOf","pos","getPosFor","lineIndex","blockIndex","focusedLine","getFocusedLine","blockType","CONSTANT","dataType","NUMBER","data","STRING","POSITION","walk","node","push","Block","CALLBACK","getParentLine","folded","forEach","childs","child","lineNum","mode","EMPTY","first","second","getChildLines","firstParent","firstLines","getSiblingLines","firstIndex","secondParent","secondLines","secondIndex","splice","index","map","convertToJson","convertLinesToJavascript","charSet","Math","floor","random","substring","reduce","prev","convertToJavascript","json","context","convertFromJson","props","generateId","createDefault","disabled","depth","getDepth","currentIndex","callback","childLines","concat","option","OPERATOR","blockNum","hasCallback","getCallback","undefined","clone","Object","assign","create","getPrototypeOf","copy","callbackBlock","unshift","grammars","grammar","blockTypes","parentDataTypes","dataTypes","JSON","parse","stringify","childClone","lineClone","newBlock","sibling","findEmptyBlock","SUBJECT","findSubjectParent","ACTION","getParentAction","INSTANCE","childsCode","SPRITE","SOUND","OBJECTIVE","VARIABLE","PROPERTY","toUpperCase","slice","touchAPI","SCREEN","onTouch","onTouchUp","directionBlock","distance","DIRECTION","console","warn","positionBlock","TEXT","x","y","TOUCH","RANDOM","degreeBlock","collideBlock","bindSprite","bindSpeed","BOOLEAN","prevCode","nextCode","UTIL","FUNCTION","createEmpty","JOYSTICK","MOBILE","PROTOTYPE","prevBlock","prototypeBlock","instanceBlock","createChilds","VERB","parentAction","Set","key","add","Array","from","LINES"],"mappings":"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","sourcesContent":["import { MODE, GRAMMAR, BLOCK, DATA } from \"../Util/Type\";\n\nexport class Context {\n  constructor() {\n    this.lines = [new Line({ parent: this })];\n    this.focusedLineIndex = -1;\n    this.focusedBlockIndex = -1;\n    this.editingBlockIndex = -1;\n    this.focusedCategory = null;\n  }\n\n  setFocusedLine(line) {\n    if (line) {\n      this.focusedLineIndex = this.getLines().indexOf(line);\n      this.focusedBlockIndex = -1;\n      this.editingBlockIndex = -1;\n    } else {\n      this.focusedLineIndex = -1;\n      this.focusedBlockIndex = -1;\n      this.editingBlockIndex = -1;\n    }\n  }\n  getFocusedLine() {\n    return this.getLines()[this.focusedLineIndex];\n  }\n\n  setFocusedBlock(block) {\n    if (block) {\n      const pos = this.getPosFor(block);\n      this.focusedLineIndex = pos.lineIndex;\n      this.focusedBlockIndex = pos.blockIndex;\n      this.editingBlockIndex = -1;\n      this.focusedCategory = null;\n    } else {\n      this.focusedLineIndex = -1;\n      this.focusedBlockIndex = -1;\n      this.editingBlockIndex = -1;\n      this.focusedCategory = null;\n    }\n  }\n  getPosFor(block) {\n    const lines = this.getLines();\n    for (let lineIndex in lines) {\n      const line = lines[lineIndex];\n      const blocks = line.getBlocks();\n      for (let blockIndex in blocks) {\n        if (block === blocks[blockIndex]) {\n          return { lineIndex, blockIndex };\n        }\n      }\n    }\n    return { lineIndex: -1, blockIndex: -1 };\n  }\n  getFocusedBlock() {\n    const focusedLine = this.getFocusedLine();\n    if (focusedLine) {\n      const blocks = focusedLine.getBlocks();\n      return blocks[this.focusedBlockIndex];\n    }\n  }\n\n  checkEditableBlock(block) {\n    if (\n      block &&\n      block.blockType === BLOCK.CONSTANT &&\n      ((block.dataType === DATA.NUMBER && block.data === \"number\") ||\n        (block.dataType === DATA.STRING && block.data === \"text\") ||\n        block.dataType === DATA.POSITION)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  setEditingBlock(block) {\n    if (block) {\n      const pos = this.getPosFor(block);\n      this.focusedLineIndex = pos.lineIndex;\n      this.focusedBlockIndex = pos.blockIndex;\n      this.editingBlockIndex = pos.blockIndex;\n    } else {\n      this.editingBlockIndex = -1;\n    }\n  }\n  getEditingBlock() {\n    const focusedLine = this.getFocusedLine();\n    if (focusedLine) {\n      const blocks = focusedLine.getBlocks();\n      return blocks[this.editingBlockIndex];\n    }\n  }\n\n  getLines() {\n    const lines = [];\n\n    const walk = node => {\n      if (node instanceof Line) {\n        lines.push(node);\n        walk(node.block);\n      } else if (node instanceof Block) {\n        if (node.blockType === BLOCK.CALLBACK && !node.getParentLine().folded) {\n          node.data.forEach(line => walk(line));\n        } else {\n          if (node.childs) {\n            node.childs.forEach(child => {\n              walk(child);\n            });\n          }\n        }\n      }\n    };\n\n    for (let i = 0; i < this.lines.length; i++) {\n      const line = this.lines[i];\n      walk(line);\n    }\n\n    let lineNum = 0;\n    lines.forEach(line => {\n      if (line.block.mode !== MODE.EMPTY) {\n        line.lineNum = ++lineNum;\n      } else {\n        line.lineNum = null;\n      }\n    });\n\n    return lines;\n  }\n\n  getLineAt(lineNum) {\n    return this.getLines()[lineNum];\n  }\n\n  addLine(line) {\n    line.parent = this;\n    line.lineNum = this.lines.length;\n    this.lines.push(line);\n  }\n\n  swapLine(first, second) {\n    if (first === second) return false;\n    if (first.getChildLines().indexOf(second) > -1) return false;\n\n    const firstParent = first.parent;\n    const firstLines = first.getSiblingLines();\n    const firstIndex = firstLines.indexOf(first);\n    const secondParent = second.parent;\n    const secondLines = second.getSiblingLines();\n    const secondIndex = secondLines.indexOf(second);\n\n    // if (second.block.mode === MODE.EMPTY) {\n    //   // 호버된 라인이 비어있으면 이전 인덱스에 붙이기\n    //   if (firstParent === secondParent) {\n    //     if (firstLines[firstIndex] === secondLines[secondIndex - 1])\n    //       return false;\n    //     firstLines.splice(firstIndex, 1);\n    //     secondLines.splice(secondIndex - 1, 0, first);\n    //   } else {\n    //     firstLines.splice(firstIndex, 1);\n    //     secondLines.splice(secondIndex, 0, first);\n    //     first.parent = secondParent;\n    //   }\n    // } else {\n    if (firstParent === secondParent) {\n      // 같은 부모를 가지면 스왑\n      firstLines[firstIndex] = second;\n      second.parent = firstParent;\n      secondLines[secondIndex] = first;\n      first.parent = secondParent;\n    } else {\n      // 다른 부모를 가지면 호버된 라인의 부모에게 드래그 중인 라인을 전달\n      firstLines.splice(firstIndex, 1);\n      secondLines.splice(secondIndex, 0, first);\n      first.parent = secondParent;\n    }\n    // }\n\n    return true;\n  }\n\n  deleteLine(line) {\n    const lines =\n      line.parent instanceof Context ? line.parent.lines : line.parent.data;\n    const index = lines.indexOf(line);\n    if (index > -1) lines.splice(index, 1);\n  }\n\n  getBlockById = blockId => {\n    const lines = this.getLines();\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      const blocks = line.getBlocks();\n      for (let j = 0; j < blocks.length; j++) {\n        const block = blocks[j];\n        if (block.id === blockId) return block;\n      }\n    }\n    return null;\n  };\n\n  static generateId() {\n    const charSet = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n    let id = \"\";\n    for (let i = 0; i < 6; i++) {\n      const index = Math.floor(Math.random() * charSet.length);\n      id += charSet.substring(index, index + 1);\n    }\n    return id;\n  }\n\n  static convertLinesToJavascript(lines) {\n    return lines.reduce(\n      (prev, line, index) =>\n        `${prev}${index !== 0 ? \"\\n\" : \"\"}${line.convertToJavascript()}`,\n      \"\"\n    );\n  }\n\n  static convertFromJson(json) {\n    const context = new Context();\n    const lines = json.lines.map(line => Line.convertFromJson(line, context));\n    context.lines = lines;\n    context.focusedLineIndex = json.focusedLineIndex;\n    context.focusedBlockIndex = json.focusedBlockIndex;\n    context.editingBlockIndex = json.editingBlockIndex;\n    context.focusedCategory = json.focusedCategory;\n    return context;\n  }\n\n  convertToJson() {\n    return {\n      lines: this.lines.map(line => line.convertToJson()),\n      focusedLineIndex: this.focusedLineIndex,\n      focusedBlockIndex: this.focusedBlockIndex,\n      editingBlockIndex: this.editingBlockIndex,\n      focusedCategory: this.focusedCategory\n    };\n  }\n\n  convertToJavascript() {\n    return Context.convertLinesToJavascript(this.lines);\n  }\n}\n\nexport class Line {\n  constructor(props = {}) {\n    this.id = props.id || Context.generateId();\n    this.parent = props.parent;\n    this.block = Block.createDefault({ parent: this });\n    this.lineNum = null;\n    this.folded = false;\n    this.disabled = false;\n  }\n\n  getDepth(depth = 0) {\n    if (this.parent instanceof Context) {\n      return depth;\n    } else if (this.parent instanceof Block) {\n      return this.parent.getParentLine().getDepth() + 1;\n    }\n  }\n\n  getNextLine() {\n    const lines =\n      this.parent instanceof Context ? this.parent.lines : this.parent.data;\n    const currentIndex = lines.indexOf(this);\n    return lines[currentIndex + 1];\n  }\n\n  getParentLine() {\n    if (this.parent instanceof Block) {\n      return this.parent.getParentLine();\n    }\n  }\n\n  getSiblingLines() {\n    return this.parent instanceof Context\n      ? this.parent.lines\n      : this.parent.data;\n  }\n\n  getChildLines() {\n    return this.getBlocks({ callback: true }).reduce(\n      (childLines, block) =>\n        block.blockType === BLOCK.CALLBACK\n          ? [].concat(\n              childLines,\n              block.data.reduce(\n                (lines, line) => [].concat(lines, line, line.getChildLines()),\n                []\n              )\n            )\n          : childLines,\n      []\n    );\n  }\n\n  getBlocks(option = {}) {\n    const { callback = false } = option;\n    const blocks = [];\n    const walk = block => {\n      switch (block.blockType) {\n        case BLOCK.OPERATOR:\n          walk(block.childs[0]);\n          blocks.push(block);\n          walk(block.childs[1]);\n          break;\n        case BLOCK.CALLBACK:\n          if (callback) {\n            blocks.push(block);\n          }\n          break;\n        default:\n          blocks.push(block);\n          if (block.childs) {\n            block.childs.forEach(child => {\n              walk(child);\n            });\n          }\n          break;\n      }\n    };\n    walk(this.block);\n    return blocks;\n  }\n\n  getBlockAt(blockNum) {\n    return this.getBlocks()[blockNum];\n  }\n\n  hasCallback() {\n    const hasCallback = block => {\n      if (block.blockType === BLOCK.CALLBACK) {\n        return true;\n      } else {\n        return block.childs\n          ? block.childs.reduce(\n              (prev, child) => prev || hasCallback(child),\n              false\n            )\n          : false;\n      }\n    };\n    return hasCallback(this.block);\n  }\n\n  getCallback() {\n    const getCallback = block => {\n      if (block.blockType === BLOCK.CALLBACK) {\n        return block;\n      } else {\n        return block.childs\n          ? block.childs.reduce(\n              (prev, child) => prev || getCallback(child),\n              undefined\n            )\n          : undefined;\n      }\n    };\n    return getCallback(this.block);\n  }\n\n  fold() {\n    if (this.hasCallback()) {\n      this.folded = true;\n    }\n  }\n\n  unfold() {\n    this.folded = false;\n  }\n\n  enable() {\n    this.disabled = false;\n  }\n\n  disable() {\n    this.disabled = true;\n  }\n\n  copy() {\n    const clone = Object.assign(\n      Object.create(Object.getPrototypeOf(this)),\n      this\n    );\n    clone.id = Context.generateId();\n    clone.block = this.block.copy();\n    clone.block.parent = clone;\n    return clone;\n  }\n\n  add(line) {\n    if (!(line && line instanceof Line)) return;\n\n    let callbackBlock = this.getCallback();\n    if (callbackBlock) {\n      line.parent = callbackBlock;\n      callbackBlock.data.unshift(line);\n    } else {\n      const lines =\n        this.parent instanceof Context ? this.parent.lines : this.parent.data;\n      const index = lines.indexOf(this);\n      line.parent = this.parent;\n      if (this.block.mode === MODE.EMPTY) {\n        if (this === lines[lines.length - 1]) {\n          lines.splice(index, 0, line);\n        } else {\n          lines.splice(index, 1, line);\n        }\n      } else {\n        lines.splice(index + 1, 0, line);\n      }\n    }\n  }\n\n  static convertFromJson(json, parent) {\n    const line = new Line({ id: json.id, parent });\n    line.block = Block.convertFromJson(json.block, line);\n    line.folded = json.folded;\n    line.disabled = json.disabled;\n    return line;\n  }\n\n  convertToJson() {\n    return {\n      id: this.id,\n      block: this.block.convertToJson(),\n      folded: this.folded,\n      disabled: this.disabled\n    };\n  }\n\n  convertToJavascript() {\n    if (this.disabled) return \"\";\n    return `${this.block.convertToJavascript()}`;\n  }\n}\nexport class Block {\n  constructor(props = {}) {\n    this.id = props.id || Context.generateId();\n    this.mode = props.mode;\n    this.grammars = props.grammars;\n    this.grammar = props.grammar;\n    this.blockTypes = props.blockTypes;\n    this.blockType = props.blockType;\n    this.parentDataTypes = props.parentDataTypes;\n    this.dataTypes = props.dataTypes;\n    this.dataType = props.dataType;\n    this.data = props.data;\n    this.parent = props.parent;\n    this.childs = props.childs;\n  }\n\n  /**\n   * 라인의 시작점이 될 기본 빈 블록을 생성\n   * @static\n   * @param parent - 부모가 될 라인\n   */\n  static createDefault({ parent }) {\n    return Block.createEmpty({\n      grammars: {\n        [BLOCK.SPRITE]: GRAMMAR.SUBJECT,\n        [BLOCK.VARIABLE]: GRAMMAR.SUBJECT,\n        [BLOCK.FUNCTION]: GRAMMAR.SUBJECT,\n        [BLOCK.UTIL]: GRAMMAR.SUBJECT\n      },\n      blockTypes: [BLOCK.SPRITE, BLOCK.VARIABLE, BLOCK.FUNCTION, BLOCK.UTIL],\n      dataTypes: {\n        [BLOCK.SPRITE]: [\n          DATA.SPRITE,\n          DATA.SCREEN,\n          DATA.JOYSTICK,\n          DATA.TEXT,\n          DATA.SOUND\n        ],\n        [BLOCK.VARIABLE]: [DATA.SPRITE, DATA.FUNCTION],\n        [BLOCK.FUNCTION]: [DATA.FUNCTION],\n        [BLOCK.UTIL]: [DATA.UTIL, DATA.MOBILE]\n      },\n      parent\n    });\n  }\n\n  /**\n   * 빈 블록을 생성\n   * @static\n   * @param grammars - 블록 타입 별 문법, {blockType:grammar}\n   * @param blockTypes - 가능한 블록의 타입들, [blockType]\n   * @param dataTypes - 선택한 블록 타입으로 가능한 데이터 타입들, {blockType:[dataType]}\n   * @param parent - 블록의 부모 노드 (라인,블록)\n   */\n  static createEmpty({ grammars, blockTypes, dataTypes, parent }) {\n    return new Block({\n      mode: MODE.EMPTY,\n      grammars,\n      blockTypes: JSON.parse(JSON.stringify(blockTypes)),\n      dataTypes,\n      parent\n    });\n  }\n\n  /**\n   * 프로토타입 블록을 생성\n   * @static\n   * @param blockType - 블록의 타입\n   * @param dataType - 블록의 데이터 타입\n   * @param data - 블록에 담긴 데이터\n   */\n  static createPrototype({\n    blockType,\n    parentDataTypes,\n    dataType,\n    data,\n    childs\n  }) {\n    return new Block({\n      mode: MODE.PROTOTYPE,\n      blockType,\n      parentDataTypes,\n      dataType,\n      data,\n      childs\n    });\n  }\n\n  /**\n   * 인스턴스 블록을 생성, 이전 블록과 프로토타입 블록을 결합\n   * @static\n   * @param prevBlock - 이전 블록 (빈 블록, 인스턴스 블록)\n   * @param prototypeBlock - 프로토타입 블록\n   */\n  static createInstance({ prevBlock, prototypeBlock }) {\n    // 이전 블록과 선택한 프로토타입 블록의 정보 합치기\n    const instanceBlock = new Block({\n      mode: MODE.INSTANCE,\n      grammars: prevBlock.grammars,\n      grammar: prevBlock.grammars[prototypeBlock.blockType],\n      blockTypes: prevBlock.blockTypes,\n      blockType: prototypeBlock.blockType,\n      parentDataTypes: prototypeBlock.parentDataTypes,\n      dataTypes: prevBlock.dataTypes,\n      dataType: prototypeBlock.dataType,\n      data: prototypeBlock.data,\n      parent: prevBlock.parent\n    });\n    // 액션 타입 블록의 데이터 타입은 부모의 데이터 타입을 따르게 함\n    if (prototypeBlock.blockType === BLOCK.ACTION) {\n      instanceBlock.dataType = prevBlock.parent.dataType;\n    }\n    if (prototypeBlock.childs) {\n      // 프로토타입에 자식들에 대한 정보가 있으면 카피 + 부모 정보 업데이트 해준 뒤 대입\n      instanceBlock.childs = prototypeBlock.childs.map(child => {\n        const clone = child.copy();\n        clone.parent = instanceBlock;\n        if (clone.blockType === BLOCK.CALLBACK) {\n          clone.data = [new Line({ parent: clone })];\n        }\n        return clone;\n      });\n    } else {\n      // 프로토타입에 자식들에 대한 정보가 없으면 인스턴스 스펙에 맞는 자식들을 계산해서 대입\n      instanceBlock.childs = Block.createChilds(instanceBlock);\n    }\n    // 상수 블록을 넣을 수 있는 자식 블록에는 연산자 블록도 들어갈 수 있게 처리 (중첩 불가)\n    if (instanceBlock.blockType !== BLOCK.OPERATOR) {\n      for (let i = 0; i < instanceBlock.childs.length; i++) {\n        const child = instanceBlock.childs[i];\n        if (child.blockTypes.indexOf(BLOCK.CONSTANT) > -1) {\n          child.blockTypes.push(BLOCK.OPERATOR);\n          child.grammars[BLOCK.OPERATOR] = child.grammars[BLOCK.CONSTANT];\n          child.dataTypes[BLOCK.OPERATOR] = child.dataTypes[BLOCK.CONSTANT];\n        }\n      }\n    }\n    return instanceBlock;\n  }\n\n  /**\n   * 인스턴스 블록에 알맞는 자식 노드들을 반환\n   * @static\n   * @param instanceBlock - 인스턴스 블록\n   */\n  static createChilds(instanceBlock) {\n    if (instanceBlock.mode !== MODE.INSTANCE) return;\n\n    const { grammar, blockType, dataType } = instanceBlock;\n    const childs = [];\n\n    switch (blockType) {\n      case BLOCK.SPRITE:\n        if (grammar === GRAMMAR.SUBJECT) {\n          childs.push({\n            grammars: {\n              [BLOCK.PROPERTY]: GRAMMAR.SUBJECT,\n              [BLOCK.UTIL]: GRAMMAR.SUBJECT,\n              [BLOCK.ACTION]: GRAMMAR.VERB\n            },\n            blockTypes: [BLOCK.PROPERTY, BLOCK.ACTION, BLOCK.UTIL],\n            dataTypes: {\n              [BLOCK.PROPERTY]: [DATA.NUMBER, DATA.STRING, DATA.BOOLEAN],\n              [BLOCK.ACTION]: [instanceBlock.dataType],\n              [BLOCK.UTIL]: [DATA.SPRITE]\n            }\n          });\n        } else if (grammar === GRAMMAR.OBJECTIVE) {\n          const parentAction = instanceBlock.getParentAction();\n          if (parentAction && parentAction.data === \"set\") {\n            childs.push({\n              grammars: {\n                [BLOCK.PROPERTY]: GRAMMAR.OBJECTIVE,\n                [BLOCK.UTIL]: GRAMMAR.OBJECTIVE\n              },\n              blockTypes: [BLOCK.PROPERTY, BLOCK.UTIL],\n              dataTypes: {\n                [BLOCK.PROPERTY]: [parentAction.dataType],\n                [BLOCK.UTIL]: [DATA.SPRITE]\n              }\n            });\n          } else {\n            let dataTypes = new Set();\n            for (let key in instanceBlock.dataTypes) {\n              for (let i = 0; i < instanceBlock.dataTypes[key].length; i++) {\n                const dataType = instanceBlock.dataTypes[key][i];\n                if (\n                  [DATA.NUMBER, DATA.STRING, DATA.BOOLEAN].indexOf(dataType) >\n                  -1\n                ) {\n                  dataTypes.add(dataType);\n                }\n              }\n            }\n            dataTypes = Array.from(dataTypes);\n            if (dataTypes.length > 0) {\n              childs.push({\n                grammars: {\n                  [BLOCK.PROPERTY]: GRAMMAR.OBJECTIVE\n                },\n                blockTypes: [BLOCK.PROPERTY],\n                dataTypes: {\n                  [BLOCK.PROPERTY]: dataTypes\n                }\n              });\n            }\n          }\n        }\n        break;\n      case BLOCK.VARIABLE:\n        if (grammar === GRAMMAR.SUBJECT) {\n          if (dataType === DATA.FUNCTION) {\n            // 커스텀 함수에 정의된 목적어들 세팅\n          } else {\n            childs.push({\n              grammars: {\n                [BLOCK.PROPERTY]: GRAMMAR.SUBJECT,\n                [BLOCK.ACTION]: GRAMMAR.VERB\n              },\n              blockTypes: [BLOCK.PROPERTY, BLOCK.ACTION],\n              dataTypes: {\n                [BLOCK.PROPERTY]: [DATA.NUMBER, DATA.STRING, DATA.BOOLEAN],\n                [BLOCK.ACTION]: [instanceBlock.dataType]\n              }\n            });\n          }\n        } else {\n          if (dataType !== DATA.FUNCTION) {\n            childs.push({\n              grammars: {\n                [BLOCK.PROPERTY]: GRAMMAR.OBJECTIVE\n              },\n              blockTypes: [BLOCK.PROPERTY],\n              dataTypes: {\n                [BLOCK.PROPERTY]: [DATA.NUMBER, DATA.STRING, DATA.BOOLEAN]\n              }\n            });\n          }\n        }\n        break;\n      case BLOCK.PROPERTY:\n        if (grammar === GRAMMAR.SUBJECT) {\n          childs.push({\n            grammars: {\n              [BLOCK.ACTION]: GRAMMAR.VERB\n            },\n            blockTypes: [BLOCK.ACTION],\n            dataTypes: {\n              [BLOCK.ACTION]: [instanceBlock.dataType]\n            }\n          });\n        }\n        break;\n      case BLOCK.ACTION:\n        if (instanceBlock.data === \"set\") {\n          childs.push({\n            grammars: {\n              [BLOCK.CONSTANT]: GRAMMAR.OBJECTIVE,\n              [BLOCK.VARIABLE]: GRAMMAR.OBJECTIVE,\n              [BLOCK.SPRITE]: GRAMMAR.OBJECTIVE\n            },\n            blockTypes: [BLOCK.CONSTANT, BLOCK.VARIABLE, BLOCK.SPRITE],\n            dataTypes: {\n              [BLOCK.CONSTANT]: [instanceBlock.dataType],\n              [BLOCK.VARIABLE]: [instanceBlock.dataType],\n              [BLOCK.SPRITE]: [DATA.SPRITE, DATA.TEXT]\n            }\n          });\n        }\n        break;\n      case BLOCK.UTIL:\n        if (\n          instanceBlock.data === \"clone\" &&\n          instanceBlock.grammar === GRAMMAR.SUBJECT\n        ) {\n          childs.push({\n            grammars: {\n              [BLOCK.PROPERTY]: GRAMMAR.SUBJECT,\n              [BLOCK.UTIL]: GRAMMAR.SUBJECT\n            },\n            blockTypes: [BLOCK.PROPERTY, BLOCK.ACTION],\n            dataTypes: {\n              [BLOCK.PROPERTY]: [DATA.NUMBER, DATA.STRING, DATA.BOOLEAN],\n              [BLOCK.ACTION]: [instanceBlock.dataType]\n            }\n          });\n        }\n        break;\n      default:\n        break;\n    }\n\n    return childs.map(child =>\n      Block.createEmpty({ ...child, parent: instanceBlock })\n    );\n  }\n\n  static createCallback() {\n    const callbackBlock = new Block({\n      mode: MODE.INSTANCE,\n      grammars: { [BLOCK.CALLBACK]: GRAMMAR.OBJECTIVE },\n      grammar: GRAMMAR.OBJECTIVE,\n      blockTypes: [BLOCK.CALLBACK],\n      blockType: BLOCK.CALLBACK,\n      dataTypes: { [BLOCK.CALLBACK]: [GRAMMAR.LINES] },\n      dataType: BLOCK.LINES\n    });\n    return callbackBlock;\n  }\n\n  copy() {\n    const clone = Object.assign(\n      Object.create(Object.getPrototypeOf(this)),\n      this\n    );\n    clone.id = Context.generateId();\n    clone.grammars = JSON.parse(JSON.stringify(this.grammars));\n    clone.blockTypes = JSON.parse(JSON.stringify(this.blockTypes));\n    clone.dataTypes = JSON.parse(JSON.stringify(this.dataTypes));\n    clone.childs = clone.childs\n      ? this.childs.map(child => {\n          const childClone = child.copy();\n          childClone.parent = clone;\n          return childClone;\n        })\n      : undefined;\n    if (this.blockType === BLOCK.CALLBACK && this.data) {\n      clone.data = this.data.map(line => {\n        const lineClone = line.copy();\n        lineClone.parent = clone;\n        return lineClone;\n      });\n    }\n    return clone;\n  }\n\n  replaceWith(newBlock) {\n    const parent = this.parent;\n    if (parent instanceof Line) {\n      parent.block = newBlock;\n    } else {\n      for (let i = 0; i < parent.childs.length; i++) {\n        const block = parent.childs[i];\n        if (block === this) {\n          parent.childs[i] = newBlock;\n        }\n      }\n    }\n  }\n\n  findEmptyBlock(sibling = true) {\n    if (this.mode === MODE.EMPTY) {\n      return this;\n    } else if (this.blockType === BLOCK.CALLBACK) {\n      for (let i = 0; i < this.data.length; i++) {\n        const line = this.data[i].block.findEmptyBlock(false);\n        if (line) return line;\n      }\n    } else {\n      if (this.childs) {\n        for (let i = 0; i < this.childs.length; i++) {\n          const child = this.childs[i].findEmptyBlock(false);\n          if (child) return child;\n        }\n      }\n      if (sibling && this.parent instanceof Block) {\n        const parent = this.parent.findEmptyBlock(false);\n        if (parent) return parent;\n      }\n      return null;\n    }\n  }\n\n  findSubjectParent() {\n    if (this.parent instanceof Block) {\n      if (this.parent.grammar === GRAMMAR.SUBJECT) {\n        return this.parent;\n      } else {\n        return this.parent.findSubjectParent();\n      }\n    } else {\n      return null;\n    }\n  }\n\n  getParentLine() {\n    if (this.parent instanceof Line) {\n      return this.parent;\n    } else {\n      return this.parent.getParentLine();\n    }\n  }\n\n  getParentAction() {\n    if (this.parent instanceof Block) {\n      if (this.parent.blockType === BLOCK.ACTION) {\n        return this.parent;\n      } else {\n        return this.parent.getParentAction();\n      }\n    } else {\n      return null;\n    }\n  }\n\n  static convertFromJson(json, parent) {\n    const block = new Block({ ...json });\n    block.data =\n      block.blockType === BLOCK.CALLBACK\n        ? block.data.map(line => Line.convertFromJson(line, block))\n        : block.data;\n    block.childs = json.childs\n      ? json.childs.map(child => Block.convertFromJson(child, block))\n      : undefined;\n    block.parent = parent;\n    return block;\n  }\n\n  convertToJson() {\n    const {\n      id,\n      mode,\n      grammars,\n      grammar,\n      blockTypes,\n      blockType,\n      parentDataTypes,\n      dataTypes,\n      dataType,\n      data,\n      childs\n    } = this;\n    return {\n      id,\n      mode,\n      grammars,\n      grammar,\n      blockTypes,\n      blockType,\n      parentDataTypes,\n      dataTypes,\n      dataType,\n      data:\n        blockType === BLOCK.CALLBACK\n          ? data.map(line => line.convertToJson())\n          : data,\n      childs: childs ? childs.map(child => child.convertToJson()) : undefined\n    };\n  }\n\n  convertToJavascript() {\n    if (this.mode !== MODE.INSTANCE) return \"\";\n\n    let childsCode = \"\";\n    if (this.childs && this.childs.length > 0) {\n      childsCode = this.childs.reduce((prev, child, index) => {\n        return prev + (index ? \", \" : \"\") + child.convertToJavascript();\n      }, \"\");\n    }\n\n    switch (this.blockType) {\n      case BLOCK.SPRITE:\n        if (this.dataType === DATA.SOUND) {\n          return `${childsCode}`;\n        } else if (\n          this.grammar === GRAMMAR.OBJECTIVE &&\n          this.childs.length <= 0\n        ) {\n          return `\"${this.data}\"`;\n        } else {\n          return `getSprite(\"${this.data}\")${childsCode}`;\n        }\n\n      case BLOCK.VARIABLE:\n        return `global.${this.data}${childsCode}`;\n\n      case BLOCK.PROPERTY:\n        if (this.grammar === GRAMMAR.SUBJECT) {\n          return `${this.childs[0].convertToJavascript()}`;\n        } else {\n          return `.get${this.data[0].toUpperCase() + this.data.slice(1)}()`;\n        }\n\n      case BLOCK.ACTION:\n        switch (this.data) {\n          case \"set\":\n            if (this.parent.blockType === BLOCK.PROPERTY) {\n              return `.set${this.parent.data[0].toUpperCase() +\n                this.parent.data.slice(1)}(${childsCode})`;\n            } else {\n              return `=${childsCode}`;\n            }\n\n          case \"onTouch\":\n          case \"onTouchUp\":\n            let touchAPI = this.data;\n            if (this.parent.dataType === DATA.SCREEN) {\n              touchAPI =\n                {\n                  onTouch: \"onScreenClick\",\n                  onTouchUp: \"onScreenClickUp\"\n                }[touchAPI] || touchAPI;\n            }\n            return `.${touchAPI}(${childsCode})`;\n\n          case \"move\":\n          case \"go\":\n            const directionBlock = this.childs[0];\n            const distance = this.childs[1].convertToJavascript();\n            if (directionBlock.dataType === DATA.DIRECTION) {\n              switch (directionBlock.data) {\n                case \"up\":\n                  return `.${this.data}Y(${distance}*(-1))`;\n                case \"down\":\n                  return `.${this.data}Y(${distance})`;\n                case \"right\":\n                  return `.${this.data}X(${distance})`;\n                case \"left\":\n                  return `.${this.data}X(${distance}*(-1))`;\n                default:\n                  console.warn(\n                    \"Block convertToJavascript: unhandled direction data -\",\n                    this.data,\n                    directionBlock.data\n                  );\n                  return \"\";\n              }\n            } else {\n              switch (directionBlock.data) {\n                case \"x\":\n                  return `.${this.data}X(${distance})`;\n                case \"y\":\n                  return `.${this.data}Y(${distance})`;\n                default:\n                  console.warn(\n                    \"Block convertToJavascript: unhandled axis data -\",\n                    this.data,\n                    directionBlock.data\n                  );\n                  return \"\";\n              }\n            }\n\n          case \"moveTo\":\n          case \"goTo\":\n            const positionBlock = this.childs[0];\n            switch (positionBlock.dataType) {\n              case DATA.SPRITE:\n              case DATA.TEXT:\n                return `.${\n                  this.data\n                }Sprite(${positionBlock.convertToJavascript()})`;\n              case DATA.POSITION:\n                return `.${this.data}(${positionBlock.data.x},${\n                  positionBlock.data.y\n                })`;\n              case DATA.TOUCH:\n                return `.${this.data}MousePointer()`;\n              case DATA.RANDOM:\n                return `.${this.data}Random()`;\n              default:\n                console.warn(\n                  \"Block convertToJavascript: unhandled position dataType -\",\n                  this.data,\n                  positionBlock.dataType\n                );\n                return \"\";\n            }\n\n          case \"turnTo\":\n            const degreeBlock = this.childs[0];\n            switch (degreeBlock.dataType) {\n              case DATA.SPRITE:\n              case DATA.TEXT:\n                return `.${\n                  this.data\n                }Sprite(${degreeBlock.convertToJavascript()})`;\n              case DATA.TOUCH:\n                return `.${this.data}MousePointer()`;\n              default:\n                console.warn(\n                  \"Block convertToJavascript: unhandled position dataType -\",\n                  this.data,\n                  degreeBlock.dataType\n                );\n                return \"\";\n            }\n\n          case \"say\":\n            return `.say(${childsCode},3)`;\n\n          case \"playAnimation\":\n            return `.playAnimation(${childsCode},true)`;\n\n          case \"setCollision\":\n            const collideBlock = this.childs[0];\n            if (collideBlock.dataType === DATA.SCREEN) {\n              return \".setCollideScene(true)\";\n            } else {\n              return `.${this.data}(${childsCode})`;\n            }\n\n          case \"bind\":\n            const bindSprite = this.childs[0].convertToJavascript();\n            const bindSpeed = this.childs[1].convertToJavascript();\n            return `.onJoystick(function(degree,force){\n                var maxSpeed=${bindSpeed}\n                var sprite=getSprite(${bindSprite})\n                sprite.setVelocityFromDegree(degree,force,maxSpeed)\n            })`;\n\n          default:\n            if (this.parent.dataType === DATA.SOUND) {\n              return `${this.data}Sound(\"${this.parent.data}\")`;\n            } else {\n              return `.${this.data}(${childsCode})`;\n            }\n        }\n\n      case BLOCK.CALLBACK:\n        return `function(){\\n${Context.convertLinesToJavascript(this.data)}\\n}`;\n\n      case BLOCK.CONSTANT:\n        if (this.dataType === DATA.NUMBER || this.dataType === DATA.BOOLEAN) {\n          return `${this.data}`;\n        } else {\n          return `\"${this.data}\"`;\n        }\n\n      case BLOCK.OPERATOR:\n        const prevCode = this.childs[0].convertToJavascript();\n        const nextCode = this.childs[1].convertToJavascript();\n        return `${prevCode}${this.data}${nextCode}`;\n\n      case BLOCK.UTIL:\n        switch (this.data) {\n          case \"repeat\":\n            return `for(let i=0; i<${\n              this.childs[0].data\n            }; i++){\\n${Context.convertLinesToJavascript(\n              this.childs[1].data\n            )}\\n}`;\n          case \"if\":\n            return `if(${this.childs[0].convertToJavascript()}){\\n${Context.convertLinesToJavascript(\n              this.childs[1].data\n            )}\\n}`;\n          case \"else if\":\n            return `else if(${this.childs[0].convertToJavascript()}){\\n${Context.convertLinesToJavascript(\n              this.childs[1].data\n            )}\\n}`;\n          case \"else\":\n            return `else{\\n${Context.convertLinesToJavascript(\n              this.childs[0].data\n            )}\\n}`;\n          case \"clone\":\n            return `.clone()${childsCode}`;\n          case \"mobile\":\n            if (this.childs[0].data === \"onShake\") {\n              return `onShake(${this.childs[0].childs[0].convertToJavascript()})`;\n            } else if (this.childs[0].data === \"vibrate\") {\n              return \"vibrate()\";\n            }\n            break;\n          default:\n            console.warn(\n              \"Block convertToJavascript: unhandled util data -\",\n              this.data\n            );\n            return \"\";\n        }\n        break;\n\n      case BLOCK.FUNCTION:\n      default:\n        console.warn(\n          \"Block convertToJavascript: unhandled blockType -\",\n          this.blockType\n        );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}