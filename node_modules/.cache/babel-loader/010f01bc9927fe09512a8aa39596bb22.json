{"ast":null,"code":"import _classCallCheck from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/astroboy/src/Page/Builder/Component/Scene/Container.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as interactionActions from \"../../Store/Reducer/interaction\";\nimport * as sceneActions from \"../../Store/Reducer/scene\";\nimport { injectIntl } from \"react-intl\";\nimport { toast } from \"react-toastify\";\nimport RndWrapper from \"../../utils/RndWrapper\";\nimport View from \"./View\";\nimport PopUp, { showPopUp } from \"../../../../Common/Component/PopUp\";\n\nvar Container = /*#__PURE__*/function (_Component) {\n  _inherits(Container, _Component);\n\n  var _super = _createSuper(Container);\n\n  function Container(props) {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _super.call(this, props);\n\n    _this.handleAddScene = function () {\n      var num = _this.props.sceneIds.reduce(function (acc, cur) {\n        return Math.max(acc, cur.replace(/scene/g, \"\"));\n      }, 0);\n\n      num += 1;\n      var sceneId = \"scene\" + num;\n      var sceneName = sceneId;\n\n      _this.props.addScene(sceneId, sceneName);\n\n      _this.props.selectScene(sceneId, sceneName);\n    };\n\n    _this.handleCopyScene = function () {\n      var selectedSceneId = _this.props.selectedSceneId;\n\n      var num = _this.props.sceneIds.reduce(function (acc, cur) {\n        return Math.max(acc, cur.replace(/scene/g, \"\"));\n      }, 0);\n\n      num += 1;\n      var sceneId = \"scene\" + num;\n      var sceneName = sceneId;\n\n      _this.props.copyScene(sceneId, sceneName, selectedSceneId);\n\n      _this.props.selectScene(sceneId, sceneName);\n    };\n\n    _this.handleRemoveScene = function (id) {\n      var _this$props = _this.props,\n          scenes = _this$props.scenes,\n          sceneIds = _this$props.sceneIds,\n          selectedSceneId = _this$props.selectedSceneId;\n      showPopUp(React.createElement(PopUp.TwoButton, {\n        confirmAction: function confirmAction() {\n          if (sceneIds.length === 1) {\n            var toastText = _this.props.intl.formatMessage({\n              id: \"ID_PROPERTY_SCENE_AT_LEAST\"\n            });\n\n            toast.info(toastText, {\n              position: toast.POSITION.BOTTOM_LEFT\n            });\n            return;\n          }\n\n          if (selectedSceneId === id) {\n            var index = sceneIds.findIndex(function (key) {\n              return key === id;\n            });\n            index = index > 0 ? index - 1 : 1;\n            var nextSceneId = sceneIds[index];\n            var nextScene = scenes[nextSceneId];\n\n            _this.props.selectScene(nextSceneId, nextScene.sceneName);\n          }\n\n          _this.props.removeScene(id);\n        },\n        intl: _this.props.intl,\n        titleId: \"ID_BUILDER_ALERT_MSG_REMOVE_SCENE_QUESTION\",\n        confirmButtonNameId: \"ID_BUILDER_ALERT_MSG_REMOVE_SCENE_CONFIRM\",\n        cancelButtonNameId: \"ID_BUILDER_ALERT_MSG_REMOVE_SCENE_CANCEL\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }));\n    };\n\n    _this.handleSelectScene = function (id) {\n      _this.setState({\n        selectedSceneId: id\n      });\n\n      if (id === _this.props.selectedSceneId) {\n        _this.setState({\n          isOpened: !_this.state.isOpened\n        });\n      } else {\n        _this.props.selectScene(id);\n      }\n    };\n\n    _this.moveDndScene = function (dragIndex, hoverIndex) {\n      var reorderScene = _this.props.reorderScene;\n      reorderScene(dragIndex, hoverIndex);\n    };\n\n    _this.onDragStart = function () {};\n\n    _this.state = {\n      isOpened: true\n    };\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"render\",\n    value: function render() {\n      var handleAddScene = this.handleAddScene,\n          handleCopyScene = this.handleCopyScene,\n          handleRemoveScene = this.handleRemoveScene,\n          handleSelectScene = this.handleSelectScene,\n          moveDndScene = this.moveDndScene,\n          onDragStart = this.onDragStart;\n      var _this$props2 = this.props,\n          scenes = _this$props2.scenes,\n          sceneIds = _this$props2.sceneIds,\n          selectedSceneId = _this$props2.selectedSceneId,\n          screenMode = _this$props2.screenMode,\n          handleSelectTab = _this$props2.handleSelectTab,\n          intl = _this$props2.intl,\n          isOn = _this$props2.isOn,\n          zIndex = _this$props2.zIndex,\n          handleChangeZIndex = _this$props2.handleChangeZIndex;\n      var isOpened = this.state.isOpened;\n      var selectedScene = scenes[selectedSceneId];\n\n      if (!isOn) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(RndWrapper, {\n        id: \"scene\",\n        style: {\n          zIndex: zIndex\n        },\n        defaultWidth: 264,\n        defaultHeight: 420,\n        defaultX: 200,\n        defaultY: 50,\n        minWidth: 264,\n        minHeight: 420,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(View, {\n        handleAddScene: handleAddScene,\n        handleCopyScene: handleCopyScene,\n        handleRemoveScene: handleRemoveScene,\n        handleSelectScene: handleSelectScene,\n        isOpened: isOpened,\n        handleSelectTab: handleSelectTab,\n        handleChangeZIndex: handleChangeZIndex,\n        moveDndScene: moveDndScene,\n        scenes: scenes,\n        sceneIds: sceneIds,\n        selectedSceneId: selectedSceneId,\n        screenMode: screenMode,\n        selectedScene: selectedScene,\n        onDragStart: onDragStart,\n        intl: intl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    scenes: state.scene.scenes,\n    sceneIds: state.scene.sceneIds,\n    selectedSceneId: state.interaction.selected.scene,\n    screenMode: state.preview.screenMode\n  };\n}, {\n  addScene: sceneActions.addScene,\n  copyScene: sceneActions.copyScene,\n  removeScene: sceneActions.removeScene,\n  selectScene: interactionActions.selectScene,\n  reorderScene: sceneActions.reorderScene\n})(injectIntl(Container));","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/astroboy/src/Page/Builder/Component/Scene/Container.js"],"names":["React","Component","connect","interactionActions","sceneActions","injectIntl","toast","RndWrapper","View","PopUp","showPopUp","Container","props","handleAddScene","num","sceneIds","reduce","acc","cur","Math","max","replace","sceneId","sceneName","addScene","selectScene","handleCopyScene","selectedSceneId","copyScene","handleRemoveScene","id","scenes","length","toastText","intl","formatMessage","info","position","POSITION","BOTTOM_LEFT","index","findIndex","key","nextSceneId","nextScene","removeScene","handleSelectScene","setState","isOpened","state","moveDndScene","dragIndex","hoverIndex","reorderScene","onDragStart","screenMode","handleSelectTab","isOn","zIndex","handleChangeZIndex","selectedScene","scene","interaction","selected","preview"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as interactionActions from \"../../Store/Reducer/interaction\";\nimport * as sceneActions from \"../../Store/Reducer/scene\";\nimport { injectIntl } from \"react-intl\";\nimport { toast } from \"react-toastify\";\nimport RndWrapper from \"../../utils/RndWrapper\";\nimport View from \"./View\";\nimport PopUp, { showPopUp } from \"../../../../Common/Component/PopUp\";\n\nclass Container extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpened: true\n    };\n  }\n\n  handleAddScene = () => {\n    let num = this.props.sceneIds.reduce((acc, cur) => {\n      return Math.max(acc, cur.replace(/scene/g, \"\"));\n    }, 0);\n    num += 1;\n    const sceneId = \"scene\" + num;\n    const sceneName = sceneId;\n    this.props.addScene(sceneId, sceneName);\n    this.props.selectScene(sceneId, sceneName);\n  };\n\n  handleCopyScene = () => {\n    const { selectedSceneId } = this.props;\n\n    let num = this.props.sceneIds.reduce((acc, cur) => {\n      return Math.max(acc, cur.replace(/scene/g, \"\"));\n    }, 0);\n    num += 1;\n    const sceneId = \"scene\" + num;\n    const sceneName = sceneId;\n\n    this.props.copyScene(sceneId, sceneName, selectedSceneId);\n    this.props.selectScene(sceneId, sceneName);\n  };\n\n  handleRemoveScene = id => {\n    const { scenes, sceneIds, selectedSceneId } = this.props;\n    showPopUp(\n      <PopUp.TwoButton\n        confirmAction={() => {\n          if (sceneIds.length === 1) {\n            const toastText = this.props.intl.formatMessage({\n              id: \"ID_PROPERTY_SCENE_AT_LEAST\"\n            });\n            toast.info(toastText, {\n              position: toast.POSITION.BOTTOM_LEFT\n            });\n            return;\n          }\n\n          if (selectedSceneId === id) {\n            let index = sceneIds.findIndex(key => key === id);\n            index = index > 0 ? index - 1 : 1;\n            const nextSceneId = sceneIds[index];\n            const nextScene = scenes[nextSceneId];\n            this.props.selectScene(nextSceneId, nextScene.sceneName);\n          }\n          this.props.removeScene(id);\n        }}\n        intl={this.props.intl}\n        titleId=\"ID_BUILDER_ALERT_MSG_REMOVE_SCENE_QUESTION\"\n        confirmButtonNameId=\"ID_BUILDER_ALERT_MSG_REMOVE_SCENE_CONFIRM\"\n        cancelButtonNameId=\"ID_BUILDER_ALERT_MSG_REMOVE_SCENE_CANCEL\"\n      />\n    );\n  };\n\n  handleSelectScene = id => {\n    this.setState({ selectedSceneId: id });\n\n    if (id === this.props.selectedSceneId) {\n      this.setState({ isOpened: !this.state.isOpened });\n    } else {\n      this.props.selectScene(id);\n    }\n  };\n\n  moveDndScene = (dragIndex, hoverIndex) => {\n    const { reorderScene } = this.props;\n    reorderScene(dragIndex, hoverIndex);\n  };\n\n  onDragStart = () => {};\n\n  render() {\n    const {\n      handleAddScene,\n      handleCopyScene,\n      handleRemoveScene,\n      handleSelectScene,\n      moveDndScene,\n      onDragStart\n    } = this;\n    const {\n      scenes,\n      sceneIds,\n      selectedSceneId,\n      screenMode,\n      handleSelectTab,\n      intl,\n      isOn,\n      zIndex,\n      handleChangeZIndex\n    } = this.props;\n    const { isOpened } = this.state;\n    const selectedScene = scenes[selectedSceneId];\n\n    if (!isOn) {\n      return <div />;\n    }\n\n    return (\n      <RndWrapper\n        id=\"scene\"\n        style={{ zIndex }}\n        defaultWidth={264}\n        defaultHeight={420}\n        defaultX={200}\n        defaultY={50}\n        minWidth={264}\n        minHeight={420}\n      >\n        <View\n          handleAddScene={handleAddScene}\n          handleCopyScene={handleCopyScene}\n          handleRemoveScene={handleRemoveScene}\n          handleSelectScene={handleSelectScene}\n          isOpened={isOpened}\n          handleSelectTab={handleSelectTab}\n          handleChangeZIndex={handleChangeZIndex}\n          moveDndScene={moveDndScene}\n          scenes={scenes}\n          sceneIds={sceneIds}\n          selectedSceneId={selectedSceneId}\n          screenMode={screenMode}\n          selectedScene={selectedScene}\n          onDragStart={onDragStart}\n          intl={intl}\n        />\n      </RndWrapper>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    scenes: state.scene.scenes,\n    sceneIds: state.scene.sceneIds,\n    selectedSceneId: state.interaction.selected.scene,\n    screenMode: state.preview.screenMode\n  }),\n  {\n    addScene: sceneActions.addScene,\n    copyScene: sceneActions.copyScene,\n    removeScene: sceneActions.removeScene,\n    selectScene: interactionActions.selectScene,\n    reorderScene: sceneActions.reorderScene\n  }\n)(injectIntl(Container));\n"]},"metadata":{},"sourceType":"module"}