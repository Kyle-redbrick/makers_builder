{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ChatbotMsgType } from \"../../../Common/Util/Constant\";\nimport apiLibrary from \"./apiLibrary\"; // import * as request from \"../../../Common/Util/HTTPRequest\";\n\nvar HmacSHA256 = require('crypto-js/hmac-sha256');\n\nvar EncBase64 = require('crypto-js/enc-base64');\n\nvar BASE_URL = \"https://3452f53d86f14fa7a665bba5dbcc3ff7.apigw.ntruss.com/custom/v1/4601/636985504a2af67221bc6b880848402d907b23caa1ddec12a0ccaad624b7af78\";\nvar SECRET_KEY = \"ckpFU2lnV2NEaHFJTWVGWWJkRXBDdUZqZ2JUQkpSaHQ=\";\nexport var SCENARIO_NAMES = {\n  API: \"programming\" // CLASS: \"class\"\n\n};\nvar WIZBOT = \"WIZBOT\";\n\nvar fetchRequest = function fetchRequest(url, method, param, signatureHeader) {\n  var headers = {\n    \"Content-Type\": \"application/json;UTF-8\",\n    \"X-NCP-CHATBOT_SIGNATURE\": signatureHeader\n  };\n\n  if (param) {\n    return fetch(url, {\n      method: method,\n      headers: headers,\n      body: JSON.stringify(param)\n    });\n  } else {\n    return fetch(url, {\n      method: method,\n      headers: headers\n    });\n  }\n};\n\nexport var sendMsg = function sendMsg(payload, onSuccess, onError) {\n  var body = {\n    \"version\": \"v2\",\n    \"userId\": payload.userId,\n    \"timestamp\": new Date().getTime(),\n    \"bubbles\": [{\n      \"type\": \"text\",\n      \"data\": {\n        \"description\": payload.description\n      }\n    }],\n    \"event\": \"send\"\n  };\n  var signatureHeader = HmacSHA256(JSON.stringify(body), SECRET_KEY).toString(EncBase64);\n  fetchRequest(\"\".concat(BASE_URL), \"POST\", body, signatureHeader).then(function (res) {\n    return res.json();\n  }).then( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var canNotHelp, messages;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // console.log(11111, \"CLOVA RESPONSE :\", data)\n              canNotHelp = false;\n              messages = [];\n              data.bubbles.forEach(function (bubble) {\n                var msg = {\n                  text: bubble.data.description,\n                  sender: WIZBOT\n                };\n                messages.push(msg);\n                canNotHelp = !!bubble.information.find(function (i) {\n                  return i.key === \"defaultMsgType\" && i.value === \"canNotHelpMsg\";\n                });\n              }); //add additional info\n\n              if (canNotHelp) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.t0 = data.scenario.name;\n              _context.next = _context.t0 === SCENARIO_NAMES.API ? 7 : 9;\n              break;\n\n            case 7:\n              data.entities.forEach(function (entity) {\n                if (entity.name === \"API\") {\n                  var api = apiLibrary.getAPIbyId(entity.word);\n\n                  if (api) {\n                    messages.push({\n                      text: api.chatbotDescription,\n                      sender: WIZBOT,\n                      type: ChatbotMsgType.BOT_API_SCRIPT,\n                      script: \"//\" + entity.word + \"예제 스크립트:\\n\" + api.snippet\n                    }); // messages.push({\n                    //   type: ChatbotMsgType.BOT_BUTTON,\n                    //   keyword: api.id,\n                    //   questionType: \"class\"\n                    // })\n                  }\n                }\n              });\n              return _context.abrupt(\"break\", 10);\n\n            case 9:\n              return _context.abrupt(\"break\", 10);\n\n            case 10:\n              onSuccess(messages);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()).catch(function (e) {\n    return onError(e);\n  });\n};","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/utils/ChatbotUtil.js"],"names":["ChatbotMsgType","apiLibrary","HmacSHA256","require","EncBase64","BASE_URL","SECRET_KEY","SCENARIO_NAMES","API","WIZBOT","fetchRequest","url","method","param","signatureHeader","headers","fetch","body","JSON","stringify","sendMsg","payload","onSuccess","onError","userId","Date","getTime","description","toString","then","res","json","data","canNotHelp","messages","bubbles","forEach","bubble","msg","text","sender","push","information","find","i","key","value","scenario","name","entities","entity","api","getAPIbyId","word","chatbotDescription","type","BOT_API_SCRIPT","script","snippet","catch","e"],"mappings":"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","sourcesContent":["import { ChatbotMsgType } from \"../../../Common/Util/Constant\";\nimport apiLibrary from \"./apiLibrary\";\n// import * as request from \"../../../Common/Util/HTTPRequest\";\nconst HmacSHA256 = require('crypto-js/hmac-sha256');\nconst EncBase64 = require('crypto-js/enc-base64');\nconst BASE_URL = \"https://3452f53d86f14fa7a665bba5dbcc3ff7.apigw.ntruss.com/custom/v1/4601/636985504a2af67221bc6b880848402d907b23caa1ddec12a0ccaad624b7af78\";\nconst SECRET_KEY = \"ckpFU2lnV2NEaHFJTWVGWWJkRXBDdUZqZ2JUQkpSaHQ=\";\n\n\n\nexport const SCENARIO_NAMES = {\n  API: \"programming\",\n  // CLASS: \"class\"\n}\n\nconst WIZBOT = \"WIZBOT\"\n\nconst fetchRequest = (url, method, param, signatureHeader) => {\n  let headers = {\n    \"Content-Type\": \"application/json;UTF-8\",\n    \"X-NCP-CHATBOT_SIGNATURE\": signatureHeader\n  };\n\n  if (param) {\n    return fetch(url, {\n      method: method,\n      headers: headers,\n      body: JSON.stringify(param)\n    });\n  } else {\n    return fetch(url, {\n      method: method,\n      headers: headers\n    });\n  }\n};\n\nexport const sendMsg = (payload, onSuccess, onError) => {\n  const body = {\n    \"version\": \"v2\",\n    \"userId\": payload.userId,\n    \"timestamp\": new Date().getTime(),\n    \"bubbles\": [{\n      \"type\": \"text\",\n      \"data\": { \"description\": payload.description }\n    }\n    ],\n    \"event\": \"send\"\n  }\n  const signatureHeader = HmacSHA256(JSON.stringify(body), SECRET_KEY).toString(EncBase64);\n  fetchRequest(`${BASE_URL}`, \"POST\", body, signatureHeader)\n    .then(res => res.json())\n    .then(async data => {\n      // console.log(11111, \"CLOVA RESPONSE :\", data)\n      let canNotHelp = false;\n      let messages = [];\n      data.bubbles.forEach(bubble => {\n        const msg = {\n          text: bubble.data.description,\n          sender: WIZBOT\n        }\n        messages.push(msg);\n        canNotHelp = !!bubble.information.find(i => i.key === \"defaultMsgType\" && i.value === \"canNotHelpMsg\");\n      })\n\n      //add additional info\n      if (!canNotHelp) {\n        switch (data.scenario.name) {\n          case SCENARIO_NAMES.API:\n            data.entities.forEach(entity => {\n              if (entity.name === \"API\") {\n                const api = apiLibrary.getAPIbyId(entity.word);\n                if (api) {\n                  messages.push({\n                    text: api.chatbotDescription,\n                    sender: WIZBOT,\n                    type: ChatbotMsgType.BOT_API_SCRIPT,\n                    script: \"//\" + entity.word + \"예제 스크립트:\\n\"+api.snippet\n                  });\n                  // messages.push({\n                  //   type: ChatbotMsgType.BOT_BUTTON,\n                  //   keyword: api.id,\n                  //   questionType: \"class\"\n                  // })\n                }\n              }\n            })\n            break;\n          // case SCENARIO_NAMES.CLASS:\n          //   const failedMessage = {\n          //     text: \"앗! 아직은 준비 된 수업이 없네..\",\n          //     sender: WIZBOT,\n          //   };\n          //   const entityValues = data.entities.map(entity => entity.word);\n          //   if(entityValues.length > 0) {\n          //     try{\n          //       const res = await request.getDreamProjectsByTag(entityValues[0])\n          //       const projects = await res.json();\n          //       if(projects.length>0){\n          //         const msg = {\n          //           text: entityValues[0] + \"을(를) 배우기 위해서 내가 준비한 수업이야~\",\n          //           sender: WIZBOT\n          //         }\n          //         messages.push(msg);\n          //         messages.push({\n          //           type: ChatbotMsgType.BOT_CLASS,\n          //           lectures: projects,\n          //           sender: WIZBOT\n          //         })\n          //       } else {\n          //         messages = [failedMessage];\n          //       }\n          //     } catch(e) {\n          //       messages = [failedMessage];\n          //       console.error(e);\n          //     }\n          //   } else {\n          //     messages = [failedMessage];\n          //   }\n          // break;\n          default:\n            break;\n        }\n      }\n      onSuccess(messages);\n    })\n    .catch(e => onError(e));\n};"]},"metadata":{},"sourceType":"module"}