{"ast":null,"code":"import _classCallCheck from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/astroboy/src/Common/Component/FontDropDown/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { injectIntl } from \"react-intl\";\nimport onClickOutside from \"react-onclickoutside\";\nimport { getColorTheme } from \"../../../Page/Builder/utils/colorThemeUtil\";\nimport \"./index.scss\";\n\nvar FontDropDown = /*#__PURE__*/function (_Component) {\n  _inherits(FontDropDown, _Component);\n\n  var _super = _createSuper(FontDropDown);\n\n  function FontDropDown(props) {\n    var _this;\n\n    _classCallCheck(this, FontDropDown);\n\n    _this = _super.call(this, props);\n\n    _this.handleClickOutside = function (e) {\n      _this.setState({\n        isListOpened: false\n      });\n    };\n\n    _this.setINTL = function (item) {\n      return _this.props.intl.formatMessage({\n        id: item.name\n      });\n    };\n\n    _this.handleItemClick = function (item) {\n      _this.props.handleSelectItem(item.id);\n\n      _this.setState({\n        selectedItem: item,\n        isListOpened: false\n      });\n    };\n\n    _this.handleToggleList = function () {\n      _this.setState(function (state) {\n        return {\n          isListOpened: !state.isListOpened\n        };\n      }, _this.focusSelectedRef);\n    };\n\n    _this.selectedRef = null;\n\n    _this.setSelectedRef = function (element) {\n      _this.selectedRef = element;\n    };\n\n    _this.focusSelectedRef = function () {\n      if (_this.selectedRef) {\n        // this.selectedRef.focus();\n        _this.selectedRef.scrollIntoView({\n          block: \"center\",\n          behavior: \"auto\" //\"smooth\"\n\n        });\n      }\n    };\n\n    _this.state = {\n      isListOpened: false,\n      selectedItem: _this.props.list && _this.props.list.find(function (item) {\n        return item.id === _this.props.defaultValue;\n      })\n    };\n    return _this;\n  }\n\n  _createClass(FontDropDown, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var list = this.props.list;\n      var _this$state = this.state,\n          isListOpened = _this$state.isListOpened,\n          selectedItem = _this$state.selectedItem;\n      var listToggle = isListOpened ? \"on\" : \"off\";\n      var colorTheme = getColorTheme();\n      return React.createElement(\"div\", {\n        className: \"FontDD\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"FontDD__header header__list--\".concat(listToggle),\n        onClick: this.handleToggleList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"FontDD__title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, this.setINTL(selectedItem)), React.createElement(\"div\", {\n        className: \"FontDD__arrow FontDD__arrow--\".concat(listToggle, \"  \").concat(colorTheme),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      })), isListOpened && React.createElement(\"div\", {\n        className: \"FontDD__body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"FontDD__list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, list.map(function (item, index) {\n        var isSelected = selectedItem.id === item.id;\n        var itemToggle = isSelected ? \"on\" : \"off\";\n\n        if (isSelected) {\n          return React.createElement(\"div\", {\n            key: index,\n            className: \"FontDD__item FontDD__item--\".concat(itemToggle),\n            onClick: function onClick() {\n              return _this2.handleItemClick(item);\n            },\n            ref: _this2.setSelectedRef,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76\n            },\n            __self: this\n          }, _this2.setINTL(item));\n        } else {\n          return React.createElement(\"div\", {\n            key: index,\n            className: \"FontDD__item FontDD__item--\".concat(itemToggle),\n            onClick: function onClick() {\n              return _this2.handleItemClick(item);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          }, _this2.setINTL(item));\n        }\n      }))));\n    }\n  }]);\n\n  return FontDropDown;\n}(Component);\n\nexport default injectIntl(onClickOutside(FontDropDown));","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/astroboy/src/Common/Component/FontDropDown/index.js"],"names":["React","Component","injectIntl","onClickOutside","getColorTheme","FontDropDown","props","handleClickOutside","e","setState","isListOpened","setINTL","item","intl","formatMessage","id","name","handleItemClick","handleSelectItem","selectedItem","handleToggleList","state","focusSelectedRef","selectedRef","setSelectedRef","element","scrollIntoView","block","behavior","list","find","defaultValue","listToggle","colorTheme","map","index","isSelected","itemToggle"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { injectIntl } from \"react-intl\";\n\nimport onClickOutside from \"react-onclickoutside\";\nimport { getColorTheme } from \"../../../Page/Builder/utils/colorThemeUtil\";\nimport \"./index.scss\";\n\nclass FontDropDown extends Component {\n  constructor(props) {\n    super(props);\n    this.selectedRef = null;\n    this.setSelectedRef = element => {\n      this.selectedRef = element;\n    };\n    this.focusSelectedRef = () => {\n      if (this.selectedRef) {\n        // this.selectedRef.focus();\n        this.selectedRef.scrollIntoView({\n          block: \"center\",\n          behavior: \"auto\" //\"smooth\"\n        });\n      }\n    };\n    this.state = {\n      isListOpened: false,\n      selectedItem:\n        this.props.list &&\n        this.props.list.find(item => item.id === this.props.defaultValue)\n    };\n  }\n\n  handleClickOutside = e => {\n    this.setState({\n      isListOpened: false\n    });\n  };\n\n  setINTL = item => {\n    return this.props.intl.formatMessage({ id: item.name });\n  };\n\n  handleItemClick = item => {\n    this.props.handleSelectItem(item.id);\n    this.setState({ selectedItem: item, isListOpened: false });\n  };\n  handleToggleList = () => {\n    this.setState(state => {\n      return { isListOpened: !state.isListOpened };\n    }, this.focusSelectedRef);\n  };\n\n  render() {\n    let { list } = this.props;\n    let { isListOpened, selectedItem } = this.state;\n    let listToggle = isListOpened ? \"on\" : \"off\";\n    const colorTheme = getColorTheme();\n    return (\n      <div className=\"FontDD\">\n        <div\n          className={`FontDD__header header__list--${listToggle}`}\n          onClick={this.handleToggleList}\n        >\n          <div className=\"FontDD__title\">{this.setINTL(selectedItem)}</div>\n          <div\n            className={`FontDD__arrow FontDD__arrow--${listToggle}  ${colorTheme}`}\n          />\n        </div>\n        {isListOpened && (\n          <div className=\"FontDD__body\">\n            <div className=\"FontDD__list\">\n              {list.map((item, index) => {\n                let isSelected = selectedItem.id === item.id;\n                let itemToggle = isSelected ? \"on\" : \"off\";\n                if (isSelected) {\n                  return (\n                    <div\n                      key={index}\n                      className={`FontDD__item FontDD__item--${itemToggle}`}\n                      onClick={() => this.handleItemClick(item)}\n                      ref={this.setSelectedRef}\n                    >\n                      {this.setINTL(item)}\n                    </div>\n                  );\n                } else {\n                  return (\n                    <div\n                      key={index}\n                      className={`FontDD__item FontDD__item--${itemToggle}`}\n                      onClick={() => this.handleItemClick(item)}\n                    >\n                      {this.setINTL(item)}\n                    </div>\n                  );\n                }\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(onClickOutside(FontDropDown));\n"]},"metadata":{},"sourceType":"module"}