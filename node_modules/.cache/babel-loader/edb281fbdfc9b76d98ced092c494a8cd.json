{"ast":null,"code":"import _slicedToArray from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Property/Container.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport AssetLibrary from \"../../utils/assetLibrary\";\nimport RndWrapper from \"../../utils/RndWrapper\";\nimport * as sceneActions from \"../../Store/Reducer/scene\";\nimport * as interactionActions from \"../../Store/Reducer/interaction\";\nimport { SpriteType } from \"../../../../Common/Util/Constant\";\nimport View from \"./View\";\nimport * as TrackingUtil from \"../../../../Common/Util/TrackingUtil\";\nimport PopUp, { showPopUp } from \"../../../../Common/Component/PopUp\";\n\nvar Container = /*#__PURE__*/function (_Component) {\n  _inherits(Container, _Component);\n\n  var _super = _createSuper(Container);\n\n  function Container() {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.handleOnChange = function (e) {\n      var _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n\n      _this.exportPreviewData(_defineProperty({}, name, value));\n\n      if (_this.eventTimer) {\n        clearTimeout(_this.eventTimer);\n      }\n\n      _this.eventTimer = setTimeout(function () {\n        TrackingUtil.sendGAEvent({\n          category: \"Builder\",\n          action: \"PropertyActions\",\n          label: name === \"scale\" ? \"Size\" : name === \"left\" || name === \"top\" ? \"Position\" : \"Angle\"\n        });\n      }, 1000);\n    };\n\n    _this.handleVisibleToggle = function (e) {\n      e.preventDefault();\n      TrackingUtil.sendGAEvent({\n        category: \"Builder\",\n        action: \"PropertyActions\",\n        label: \"Visible\"\n      });\n      var _this$props = _this.props,\n          sprites = _this$props.sprites,\n          selectedSceneId = _this$props.selectedSceneId,\n          selectedObject = _this$props.selectedObject,\n          setSpritePreview = _this$props.setSpritePreview;\n      var name = selectedObject.name;\n      var previewData = sprites[name].preview;\n      var opacity = previewData.opacity === 0 ? 1 : 0;\n      setSpritePreview(selectedSceneId, name, {\n        opacity: opacity\n      });\n    };\n\n    _this.handleLockToggle = function (e) {\n      e.preventDefault();\n      TrackingUtil.sendGAEvent({\n        category: \"Builder\",\n        action: \"PropertyActions\",\n        label: \"Lock\"\n      });\n      var _this$props2 = _this.props,\n          selectedSceneId = _this$props2.selectedSceneId,\n          selectedObject = _this$props2.selectedObject;\n      var name = selectedObject.name;\n\n      _this.props.lockSprite(selectedSceneId, name);\n    };\n\n    _this.handleRemoveSprite = function (e) {\n      e.preventDefault();\n      TrackingUtil.sendGAEvent({\n        category: \"Builder\",\n        action: \"DeleteSprite\",\n        label: \"Property\"\n      });\n      var selectedObject = _this.props.selectedObject;\n      var name = selectedObject.name;\n      showPopUp(React.createElement(PopUp.TwoButton, {\n        confirmAction: function confirmAction() {\n          var _this$props3 = _this.props,\n              selectedSceneId = _this$props3.selectedSceneId,\n              sprites = _this$props3.sprites,\n              spriteIds = _this$props3.spriteIds;\n          var index = spriteIds.findIndex(function (key) {\n            return key === name;\n          });\n          index = index > 0 ? index - 1 : 1;\n          var nextSelectedName = spriteIds[index];\n          var nextSprite = sprites[nextSelectedName];\n\n          _this.props.removeSprite(selectedSceneId, name);\n\n          _this.handleSelectSprite(nextSelectedName, nextSprite.type);\n        },\n        intl: _this.props.intl,\n        titleId: \"ID_BUILDER_ALERT_MSG_REMOVE_QUESTION\",\n        titleValue: {\n          spriteName: selectedObject.name\n        },\n        subtitleId: \"ID_BUILDER_ALERT_MSG_REMOVE_QUESTION_SUBTITLE\",\n        confirmButtonNameId: \"ID_BUILDER_ALERT_MSG_REMOVE_SPRITE_CONFIRM\",\n        cancelButtonNameId: \"ID_BUILDER_ALERT_MSG_REMOVE_SCENE_CANCEL\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }));\n    };\n\n    _this.handleSelectSprite = function (name, type) {\n      var _this$props4 = _this.props,\n          selectedSceneId = _this$props4.selectedSceneId,\n          selectedObject = _this$props4.selectedObject;\n\n      if (selectedObject.name !== name) {\n        _this.props.selectSprite(selectedSceneId, name, type);\n      }\n    };\n\n    _this.handleCopySprite = function (e) {\n      e.preventDefault();\n      TrackingUtil.sendGAEvent({\n        category: \"Builder\",\n        action: \"PropertyActions\",\n        label: \"Copy\"\n      });\n\n      if (_this.copyTimer) {\n        clearTimeout(_this.copyTimer);\n      }\n\n      _this.copyTimer = setTimeout(function () {\n        var _this$props5 = _this.props,\n            sprites = _this$props5.sprites,\n            selectedObject = _this$props5.selectedObject,\n            selectedSceneId = _this$props5.selectedSceneId;\n        var sprite = sprites[selectedObject.name];\n        if (!sprite) return;\n        var assetId = sprite.assetId;\n        var type = sprite.type;\n        var code = sprite.code;\n\n        var preview = _objectSpread({}, sprite.preview);\n\n        preview.left += 12;\n        preview.top += 12;\n        var name;\n\n        if (type === SpriteType.TEXT) {\n          name = \"textbox\";\n        } else if (type === SpriteType.CUSTOM) {\n          name = \"custom\";\n        } else {\n          name = AssetLibrary.getAsset(assetId).defaultName;\n        }\n\n        name = _this.countUpSameName(name, _this.props.spriteIds);\n        var copyData = [{\n          assetId: assetId,\n          name: name,\n          type: type,\n          preview: preview,\n          code: code\n        }];\n\n        _this.props.addSprites(selectedSceneId, copyData); // const { formatMessage } = this.props.intl;\n        // const title = formatMessage({ id: \"ID_PROPERTY_COPIED\" });\n        // toast.info(title, {\n        //   position: toast.POSITION.BOTTOM_RIGHT\n        // });\n\n      }, 100);\n    };\n\n    _this.countUpSameName = function (defaultName, nameArray) {\n      var max = nameArray.reduce(function (max, id) {\n        var name = id.replace(/\\(\\d+\\)$/, \"\");\n        var num;\n\n        if (defaultName === name) {\n          num = id.replace(defaultName, \"\").replace(/\\(|\\)/g, \"\");\n          num = !!num ? Number(num) : 1;\n          return Math.max(max, num);\n        } else {\n          return max;\n        }\n      }, 0);\n\n      if (max > 0) {\n        return \"\".concat(defaultName, \"(\").concat(max + 1, \")\");\n      } else {\n        return defaultName;\n      }\n    };\n\n    _this.exportPreviewData = function (propertyData) {\n      var _this$props6 = _this.props,\n          selectedSceneId = _this$props6.selectedSceneId,\n          selectedObject = _this$props6.selectedObject,\n          setSpritePreview = _this$props6.setSpritePreview;\n      var name = selectedObject.name;\n\n      if (propertyData.scale !== undefined) {\n        if (isNaN(propertyData.scale)) {\n          propertyData.scale = 0;\n        }\n\n        propertyData.scaleX = Number(propertyData.scale) * 0.01;\n        propertyData.scaleY = Number(propertyData.scale) * 0.01;\n      } else {\n        var propertyDataList = Object.entries(propertyData);\n        propertyDataList.forEach(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              key = _ref2[0],\n              value = _ref2[1];\n\n          propertyData[key] = Number(value);\n        });\n      }\n\n      setSpritePreview(selectedSceneId, name, propertyData);\n    };\n\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props7 = this.props,\n          isOn = _this$props7.isOn,\n          sprites = _this$props7.sprites,\n          selectedObject = _this$props7.selectedObject,\n          handleSelectTab = _this$props7.handleSelectTab,\n          handleChangeZIndex = _this$props7.handleChangeZIndex,\n          zIndex = _this$props7.zIndex;\n      var handleOnChange = this.handleOnChange,\n          handleVisibleToggle = this.handleVisibleToggle,\n          handleLockToggle = this.handleLockToggle,\n          handleCopySprite = this.handleCopySprite,\n          handleRemoveSprite = this.handleRemoveSprite;\n      var type, sprite, spriteName;\n      var asset = {};\n\n      if (selectedObject.name) {\n        type = selectedObject.type;\n        sprite = sprites[selectedObject.name];\n\n        if (!sprite) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 207\n            },\n            __self: this\n          });\n        }\n\n        spriteName = selectedObject.name;\n\n        if (type === SpriteType.TEXT) {\n          asset.thumb = AssetLibrary.textboxThumb;\n        } else {\n          asset = AssetLibrary.getAsset(sprite.assetId);\n        }\n      }\n\n      if (!isOn) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(RndWrapper, {\n        id: \"property\",\n        style: {\n          zIndex: zIndex\n        },\n        defaultX: 500 //temp\n        // defaultX={document.body.clientWidth - 365}\n        ,\n        defaultY: 16,\n        enableResizing: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(View, {\n        type: type,\n        asset: asset,\n        sprite: sprite,\n        spriteName: spriteName,\n        handleSelectTab: handleSelectTab,\n        handleChangeZIndex: handleChangeZIndex,\n        handleOnChange: handleOnChange,\n        handleVisibleToggle: handleVisibleToggle,\n        handleLockToggle: handleLockToggle,\n        handleCopySprite: handleCopySprite,\n        handleRemoveSprite: handleRemoveSprite,\n        zIndex: zIndex,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    sprites: state.scene.scenes[state.interaction.selected.scene].sprites,\n    spriteIds: state.scene.scenes[state.interaction.selected.scene].spriteIds,\n    selectedObject: state.interaction.selected.objects[state.interaction.selected.scene],\n    selectedSceneId: state.interaction.selected.scene\n  };\n}, {\n  setSpritePreview: sceneActions.setSpritePreview,\n  lockSprite: sceneActions.lockSprite,\n  addSprites: sceneActions.addSprites,\n  removeSprite: sceneActions.removeSprite,\n  selectSprite: interactionActions.selectSprite\n})(Container);","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Property/Container.js"],"names":["React","Component","connect","AssetLibrary","RndWrapper","sceneActions","interactionActions","SpriteType","View","TrackingUtil","PopUp","showPopUp","Container","handleOnChange","e","target","name","value","exportPreviewData","eventTimer","clearTimeout","setTimeout","sendGAEvent","category","action","label","handleVisibleToggle","preventDefault","props","sprites","selectedSceneId","selectedObject","setSpritePreview","previewData","preview","opacity","handleLockToggle","lockSprite","handleRemoveSprite","spriteIds","index","findIndex","key","nextSelectedName","nextSprite","removeSprite","handleSelectSprite","type","intl","spriteName","selectSprite","handleCopySprite","copyTimer","sprite","assetId","code","left","top","TEXT","CUSTOM","getAsset","defaultName","countUpSameName","copyData","addSprites","nameArray","max","reduce","id","replace","num","Number","Math","propertyData","scale","undefined","isNaN","scaleX","scaleY","propertyDataList","Object","entries","forEach","isOn","handleSelectTab","handleChangeZIndex","zIndex","asset","thumb","textboxThumb","state","scene","scenes","interaction","selected","objects"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport AssetLibrary from \"../../utils/assetLibrary\";\nimport RndWrapper from \"../../utils/RndWrapper\";\nimport * as sceneActions from \"../../Store/Reducer/scene\";\nimport * as interactionActions from \"../../Store/Reducer/interaction\";\nimport { SpriteType } from \"../../../../Common/Util/Constant\";\nimport View from \"./View\";\nimport * as TrackingUtil from \"../../../../Common/Util/TrackingUtil\";\nimport PopUp, { showPopUp } from \"../../../../Common/Component/PopUp\";\n\nclass Container extends Component {\n  handleOnChange = e => {\n    const { name, value } = e.target;\n    this.exportPreviewData({ [name]: value });\n    if (this.eventTimer) {\n      clearTimeout(this.eventTimer);\n    }\n    this.eventTimer = setTimeout(() => {\n      TrackingUtil.sendGAEvent({\n        category: \"Builder\",\n        action: `PropertyActions`,\n        label:\n          name === \"scale\"\n            ? \"Size\"\n            : name === \"left\" || name === \"top\"\n            ? \"Position\"\n            : \"Angle\"\n      });\n    }, 1000);\n  };\n\n  handleVisibleToggle = e => {\n    e.preventDefault();\n    TrackingUtil.sendGAEvent({\n      category: \"Builder\",\n      action: `PropertyActions`,\n      label: \"Visible\"\n    });\n    const {\n      sprites,\n      selectedSceneId,\n      selectedObject,\n      setSpritePreview\n    } = this.props;\n    const name = selectedObject.name;\n    const previewData = sprites[name].preview;\n    const opacity = previewData.opacity === 0 ? 1 : 0;\n    setSpritePreview(selectedSceneId, name, { opacity });\n  };\n\n  handleLockToggle = e => {\n    e.preventDefault();\n    TrackingUtil.sendGAEvent({\n      category: \"Builder\",\n      action: `PropertyActions`,\n      label: \"Lock\"\n    });\n    const { selectedSceneId, selectedObject } = this.props;\n    const name = selectedObject.name;\n    this.props.lockSprite(selectedSceneId, name);\n  };\n\n  handleRemoveSprite = e => {\n    e.preventDefault();\n    TrackingUtil.sendGAEvent({\n      category: \"Builder\",\n      action: `DeleteSprite`,\n      label: \"Property\"\n    });\n    const {selectedObject } = this.props;\n    const name = selectedObject.name;\n\n    showPopUp(\n      <PopUp.TwoButton\n        confirmAction={() => {\n          const { selectedSceneId, sprites, spriteIds } = this.props;\n          let index = spriteIds.findIndex(key => key === name);\n          index = index > 0 ? index - 1 : 1;\n          const nextSelectedName = spriteIds[index];\n          const nextSprite = sprites[nextSelectedName];\n\n          this.props.removeSprite(selectedSceneId, name);\n          this.handleSelectSprite(nextSelectedName, nextSprite.type);\n        }}\n        intl={this.props.intl}\n        titleId={\"ID_BUILDER_ALERT_MSG_REMOVE_QUESTION\"}\n        titleValue={{ spriteName: selectedObject.name }}\n        subtitleId=\"ID_BUILDER_ALERT_MSG_REMOVE_QUESTION_SUBTITLE\"\n        confirmButtonNameId=\"ID_BUILDER_ALERT_MSG_REMOVE_SPRITE_CONFIRM\"\n        cancelButtonNameId=\"ID_BUILDER_ALERT_MSG_REMOVE_SCENE_CANCEL\"\n      />\n    );\n  };\n\n  handleSelectSprite = (name, type) => {\n    const { selectedSceneId, selectedObject } = this.props;\n    if (selectedObject.name !== name) {\n      this.props.selectSprite(selectedSceneId, name, type);\n    }\n  };\n\n  handleCopySprite = e => {\n    e.preventDefault();\n    TrackingUtil.sendGAEvent({\n      category: \"Builder\",\n      action: `PropertyActions`,\n      label: \"Copy\"\n    });\n    if (this.copyTimer) {\n      clearTimeout(this.copyTimer);\n    }\n    this.copyTimer = setTimeout(() => {\n      const { sprites, selectedObject, selectedSceneId } = this.props;\n      const sprite = sprites[selectedObject.name];\n      if (!sprite) return;\n\n      const assetId = sprite.assetId;\n      const type = sprite.type;\n      const code = sprite.code;\n\n      let preview = { ...sprite.preview };\n      preview.left += 12;\n      preview.top += 12;\n\n      let name;\n      if (type === SpriteType.TEXT) {\n        name = \"textbox\";\n      } else if (type === SpriteType.CUSTOM) {\n        name = \"custom\";\n      } else {\n        name = AssetLibrary.getAsset(assetId).defaultName;\n      }\n      name = this.countUpSameName(name, this.props.spriteIds);\n\n      const copyData = [{ assetId, name, type, preview, code }];\n      this.props.addSprites(selectedSceneId, copyData);\n\n      // const { formatMessage } = this.props.intl;\n      // const title = formatMessage({ id: \"ID_PROPERTY_COPIED\" });\n      // toast.info(title, {\n      //   position: toast.POSITION.BOTTOM_RIGHT\n      // });\n    }, 100);\n  };\n\n  countUpSameName = (defaultName, nameArray) => {\n    let max = nameArray.reduce((max, id) => {\n      let name = id.replace(/\\(\\d+\\)$/, \"\");\n      let num;\n      if (defaultName === name) {\n        num = id.replace(defaultName, \"\").replace(/\\(|\\)/g, \"\");\n        num = !!num ? Number(num) : 1;\n        return Math.max(max, num);\n      } else {\n        return max;\n      }\n    }, 0);\n    if (max > 0) {\n      return `${defaultName}(${max + 1})`;\n    } else {\n      return defaultName;\n    }\n  };\n\n  exportPreviewData = propertyData => {\n    const { selectedSceneId, selectedObject, setSpritePreview } = this.props;\n    const name = selectedObject.name;\n\n    if (propertyData.scale !== undefined) {\n      if (isNaN(propertyData.scale)) {\n        propertyData.scale = 0;\n      }\n      propertyData.scaleX = Number(propertyData.scale) * 0.01;\n      propertyData.scaleY = Number(propertyData.scale) * 0.01;\n    } else {\n      let propertyDataList = Object.entries(propertyData);\n      propertyDataList.forEach(([key, value]) => {\n        propertyData[key] = Number(value);\n      });\n    }\n    setSpritePreview(selectedSceneId, name, propertyData);\n  };\n\n  render() {\n    const {\n      isOn,\n      sprites,\n      selectedObject,\n      handleSelectTab,\n      handleChangeZIndex,\n      zIndex\n    } = this.props;\n    const {\n      handleOnChange,\n      handleVisibleToggle,\n      handleLockToggle,\n      handleCopySprite,\n      handleRemoveSprite\n    } = this;\n    let type, sprite, spriteName;\n    let asset = {};\n    if (selectedObject.name) {\n      type = selectedObject.type;\n      sprite = sprites[selectedObject.name];\n      if (!sprite) {\n        return <div />;\n      }\n      spriteName = selectedObject.name;\n      if (type === SpriteType.TEXT) {\n        asset.thumb = AssetLibrary.textboxThumb;\n      } else {\n        asset = AssetLibrary.getAsset(sprite.assetId);\n      }\n    }\n\n    if (!isOn) {\n      return <div />;\n    }\n    return (\n      <RndWrapper\n        id=\"property\"\n        style={{ zIndex }}\n        defaultX={500} //temp\n        // defaultX={document.body.clientWidth - 365}\n        defaultY={16}\n        enableResizing={false}\n      >\n        <View\n          type={type}\n          asset={asset}\n          sprite={sprite}\n          spriteName={spriteName}\n          handleSelectTab={handleSelectTab}\n          handleChangeZIndex={handleChangeZIndex}\n          handleOnChange={handleOnChange}\n          handleVisibleToggle={handleVisibleToggle}\n          handleLockToggle={handleLockToggle}\n          handleCopySprite={handleCopySprite}\n          handleRemoveSprite={handleRemoveSprite}\n          zIndex={zIndex}\n        />\n      </RndWrapper>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    sprites: state.scene.scenes[state.interaction.selected.scene].sprites,\n    spriteIds: state.scene.scenes[state.interaction.selected.scene].spriteIds,\n    selectedObject:\n      state.interaction.selected.objects[state.interaction.selected.scene],\n    selectedSceneId: state.interaction.selected.scene\n  }),\n  {\n    setSpritePreview: sceneActions.setSpritePreview,\n    lockSprite: sceneActions.lockSprite,\n    addSprites: sceneActions.addSprites,\n    removeSprite: sceneActions.removeSprite,\n    selectSprite: interactionActions.selectSprite\n  }\n)(Container);\n"]},"metadata":{},"sourceType":"module"}