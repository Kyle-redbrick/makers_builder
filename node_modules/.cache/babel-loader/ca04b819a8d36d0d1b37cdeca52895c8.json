{"ast":null,"code":"import _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/QnA/Component/QuestionWriter/index.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport { injectIntl } from \"react-intl\";\nimport CodeWriter from \"../CodeWriter\";\nimport PopUp, { showPopUp } from \"../../../../../../Common/Component/PopUp\";\nimport * as request from \"../../../../../../Common/Util/HTTPRequest\";\nimport checkImg from \"../../../../../../Image/checkbox-on-btn.svg\";\nimport \"./index.scss\";\n\nvar QuestionWriter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuestionWriter, _Component);\n\n  function QuestionWriter(props) {\n    var _this;\n\n    _classCallCheck(this, QuestionWriter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuestionWriter).call(this, props));\n\n    _this.toggleOpt = function (opt) {\n      if (opt === \"code\") {\n        _this.setState({\n          isCodeOpen: !_this.state.isCodeOpen\n        });\n      } else if (opt === \"project\") {\n        _this.setState({\n          isProjectOpen: !_this.state.isProjectOpen\n        });\n      }\n    };\n\n    _this.showAlert = function (titleId) {\n      showPopUp(React.createElement(PopUp.OneButton, {\n        title: _this.props.intl.formatMessage({\n          id: titleId\n        }),\n        buttonName: _this.props.intl.formatMessage({\n          id: \"ID_SPAM_POPUP_CONFIRM\"\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }), {\n        darkmode: true,\n        dismissButton: false,\n        dismissOverlay: true\n      });\n    };\n\n    _this.onCodeChanged = function (code) {\n      _this.setState({\n        code: code\n      });\n    };\n\n    _this.onContentChanged = function (e) {\n      _this.setState({\n        content: e.target.value\n      });\n    };\n\n    _this.onTitleChanged = function (e) {\n      _this.setState({\n        title: e.target.value\n      });\n    };\n\n    _this.onClickCreate = function () {\n      if (!_this.props.userId) return;\n      var _this$state = _this.state,\n          isCodeOpen = _this$state.isCodeOpen,\n          isProjectOpen = _this$state.isProjectOpen,\n          code = _this$state.code,\n          content = _this$state.content,\n          title = _this$state.title;\n\n      if (!title || title.length < 2 || !content || content.length < 2) {\n        _this.showAlert(\"ID_QNA_WRITE_ALERT\");\n\n        return;\n      }\n\n      var pId = isProjectOpen ? _this.props.pId : null;\n      var params = {\n        userId: _this.props.userId,\n        title: title,\n        content: content,\n        code: isCodeOpen ? code : null,\n        pId: pId\n      };\n      request.postBuilderQuestion(params).then(function (res) {\n        return res.json();\n      }).then(function () {\n        _this.showAlert(\"ID_QNA_WRITE_SUCCESS\");\n\n        _this.props.onSuccessWrite();\n      }).catch(function (e) {\n        return console.error(e);\n      });\n    };\n\n    _this.state = {\n      isCodeOpen: false,\n      isProjectOpen: false,\n      code: props.intl.formatMessage({\n        id: \"ID_QNA_ACE_PLACEHOLDER\"\n      }),\n      content: \"\",\n      title: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(QuestionWriter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          isCodeOpen = _this$state2.isCodeOpen,\n          isProjectOpen = _this$state2.isProjectOpen,\n          code = _this$state2.code,\n          content = _this$state2.content,\n          title = _this$state2.title;\n      var toggleOpt = this.toggleOpt,\n          onClickCreate = this.onClickCreate,\n          onContentChanged = this.onContentChanged,\n          onCodeChanged = this.onCodeChanged,\n          onTitleChanged = this.onTitleChanged;\n      var _this$props = this.props,\n          intl = _this$props.intl,\n          onClickWriterBack = _this$props.onClickWriterBack;\n      return React.createElement(\"div\", {\n        className: \"QuestionWriter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"QuestionWriterBack\",\n        onClick: onClickWriterBack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"ID_QNA_MODE_PREV\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"QuestionWriterDesc\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"ID_QNA_WRITE_QUESTION_DESC\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(FormattedMessage, {\n        id: \"ID_QNA_WRITE_QUESTION_OPT2_DESC\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"QuestionWriterTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        onChange: onTitleChanged,\n        className: \"QuestionWriterTitleInput\",\n        placeholder: intl.formatMessage({\n          id: \"ID_QNA_TITLE_PLACEHOLDER\"\n        }),\n        value: title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"QuestionWriterOpts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"QuestionWriterOpt \".concat(isCodeOpen && \"QuestionWriterOptActive\"),\n        onClick: function onClick() {\n          return toggleOpt(\"code\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"QuestionWriterOptChkHolder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: checkImg,\n        alt: \"checkbx\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      })), React.createElement(FormattedMessage, {\n        id: \"ID_QNA_WRITE_QUESTION_OPT1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"QuestionWriterOpt \".concat(isProjectOpen && \"QuestionWriterOptActive\"),\n        onClick: function onClick() {\n          return toggleOpt(\"project\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"QuestionWriterOptChkHolder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: checkImg,\n        alt: \"checkbx\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      })), React.createElement(FormattedMessage, {\n        id: \"ID_QNA_WRITE_QUESTION_OPT2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"QuestionWriterWriters\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        onChange: onContentChanged,\n        className: \"QuestionWriterInput\",\n        placeholder: intl.formatMessage({\n          id: \"ID_QNA_TEXTAREA_PLACEHOLDER\"\n        }),\n        value: content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }), isCodeOpen && React.createElement(\"div\", {\n        className: \"QuestionWriterCodeWriter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(CodeWriter, {\n        code: code,\n        onChange: onCodeChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"QuestionWriterCreate\",\n        onClick: onClickCreate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"ID_QNA_WRITE_QUESTION_ADD\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return QuestionWriter;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    userId: state.userinfo.id,\n    pId: state.project.pId\n  };\n}, {})(injectIntl(QuestionWriter));","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/QnA/Component/QuestionWriter/index.js"],"names":["React","Component","connect","FormattedMessage","injectIntl","CodeWriter","PopUp","showPopUp","request","QuestionWriter","props","toggleOpt","opt","setState","isCodeOpen","state","isProjectOpen","showAlert","titleId","intl","formatMessage","id","darkmode","dismissButton","dismissOverlay","onCodeChanged","code","onContentChanged","e","content","target","value","onTitleChanged","title","onClickCreate","userId","length","pId","params","postBuilderQuestion","then","res","json","onSuccessWrite","catch","console","error","onClickWriterBack","checkImg","userinfo","project"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport { injectIntl } from \"react-intl\";\nimport CodeWriter from \"../CodeWriter\";\nimport PopUp, { showPopUp } from \"../../../../../../Common/Component/PopUp\";\nimport * as request from \"../../../../../../Common/Util/HTTPRequest\";\nimport checkImg from \"../../../../../../Image/checkbox-on-btn.svg\";\nimport \"./index.scss\";\n\nclass QuestionWriter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isCodeOpen: false,\n      isProjectOpen: false,\n      code: props.intl.formatMessage({ id: \"ID_QNA_ACE_PLACEHOLDER\" }),\n      content: \"\",\n      title: \"\"\n    };\n  }\n  componentDidMount() {}\n\n  toggleOpt = opt => {\n    if (opt === \"code\") {\n      this.setState({ isCodeOpen: !this.state.isCodeOpen });\n    } else if (opt === \"project\") {\n      this.setState({ isProjectOpen: !this.state.isProjectOpen });\n    }\n  };\n\n  showAlert = titleId => {\n    showPopUp(\n      <PopUp.OneButton\n        title={this.props.intl.formatMessage({ id: titleId })}\n        buttonName={this.props.intl.formatMessage({\n          id: \"ID_SPAM_POPUP_CONFIRM\"\n        })}\n      />,\n      {\n        darkmode: true,\n        dismissButton: false,\n        dismissOverlay: true\n      }\n    );\n  };\n\n  onCodeChanged = code => {\n    this.setState({ code });\n  };\n\n  onContentChanged = e => {\n    this.setState({ content: e.target.value });\n  };\n\n  onTitleChanged = e => {\n    this.setState({ title: e.target.value });\n  };\n\n  onClickCreate = () => {\n    if (!this.props.userId) return;\n\n    const { isCodeOpen, isProjectOpen, code, content, title } = this.state;\n\n    if (!title || title.length < 2 || !content || content.length < 2) {\n      this.showAlert(\"ID_QNA_WRITE_ALERT\");\n      return;\n    }\n\n    const pId = isProjectOpen ? this.props.pId : null;\n\n    const params = {\n      userId: this.props.userId,\n      title,\n      content,\n      code: isCodeOpen ? code : null,\n      pId\n    };\n\n    request\n      .postBuilderQuestion(params)\n      .then(res => res.json())\n      .then(() => {\n        this.showAlert(\"ID_QNA_WRITE_SUCCESS\");\n        this.props.onSuccessWrite();\n      })\n      .catch(e => console.error(e));\n  };\n\n  render() {\n    const { isCodeOpen, isProjectOpen, code, content, title } = this.state;\n    const {\n      toggleOpt,\n      onClickCreate,\n      onContentChanged,\n      onCodeChanged,\n      onTitleChanged\n    } = this;\n    const { intl, onClickWriterBack } = this.props;\n    return (\n      <div className=\"QuestionWriter\">\n        <div className=\"QuestionWriterBack\" onClick={onClickWriterBack}>\n          <FormattedMessage id=\"ID_QNA_MODE_PREV\" />\n        </div>\n        {/* <div className=\"QuestionWriterTitle\">\n          <FormattedMessage id=\"ID_QNA_WRITE_QUESTION_TITLE\" />\n        </div> */}\n        <div className=\"QuestionWriterDesc\">\n          <FormattedMessage id=\"ID_QNA_WRITE_QUESTION_DESC\" />\n          <br />\n          <FormattedMessage id=\"ID_QNA_WRITE_QUESTION_OPT2_DESC\" />\n        </div>\n        <div className=\"QuestionWriterTitle\">\n          <input\n            onChange={onTitleChanged}\n            className=\"QuestionWriterTitleInput\"\n            placeholder={intl.formatMessage({\n              id: \"ID_QNA_TITLE_PLACEHOLDER\"\n            })}\n            value={title}\n          />\n        </div>\n        <div className=\"QuestionWriterOpts\">\n          <div\n            className={`QuestionWriterOpt ${isCodeOpen &&\n              \"QuestionWriterOptActive\"}`}\n            onClick={() => toggleOpt(\"code\")}\n          >\n            <div className=\"QuestionWriterOptChkHolder\">\n              <img src={checkImg} alt=\"checkbx\" />\n            </div>\n            <FormattedMessage id=\"ID_QNA_WRITE_QUESTION_OPT1\" />\n          </div>\n          <div\n            className={`QuestionWriterOpt ${isProjectOpen &&\n              \"QuestionWriterOptActive\"}`}\n            onClick={() => toggleOpt(\"project\")}\n          >\n            <div className=\"QuestionWriterOptChkHolder\">\n              <img src={checkImg} alt=\"checkbx\" />\n            </div>\n            <FormattedMessage id=\"ID_QNA_WRITE_QUESTION_OPT2\" />\n          </div>\n        </div>\n        <div className=\"QuestionWriterWriters\">\n          <textarea\n            onChange={onContentChanged}\n            className=\"QuestionWriterInput\"\n            placeholder={intl.formatMessage({\n              id: \"ID_QNA_TEXTAREA_PLACEHOLDER\"\n            })}\n            value={content}\n          />\n\n          {isCodeOpen && (\n            <div className=\"QuestionWriterCodeWriter\">\n              <CodeWriter code={code} onChange={onCodeChanged} />\n            </div>\n          )}\n        </div>\n        <div className=\"QuestionWriterCreate\" onClick={onClickCreate}>\n          <FormattedMessage id=\"ID_QNA_WRITE_QUESTION_ADD\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  state => ({ userId: state.userinfo.id, pId: state.project.pId }),\n  {}\n)(injectIntl(QuestionWriter));\n"]},"metadata":{},"sourceType":"module"}