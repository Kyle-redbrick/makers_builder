{"ast":null,"code":"import _objectSpread from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/astroboy/src/Page/Builder3D/Component/Inspector/Container.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as gameActions from \"../../Store/Reducer/game\";\nimport * as builderActions from \"../../Store/Reducer/builder\";\nimport * as interactionActions from \"../../Store/Reducer/interaction\";\nimport { createDefaultGameObjId } from \"../../Util/NameApis\";\nimport View from \"./View\";\nvar _window$BabylonConsta = window.BabylonConstant,\n    GAMEOBJECT = _window$BabylonConsta.GAMEOBJECT,\n    PROPERTY_ID = _window$BabylonConsta.PROPERTY_ID;\n\nvar Container = /*#__PURE__*/function (_Component) {\n  _inherits(Container, _Component);\n\n  var _super = _createSuper(Container);\n\n  function Container() {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.onChangeProperty = function (id, value) {\n      switch (id) {\n        case \"positionX\":\n          _this.onChangePropertyWithAxis(PROPERTY_ID.POSITION, \"x\", value);\n\n          break;\n\n        case \"positionY\":\n          _this.onChangePropertyWithAxis(PROPERTY_ID.POSITION, \"y\", value);\n\n          break;\n\n        case \"positionZ\":\n          _this.onChangePropertyWithAxis(PROPERTY_ID.POSITION, \"z\", value);\n\n          break;\n\n        case \"rotationX\":\n          _this.onChangePropertyWithAxis(PROPERTY_ID.ROTATION, \"x\", value);\n\n          break;\n\n        case \"rotationY\":\n          _this.onChangePropertyWithAxis(PROPERTY_ID.ROTATION, \"y\", value);\n\n          break;\n\n        case \"rotationZ\":\n          _this.onChangePropertyWithAxis(PROPERTY_ID.ROTATION, \"z\", value);\n\n          break;\n\n        case \"scaleX\":\n          _this.onChangePropertyWithAxis(PROPERTY_ID.SCALE, \"x\", value);\n\n          break;\n\n        case \"scaleY\":\n          _this.onChangePropertyWithAxis(PROPERTY_ID.SCALE, \"y\", value);\n\n          break;\n\n        case \"scaleZ\":\n          _this.onChangePropertyWithAxis(PROPERTY_ID.SCALE, \"z\", value);\n\n          break;\n\n        case \"directionX\":\n          _this.onChangePropertyWithAxis(PROPERTY_ID.DIRECTION, \"x\", value);\n\n          break;\n\n        case \"directionY\":\n          _this.onChangePropertyWithAxis(PROPERTY_ID.DIRECTION, \"y\", value);\n\n          break;\n\n        case \"directionZ\":\n          _this.onChangePropertyWithAxis(PROPERTY_ID.DIRECTION, \"z\", value);\n\n          break;\n\n        case \"isActiveCamera\":\n          _this.onChangeIsActiveCamera(value);\n\n          break;\n\n        default:\n          _this.onChangePlainProperty(id, value);\n\n          break;\n      }\n    };\n\n    _this.onBlurProperty = function (id, value) {\n      var parsedValue = value;\n\n      switch (id) {\n        case \"text\":\n          break;\n\n        case \"size\":\n        case \"width\":\n        case \"height\":\n          parsedValue = parseFloat(parseFloat(value).toFixed(0)) || 0;\n          break;\n\n        default:\n          parsedValue = parseFloat(parseFloat(value).toFixed(5)) || 0;\n          break;\n      }\n\n      _this.onChangeProperty(id, parsedValue);\n    };\n\n    _this.onClickCode = function (object) {\n      var _this$props = _this.props,\n          currentSceneId = _this$props.currentSceneId,\n          currentObjectId = _this$props.currentObjectId,\n          selectGameObject = _this$props.selectGameObject,\n          setIsEditorOn = _this$props.setIsEditorOn;\n      var gameObjId = object.id;\n\n      if (gameObjId !== currentObjectId) {\n        selectGameObject(currentSceneId, gameObjId);\n      }\n\n      setIsEditorOn(true);\n    };\n\n    _this.onClickCopy = function () {\n      var _this$props2 = _this.props,\n          currentSceneId = _this$props2.currentSceneId,\n          currentGameObjects = _this$props2.currentGameObjects,\n          currentGameObject = _this$props2.currentGameObject,\n          addGameObject = _this$props2.addGameObject;\n\n      var copiedGameObjAndChildren = _this.getCopiedGameObjectAndChildren(currentGameObject, currentGameObjects);\n\n      var copiedGameObj = copiedGameObjAndChildren[0];\n\n      _this.transformGameObjectLittle(copiedGameObj);\n\n      copiedGameObjAndChildren.forEach(function (gameObj) {\n        addGameObject(currentSceneId, gameObj);\n      });\n    };\n\n    _this.onClickRemove = function (object) {\n      var gameObjIdsToRemove = [];\n\n      _this.traverse(object, function (node) {\n        gameObjIdsToRemove.push(node.id);\n      });\n\n      var _this$props3 = _this.props,\n          currentSceneId = _this$props3.currentSceneId,\n          removeGameObjects = _this$props3.removeGameObjects,\n          selectGameObject = _this$props3.selectGameObject;\n      selectGameObject(currentSceneId, null);\n      removeGameObjects(currentSceneId, gameObjIdsToRemove);\n    };\n\n    _this.traverse = function (node, func) {\n      if (!node) {\n        return;\n      }\n\n      if (Array.isArray(node)) {\n        node.forEach(function (_node) {\n          _this.traverse(_node, func);\n        });\n      } else {\n        if (func) {\n          func(node);\n        }\n\n        _this.traverse(node.children, func);\n      }\n    };\n\n    _this.onClickLock = function () {\n      var currentGameObject = _this.props.currentGameObject;\n      var isLocked = !currentGameObject.isLocked;\n\n      _this.onChangePlainProperty(PROPERTY_ID.LOCK, isLocked);\n    };\n\n    _this.onBlurNameInput = function (gameObj, input) {\n      var gameObjName = input.value.trim();\n\n      if (_this.checkGameObjectNameValid(gameObjName)) {\n        _this.onChangePlainProperty(PROPERTY_ID.NAME, gameObjName);\n\n        input.value = gameObjName;\n      } else {\n        input.value = gameObj.name;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.currentSceneId !== this.props.currentSceneId) {\n        this.onChangeCurrentScene();\n      }\n\n      if (prevProps.currentGameObjectId !== this.props.currentGameObjectId) {\n        this.onChangeCurrentGameObject();\n      }\n    }\n  }, {\n    key: \"onChangeCurrentScene\",\n    value: function onChangeCurrentScene() {\n      this.updateNameInputManually();\n    }\n  }, {\n    key: \"onChangeCurrentGameObject\",\n    value: function onChangeCurrentGameObject() {\n      this.updateNameInputManually();\n    }\n  }, {\n    key: \"updateNameInputManually\",\n    value: function updateNameInputManually() {\n      var nameInput = document.getElementById(\"inspector_info_nameInput\");\n\n      if (nameInput) {\n        nameInput.value = this.props.currentGameObject.name;\n      }\n    }\n  }, {\n    key: \"onChangePlainProperty\",\n    value: function onChangePlainProperty(propertyId, value) {\n      var _this$props4 = this.props,\n          currentSceneId = _this$props4.currentSceneId,\n          currentGameObject = _this$props4.currentGameObject,\n          updateGameObjectProperty = _this$props4.updateGameObjectProperty;\n      updateGameObjectProperty(currentSceneId, currentGameObject.id, propertyId, value);\n    }\n  }, {\n    key: \"onChangePropertyWithAxis\",\n    value: function onChangePropertyWithAxis(propertyId, axis, value) {\n      var _this$props5 = this.props,\n          currentSceneId = _this$props5.currentSceneId,\n          currentGameObject = _this$props5.currentGameObject,\n          updateGameObjectProperty = _this$props5.updateGameObjectProperty;\n\n      var propertyValue = _objectSpread({}, currentGameObject[propertyId]);\n\n      propertyValue[axis] = value;\n      updateGameObjectProperty(currentSceneId, currentGameObject.id, propertyId, propertyValue);\n    }\n  }, {\n    key: \"onChangeIsActiveCamera\",\n    value: function onChangeIsActiveCamera(isActiveCamera) {\n      var _this$props6 = this.props,\n          currentSceneId = _this$props6.currentSceneId,\n          currentGameObjectId = _this$props6.currentGameObjectId,\n          currentGameObjects = _this$props6.currentGameObjects,\n          updateGameObjectProperty = _this$props6.updateGameObjectProperty;\n\n      if (isActiveCamera) {\n        Object.keys(currentGameObjects).filter(function (gameObjId) {\n          return gameObjId !== currentGameObjectId;\n        }).filter(function (gameObjId) {\n          return currentGameObjects[gameObjId].type === GAMEOBJECT.CAMERA;\n        }).forEach(function (gameObjId) {\n          updateGameObjectProperty(currentSceneId, gameObjId, PROPERTY_ID.IS_ACTIVE_CAMERA, false);\n        });\n      }\n\n      updateGameObjectProperty(currentSceneId, currentGameObjectId, PROPERTY_ID.IS_ACTIVE_CAMERA, isActiveCamera);\n    }\n  }, {\n    key: \"getCopiedGameObjectAndChildren\",\n    value: function getCopiedGameObjectAndChildren(gameObj, gameObjs) {\n      var copiedGameObjAndChildren = [];\n      var gameObjIds = Object.keys(gameObjs).map(function (gameObjId) {\n        return gameObjs[gameObjId].id;\n      });\n\n      var traverse = function traverse(gameObj, parentGameObj, gameObjs) {\n        var copiedGameObj = JSON.parse(JSON.stringify(gameObj));\n        var copiedGameObjId = createDefaultGameObjId(gameObjIds, copiedGameObj.type);\n        copiedGameObj.id = copiedGameObjId;\n        copiedGameObjAndChildren.push(copiedGameObj);\n        gameObjIds.push(copiedGameObjId);\n\n        if (parentGameObj) {\n          copiedGameObj.parentId = parentGameObj.id;\n        }\n\n        for (var i in gameObjs) {\n          if (gameObjs[i].parentId === gameObj.id) {\n            traverse(gameObjs[i], copiedGameObj, gameObjs);\n          }\n        }\n      };\n\n      traverse(gameObj, null, gameObjs);\n      return copiedGameObjAndChildren;\n    }\n  }, {\n    key: \"transformGameObjectLittle\",\n    value: function transformGameObjectLittle(gameObject) {\n      if (gameObject.position) {\n        if (!isNaN(gameObject.position.x)) {\n          gameObject.position.x += 0.1;\n        }\n\n        if (!isNaN(gameObject.position.y)) {\n          gameObject.position.y += 0.1;\n        }\n\n        if (!isNaN(gameObject.position.z)) {\n          gameObject.position.z += 0.1;\n        }\n      }\n    }\n  }, {\n    key: \"checkGameObjectNameValid\",\n    value: function checkGameObjectNameValid(name) {\n      if (!name || name === \"\") {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props7 = this.props,\n          currentGameObjectIds = _this$props7.currentGameObjectIds,\n          currentGameObjects = _this$props7.currentGameObjects,\n          currentGameObjectId = _this$props7.currentGameObjectId,\n          currentGameObject = _this$props7.currentGameObject;\n      return React.createElement(View, {\n        gameObjectIds: currentGameObjectIds,\n        gameObjects: currentGameObjects,\n        gameObjectId: currentGameObjectId,\n        gameObject: currentGameObject,\n        onChangeProperty: this.onChangeProperty,\n        onBlurProperty: this.onBlurProperty,\n        onClickCode: this.onClickCode,\n        onClickCopy: this.onClickCopy,\n        onClickRemove: this.onClickRemove,\n        onClickLock: this.onClickLock,\n        onBlurNameInput: this.onBlurNameInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport default connect(function (state) {\n  var scenes = state.game.scenes;\n  var currentSceneId = state.interaction.currentSceneId;\n  var currentScene = currentSceneId && scenes[currentSceneId];\n  var currentGameObjectIds = currentScene ? currentScene.gameObjectIds : [];\n  var currentGameObjects = currentScene ? currentScene.gameObjects : {};\n  var currentGameObjectId = state.interaction.currentGameObjectIds[currentSceneId];\n  var currentGameObject = currentScene && currentScene.gameObjects[currentGameObjectId];\n  return {\n    scenes: scenes,\n    currentSceneId: currentSceneId,\n    currentGameObjectIds: currentGameObjectIds,\n    currentGameObjects: currentGameObjects,\n    currentGameObjectId: currentGameObjectId,\n    currentGameObject: currentGameObject\n  };\n}, {\n  addGameObject: gameActions.addGameObject,\n  updateGameObjectProperty: gameActions.updateGameObjectProperty,\n  removeGameObjects: gameActions.removeGameObjects,\n  selectGameObject: interactionActions.selectGameObject,\n  setIsEditorOn: builderActions.setIsEditorOn\n})(Container);","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/astroboy/src/Page/Builder3D/Component/Inspector/Container.js"],"names":["React","Component","connect","gameActions","builderActions","interactionActions","createDefaultGameObjId","View","window","BabylonConstant","GAMEOBJECT","PROPERTY_ID","Container","onChangeProperty","id","value","onChangePropertyWithAxis","POSITION","ROTATION","SCALE","DIRECTION","onChangeIsActiveCamera","onChangePlainProperty","onBlurProperty","parsedValue","parseFloat","toFixed","onClickCode","object","props","currentSceneId","currentObjectId","selectGameObject","setIsEditorOn","gameObjId","onClickCopy","currentGameObjects","currentGameObject","addGameObject","copiedGameObjAndChildren","getCopiedGameObjectAndChildren","copiedGameObj","transformGameObjectLittle","forEach","gameObj","onClickRemove","gameObjIdsToRemove","traverse","node","push","removeGameObjects","func","Array","isArray","_node","children","onClickLock","isLocked","LOCK","onBlurNameInput","input","gameObjName","trim","checkGameObjectNameValid","NAME","name","prevProps","onChangeCurrentScene","currentGameObjectId","onChangeCurrentGameObject","updateNameInputManually","nameInput","document","getElementById","propertyId","updateGameObjectProperty","axis","propertyValue","isActiveCamera","Object","keys","filter","type","CAMERA","IS_ACTIVE_CAMERA","gameObjs","gameObjIds","map","parentGameObj","JSON","parse","stringify","copiedGameObjId","parentId","i","gameObject","position","isNaN","x","y","z","currentGameObjectIds","state","scenes","game","interaction","currentScene","gameObjectIds","gameObjects"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as gameActions from \"../../Store/Reducer/game\";\nimport * as builderActions from \"../../Store/Reducer/builder\";\nimport * as interactionActions from \"../../Store/Reducer/interaction\";\nimport { createDefaultGameObjId } from \"../../Util/NameApis\";\nimport View from \"./View\";\n\nconst { GAMEOBJECT, PROPERTY_ID } = window.BabylonConstant;\n\nclass Container extends Component {\n  componentDidUpdate(prevProps) {\n    if (prevProps.currentSceneId !== this.props.currentSceneId) {\n      this.onChangeCurrentScene();\n    }\n    if (prevProps.currentGameObjectId !== this.props.currentGameObjectId) {\n      this.onChangeCurrentGameObject();\n    }\n  }\n  onChangeCurrentScene() {\n    this.updateNameInputManually();\n  }\n  onChangeCurrentGameObject() {\n    this.updateNameInputManually();\n  }\n  updateNameInputManually() {\n    const nameInput = document.getElementById(\"inspector_info_nameInput\");\n    if (nameInput) {\n      nameInput.value = this.props.currentGameObject.name;\n    }\n  }\n\n  onChangeProperty = (id, value) => {\n    switch (id) {\n      case \"positionX\":\n        this.onChangePropertyWithAxis(PROPERTY_ID.POSITION, \"x\", value);\n        break;\n      case \"positionY\":\n        this.onChangePropertyWithAxis(PROPERTY_ID.POSITION, \"y\", value);\n        break;\n      case \"positionZ\":\n        this.onChangePropertyWithAxis(PROPERTY_ID.POSITION, \"z\", value);\n        break;\n      case \"rotationX\":\n        this.onChangePropertyWithAxis(PROPERTY_ID.ROTATION, \"x\", value);\n        break;\n      case \"rotationY\":\n        this.onChangePropertyWithAxis(PROPERTY_ID.ROTATION, \"y\", value);\n        break;\n      case \"rotationZ\":\n        this.onChangePropertyWithAxis(PROPERTY_ID.ROTATION, \"z\", value);\n        break;\n      case \"scaleX\":\n        this.onChangePropertyWithAxis(PROPERTY_ID.SCALE, \"x\", value);\n        break;\n      case \"scaleY\":\n        this.onChangePropertyWithAxis(PROPERTY_ID.SCALE, \"y\", value);\n        break;\n      case \"scaleZ\":\n        this.onChangePropertyWithAxis(PROPERTY_ID.SCALE, \"z\", value);\n        break;\n      case \"directionX\":\n        this.onChangePropertyWithAxis(PROPERTY_ID.DIRECTION, \"x\", value);\n        break;\n      case \"directionY\":\n        this.onChangePropertyWithAxis(PROPERTY_ID.DIRECTION, \"y\", value);\n        break;\n      case \"directionZ\":\n        this.onChangePropertyWithAxis(PROPERTY_ID.DIRECTION, \"z\", value);\n        break;\n      case \"isActiveCamera\":\n        this.onChangeIsActiveCamera(value);\n        break;\n      default:\n        this.onChangePlainProperty(id, value);\n        break;\n    }\n  };\n  onBlurProperty = (id, value) => {\n    let parsedValue = value;\n    switch (id) {\n      case \"text\":\n        break;\n      case \"size\":\n      case \"width\":\n      case \"height\":\n        parsedValue = parseFloat(parseFloat(value).toFixed(0)) || 0;\n        break;\n      default:\n        parsedValue = parseFloat(parseFloat(value).toFixed(5)) || 0;\n        break;\n    }\n    this.onChangeProperty(id, parsedValue);\n  };\n  onChangePlainProperty(propertyId, value) {\n    const {\n      currentSceneId,\n      currentGameObject,\n      updateGameObjectProperty\n    } = this.props;\n    updateGameObjectProperty(\n      currentSceneId,\n      currentGameObject.id,\n      propertyId,\n      value\n    );\n  }\n  onChangePropertyWithAxis(propertyId, axis, value) {\n    const {\n      currentSceneId,\n      currentGameObject,\n      updateGameObjectProperty\n    } = this.props;\n    const propertyValue = { ...currentGameObject[propertyId] };\n    propertyValue[axis] = value;\n    updateGameObjectProperty(\n      currentSceneId,\n      currentGameObject.id,\n      propertyId,\n      propertyValue\n    );\n  }\n  onChangeIsActiveCamera(isActiveCamera) {\n    const {\n      currentSceneId,\n      currentGameObjectId,\n      currentGameObjects,\n      updateGameObjectProperty\n    } = this.props;\n\n    if (isActiveCamera) {\n      Object.keys(currentGameObjects)\n        .filter(gameObjId => gameObjId !== currentGameObjectId)\n        .filter(\n          gameObjId => currentGameObjects[gameObjId].type === GAMEOBJECT.CAMERA\n        )\n        .forEach(gameObjId => {\n          updateGameObjectProperty(\n            currentSceneId,\n            gameObjId,\n            PROPERTY_ID.IS_ACTIVE_CAMERA,\n            false\n          );\n        });\n    }\n\n    updateGameObjectProperty(\n      currentSceneId,\n      currentGameObjectId,\n      PROPERTY_ID.IS_ACTIVE_CAMERA,\n      isActiveCamera\n    );\n  }\n\n  onClickCode = object => {\n    const {\n      currentSceneId,\n      currentObjectId,\n      selectGameObject,\n      setIsEditorOn\n    } = this.props;\n    const gameObjId = object.id;\n    if (gameObjId !== currentObjectId) {\n      selectGameObject(currentSceneId, gameObjId);\n    }\n    setIsEditorOn(true);\n  };\n\n  onClickCopy = () => {\n    const {\n      currentSceneId,\n      currentGameObjects,\n      currentGameObject,\n      addGameObject\n    } = this.props;\n\n    const copiedGameObjAndChildren = this.getCopiedGameObjectAndChildren(\n      currentGameObject,\n      currentGameObjects\n    );\n\n    const copiedGameObj = copiedGameObjAndChildren[0];\n    this.transformGameObjectLittle(copiedGameObj);\n\n    copiedGameObjAndChildren.forEach(gameObj => {\n      addGameObject(currentSceneId, gameObj);\n    });\n  };\n  getCopiedGameObjectAndChildren(gameObj, gameObjs) {\n    const copiedGameObjAndChildren = [];\n\n    const gameObjIds = Object.keys(gameObjs).map(\n      gameObjId => gameObjs[gameObjId].id\n    );\n\n    const traverse = (gameObj, parentGameObj, gameObjs) => {\n      const copiedGameObj = JSON.parse(JSON.stringify(gameObj));\n      const copiedGameObjId = createDefaultGameObjId(\n        gameObjIds,\n        copiedGameObj.type\n      );\n      copiedGameObj.id = copiedGameObjId;\n      copiedGameObjAndChildren.push(copiedGameObj);\n\n      gameObjIds.push(copiedGameObjId);\n\n      if (parentGameObj) {\n        copiedGameObj.parentId = parentGameObj.id;\n      }\n\n      for (let i in gameObjs) {\n        if (gameObjs[i].parentId === gameObj.id) {\n          traverse(gameObjs[i], copiedGameObj, gameObjs);\n        }\n      }\n    };\n\n    traverse(gameObj, null, gameObjs);\n    return copiedGameObjAndChildren;\n  }\n  transformGameObjectLittle(gameObject) {\n    if (gameObject.position) {\n      if (!isNaN(gameObject.position.x)) {\n        gameObject.position.x += 0.1;\n      }\n      if (!isNaN(gameObject.position.y)) {\n        gameObject.position.y += 0.1;\n      }\n      if (!isNaN(gameObject.position.z)) {\n        gameObject.position.z += 0.1;\n      }\n    }\n  }\n\n  onClickRemove = object => {\n    const gameObjIdsToRemove = [];\n    this.traverse(object, node => {\n      gameObjIdsToRemove.push(node.id);\n    });\n\n    const { currentSceneId, removeGameObjects, selectGameObject } = this.props;\n    selectGameObject(currentSceneId, null);\n    removeGameObjects(currentSceneId, gameObjIdsToRemove);\n  };\n\n  traverse = (node, func) => {\n    if (!node) {\n      return;\n    }\n    if (Array.isArray(node)) {\n      node.forEach(_node => {\n        this.traverse(_node, func);\n      });\n    } else {\n      if (func) {\n        func(node);\n      }\n      this.traverse(node.children, func);\n    }\n  };\n\n  onClickLock = () => {\n    const { currentGameObject } = this.props;\n    const isLocked = !currentGameObject.isLocked;\n    this.onChangePlainProperty(PROPERTY_ID.LOCK, isLocked);\n  };\n\n  onBlurNameInput = (gameObj, input) => {\n    const gameObjName = input.value.trim();\n    if (this.checkGameObjectNameValid(gameObjName)) {\n      this.onChangePlainProperty(PROPERTY_ID.NAME, gameObjName);\n      input.value = gameObjName;\n    } else {\n      input.value = gameObj.name;\n    }\n  };\n  checkGameObjectNameValid(name) {\n    if (!name || name === \"\") {\n      return false;\n    }\n    return true;\n  }\n\n  render() {\n    const {\n      currentGameObjectIds,\n      currentGameObjects,\n      currentGameObjectId,\n      currentGameObject\n    } = this.props;\n    return (\n      <View\n        gameObjectIds={currentGameObjectIds}\n        gameObjects={currentGameObjects}\n        gameObjectId={currentGameObjectId}\n        gameObject={currentGameObject}\n        onChangeProperty={this.onChangeProperty}\n        onBlurProperty={this.onBlurProperty}\n        onClickCode={this.onClickCode}\n        onClickCopy={this.onClickCopy}\n        onClickRemove={this.onClickRemove}\n        onClickLock={this.onClickLock}\n        onBlurNameInput={this.onBlurNameInput}\n      />\n    );\n  }\n}\n\nexport default connect(\n  state => {\n    const { scenes } = state.game;\n    const { currentSceneId } = state.interaction;\n    const currentScene = currentSceneId && scenes[currentSceneId];\n    const currentGameObjectIds = currentScene ? currentScene.gameObjectIds : [];\n    const currentGameObjects = currentScene ? currentScene.gameObjects : {};\n    const currentGameObjectId =\n      state.interaction.currentGameObjectIds[currentSceneId];\n    const currentGameObject =\n      currentScene && currentScene.gameObjects[currentGameObjectId];\n    return {\n      scenes,\n      currentSceneId,\n      currentGameObjectIds,\n      currentGameObjects,\n      currentGameObjectId,\n      currentGameObject\n    };\n  },\n  {\n    addGameObject: gameActions.addGameObject,\n    updateGameObjectProperty: gameActions.updateGameObjectProperty,\n    removeGameObjects: gameActions.removeGameObjects,\n    selectGameObject: interactionActions.selectGameObject,\n    setIsEditorOn: builderActions.setIsEditorOn\n  }\n)(Container);\n"]},"metadata":{},"sourceType":"module"}