{"ast":null,"code":"import _classCallCheck from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport formattedMessages from \"./FormatMessages\";\n\nvar Localization = /*#__PURE__*/function () {\n  function Localization() {\n    var _this = this;\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Localization);\n\n    this.updateLocaleTo = function (locale) {\n      if (_this.checkLocaleAvailable(locale)) {\n        _this.locale = locale;\n      } else {\n        _this.locale = \"default\";\n      }\n    };\n\n    this.formatWithId = function (id) {\n      return _this.formatWith({\n        id: id\n      });\n    };\n\n    this.locale = undefined;\n    this.updateLocaleTo(props.locale);\n  }\n\n  _createClass(Localization, [{\n    key: \"checkLocaleAvailable\",\n    value: function checkLocaleAvailable(locale) {\n      var availableLocales = this.getAvailableLocales();\n      return availableLocales.includes(locale);\n    }\n  }, {\n    key: \"getAvailableLocales\",\n    value: function getAvailableLocales() {\n      return Object.keys(formattedMessages);\n    }\n  }, {\n    key: \"formatWith\",\n    value: function formatWith() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          id = _ref.id;\n\n      var formattedMessages = this.getFormattedMessages();\n      return formattedMessages[id] || id;\n    }\n  }, {\n    key: \"getFormattedMessages\",\n    value: function getFormattedMessages() {\n      try {\n        return formattedMessages[this.locale];\n      } catch (err) {\n        console.error(err);\n        return {};\n      }\n    }\n  }]);\n\n  return Localization;\n}();\n\nvar singleton = new Localization();\nexport default singleton;","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/astroboy/src/Common/Component/OOBCEditor/Localization/index.js"],"names":["formattedMessages","Localization","props","updateLocaleTo","locale","checkLocaleAvailable","formatWithId","id","formatWith","undefined","availableLocales","getAvailableLocales","includes","Object","keys","getFormattedMessages","err","console","error","singleton"],"mappings":";;AAAA,OAAOA,iBAAP,MAA8B,kBAA9B;;IAEMC,Y;AACJ,0BAAwB;AAAA;;AAAA,QAAZC,KAAY,uEAAJ,EAAI;;AAAA;;AAAA,SAIxBC,cAJwB,GAIP,UAAAC,MAAM,EAAI;AACzB,UAAI,KAAI,CAACC,oBAAL,CAA0BD,MAA1B,CAAJ,EAAuC;AACrC,QAAA,KAAI,CAACA,MAAL,GAAcA,MAAd;AACD,OAFD,MAEO;AACL,QAAA,KAAI,CAACA,MAAL,GAAc,SAAd;AACD;AACF,KAVuB;;AAAA,SAuBxBE,YAvBwB,GAuBT,UAAAC,EAAE,EAAI;AACnB,aAAO,KAAI,CAACC,UAAL,CAAgB;AAAED,QAAAA,EAAE,EAAFA;AAAF,OAAhB,CAAP;AACD,KAzBuB;;AACtB,SAAKH,MAAL,GAAcK,SAAd;AACA,SAAKN,cAAL,CAAoBD,KAAK,CAACE,MAA1B;AACD;;;;WAQD,8BAAqBA,MAArB,EAA6B;AAC3B,UAAMM,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;AACA,aAAOD,gBAAgB,CAACE,QAAjB,CAA0BR,MAA1B,CAAP;AACD;;;WACD,+BAAsB;AACpB,aAAOS,MAAM,CAACC,IAAP,CAAYd,iBAAZ,CAAP;AACD;;;WAED,sBAAwB;AAAA,qFAAJ,EAAI;AAAA,UAAXO,EAAW,QAAXA,EAAW;;AACtB,UAAMP,iBAAiB,GAAG,KAAKe,oBAAL,EAA1B;AACA,aAAOf,iBAAiB,CAACO,EAAD,CAAjB,IAAyBA,EAAhC;AACD;;;WAID,gCAAuB;AACrB,UAAI;AACF,eAAOP,iBAAiB,CAAC,KAAKI,MAAN,CAAxB;AACD,OAFD,CAEE,OAAOY,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,eAAO,EAAP;AACD;AACF;;;;;;AAGH,IAAMG,SAAS,GAAG,IAAIlB,YAAJ,EAAlB;AACA,eAAekB,SAAf","sourcesContent":["import formattedMessages from \"./FormatMessages\";\n\nclass Localization {\n  constructor(props = {}) {\n    this.locale = undefined;\n    this.updateLocaleTo(props.locale);\n  }\n  updateLocaleTo = locale => {\n    if (this.checkLocaleAvailable(locale)) {\n      this.locale = locale;\n    } else {\n      this.locale = \"default\";\n    }\n  };\n  checkLocaleAvailable(locale) {\n    const availableLocales = this.getAvailableLocales();\n    return availableLocales.includes(locale);\n  }\n  getAvailableLocales() {\n    return Object.keys(formattedMessages);\n  }\n\n  formatWith({ id } = {}) {\n    const formattedMessages = this.getFormattedMessages();\n    return formattedMessages[id] || id;\n  }\n  formatWithId = id => {\n    return this.formatWith({ id });\n  };\n  getFormattedMessages() {\n    try {\n      return formattedMessages[this.locale];\n    } catch (err) {\n      console.error(err);\n      return {};\n    }\n  }\n}\n\nconst singleton = new Localization();\nexport default singleton;\n"]},"metadata":{},"sourceType":"module"}