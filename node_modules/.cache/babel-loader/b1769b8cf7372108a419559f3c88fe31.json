{"ast":null,"code":"import _objectWithoutProperties from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Common/Component/DreamSlide/htmlParser.js\";\nimport React from \"react\";\nimport HtmlToReact from \"html-to-react\";\nimport HtmlParser from \"react-markdown/plugins/html-parser\"; // import AssetLibrary from \"../../../Page/Builder/utils/assetLibrary\";\n\nimport OOBC from \"../OOBCEditor/OOBC\";\nimport { Block } from \"../OOBCEditor/Component/Block\";\nimport playImg from \"../../../Image/builder/group-2.svg\";\nimport emptyBlockImg from \"../../../Image/dreamclass/slide_block_empty.svg\";\n\nvar getBlockProcessingInstruction = function getBlockProcessingInstruction(options) {\n  return {\n    shouldProcessNode: function shouldProcessNode(node) {\n      return node.name === \"oobc\";\n    },\n    processNode: function processNode(node) {\n      var _ref = options || {},\n          getSpriteIcon = _ref.getSpriteIcon;\n\n      var _node$attribs = node.attribs,\n          type = _node$attribs.type,\n          data = _node$attribs.data,\n          data2 = _node$attribs.data2;\n      var block = OOBC.Block.fromJSON({\n        constructor: type,\n        state: OOBC.TYPE.STATE.PROTOTYPE,\n        data: data\n      });\n\n      switch (type) {\n        case \"Sprite\":\n        case \"Screen\":\n          if (getSpriteIcon) {\n            block.thumbnailSrc = getSpriteIcon(data);\n          }\n\n          break;\n\n        case \"Position\":\n          block.data = {\n            x: data,\n            y: data2\n          };\n          break;\n\n        default:\n          break;\n      }\n\n      if (block.type === \"Block\") {\n        block.backgroundImg = emptyBlockImg;\n      }\n\n      return React.createElement(\"span\", {\n        className: \"inline_oobc\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(Block, {\n        block: block,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }));\n    }\n  };\n};\n\nvar iconSrcMap = {\n  play: playImg\n};\nvar iconProcessingInstruction = {\n  shouldProcessNode: function shouldProcessNode(node) {\n    return node.name === \"icon\";\n  },\n  processNode: function processNode(node, children) {\n    var type = node.attribs.type;\n    var src = iconSrcMap[type];\n    return React.createElement(\"img\", {\n      className: \"inline_icon\",\n      src: src,\n      alt: type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    });\n  }\n};\nvar videoProcessingInstruction = {\n  shouldProcessNode: function shouldProcessNode(node) {\n    return node.name === \"video\";\n  },\n  processNode: function processNode(node, children) {\n    var _node$attribs2 = node.attribs,\n        src = _node$attribs2.src,\n        poster = _node$attribs2.poster,\n        loop = _node$attribs2.loop,\n        muted = _node$attribs2.muted,\n        autoplay = _node$attribs2.autoplay,\n        otherAttribs = _objectWithoutProperties(_node$attribs2, [\"src\", \"poster\", \"loop\", \"muted\", \"autoplay\"]);\n\n    return React.createElement(\"video\", Object.assign({}, otherAttribs, {\n      className: \"media_video\",\n      src: src && src.toDreamclassS3URL(),\n      poster: poster && poster.toDreamclassS3URL(),\n      loop: loop === \"true\" || false,\n      muted: muted === \"true\" || true,\n      autoPlay: autoplay === \"true\" || false,\n      controlsList: \"nodownload\",\n      disablePictureInPicture: true,\n      playsInline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }));\n  }\n};\nvar imgProcessingInstruction = {\n  shouldProcessNode: function shouldProcessNode(node) {\n    return node.name === \"img\";\n  },\n  processNode: function processNode(node, children) {\n    var src = node.attribs.src;\n\n    if (src && !src.startsWith(\"http\")) {\n      src = src.toDreamclassS3URL();\n    }\n\n    return React.createElement(\"img\", Object.assign({}, node.attribs, {\n      className: \"media_img\",\n      src: src,\n      alt: node.attribs.src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }));\n  }\n};\nvar processNodeDefinitions = new HtmlToReact.ProcessNodeDefinitions(React);\nvar defaultProcessingIntructions = {\n  shouldProcessNode: function shouldProcessNode() {\n    return true;\n  },\n  processNode: processNodeDefinitions.processDefaultNode\n};\nexport var htmlParserWith = function htmlParserWith(options) {\n  return HtmlParser({\n    isValidNode: function isValidNode(node) {\n      return node.type !== \"script\";\n    },\n    processingInstructions: [getBlockProcessingInstruction(options), iconProcessingInstruction, videoProcessingInstruction, imgProcessingInstruction, defaultProcessingIntructions]\n  });\n};","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Common/Component/DreamSlide/htmlParser.js"],"names":["React","HtmlToReact","HtmlParser","OOBC","Block","getBlockProcessingInstruction","options","shouldProcessNode","node","name","processNode","getSpriteIcon","attribs","type","data","data2","block","fromJSON","constructor","state","TYPE","STATE","PROTOTYPE","thumbnailSrc","x","y","backgroundImg","emptyBlockImg","iconSrcMap","play","playImg","iconProcessingInstruction","children","src","videoProcessingInstruction","poster","loop","muted","autoplay","otherAttribs","toDreamclassS3URL","imgProcessingInstruction","startsWith","processNodeDefinitions","ProcessNodeDefinitions","defaultProcessingIntructions","processDefaultNode","htmlParserWith","isValidNode","processingInstructions"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport HtmlToReact from \"html-to-react\";\nimport HtmlParser from \"react-markdown/plugins/html-parser\";\n// import AssetLibrary from \"../../../Page/Builder/utils/assetLibrary\";\nimport OOBC from \"../OOBCEditor/OOBC\";\nimport { Block } from \"../OOBCEditor/Component/Block\";\n\nimport playImg from \"../../../Image/builder/group-2.svg\";\nimport emptyBlockImg from \"../../../Image/dreamclass/slide_block_empty.svg\";\n\nconst getBlockProcessingInstruction = options => ({\n  shouldProcessNode: node => {\n    return node.name === \"oobc\";\n  },\n  processNode: node => {\n    const { getSpriteIcon } = options || {};\n    const { type, data, data2 } = node.attribs;\n    const block = OOBC.Block.fromJSON({\n      constructor: type,\n      state: OOBC.TYPE.STATE.PROTOTYPE,\n      data\n    });\n\n    switch (type) {\n      case \"Sprite\":\n      case \"Screen\":\n        if (getSpriteIcon) {\n          block.thumbnailSrc = getSpriteIcon(data);\n        }\n        break;\n      case \"Position\":\n        block.data = { x: data, y: data2 };\n        break;\n      default:\n        break;\n    }\n\n    if(block.type === \"Block\") {\n      block.backgroundImg = emptyBlockImg;\n    }\n\n    return (\n      <span className=\"inline_oobc\">\n        <Block block={block} />\n      </span>\n    );\n  }\n});\n\nconst iconSrcMap = {\n  play: playImg\n};\nconst iconProcessingInstruction = {\n  shouldProcessNode: node => {\n    return node.name === \"icon\";\n  },\n  processNode: (node, children) => {\n    const { type } = node.attribs;\n    const src = iconSrcMap[type];\n    return <img className=\"inline_icon\" src={src} alt={type} />;\n  }\n};\n\nconst videoProcessingInstruction = {\n  shouldProcessNode: node => {\n    return node.name === \"video\";\n  },\n  processNode: (node, children) => {\n    const {\n      src,\n      poster,\n      loop,\n      muted,\n      autoplay,\n      ...otherAttribs\n    } = node.attribs;\n    return (\n      <video\n        { ...otherAttribs }\n        className=\"media_video\"\n        src={src && src.toDreamclassS3URL()}\n        poster={poster && poster.toDreamclassS3URL()}\n        loop={loop === \"true\" || false}\n        muted={muted === \"true\" || true}\n        autoPlay={autoplay === \"true\" || false}\n        controlsList=\"nodownload\"\n        disablePictureInPicture\n        playsInline\n      />\n    );\n  }\n};\n\nconst imgProcessingInstruction = {\n  shouldProcessNode: node => {\n    return node.name === \"img\";\n  },\n  processNode: (node, children) => {\n    let src = node.attribs.src;\n    if (src && !src.startsWith(\"http\")) {\n      src = src.toDreamclassS3URL();\n    }\n    return (\n      <img\n        {...node.attribs}\n        className=\"media_img\"\n        src={src}\n        alt={node.attribs.src}\n      />\n    );\n  }\n};\n\nconst processNodeDefinitions = new HtmlToReact.ProcessNodeDefinitions(React);\n\nconst defaultProcessingIntructions = {\n  shouldProcessNode: () => true,\n  processNode: processNodeDefinitions.processDefaultNode\n};\n\nexport const htmlParserWith = options => {\n  return HtmlParser({\n    isValidNode: node => node.type !== \"script\",\n    processingInstructions: [\n      getBlockProcessingInstruction(options),\n      iconProcessingInstruction,\n      videoProcessingInstruction,\n      imgProcessingInstruction,\n      defaultProcessingIntructions\n    ]\n  });\n};\n"]},"metadata":{},"sourceType":"module"}