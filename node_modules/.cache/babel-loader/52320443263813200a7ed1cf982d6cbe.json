{"ast":null,"code":"import stringify from \"json-stringify-safe\";\nimport { VCTYPE } from \"../../../../../Common/Util/Constant\";\nimport OOBC from \"../../../../../Common/Component/OOBCEditor/OOBC\";\nexport var checkConditions = function checkConditions(progress, state, _ref) {\n  var successHandler = _ref.successHandler,\n      failureHandler = _ref.failureHandler,\n      codeOnly = _ref.codeOnly;\n  var stage = progress.stages[progress.currentStageNum];\n  var customSpriteIdMap = progress.customSpriteIdMap;\n  var conditions = stage.conditions; // 코드만 검사할 때 코드 작성 조건이 없으면 리턴\n\n  if (conditions && codeOnly) {\n    var hasCodeType = false;\n\n    for (var i = 0; i < conditions.length; i++) {\n      var condition = conditions[i];\n\n      if (condition.type === VCTYPE.CONDITION.CODE_EXIST || condition.type === VCTYPE.CONDITION.CODE_AST || condition.type === VCTYPE.CONDITION.OOBC_LINE_EXIST) {\n        hasCodeType = true;\n        break;\n      }\n    }\n\n    if (!hasCodeType) return;\n  } // 현재 스텝의 모든 조건 검사\n\n\n  if (conditions) {\n    for (var _i = 0; _i < conditions.length; _i++) {\n      var _condition = conditions[_i];\n\n      if (checkCondition(_condition, state, customSpriteIdMap, codeOnly)) {\n        continue;\n      } else {\n        if (failureHandler) failureHandler(_condition);\n        return;\n      }\n    }\n  } // 이전 스테이지들의 영구 조건 검사\n\n\n  for (var _i2 = 0; _i2 < progress.currentStageNum; _i2++) {\n    var _conditions = progress.stages[_i2].conditions;\n\n    if (_conditions) {\n      for (var j = 0; j < _conditions.length; j++) {\n        var _condition2 = _conditions[j];\n\n        if (!_condition2.permanent || checkCondition(_condition2, state, customSpriteIdMap, codeOnly)) {\n          continue;\n        } else {\n          if (failureHandler) failureHandler(_condition2);\n          return;\n        }\n      }\n    }\n  }\n\n  if (successHandler) successHandler();\n};\n\nfunction checkCondition(condition, state, customIdMap, codeOnly) {\n  var conditionChecker = conditionCheckers[condition.type];\n  var isCodeType = condition.type === VCTYPE.CONDITION.CODE_EXIST || condition.type === VCTYPE.CONDITION.CODE_AST || condition.type === VCTYPE.CONDITION.OOBC_LINE_EXIST;\n\n  if (conditionChecker) {\n    var result = conditionChecker({\n      condition: condition,\n      state: state,\n      customIdMap: customIdMap\n    });\n    return isCodeType ? result : codeOnly || result;\n  } else {\n    console.warn(\"== condition checker: unknown type\", condition.type);\n    return false;\n  }\n}\n\nvar conditionCheckers = {\n  SPRITE_EXIST: function SPRITE_EXIST(_ref2) {\n    var condition = _ref2.condition,\n        state = _ref2.state,\n        customIdMap = _ref2.customIdMap;\n    var scene = state.scene.scenes[condition.sceneId];\n    var spriteId = condition.spriteId || customIdMap[condition.customSpriteId];\n    return scene && scene.spriteIds.indexOf(spriteId) > -1;\n  },\n  SPRITE_INDEX: function SPRITE_INDEX(_ref3) {\n    var condition = _ref3.condition,\n        state = _ref3.state,\n        customIdMap = _ref3.customIdMap;\n    var scene = state.scene.scenes[condition.sceneId];\n    var spriteId = condition.spriteId || customIdMap[condition.customSpriteId];\n    return scene && scene.spriteIds.indexOf(spriteId) === condition.index;\n  },\n  SPRITE_SELECTED: function SPRITE_SELECTED(_ref4) {\n    var condition = _ref4.condition,\n        state = _ref4.state,\n        customIdMap = _ref4.customIdMap;\n    var sceneId = state.interaction.selected.scene;\n    var spriteId = condition.spriteId || customIdMap[condition.customSpriteId];\n    return state.interaction.selected.objects[sceneId].name === spriteId;\n  },\n  SCENE_EMPTY: function SCENE_EMPTY(_ref5) {\n    var condition = _ref5.condition,\n        state = _ref5.state;\n    var scene = state.scene.scenes[condition.sceneId];\n    return scene && scene.spriteIds.length === 0;\n  },\n  SCENE_FIRST: function SCENE_FIRST(_ref6) {\n    var condition = _ref6.condition,\n        state = _ref6.state;\n    return state.scene.sceneIds[0] === condition.sceneId;\n  },\n  SCENE_SELECTED: function SCENE_SELECTED(_ref7) {\n    var condition = _ref7.condition,\n        state = _ref7.state;\n    return state.interaction.selected.scene === condition.sceneId;\n  },\n  CUSTOM_ID_EXIST: function CUSTOM_ID_EXIST(_ref8) {\n    var condition = _ref8.condition,\n        customIdMap = _ref8.customIdMap;\n    return !!customIdMap[condition.customSpriteId];\n  },\n  CODE_EXIST: function CODE_EXIST(_ref9) {\n    var condition = _ref9.condition,\n        state = _ref9.state,\n        customIdMap = _ref9.customIdMap;\n    return checkCodeAdded(state.scene, condition, customIdMap).isValid;\n  },\n  CODE_AST: function CODE_AST(_ref10) {\n    var condition = _ref10.condition,\n        state = _ref10.state,\n        customIdMap = _ref10.customIdMap;\n\n    try {\n      return checkCodeAst(state.scene, condition, customIdMap).isValid;\n    } catch (e) {\n      console.error(e);\n      return {\n        isValid: false\n      };\n    }\n  },\n  PLAY_ONCE: function PLAY_ONCE(_ref11) {\n    var condition = _ref11.condition;\n    return condition.isClear;\n  },\n  GAME_EVENT: function GAME_EVENT(_ref12) {\n    var condition = _ref12.condition;\n    return condition.isClear;\n  },\n  OOBC_LINE_EXIST: function OOBC_LINE_EXIST(_ref13) {\n    var condition = _ref13.condition,\n        state = _ref13.state;\n    var spriteId = condition.spriteId,\n        oobcLine = condition.oobcLine;\n    var currentSecneId = state.interaction.selected.scene;\n    var currentScene = state.scene.scenes[currentSecneId];\n    var sprite = currentScene.sprites[spriteId];\n    if (!sprite) return false;\n    var oobcContext;\n\n    try {\n      var contextJSON = JSON.parse(sprite.code);\n      oobcContext = OOBC.Context.fromJSON(contextJSON);\n    } catch (_unused) {\n      return false;\n    }\n\n    var lineExist = false;\n    var oobcLines = oobcContext.getLines();\n\n    for (var i = 0; i < oobcLines.length; i++) {\n      var _oobcLine = oobcLines[i]; // 뎁스검사\n\n      if (oobcLine.depth && oobcLine.depth !== _oobcLine.getDepth()) {\n        continue;\n      } // 라인넘버 검사\n\n\n      if (oobcLine.lineNum && oobcLine.lineNum !== _oobcLine.lineNum) {\n        continue;\n      } // 블록내용 검사\n\n\n      var blocks = oobcLine.blocks;\n\n      if (blocks) {\n        var _blocks = _oobcLine.getBlocks();\n\n        var blocksPassed = true;\n\n        for (var j = 0; j < blocks.length; j++) {\n          var block = blocks[j];\n          var _block = _blocks[j];\n\n          if (!_block) {\n            blocksPassed = false;\n            break;\n          }\n\n          var blockPassed = true;\n\n          for (var k in block) {\n            if (k === \"data\" && _block.dataType === \"position\") {\n              if (!_block[k] || block[k].x !== _block[k].x || block[k].y !== _block[k].y) {\n                blockPassed = false;\n                break;\n              }\n            } else {\n              if (_block[k] === undefined || block[k] !== _block[k]) {\n                blockPassed = false;\n                break;\n              }\n            }\n          }\n\n          if (!blockPassed) {\n            blocksPassed = false;\n            break;\n          }\n        }\n\n        if (!blocksPassed) continue;\n      }\n\n      lineExist = true;\n      break;\n    }\n\n    return lineExist;\n  }\n};\nexport var checkCodeAdded = function checkCodeAdded(state, data) {\n  var customIdMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var spriteId;\n\n  for (var i = 0; i < state.sceneIds.length; i++) {\n    var sceneId = state.sceneIds[i];\n    var scene = state.scenes[sceneId];\n    var spriteIds = scene.spriteIds;\n    var sprites = scene.sprites;\n\n    for (var j = 0; j < spriteIds.length; j++) {\n      spriteId = spriteIds[j];\n      var sprite = sprites[spriteId];\n      var code = sprite.code;\n\n      var _spriteId = data.spriteId || customIdMap[data.customSpriteId];\n\n      if (_spriteId === spriteId) {\n        return checkCode(data.code, code);\n      }\n    }\n  }\n\n  function checkCode(_code, userCode) {\n    var code = JSON.parse(stringify(_code));\n    var originalCode = JSON.parse(stringify(code));\n\n    var acorn = require(\"acorn\");\n\n    var tokens = [];\n    var ast;\n\n    try {\n      ast = acorn.parse(userCode, {\n        onToken: tokens,\n        ecmaVersion: 8\n      });\n    } catch (e) {\n      return {\n        isValid: false,\n        result: {\n          code: [],\n          spriteName: spriteId\n        }\n      };\n    }\n\n    var traverse = require(\"ast-traverse\");\n\n    var indent = 0;\n    var currentCode = undefined;\n    var currentIndent = 0;\n    traverse(ast, {\n      pre: function pre(node) {\n        indent++;\n\n        if (currentCode && currentCode.children) {\n          for (var _i3 = currentCode.children.length - 1; _i3 >= 0; _i3--) {\n            var c = currentCode.children[_i3];\n            var conditionName = c.name;\n\n            if (c.isCustom) {\n              conditionName = customIdMap[conditionName];\n            } // eslint-disable-next-line\n\n\n            if (conditionName == node.name || conditionName == node.value) {\n              currentCode.children.splice(_i3, 1);\n            }\n          }\n        }\n\n        for (var _i4 = code.length - 1; _i4 >= 0; _i4--) {\n          var _c = code[_i4];\n          var _conditionName = _c.name;\n\n          if (_c.isCustom) {\n            _conditionName = customIdMap[_conditionName];\n          } // eslint-disable-next-line\n\n\n          if (_c.children && _conditionName === node.name || _conditionName === node.value) {\n            if (_c.children.length === 0) {\n              code.splice(_i4, 1);\n            } else {\n              currentIndent = indent;\n              currentCode = _c;\n            }\n          }\n        }\n\n        if (indent < currentIndent) {\n          currentIndent = 0;\n          currentCode = undefined;\n        }\n      },\n      post: function post() {\n        indent--;\n      }\n    });\n\n    var _loop = function _loop(_i5) {\n      if (code[_i5].children && code[_i5].children.length === 0) {\n        var original = originalCode.filter(function (o) {\n          return o.name === code[_i5].name || o.name === code[_i5].value;\n        });\n\n        if (original[0] && original[0].children) {\n          if (original[0].children.length > 0) {\n            code.splice(_i5, 1);\n          }\n        }\n      }\n    };\n\n    for (var _i5 = code.length - 1; _i5 >= 0; _i5--) {\n      _loop(_i5);\n    }\n\n    return {\n      isValid: code.length === 0,\n      result: {\n        code: code,\n        spriteName: spriteId\n      }\n    };\n  }\n\n  return {\n    isValid: false,\n    result: {\n      code: [],\n      spriteName: spriteId\n    }\n  };\n};\nexport var checkCodeAst = function checkCodeAst(state, data) {\n  var customIdMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var acorn = require(\"acorn\");\n\n  var walk = require(\"acorn-walk\");\n\n  var toNodes = function toNodes(ast) {\n    var conditionTokens = [];\n    walk.ancestor(ast, {\n      Literal: function Literal(node, ancestors) {\n        conditionTokens.push({\n          type: \"Literal\",\n          raw: node.value,\n          ancestors: ancestors.map(function (n) {\n            return n.type;\n          }),\n          customId: node.customId,\n          isLoose: node.isLoose\n        });\n      },\n      Identifier: function Identifier(node, ancestors) {\n        conditionTokens.push({\n          type: \"Identifier\",\n          raw: node.name,\n          ancestors: ancestors.map(function (n) {\n            return n.type;\n          }),\n          customId: node.customId,\n          isLoose: node.isLoose\n        });\n      }\n    });\n    return conditionTokens;\n  };\n\n  var sceneId = data.sceneId;\n  var spriteId = data.spriteId || customIdMap[data.customSpriteId];\n  var sprite = state.scenes[sceneId].sprites[spriteId];\n  if (!sprite) return {\n    isValid: false\n  };\n  var userCode = sprite.code;\n  var conditionNodes = toNodes(data.code);\n  var userNodes;\n\n  try {\n    userNodes = toNodes(acorn.parse(userCode));\n  } catch (error) {\n    return {\n      isValid: false\n    };\n  }\n\n  if (conditionNodes.length !== userNodes.length) {\n    return {\n      isValid: false\n    };\n  }\n\n  for (var i = 0; i < conditionNodes.length; i++) {\n    if (stringify(conditionNodes[i].ancestors) !== stringify(userNodes[i].ancestors)) {\n      return {\n        isValid: false\n      };\n    }\n\n    if (conditionNodes[i].type !== userNodes[i].type) {\n      return {\n        isValid: false\n      };\n    }\n\n    if (conditionNodes[i].customId) {\n      conditionNodes[i].raw = customIdMap[conditionNodes[i].customId];\n    }\n\n    if (!conditionNodes[i].isLoose && conditionNodes[i].raw !== userNodes[i].raw) {\n      if (conditionNodes[i].customId) {\n        var customId = customIdMap[conditionNodes[i].customId];\n\n        if (customId !== userNodes[i].raw) {\n          return {\n            isValid: false\n          };\n        }\n      } else {\n        return {\n          isValid: false\n        };\n      }\n    }\n  }\n\n  return {\n    isValid: true\n  };\n};\nexport var checkGameEvent = function checkGameEvent(conditionEvent, gameEvent, customIdMap) {\n  if (!conditionEvent && !gameEvent) return true;\n\n  if (conditionEvent && gameEvent) {\n    for (var property in conditionEvent) {\n      if (property === \"customSpriteId\") {\n        if (customIdMap[conditionEvent[property]] !== gameEvent.spriteId) return false;\n      } else if (property === \"customTargetSpriteId\") {\n        if (customIdMap[conditionEvent[property]] !== gameEvent.targetSpriteId) return false;\n      } else {\n        if (conditionEvent[property] !== gameEvent[property]) return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n};","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/astroboy/src/Page/Builder/Component/Videoclass/util/condition.js"],"names":["stringify","VCTYPE","OOBC","checkConditions","progress","state","successHandler","failureHandler","codeOnly","stage","stages","currentStageNum","customSpriteIdMap","conditions","hasCodeType","i","length","condition","type","CONDITION","CODE_EXIST","CODE_AST","OOBC_LINE_EXIST","checkCondition","j","permanent","customIdMap","conditionChecker","conditionCheckers","isCodeType","result","console","warn","SPRITE_EXIST","scene","scenes","sceneId","spriteId","customSpriteId","spriteIds","indexOf","SPRITE_INDEX","index","SPRITE_SELECTED","interaction","selected","objects","name","SCENE_EMPTY","SCENE_FIRST","sceneIds","SCENE_SELECTED","CUSTOM_ID_EXIST","checkCodeAdded","isValid","checkCodeAst","e","error","PLAY_ONCE","isClear","GAME_EVENT","oobcLine","currentSecneId","currentScene","sprite","sprites","oobcContext","contextJSON","JSON","parse","code","Context","fromJSON","lineExist","oobcLines","getLines","_oobcLine","depth","getDepth","lineNum","blocks","_blocks","getBlocks","blocksPassed","block","_block","blockPassed","k","dataType","x","y","undefined","data","_spriteId","checkCode","_code","userCode","originalCode","acorn","require","tokens","ast","onToken","ecmaVersion","spriteName","traverse","indent","currentCode","currentIndent","pre","node","children","c","conditionName","isCustom","value","splice","post","original","filter","o","walk","toNodes","conditionTokens","ancestor","Literal","ancestors","push","raw","map","n","customId","isLoose","Identifier","conditionNodes","userNodes","checkGameEvent","conditionEvent","gameEvent","property","targetSpriteId"],"mappings":"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","sourcesContent":["import stringify from \"json-stringify-safe\";\nimport { VCTYPE } from \"../../../../../Common/Util/Constant\";\nimport OOBC from \"../../../../../Common/Component/OOBCEditor/OOBC\";\n\nexport const checkConditions = (\n  progress,\n  state,\n  { successHandler, failureHandler, codeOnly }\n) => {\n  const stage = progress.stages[progress.currentStageNum];\n  const customSpriteIdMap = progress.customSpriteIdMap;\n  const conditions = stage.conditions;\n\n  // 코드만 검사할 때 코드 작성 조건이 없으면 리턴\n  if (conditions && codeOnly) {\n    let hasCodeType = false;\n    for (let i = 0; i < conditions.length; i++) {\n      const condition = conditions[i];\n      if (\n        condition.type === VCTYPE.CONDITION.CODE_EXIST ||\n        condition.type === VCTYPE.CONDITION.CODE_AST ||\n        condition.type === VCTYPE.CONDITION.OOBC_LINE_EXIST\n      ) {\n        hasCodeType = true;\n        break;\n      }\n    }\n    if (!hasCodeType) return;\n  }\n\n  // 현재 스텝의 모든 조건 검사\n  if (conditions) {\n    for (let i = 0; i < conditions.length; i++) {\n      const condition = conditions[i];\n      if (checkCondition(condition, state, customSpriteIdMap, codeOnly)) {\n        continue;\n      } else {\n        if (failureHandler) failureHandler(condition);\n        return;\n      }\n    }\n  }\n  // 이전 스테이지들의 영구 조건 검사\n  for (let i = 0; i < progress.currentStageNum; i++) {\n    const conditions = progress.stages[i].conditions;\n    if (conditions) {\n      for (let j = 0; j < conditions.length; j++) {\n        const condition = conditions[j];\n        if (\n          !condition.permanent ||\n          checkCondition(condition, state, customSpriteIdMap, codeOnly)\n        ) {\n          continue;\n        } else {\n          if (failureHandler) failureHandler(condition);\n          return;\n        }\n      }\n    }\n  }\n  if (successHandler) successHandler();\n};\n\nfunction checkCondition(condition, state, customIdMap, codeOnly) {\n  const conditionChecker = conditionCheckers[condition.type];\n  const isCodeType =\n    condition.type === VCTYPE.CONDITION.CODE_EXIST ||\n    condition.type === VCTYPE.CONDITION.CODE_AST ||\n    condition.type === VCTYPE.CONDITION.OOBC_LINE_EXIST;\n  if (conditionChecker) {\n    const result = conditionChecker({\n      condition,\n      state,\n      customIdMap\n    });\n    return isCodeType ? result : codeOnly || result;\n  } else {\n    console.warn(\"== condition checker: unknown type\", condition.type);\n    return false;\n  }\n}\n\nconst conditionCheckers = {\n  SPRITE_EXIST: ({ condition, state, customIdMap }) => {\n    const scene = state.scene.scenes[condition.sceneId];\n    const spriteId =\n      condition.spriteId || customIdMap[condition.customSpriteId];\n    return scene && scene.spriteIds.indexOf(spriteId) > -1;\n  },\n  SPRITE_INDEX: ({ condition, state, customIdMap }) => {\n    const scene = state.scene.scenes[condition.sceneId];\n    const spriteId =\n      condition.spriteId || customIdMap[condition.customSpriteId];\n    return scene && scene.spriteIds.indexOf(spriteId) === condition.index;\n  },\n  SPRITE_SELECTED: ({ condition, state, customIdMap }) => {\n    const sceneId = state.interaction.selected.scene;\n    const spriteId =\n      condition.spriteId || customIdMap[condition.customSpriteId];\n    return state.interaction.selected.objects[sceneId].name === spriteId;\n  },\n  SCENE_EMPTY: ({ condition, state }) => {\n    const scene = state.scene.scenes[condition.sceneId];\n    return scene && scene.spriteIds.length === 0;\n  },\n  SCENE_FIRST: ({ condition, state }) => {\n    return state.scene.sceneIds[0] === condition.sceneId;\n  },\n  SCENE_SELECTED: ({ condition, state }) => {\n    return state.interaction.selected.scene === condition.sceneId;\n  },\n  CUSTOM_ID_EXIST: ({ condition, customIdMap }) => {\n    return !!customIdMap[condition.customSpriteId];\n  },\n  CODE_EXIST: ({ condition, state, customIdMap }) => {\n    return checkCodeAdded(state.scene, condition, customIdMap).isValid;\n  },\n  CODE_AST: ({ condition, state, customIdMap }) => {\n    try {\n      return checkCodeAst(state.scene, condition, customIdMap).isValid;\n    } catch (e) {\n      console.error(e);\n      return { isValid: false };\n    }\n  },\n  PLAY_ONCE: ({ condition }) => {\n    return condition.isClear;\n  },\n  GAME_EVENT: ({ condition }) => {\n    return condition.isClear;\n  },\n  OOBC_LINE_EXIST: ({ condition, state }) => {\n    const { spriteId, oobcLine } = condition;\n    const currentSecneId = state.interaction.selected.scene;\n    const currentScene = state.scene.scenes[currentSecneId];\n    const sprite = currentScene.sprites[spriteId];\n    if (!sprite) return false;\n\n    let oobcContext;\n    try {\n      const contextJSON = JSON.parse(sprite.code);\n      oobcContext = OOBC.Context.fromJSON(contextJSON);\n    } catch {\n      return false;\n    }\n\n    let lineExist = false;\n    const oobcLines = oobcContext.getLines();\n    for (let i = 0; i < oobcLines.length; i++) {\n      const _oobcLine = oobcLines[i];\n\n      // 뎁스검사\n      if (oobcLine.depth && oobcLine.depth !== _oobcLine.getDepth()) {\n        continue;\n      }\n\n      // 라인넘버 검사\n      if (oobcLine.lineNum && oobcLine.lineNum !== _oobcLine.lineNum) {\n        continue;\n      }\n\n      // 블록내용 검사\n      const { blocks } = oobcLine;\n      if (blocks) {\n        const _blocks = _oobcLine.getBlocks();\n        let blocksPassed = true;\n\n        for (let j = 0; j < blocks.length; j++) {\n          const block = blocks[j];\n          const _block = _blocks[j];\n          if (!_block) {\n            blocksPassed = false;\n            break;\n          }\n          let blockPassed = true;\n          for (let k in block) {\n            if (k === \"data\" && _block.dataType === \"position\") {\n              if (\n                !_block[k] ||\n                block[k].x !== _block[k].x ||\n                block[k].y !== _block[k].y\n              ) {\n                blockPassed = false;\n                break;\n              }\n            } else {\n              if (_block[k] === undefined || block[k] !== _block[k]) {\n                blockPassed = false;\n                break;\n              }\n            }\n          }\n          if (!blockPassed) {\n            blocksPassed = false;\n            break;\n          }\n        }\n\n        if (!blocksPassed) continue;\n      }\n\n      lineExist = true;\n      break;\n    }\n\n    return lineExist;\n  }\n};\n\nexport const checkCodeAdded = (state, data, customIdMap = {}) => {\n  let spriteId;\n  for (let i = 0; i < state.sceneIds.length; i++) {\n    const sceneId = state.sceneIds[i];\n    const scene = state.scenes[sceneId];\n    const spriteIds = scene.spriteIds;\n    const sprites = scene.sprites;\n    for (let j = 0; j < spriteIds.length; j++) {\n      spriteId = spriteIds[j];\n      const sprite = sprites[spriteId];\n      const code = sprite.code;\n      const _spriteId = data.spriteId || customIdMap[data.customSpriteId];\n      if (_spriteId === spriteId) {\n        return checkCode(data.code, code);\n      }\n    }\n  }\n\n  function checkCode(_code, userCode) {\n    let code = JSON.parse(stringify(_code));\n    const originalCode = JSON.parse(stringify(code));\n    const acorn = require(\"acorn\");\n    let tokens = [];\n    let ast;\n    try {\n      ast = acorn.parse(userCode, {\n        onToken: tokens,\n        ecmaVersion: 8\n      });\n    } catch (e) {\n      return {\n        isValid: false,\n        result: { code: [], spriteName: spriteId }\n      };\n    }\n    const traverse = require(\"ast-traverse\");\n    let indent = 0;\n    let currentCode = undefined;\n    let currentIndent = 0;\n    traverse(ast, {\n      pre: function(node) {\n        indent++;\n\n        if (currentCode && currentCode.children) {\n          for (let i = currentCode.children.length - 1; i >= 0; i--) {\n            const c = currentCode.children[i];\n            let conditionName = c.name;\n            if (c.isCustom) {\n              conditionName = customIdMap[conditionName];\n            }\n            // eslint-disable-next-line\n            if (conditionName == node.name || conditionName == node.value) {\n              currentCode.children.splice(i, 1);\n            }\n          }\n        }\n\n        for (let i = code.length - 1; i >= 0; i--) {\n          const c = code[i];\n          let conditionName = c.name;\n          if (c.isCustom) {\n            conditionName = customIdMap[conditionName];\n          }\n\n          // eslint-disable-next-line\n          if (\n            (c.children && conditionName === node.name) ||\n            conditionName === node.value\n          ) {\n            if (c.children.length === 0) {\n              code.splice(i, 1);\n            } else {\n              currentIndent = indent;\n              currentCode = c;\n            }\n          }\n        }\n        if (indent < currentIndent) {\n          currentIndent = 0;\n          currentCode = undefined;\n        }\n      },\n      post: function() {\n        indent--;\n      }\n    });\n    for (let i = code.length - 1; i >= 0; i--) {\n      if (code[i].children && code[i].children.length === 0) {\n        const original = originalCode.filter(\n          o => o.name === code[i].name || o.name === code[i].value\n        );\n        if (original[0] && original[0].children) {\n          if (original[0].children.length > 0) {\n            code.splice(i, 1);\n          }\n        }\n      }\n    }\n\n    return {\n      isValid: code.length === 0,\n      result: { code, spriteName: spriteId }\n    };\n  }\n\n  return {\n    isValid: false,\n    result: { code: [], spriteName: spriteId }\n  };\n};\nexport const checkCodeAst = (state, data, customIdMap = {}) => {\n  const acorn = require(\"acorn\");\n  const walk = require(\"acorn-walk\");\n\n  const toNodes = ast => {\n    let conditionTokens = [];\n    walk.ancestor(ast, {\n      Literal(node, ancestors) {\n        conditionTokens.push({\n          type: \"Literal\",\n          raw: node.value,\n          ancestors: ancestors.map(n => n.type),\n          customId: node.customId,\n          isLoose: node.isLoose\n        });\n      },\n      Identifier(node, ancestors) {\n        conditionTokens.push({\n          type: \"Identifier\",\n          raw: node.name,\n          ancestors: ancestors.map(n => n.type),\n          customId: node.customId,\n          isLoose: node.isLoose\n        });\n      }\n    });\n    return conditionTokens;\n  };\n\n  const sceneId = data.sceneId;\n  const spriteId = data.spriteId || customIdMap[data.customSpriteId];\n  const sprite = state.scenes[sceneId].sprites[spriteId];\n  if (!sprite) return { isValid: false };\n\n  const userCode = sprite.code;\n\n  const conditionNodes = toNodes(data.code);\n\n  let userNodes;\n  try {\n    userNodes = toNodes(acorn.parse(userCode));\n  } catch (error) {\n    return { isValid: false };\n  }\n\n  if (conditionNodes.length !== userNodes.length) {\n    return { isValid: false };\n  }\n\n  for (let i = 0; i < conditionNodes.length; i++) {\n    if (\n      stringify(conditionNodes[i].ancestors) !==\n      stringify(userNodes[i].ancestors)\n    ) {\n      return { isValid: false };\n    }\n    if (conditionNodes[i].type !== userNodes[i].type) {\n      return { isValid: false };\n    }\n\n    if (conditionNodes[i].customId) {\n      conditionNodes[i].raw = customIdMap[conditionNodes[i].customId];\n    }\n\n    if (\n      !conditionNodes[i].isLoose &&\n      conditionNodes[i].raw !== userNodes[i].raw\n    ) {\n      if (conditionNodes[i].customId) {\n        const customId = customIdMap[conditionNodes[i].customId];\n        if (customId !== userNodes[i].raw) {\n          return { isValid: false };\n        }\n      } else {\n        return { isValid: false };\n      }\n    }\n  }\n\n  return { isValid: true };\n};\n\nexport const checkGameEvent = (conditionEvent, gameEvent, customIdMap) => {\n  if (!conditionEvent && !gameEvent) return true;\n  if (conditionEvent && gameEvent) {\n    for (let property in conditionEvent) {\n      if (property === \"customSpriteId\") {\n        if (customIdMap[conditionEvent[property]] !== gameEvent.spriteId)\n          return false;\n      } else if (property === \"customTargetSpriteId\") {\n        if (customIdMap[conditionEvent[property]] !== gameEvent.targetSpriteId)\n          return false;\n      } else {\n        if (conditionEvent[property] !== gameEvent[property]) return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n"]},"metadata":{},"sourceType":"module"}