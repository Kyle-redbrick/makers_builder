{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Common/Util/Achievement.js\";\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  font-size: 16px;\\n  color: rgba(255, 255, 255, 0.5)\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  font-size: 18px;\\n  font-weight: 600;\\n  color: #ff6f44;\\n  margin-bottom: 10px;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-bottom: 6px;\\n  white-space: pre-line !important;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  font-size: 18px;\\n  font-weight: bold;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin: 15px 10px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport styled from \"@emotion/styled\";\nimport store from \"../Store\";\nimport * as userInfoActions from \"../Store/Reducer/UserInfo\";\nimport { notify } from \"./Notification\";\nimport * as Popup from \"../Component/PopUp\";\nimport IntroPopup from \"../../Page/CourseDetail/Components/IntroPopup\";\nexport var LEARNING_COMPLETE_ACHIEVEMENT_ID_LIST = [\"learning_oobc_c1\", \"learning_js_c1\", \"learning_python_c1\"];\nvar Container = styled.div(_templateObject());\nvar Title = styled.h3(_templateObject2());\nvar Message = styled.p(_templateObject3());\nvar RewardPoint = styled.h4(_templateObject4());\nvar DreamPoint = styled.p(_templateObject5());\n\nvar Msg = function Msg(_ref) {\n  var achievement = _ref.achievement,\n      dreamPoint = _ref.dreamPoint;\n  var rewardPoint = achievement.rewardPoint,\n      localized = achievement.localized;\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, localized[0] ? localized[0].reachedTitle : \"\"), React.createElement(Message, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, localized[0] ? localized[0].message : \"\"), React.createElement(RewardPoint, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"\".concat(rewardPoint, \" \"), React.createElement(FormattedMessage, {\n    id: \"ID_ACHIVEMENT_BITS\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })), React.createElement(DreamPoint, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"ID_ACHIVEMENT_TEXT\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), \"\".concat(dreamPoint, \" \"), React.createElement(FormattedMessage, {\n    id: \"ID_ACHIVEMENT_BITS\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })));\n};\n/**\n * 서버에서 업적 달성 시 현재 서버 코드들이 response 보내는 format이 제각각이라 body에 넣지 못하고 header에 넣어서 보냄\n * header에 plain text로 보낼 수 없기 때문에 서버에서 base64로 encoding 해서 보냄\n * 클라이언트에서 해당 data를 사용하기 위해서 decoding 하고 parsing에서 사용하고 있음\n */\n\n\nvar handleResponse = function handleResponse(res) {\n  var achievements = res.headers.get(\"achievements\");\n\n  if (achievements && achievements.length > 0) {\n    achievements = decodingParser(achievements);\n    var _achievements = achievements,\n        reachedAchievements = _achievements.reachedAchievements,\n        dreamPoint = _achievements.dreamPoint;\n    reachedAchievements.forEach(function (achievement) {\n      updateUserDreamPoint(achievement.rewardPoint);\n\n      if (LEARNING_COMPLETE_ACHIEVEMENT_ID_LIST.includes(achievement.id)) {\n        Popup.showPopUp(React.createElement(IntroPopup, {\n          url: \"/lms\",\n          type: achievement.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }), {\n          dismissButton: false,\n          dismissOverlay: true,\n          defaultPadding: false,\n          darkmode: true,\n          mobileFullscreen: true,\n          overflow: true\n        });\n      }\n\n      notify(React.createElement(Msg, {\n        achievement: achievement,\n        dreamPoint: dreamPoint,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), {\n        position: 'bottom-right',\n        autoClose: 5000\n      });\n    });\n  }\n};\n\nvar decodingParser = function decodingParser(data) {\n  var json = Buffer.from(data, 'base64').toString('utf8');\n  return JSON.parse(json);\n};\n\nvar updateUserDreamPoint = function updateUserDreamPoint(rewardPoint) {\n  var dreamPoint = getUserDreamPoint();\n  store.dispatch(userInfoActions.updateUserInfo({\n    dreamPoint: dreamPoint + rewardPoint\n  }));\n};\n\nvar getUserDreamPoint = function getUserDreamPoint() {\n  return selectUserDreamPoint(store.getState());\n};\n\nvar selectUserDreamPoint = function selectUserDreamPoint(state) {\n  return state.userinfo.dreamPoint;\n};\n\nexport default {\n  handleResponse: handleResponse,\n  decodingParser: decodingParser\n};","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Common/Util/Achievement.js"],"names":["React","FormattedMessage","styled","store","userInfoActions","notify","Popup","IntroPopup","LEARNING_COMPLETE_ACHIEVEMENT_ID_LIST","Container","div","Title","h3","Message","p","RewardPoint","h4","DreamPoint","Msg","achievement","dreamPoint","rewardPoint","localized","reachedTitle","message","handleResponse","res","achievements","headers","get","length","decodingParser","reachedAchievements","forEach","updateUserDreamPoint","includes","id","showPopUp","dismissButton","dismissOverlay","defaultPadding","darkmode","mobileFullscreen","overflow","position","autoClose","data","json","Buffer","from","toString","JSON","parse","getUserDreamPoint","dispatch","updateUserInfo","selectUserDreamPoint","getState","state","userinfo"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,KAAKC,eAAZ,MAAiC,2BAAjC;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,oBAAvB;AACA,OAAOC,UAAP,MAAuB,+CAAvB;AAEA,OAAO,IAAMC,qCAAqC,GAAG,CACnD,kBADmD,EAEnD,gBAFmD,EAGnD,oBAHmD,CAA9C;AAMP,IAAMC,SAAS,GAAGP,MAAM,CAACQ,GAAV,mBAAf;AAIA,IAAMC,KAAK,GAAGT,MAAM,CAACU,EAAV,oBAAX;AAKA,IAAMC,OAAO,GAAGX,MAAM,CAACY,CAAV,oBAAb;AAKA,IAAMC,WAAW,GAAGb,MAAM,CAACc,EAAV,oBAAjB;AAOA,IAAMC,UAAU,GAAGf,MAAM,CAACY,CAAV,oBAAhB;;AAKA,IAAMI,GAAG,GAAG,SAANA,GAAM,OAAiC;AAAA,MAA9BC,WAA8B,QAA9BA,WAA8B;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AAAA,MACnCC,WADmC,GACRF,WADQ,CACnCE,WADmC;AAAA,MACtBC,SADsB,GACRH,WADQ,CACtBG,SADsB;AAG3C,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQA,SAAS,CAAC,CAAD,CAAT,GAAeA,SAAS,CAAC,CAAD,CAAT,CAAaC,YAA5B,GAA2C,EAAnD,CADF,EAEE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAUD,SAAS,CAAC,CAAD,CAAT,GAAeA,SAAS,CAAC,CAAD,CAAT,CAAaE,OAA5B,GAAsC,EAAhD,CAFF,EAGE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAiBH,WAAjB,QAAgC,oBAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,oBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhC,CAHF,EAIE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAY,oBAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,oBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAZ,YAA4DD,UAA5D,QAA0E,oBAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,oBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA1E,CAJF,CADF;AAQD,CAXD;AAaA;;;;;;;AAMA,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,GAAG,EAAI;AAC5B,MAAIC,YAAY,GAAGD,GAAG,CAACE,OAAJ,CAAYC,GAAZ,CAAgB,cAAhB,CAAnB;;AACA,MAAIF,YAAY,IAAIA,YAAY,CAACG,MAAb,GAAsB,CAA1C,EAA6C;AAC3CH,IAAAA,YAAY,GAAGI,cAAc,CAACJ,YAAD,CAA7B;AAD2C,wBAECA,YAFD;AAAA,QAEnCK,mBAFmC,iBAEnCA,mBAFmC;AAAA,QAEdZ,UAFc,iBAEdA,UAFc;AAI3CY,IAAAA,mBAAmB,CAACC,OAApB,CAA4B,UAAAd,WAAW,EAAI;AACzCe,MAAAA,oBAAoB,CAACf,WAAW,CAACE,WAAb,CAApB;;AACA,UAAGb,qCAAqC,CAAC2B,QAAtC,CAA+ChB,WAAW,CAACiB,EAA3D,CAAH,EAAmE;AACjE9B,QAAAA,KAAK,CAAC+B,SAAN,CAAgB,oBAAC,UAAD;AAAY,UAAA,GAAG,EAAC,MAAhB;AAAuB,UAAA,IAAI,EAAElB,WAAW,CAACiB,EAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAhB,EAAgE;AAC9DE,UAAAA,aAAa,EAAE,KAD+C;AAE9DC,UAAAA,cAAc,EAAE,IAF8C;AAG9DC,UAAAA,cAAc,EAAE,KAH8C;AAI9DC,UAAAA,QAAQ,EAAE,IAJoD;AAK9DC,UAAAA,gBAAgB,EAAE,IAL4C;AAM9DC,UAAAA,QAAQ,EAAE;AANoD,SAAhE;AAQD;;AAEDtC,MAAAA,MAAM,CACJ,oBAAC,GAAD;AAAK,QAAA,WAAW,EAAEc,WAAlB;AAA+B,QAAA,UAAU,EAAEC,UAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADI,EAEJ;AACEwB,QAAAA,QAAQ,EAAE,cADZ;AAEEC,QAAAA,SAAS,EAAE;AAFb,OAFI,CAAN;AAMD,KAnBD;AAoBD;AACF,CA3BD;;AA6BA,IAAMd,cAAc,GAAG,SAAjBA,cAAiB,CAAAe,IAAI,EAAI;AAC7B,MAAMC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkB,QAAlB,EAA4BI,QAA5B,CAAqC,MAArC,CAAb;AACA,SAAOC,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAP;AACD,CAHD;;AAKA,IAAMb,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAb,WAAW,EAAI;AAC1C,MAAMD,UAAU,GAAGiC,iBAAiB,EAApC;AACAlD,EAAAA,KAAK,CAACmD,QAAN,CAAelD,eAAe,CAACmD,cAAhB,CAA+B;AAAEnC,IAAAA,UAAU,EAAEA,UAAU,GAAGC;AAA3B,GAA/B,CAAf;AACD,CAHD;;AAKA,IAAMgC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B,SAAOG,oBAAoB,CAACrD,KAAK,CAACsD,QAAN,EAAD,CAA3B;AACD,CAFD;;AAIA,IAAMD,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAE,KAAK,EAAI;AACpC,SAAOA,KAAK,CAACC,QAAN,CAAevC,UAAtB;AACD,CAFD;;AAIA,eAAe;AACbK,EAAAA,cAAc,EAAdA,cADa;AAEbM,EAAAA,cAAc,EAAdA;AAFa,CAAf","sourcesContent":["import React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport styled from \"@emotion/styled\";\nimport store from \"../Store\";\nimport * as userInfoActions from \"../Store/Reducer/UserInfo\";\nimport { notify } from \"./Notification\";\nimport * as Popup from \"../Component/PopUp\";\nimport IntroPopup from \"../../Page/CourseDetail/Components/IntroPopup\";\n\nexport const LEARNING_COMPLETE_ACHIEVEMENT_ID_LIST = [\n  \"learning_oobc_c1\",\n  \"learning_js_c1\",\n  \"learning_python_c1\"\n]\n\nconst Container = styled.div`\n  margin: 15px 10px;\n`\n\nconst Title = styled.h3`\n  font-size: 18px;\n  font-weight: bold;\n`\n\nconst Message = styled.p`\n  margin-bottom: 6px;\n  white-space: pre-line !important;\n`\n\nconst RewardPoint = styled.h4`\n  font-size: 18px;\n  font-weight: 600;\n  color: #ff6f44;\n  margin-bottom: 10px;\n`\n\nconst DreamPoint = styled.p`\n  font-size: 16px;\n  color: rgba(255, 255, 255, 0.5)\n`\n\nconst Msg = ({ achievement, dreamPoint }) => {\n  const { rewardPoint, localized } = achievement;\n\n  return (\n    <Container>\n      <Title>{localized[0] ? localized[0].reachedTitle : \"\"}</Title>\n      <Message>{localized[0] ? localized[0].message : \"\"}</Message>\n      <RewardPoint>{`${rewardPoint} `}<FormattedMessage id=\"ID_ACHIVEMENT_BITS\" /></RewardPoint>\n      <DreamPoint><FormattedMessage id=\"ID_ACHIVEMENT_TEXT\" />{`${dreamPoint} `}<FormattedMessage id=\"ID_ACHIVEMENT_BITS\" /></DreamPoint>\n    </Container>\n  )\n}\n\n/**\n * 서버에서 업적 달성 시 현재 서버 코드들이 response 보내는 format이 제각각이라 body에 넣지 못하고 header에 넣어서 보냄\n * header에 plain text로 보낼 수 없기 때문에 서버에서 base64로 encoding 해서 보냄\n * 클라이언트에서 해당 data를 사용하기 위해서 decoding 하고 parsing에서 사용하고 있음\n */\n\nconst handleResponse = res => {\n  let achievements = res.headers.get(\"achievements\")\n  if (achievements && achievements.length > 0) {\n    achievements = decodingParser(achievements);\n    const { reachedAchievements, dreamPoint } = achievements;\n\n    reachedAchievements.forEach(achievement => {\n      updateUserDreamPoint(achievement.rewardPoint)\n      if(LEARNING_COMPLETE_ACHIEVEMENT_ID_LIST.includes(achievement.id)) {\n        Popup.showPopUp(<IntroPopup url=\"/lms\" type={achievement.id}/>, {\n          dismissButton: false,\n          dismissOverlay: true,\n          defaultPadding: false,\n          darkmode: true,\n          mobileFullscreen: true,\n          overflow: true,\n        });  \n      }\n\n      notify(\n        <Msg achievement={achievement} dreamPoint={dreamPoint} />,\n        {\n          position: 'bottom-right',\n          autoClose: 5000\n        })\n    });\n  }\n}\n\nconst decodingParser = data => {\n  const json = Buffer.from(data, 'base64').toString('utf8');\n  return JSON.parse(json);\n}\n\nconst updateUserDreamPoint = rewardPoint => {\n  const dreamPoint = getUserDreamPoint()\n  store.dispatch(userInfoActions.updateUserInfo({ dreamPoint: dreamPoint + rewardPoint }))\n}\n\nconst getUserDreamPoint = () => {\n  return selectUserDreamPoint(store.getState())\n}\n\nconst selectUserDreamPoint = state => {\n  return state.userinfo.dreamPoint\n}\n\nexport default {\n  handleResponse,\n  decodingParser\n}"]},"metadata":{},"sourceType":"module"}