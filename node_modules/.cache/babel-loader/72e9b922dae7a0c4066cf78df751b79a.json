{"ast":null,"code":"var _jsxFileName = \"/Users/jimmy/Documents/Wizschool/astroboy/src/Page/Builder/Component/Chat/View.js\";\nimport React from \"react\";\nimport moment from \"moment\";\nimport { SIGNOUT_PROFILE_IMAGE, CHAT_TYPE } from \"../../../../Common/Util/Constant\";\nimport ChatBot from \"./Component/ChatBot\";\nimport \"./index.scss\";\nimport closeImg from \"../../../../Image/builder/x-copy-3.svg\";\nimport closeImg_darkmode from \"../../../../Image/builder/x-copy-3_darkmode.svg\";\nimport chatAllImg from \"../../../../Image/builder/chat-all.svg\";\nimport chatAllClickImg from \"../../../../Image/builder/chat-all-click.svg\";\nimport chatbotImg from \"../../../../Image/builder/chat-bot.svg\";\nimport chatbotClickImg from \"../../../../Image/builder/chat-bot-click.svg\";\nimport sendImg from \"../../../../Image/builder/arrow-up-2.svg\";\nimport { FormattedMessage } from \"react-intl\";\nimport ContextMenu from \"./Component/ContextMenu\";\nimport { getColorTheme } from \"../../utils/colorThemeUtil\";\nexport default function (props) {\n  var handleSelectTab = props.handleSelectTab,\n      handleChangeZIndex = props.handleChangeZIndex,\n      rooms = props.rooms,\n      selectedRoomId = props.selectedRoomId,\n      handleSelectRoom = props.handleSelectRoom,\n      handleOnChange = props.handleOnChange,\n      handleOnSubmit = props.handleOnSubmit,\n      inputMessage = props.inputMessage,\n      inputRef = props.inputRef,\n      isChatbotMode = props.isChatbotMode,\n      handleChatbotOpen = props.handleChatbotOpen,\n      intl = props.intl,\n      email = props.email,\n      guestId = props.guestId,\n      handleMenu = props.handleMenu,\n      showMenu = props.showMenu;\n  var colorTheme = getColorTheme();\n  return React.createElement(\"div\", {\n    className: \"Chat\",\n    onMouseDown: function onMouseDown() {\n      return handleChangeZIndex(\"chat\");\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"ChatTitleLine handle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"ChatTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"ID_CHAT_TITLE\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"ChatClose\",\n    onClick: function onClick() {\n      return handleSelectTab(\"chat\");\n    },\n    onTouchEnd: function onTouchEnd() {\n      return handleSelectTab(\"chat\");\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: colorTheme === \"darkMode\" ? closeImg_darkmode : closeImg,\n    alt: \"img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"ChatContent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"ChatContentRooms\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, Object.keys(rooms).map(function (id, index) {\n    return React.createElement(\"div\", {\n      key: index,\n      className: \"ChatContentRoom \".concat(selectedRoomId === id && \"ChatContentRoomActive\"),\n      onClick: function onClick() {\n        return handleSelectRoom(id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, id === CHAT_TYPE.ALL ? React.createElement(\"img\", {\n      src: selectedRoomId === id ? chatAllClickImg : chatAllImg,\n      alt: \"img\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }) : React.createElement(\"img\", {\n      src: rooms[id].roomIcon,\n      className: \"livechat \".concat(selectedRoomId === id ? \"livechat__on\" : \"livechat__off\"),\n      alt: \"img\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"room__title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, rooms[id].name), rooms[id].unReadMsgCount > 0 && React.createElement(\"span\", {\n      className: \"ChatContentRoomRedDot\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, rooms[id].unReadMsgCount));\n  }), React.createElement(\"div\", {\n    className: \"ChatContentRoom \".concat(isChatbotMode && \"ChatContentRoomActive\"),\n    onClick: handleChatbotOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: isChatbotMode ? chatbotClickImg : chatbotImg,\n    className: \"chatbotImg\",\n    alt: \"chatbot img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"room__title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"ID_BUILDER_CHATBOT_TITLE\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })))), isChatbotMode ? React.createElement(\"div\", {\n    className: \"ChatContentMain\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(ChatBot, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  })) : React.createElement(\"div\", {\n    className: \"ChatContentMain\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"ChatContentMainMessages\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, rooms[selectedRoomId].messages.map(function (message, index) {\n    var user = message.user,\n        createdAt = message.createdAt,\n        content = message.content,\n        id = message.id;\n    var isMy = false;\n\n    if (user.email) {\n      isMy = user.email === email;\n    } else {\n      isMy = user.name === guestId;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"ChatContentMainMessage\",\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, !isMy && React.createElement(\"div\", {\n      className: \"ChatContentMainMessageUserLine\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ChatContentMainMessageIcon\",\n      onClick: function onClick() {\n        return handleMenu(id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: user.icon ? user.icon : SIGNOUT_PROFILE_IMAGE,\n      alt: \"user icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"ChatContentMainMessageName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, user.name), showMenu === id && email && !isMy && React.createElement(ContextMenu, {\n      dismiss: handleMenu,\n      user: email,\n      chatId: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"ChatContentMainMessageContentLine \".concat(isMy && \"ChatContentMainMessageContentLineMy\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ChatContentMainMessageContent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, content), React.createElement(\"div\", {\n      className: \"ChatContentMainMessageTime\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, moment(createdAt).format(\"HH:mm\"))));\n  })), React.createElement(\"div\", {\n    className: \"ChatContentMainInputWrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    ref: inputRef,\n    className: \"ChatContentMainInput\",\n    disabled: email ? false : true,\n    type: \"text\",\n    placeholder: email ? intl.formatMessage({\n      id: \"ID_DRAWER_CHAT_INPUT_PLACE_HOLDER\"\n    }) : intl.formatMessage({\n      id: \"ID_DRAWER_CHAT_INPUT_PLACE_HOLDER_GUEST\"\n    }),\n    value: inputMessage,\n    onChange: handleOnChange,\n    onKeyUp: function onKeyUp(e) {\n      e.stopPropagation();\n      e.keyCode === 13 && handleOnSubmit();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"ChatContentMainInputBtn\",\n    onClick: handleOnSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: sendImg,\n    alt: \"img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }))))));\n}","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/astroboy/src/Page/Builder/Component/Chat/View.js"],"names":["React","moment","SIGNOUT_PROFILE_IMAGE","CHAT_TYPE","ChatBot","FormattedMessage","ContextMenu","getColorTheme","props","handleSelectTab","handleChangeZIndex","rooms","selectedRoomId","handleSelectRoom","handleOnChange","handleOnSubmit","inputMessage","inputRef","isChatbotMode","handleChatbotOpen","intl","email","guestId","handleMenu","showMenu","colorTheme","closeImg_darkmode","closeImg","Object","keys","map","id","index","ALL","chatAllClickImg","chatAllImg","roomIcon","name","unReadMsgCount","chatbotClickImg","chatbotImg","messages","message","user","createdAt","content","isMy","icon","format","formatMessage","e","stopPropagation","keyCode","sendImg"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport moment from \"moment\";\nimport {\n  SIGNOUT_PROFILE_IMAGE,\n  CHAT_TYPE\n} from \"../../../../Common/Util/Constant\";\nimport ChatBot from \"./Component/ChatBot\";\nimport \"./index.scss\";\nimport closeImg from \"../../../../Image/builder/x-copy-3.svg\";\nimport closeImg_darkmode from \"../../../../Image/builder/x-copy-3_darkmode.svg\";\nimport chatAllImg from \"../../../../Image/builder/chat-all.svg\";\nimport chatAllClickImg from \"../../../../Image/builder/chat-all-click.svg\";\nimport chatbotImg from \"../../../../Image/builder/chat-bot.svg\";\nimport chatbotClickImg from \"../../../../Image/builder/chat-bot-click.svg\";\nimport sendImg from \"../../../../Image/builder/arrow-up-2.svg\";\nimport { FormattedMessage } from \"react-intl\";\nimport ContextMenu from \"./Component/ContextMenu\";\nimport { getColorTheme } from \"../../utils/colorThemeUtil\";\n\nexport default function(props) {\n  const {\n    handleSelectTab,\n    handleChangeZIndex,\n    rooms,\n    selectedRoomId,\n    handleSelectRoom,\n    handleOnChange,\n    handleOnSubmit,\n    inputMessage,\n    inputRef,\n    isChatbotMode,\n    handleChatbotOpen,\n    intl,\n    email,\n    guestId,\n    handleMenu,\n    showMenu\n  } = props;\n  const colorTheme = getColorTheme();\n\n  return (\n    <div className=\"Chat\" onMouseDown={() => handleChangeZIndex(\"chat\")}>\n      <div className=\"ChatTitleLine handle\">\n        <div className=\"ChatTitle\">\n          <FormattedMessage id=\"ID_CHAT_TITLE\" />\n        </div>\n        <div className=\"ChatClose\" onClick={() => handleSelectTab(\"chat\")} onTouchEnd={() => handleSelectTab(\"chat\")}>\n          <img\n            src={colorTheme === \"darkMode\" ? closeImg_darkmode : closeImg}\n            alt=\"img\"\n          />\n        </div>\n      </div>\n      <div className=\"ChatContent\">\n        <div className=\"ChatContentRooms\">\n          {Object.keys(rooms).map((id, index) => {\n            return (\n              <div\n                key={index}\n                className={`ChatContentRoom ${selectedRoomId === id &&\n                  \"ChatContentRoomActive\"}`}\n                onClick={() => handleSelectRoom(id)}\n              >\n                {id === CHAT_TYPE.ALL ? (\n                  <img\n                    src={selectedRoomId === id ? chatAllClickImg : chatAllImg}\n                    alt=\"img\"\n                  />\n                ) : (\n                  <img\n                    src={rooms[id].roomIcon}\n                    className={`livechat ${\n                      selectedRoomId === id ? \"livechat__on\" : \"livechat__off\"\n                    }`}\n                    alt=\"img\"\n                  />\n                )}\n                <span className=\"room__title\">{rooms[id].name}</span>\n                {rooms[id].unReadMsgCount > 0 && (\n                  <span className=\"ChatContentRoomRedDot\">\n                    {rooms[id].unReadMsgCount}\n                  </span>\n                )}\n              </div>\n            );\n          })}\n          <div\n            className={`ChatContentRoom ${isChatbotMode &&\n              \"ChatContentRoomActive\"}`}\n            onClick={handleChatbotOpen}\n          >\n            <img\n              src={isChatbotMode ? chatbotClickImg : chatbotImg}\n              className=\"chatbotImg\"\n              alt=\"chatbot img\"\n            />\n            <span className=\"room__title\">\n              <FormattedMessage id=\"ID_BUILDER_CHATBOT_TITLE\" />\n            </span>\n          </div>\n        </div>\n\n        {isChatbotMode ? (\n          <div className=\"ChatContentMain\">\n            <ChatBot />\n          </div>\n        ) : (\n          <div className=\"ChatContentMain\">\n            <div className=\"ChatContentMainMessages\">\n              {rooms[selectedRoomId].messages.map((message, index) => {\n                const { user, createdAt, content, id } = message;\n                let isMy = false;\n                if (user.email) {\n                  isMy = user.email === email;\n                } else {\n                  isMy = user.name === guestId;\n                }\n                return (\n                  <div className=\"ChatContentMainMessage\" key={index}>\n                    {!isMy && (\n                      <div className=\"ChatContentMainMessageUserLine\">\n                        <div\n                          className=\"ChatContentMainMessageIcon\"\n                          onClick={() => handleMenu(id)}\n                        >\n                          <img\n                            src={user.icon ? user.icon : SIGNOUT_PROFILE_IMAGE}\n                            alt=\"user icon\"\n                          />\n                        </div>\n                        <div className=\"ChatContentMainMessageName\">\n                          {user.name}\n                        </div>\n                        {showMenu === id && email && !isMy && (\n                          <ContextMenu\n                            dismiss={handleMenu}\n                            user={email}\n                            chatId={id}\n                          />\n                        )}\n                      </div>\n                    )}\n                    <div\n                      className={`ChatContentMainMessageContentLine ${isMy &&\n                        \"ChatContentMainMessageContentLineMy\"}`}\n                    >\n                      <div className=\"ChatContentMainMessageContent\">\n                        {content}\n                      </div>\n                      <div className=\"ChatContentMainMessageTime\">\n                        {moment(createdAt).format(\"HH:mm\")}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n            <div className=\"ChatContentMainInputWrapper\">\n              <input\n                ref={inputRef}\n                className=\"ChatContentMainInput\"\n                disabled={email ? false : true}\n                type=\"text\"\n                placeholder={\n                  email\n                    ? intl.formatMessage({\n                        id: \"ID_DRAWER_CHAT_INPUT_PLACE_HOLDER\"\n                      })\n                    : intl.formatMessage({\n                        id: \"ID_DRAWER_CHAT_INPUT_PLACE_HOLDER_GUEST\"\n                      })\n                }\n                value={inputMessage}\n                onChange={handleOnChange}\n                onKeyUp={e => {\n                  e.stopPropagation();\n                  e.keyCode === 13 && handleOnSubmit();\n                }}\n              />\n              <div className=\"ChatContentMainInputBtn\" onClick={handleOnSubmit}>\n                <img src={sendImg} alt=\"img\" />\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}