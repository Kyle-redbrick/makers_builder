{"ast":null,"code":"var crypto = require('crypto');\n\nvar crc32 = require('crc-32');\n\nvar UINT32 = require('cuint').UINT32;\n\nvar version = \"006\";\nvar randomInt = Math.floor(Math.random() * 0xFFFFFFFF);\nvar VERSION_LENGTH = 3;\nvar APP_ID_LENGTH = 32;\n\nvar AccessToken = function AccessToken(appID, appCertificate, channelName, uid) {\n  var token = this;\n  this.appID = appID;\n  this.appCertificate = appCertificate;\n  this.channelName = channelName;\n  this.messages = {};\n  this.salt = randomInt;\n  this.ts = Math.floor(new Date() / 1000) + 24 * 3600;\n\n  if (uid === 0) {\n    this.uid = \"\";\n  } else {\n    this.uid = \"\".concat(uid);\n  }\n\n  this.build = function () {\n    var m = Message({\n      salt: token.salt,\n      ts: token.ts,\n      messages: token.messages\n    }).pack();\n    var toSign = Buffer.concat([Buffer.from(token.appID, 'utf8'), Buffer.from(token.channelName, 'utf8'), Buffer.from(token.uid, 'utf8'), m]);\n    var signature = encodeHMac(token.appCertificate, toSign);\n    var crc_channel = UINT32(crc32.str(token.channelName)).and(UINT32(0xffffffff)).toNumber();\n    var crc_uid = UINT32(crc32.str(token.uid)).and(UINT32(0xffffffff)).toNumber();\n    var content = AccessTokenContent({\n      signature: signature,\n      crc_channel: crc_channel,\n      crc_uid: crc_uid,\n      m: m\n    }).pack();\n    return version + token.appID + content.toString('base64');\n  };\n\n  this.addPriviledge = function (priviledge, expireTimestamp) {\n    token.messages[priviledge] = expireTimestamp;\n  };\n\n  this.fromString = function (originToken) {\n    try {\n      originVersion = originToken.substr(0, VERSION_LENGTH);\n\n      if (originVersion != version) {\n        return false;\n      }\n\n      var originAppID = originToken.substr(VERSION_LENGTH, VERSION_LENGTH + APP_ID_LENGTH);\n      var originContent = originToken.substr(VERSION_LENGTH + APP_ID_LENGTH);\n      var originContentDecodedBuf = Buffer.from(originContent, 'base64');\n      var content = unPackContent(originContentDecodedBuf);\n      this.signature = content.signature;\n      this.crc_channel_name = content.crc_channel_name;\n      this.crc_uid = content.crc_uid;\n      this.m = content.m;\n      var msgs = unPackMessages(this.m);\n      this.salt = msgs.salt;\n      this.ts = msgs.ts;\n      this.messages = msgs.messages;\n    } catch (err) {\n      console.log(err);\n      return false;\n    }\n\n    return true;\n  };\n};\n\nmodule.exports.version = version;\nmodule.exports.AccessToken = AccessToken;\nmodule.exports.priviledges = {\n  kJoinChannel: 1,\n  kPublishAudioStream: 2,\n  kPublishVideoStream: 3,\n  kPublishDataStream: 4,\n  kPublishAudiocdn: 5,\n  kPublishVideoCdn: 6,\n  kRequestPublishAudioStream: 7,\n  kRequestPublishVideoStream: 8,\n  kRequestPublishDataStream: 9,\n  kInvitePublishAudioStream: 10,\n  kInvitePublishVideoStream: 11,\n  kInvitePublishDataStream: 12,\n  kAdministrateChannel: 101,\n  kRtmLogin: 1000\n};\n\nvar encodeHMac = function encodeHMac(key, message) {\n  return crypto.createHmac('sha256', key).update(message).digest();\n};\n\nvar ByteBuf = function ByteBuf() {\n  var that = {\n    buffer: Buffer.alloc(1024),\n    position: 0\n  };\n  that.buffer.fill(0);\n\n  that.pack = function () {\n    var out = Buffer.alloc(that.position);\n    that.buffer.copy(out, 0, 0, out.length);\n    return out;\n  };\n\n  that.putUint16 = function (v) {\n    that.buffer.writeUInt16LE(v, that.position);\n    that.position += 2;\n    return that;\n  };\n\n  that.putUint32 = function (v) {\n    that.buffer.writeUInt32LE(v, that.position);\n    that.position += 4;\n    return that;\n  };\n\n  that.putBytes = function (bytes) {\n    that.putUint16(bytes.length);\n    bytes.copy(that.buffer, that.position);\n    that.position += bytes.length;\n    return that;\n  };\n\n  that.putString = function (str) {\n    return that.putBytes(Buffer.from(str));\n  };\n\n  that.putTreeMap = function (map) {\n    if (!map) {\n      that.putUint16(0);\n      return that;\n    }\n\n    that.putUint16(Object.keys(map).length);\n\n    for (var key in map) {\n      that.putUint16(key);\n      that.putString(map[key]);\n    }\n\n    return that;\n  };\n\n  that.putTreeMapUInt32 = function (map) {\n    if (!map) {\n      that.putUint16(0);\n      return that;\n    }\n\n    that.putUint16(Object.keys(map).length);\n\n    for (var key in map) {\n      that.putUint16(key);\n      that.putUint32(map[key]);\n    }\n\n    return that;\n  };\n\n  return that;\n};\n\nvar ReadByteBuf = function ReadByteBuf(bytes) {\n  var that = {\n    buffer: bytes,\n    position: 0\n  };\n\n  that.getUint16 = function () {\n    var ret = that.buffer.readUInt16LE(that.position);\n    that.position += 2;\n    return ret;\n  };\n\n  that.getUint32 = function () {\n    var ret = that.buffer.readUInt32LE(that.position);\n    that.position += 4;\n    return ret;\n  };\n\n  that.getString = function () {\n    var len = that.getUint16();\n    var out = Buffer.alloc(len);\n    that.buffer.copy(out, 0, that.position, that.position + len);\n    that.position += len;\n    return out;\n  };\n\n  that.getTreeMapUInt32 = function () {\n    var map = {};\n    var len = that.getUint16();\n\n    for (var i = 0; i < len; i++) {\n      var key = that.getUint16();\n      var value = that.getUint32();\n      map[key] = value;\n    }\n\n    return map;\n  };\n\n  return that;\n};\n\nvar AccessTokenContent = function AccessTokenContent(options) {\n  options.pack = function () {\n    var out = new ByteBuf();\n    return out.putString(options.signature).putUint32(options.crc_channel).putUint32(options.crc_uid).putString(options.m).pack();\n  };\n\n  return options;\n};\n\nvar Message = function Message(options) {\n  options.pack = function () {\n    var out = new ByteBuf();\n    var val = out.putUint32(options.salt).putUint32(options.ts).putTreeMapUInt32(options.messages).pack();\n    return val;\n  };\n\n  return options;\n};\n\nvar unPackContent = function unPackContent(bytes) {\n  var readbuf = new ReadByteBuf(bytes);\n  return AccessTokenContent({\n    signature: readbuf.getString(),\n    crc_channel_name: readbuf.getUint32(),\n    crc_uid: readbuf.getUint32(),\n    m: readbuf.getString()\n  });\n};\n\nvar unPackMessages = function unPackMessages(bytes) {\n  var readbuf = new ReadByteBuf(bytes);\n  return Message({\n    salt: readbuf.getUint32(),\n    ts: readbuf.getUint32(),\n    messages: readbuf.getTreeMapUInt32()\n  });\n};","map":null,"metadata":{},"sourceType":"script"}