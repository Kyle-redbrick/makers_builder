{"ast":null,"code":"import _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/utils/dndWrapper.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { DragSource, DropTarget } from \"react-dnd\";\nimport { findDOMNode } from \"react-dom\";\nimport { flow } from \"lodash\";\nexport default function DndWrapper(DndItem, ITEM_TYPE) {\n  var spriteSource = {\n    beginDrag: function beginDrag(props) {\n      if (props.onDragStart) {\n        props.onDragStart();\n      }\n\n      return {\n        name: props.name,\n        index: props.index\n      };\n    }\n  };\n  var spriteTarget = {\n    hover: function hover(props, monitor, component) {\n      if (!component) {\n        return null;\n      }\n\n      var dragIndex = monitor.getItem().index;\n      var hoverIndex = props.index; // Don't replace items with themselves\n\n      if (dragIndex === hoverIndex) {\n        return;\n      } // Determine rectangle on screen\n\n\n      var hoverBoundingRect = findDOMNode(component).getBoundingClientRect(); // Get horizontal middle\n\n      var hoverMiddleX = (hoverBoundingRect.right - hoverBoundingRect.left) / 2; // Determine mouse position: {x:, y:}\n\n      var clientOffset = monitor.getClientOffset(); // Get pixels to the left\n\n      var hoverClientX = clientOffset.x - hoverBoundingRect.x; // .x === .left\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging rightwards\n\n      if (dragIndex < hoverIndex && hoverClientX < hoverMiddleX) {\n        return;\n      } // Dragging leftwards\n\n\n      if (dragIndex > hoverIndex && hoverClientX > hoverMiddleX) {\n        return;\n      } // Time to actually perform the action\n\n\n      props.moveDndItem(dragIndex, hoverIndex); // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n\n      monitor.getItem().index = hoverIndex;\n    }\n  };\n\n  var Wrapper = /*#__PURE__*/function (_Component) {\n    _inherits(Wrapper, _Component);\n\n    var _super = _createSuper(Wrapper);\n\n    function Wrapper() {\n      _classCallCheck(this, Wrapper);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(Wrapper, [{\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            connectDragSource = _this$props.connectDragSource,\n            connectDropTarget = _this$props.connectDropTarget; // const opacity = isDragging ? 0 : 1;\n\n        return connectDragSource(connectDropTarget(React.createElement(\"div\", {\n          className: \"DndWrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, React.createElement(DndItem, Object.assign({}, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        })))));\n      }\n    }]);\n\n    return Wrapper;\n  }(Component);\n\n  return flow(DropTarget(ITEM_TYPE, spriteTarget, function (connect) {\n    return {\n      connectDropTarget: connect.dropTarget()\n    };\n  }), DragSource(ITEM_TYPE, spriteSource, function (connect, monitor) {\n    return {\n      connectDragSource: connect.dragSource(),\n      isDragging: monitor.isDragging()\n    };\n  }))(Wrapper);\n}","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/utils/dndWrapper.js"],"names":["React","Component","DragSource","DropTarget","findDOMNode","flow","DndWrapper","DndItem","ITEM_TYPE","spriteSource","beginDrag","props","onDragStart","name","index","spriteTarget","hover","monitor","component","dragIndex","getItem","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleX","right","left","clientOffset","getClientOffset","hoverClientX","x","moveDndItem","Wrapper","connectDragSource","connectDropTarget","connect","dropTarget","dragSource","isDragging"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { DragSource, DropTarget } from \"react-dnd\";\nimport { findDOMNode } from \"react-dom\";\nimport { flow } from \"lodash\";\n\nexport default function DndWrapper(DndItem, ITEM_TYPE) {\n  const spriteSource = {\n    beginDrag(props) {\n      if (props.onDragStart) {\n        props.onDragStart();\n      }\n      return {\n        name: props.name,\n        index: props.index\n      };\n    }\n  };\n\n  const spriteTarget = {\n    hover(props, monitor, component) {\n      if (!component) {\n        return null;\n      }\n      const dragIndex = monitor.getItem().index;\n      const hoverIndex = props.index;\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = findDOMNode(component).getBoundingClientRect();\n      // Get horizontal middle\n      const hoverMiddleX =\n        (hoverBoundingRect.right - hoverBoundingRect.left) / 2;\n      // Determine mouse position: {x:, y:}\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the left\n      const hoverClientX = clientOffset.x - hoverBoundingRect.x; // .x === .left\n\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging rightwards\n      if (dragIndex < hoverIndex && hoverClientX < hoverMiddleX) {\n        return;\n      }\n      // Dragging leftwards\n      if (dragIndex > hoverIndex && hoverClientX > hoverMiddleX) {\n        return;\n      }\n      // Time to actually perform the action\n      props.moveDndItem(dragIndex, hoverIndex);\n\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      monitor.getItem().index = hoverIndex;\n    }\n  };\n\n  class Wrapper extends Component {\n    render() {\n      const {\n        // text,\n        // isDragging,\n        connectDragSource,\n        connectDropTarget\n      } = this.props;\n      // const opacity = isDragging ? 0 : 1;\n      return connectDragSource(\n        connectDropTarget(\n          <div className=\"DndWrapper\">\n            <DndItem {...this.props} />\n          </div>\n        )\n      );\n    }\n  }\n\n  return flow(\n    DropTarget(ITEM_TYPE, spriteTarget, connect => ({\n      connectDropTarget: connect.dropTarget()\n    })),\n    DragSource(ITEM_TYPE, spriteSource, (connect, monitor) => ({\n      connectDragSource: connect.dragSource(),\n      isDragging: monitor.isDragging()\n    }))\n  )(Wrapper);\n}\n"]},"metadata":{},"sourceType":"module"}