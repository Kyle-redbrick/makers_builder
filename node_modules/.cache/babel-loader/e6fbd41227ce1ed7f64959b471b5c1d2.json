{"ast":null,"code":"var _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Python/View.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport PopUp, { showPopUp } from \"../../Common/Component/PopUp\";\nimport { URL } from \"../../Common/Util/Constant\";\nimport \"./index.scss\"; //layout Component\n\nimport Header from \"./Components/LayoutComponents/Header\";\nimport Footer from \"./Components/LayoutComponents/Footer\"; // import ReplaceKeyboard from \"./Components/LayoutComponents/ReplaceKeyboard\";\n// Scene Compoent\n\nimport Title from \"./Components/SceneComponents/Title\";\nimport Chat from \"./Components/SceneComponents/MessageComponents/Chat\";\nimport Narration from \"./Components/SceneComponents/MessageComponents/Narration\"; // CodeEditor\n\nimport CodeEditor from \"./Components/CodeEditor\";\nimport Select from \"./Components/SceneComponents/Select\";\nimport Result from \"./Components/SceneComponents/Result\";\nimport { SCENE_MODE, OVERLAY_VIEW } from \"./Util/Constant\"; // Popup\n\nimport InfoPopup from \"./Components/PopupComponents/InfoPopup\";\nimport buliderBgImg from \"../../Image/newPython/bg-builder@2x.png\";\nimport skipIcon from \"../../Image/newPython/ic-skip.svg\";\nimport clueIcon from \"../../Image/newPython/btn-clue@2x.png\"; // studyTimer\n\nimport StudyTimer from \"./Components/StudyTimer\";\nimport { injectIntl } from \"react-intl\";\n\nvar Body = function Body(props) {\n  var sceneMode = props.sceneMode,\n      isExecWindowOpen = props.isExecWindowOpen,\n      isCodeEditorOpen = props.isCodeEditorOpen,\n      isInfoPopupOpen = props.isInfoPopupOpen,\n      handleExecWindow = props.handleExecWindow,\n      handleInfoPopup = props.handleInfoPopup,\n      handleNextScript = props.handleNextScript,\n      handleNextDestination = props.handleNextDestination,\n      handleSceneMode = props.handleSceneMode,\n      chatHistory = props.chatHistory,\n      handleClueBtn = props.handleClueBtn,\n      contentBoxWidth = props.contentBoxWidth,\n      contentBoxHeight = props.contentBoxHeight,\n      contentBoxFontSize = props.contentBoxFontSize,\n      currentScriptData = props.currentScriptData,\n      isReadOnly = props.isReadOnly,\n      codeEditor = props.codeEditor,\n      templateCode = props.templateCode,\n      sampleData = props.sampleData,\n      infoPopupData = props.infoPopupData,\n      isShowAnswerCode = props.isShowAnswerCode,\n      outro = props.outro,\n      isShowClear = props.isShowClear,\n      checkAnswer = props.checkAnswer,\n      isShowFailScript = props.isShowFailScript,\n      answerFailScript = props.answerFailScript,\n      clueMedia = props.clueMedia,\n      conditionCheck = props.conditionCheck,\n      setConditionCheck = props.setConditionCheck,\n      intl = props.intl;\n  var isLoading = contentBoxWidth;\n  var _scriptData = {};\n  var backgroundMediaType = \"image\";\n\n  if (isShowFailScript) {\n    _scriptData = answerFailScript;\n  } else {\n    _scriptData = currentScriptData;\n  }\n\n  if (currentScriptData.type !== \"result\" && currentScriptData) {\n    if (currentScriptData.media.src.includes(\".mp4\") || outro) {\n      backgroundMediaType = \"video\";\n    }\n  }\n\n  return React.createElement(\"section\", {\n    className: \"body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"mainArea\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, isLoading && React.createElement(\"div\", {\n    className: \"contentBox\",\n    style: {\n      width: \"\".concat(contentBoxWidth, \"px\"),\n      height: \"\".concat(contentBoxHeight, \"px\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"contentBoxBg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, isShowClear ? React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"imageBg\",\n    style: {\n      background: \"url(\".concat(URL.S3_DREAMCLASS, \"/clear.png?p\").concat(Date.now(), \") center/cover\")\n    },\n    onClick: function onClick() {\n      handleNextScript();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"nextBtn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, intl.formatMessage({\n    id: \"ID_PYTHON_CLICK_VIEW\"\n  }))) : backgroundMediaType === \"video\" ? React.createElement(\"div\", {\n    className: \"videoBg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(\"video\", {\n    autoPlay: true,\n    loop: true,\n    width: \"100%\",\n    height: \"100%\",\n    src: outro ? \"\".concat(URL.S3_DREAMCLASS, \"/\") + outro : \"\".concat(URL.S3_DREAMCLASS, \"/\") + _scriptData.media.src,\n    onClick: function onClick() {\n      handleNextScript();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  })) : React.createElement(\"div\", {\n    className: \"imageBg\",\n    style: {\n      background: \"url(\".concat(_scriptData && _scriptData.media ? \"\".concat(URL.S3_DREAMCLASS, \"/\") + _scriptData.media.src : \"\", \") no-repeat center/cover\")\n    },\n    onClick: function onClick() {\n      handleNextScript();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }), !isShowClear ? React.createElement(React.Fragment, null, React.createElement(Chat, {\n    isDisplayOn: sceneMode === SCENE_MODE.CHAT,\n    handleNextScript: handleNextScript,\n    currentScriptData: currentScriptData,\n    contentBoxFontSize: contentBoxFontSize,\n    isShowFailScript: isShowFailScript,\n    answerFailScript: answerFailScript,\n    conditionCheck: conditionCheck,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }), React.createElement(Narration, {\n    isDisplayOn: sceneMode === SCENE_MODE.ANNOUNCE,\n    handleNextScript: handleNextScript,\n    currentScriptData: currentScriptData,\n    sceneMode: sceneMode,\n    contentBoxFontSize: contentBoxFontSize,\n    handleClueBtn: handleClueBtn,\n    conditionCheck: conditionCheck,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  })) : null, ([\"media\"].includes(currentScriptData.type) || outro) && React.createElement(\"button\", {\n    className: \"skipBtn\",\n    onClick: function onClick() {\n      return handleNextScript();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, intl.formatMessage({\n    id: \"ID_PYTHON_SKIP_BTN\"\n  }), React.createElement(\"img\", {\n    src: skipIcon,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  })), clueMedia && sceneMode !== SCENE_MODE.MEDIA && React.createElement(\"button\", {\n    className: \"clueBtn\",\n    onClick: function onClick() {\n      return showPopUp(React.createElement(PopUp.PythonClue, {\n        clueMedia: clueMedia,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }), {\n        defaultPadding: false,\n        pythonPopup: true,\n        dismissButton: false\n      });\n    },\n    style: {\n      right: contentBoxWidth * (12 / 648)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: clueIcon,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  })))), React.createElement(CodeEditor, {\n    isCodeEditorOpen: isCodeEditorOpen,\n    isExecWindowOpen: isExecWindowOpen,\n    handleExecWindow: handleExecWindow,\n    handleSceneMode: handleSceneMode,\n    handleNextScript: handleNextScript,\n    contentBoxWidth: contentBoxWidth,\n    contentBoxHeight: contentBoxHeight,\n    isReadOnly: isReadOnly,\n    codeEditor: codeEditor,\n    checkAnswer: checkAnswer,\n    templateCode: templateCode,\n    sampleData: sampleData,\n    isShowAnswerCode: isShowAnswerCode,\n    conditionCheck: conditionCheck,\n    setConditionCheck: setConditionCheck,\n    isShowClear: isShowClear,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  })), isInfoPopupOpen && React.createElement(InfoPopup, {\n    handleInfoPopup: handleInfoPopup,\n    chatHistory: chatHistory,\n    infoPopupData: infoPopupData,\n    isShowAnswerCode: isShowAnswerCode,\n    handleNextDestination: handleNextDestination,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }));\n};\n\nvar Overlay = function Overlay(_ref) {\n  var sceneMode = _ref.sceneMode,\n      currentScriptData = _ref.currentScriptData,\n      handleNextScript = _ref.handleNextScript,\n      handleNextDestination = _ref.handleNextDestination,\n      requestFullscreen = _ref.requestFullscreen,\n      goal = _ref.goal,\n      onClickProjectReplay = _ref.onClickProjectReplay,\n      onClickNextProjectPlay = _ref.onClickNextProjectPlay;\n\n  if (OVERLAY_VIEW(sceneMode)) {\n    return React.createElement(\"div\", {\n      className: \"overlay \".concat(sceneMode === SCENE_MODE.INTRO ? \"cursor\" : \"\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, sceneMode === SCENE_MODE.INTRO && React.createElement(Title, {\n      currentScriptData: currentScriptData,\n      handleNextScript: handleNextScript,\n      requestFullscreen: requestFullscreen,\n      goal: goal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }), sceneMode === SCENE_MODE.QUESTION && React.createElement(Select, {\n      currentScriptData: currentScriptData,\n      handleNextScript: handleNextScript,\n      handleNextDestination: handleNextDestination,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }), sceneMode === SCENE_MODE.RESULT && React.createElement(Result, {\n      currentScriptData: currentScriptData,\n      onClickProjectReplay: onClickProjectReplay,\n      onClickNextProjectPlay: onClickNextProjectPlay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }));\n  } else {\n    return null;\n  }\n};\n\nfunction View(props) {\n  var sceneMode = props.sceneMode,\n      isCodeEditorOpen = props.isCodeEditorOpen,\n      isExecWindowOpen = props.isExecWindowOpen,\n      isInfoPopupOpen = props.isInfoPopupOpen,\n      handleSceneMode = props.handleSceneMode,\n      handleCodeEditor = props.handleCodeEditor,\n      handleExecWindow = props.handleExecWindow,\n      handleInfoPopup = props.handleInfoPopup,\n      contentBoxFontSize = props.contentBoxFontSize,\n      changeContentFontSize = props.changeContentFontSize,\n      isShowClueBtn = props.isShowClueBtn,\n      handleClueBtn = props.handleClueBtn,\n      requestFullscreen = props.requestFullscreen,\n      contentBoxWidth = props.contentBoxWidth,\n      contentBoxHeight = props.contentBoxHeight,\n      projectTitle = props.projectTitle,\n      currentScriptData = props.currentScriptData,\n      handleNextScript = props.handleNextScript,\n      handleNextDestination = props.handleNextDestination,\n      goal = props.goal,\n      handleNextScene = props.handleNextScene,\n      onClickRestartBtn = props.onClickRestartBtn,\n      chatHistory = props.chatHistory,\n      conditionCheck = props.conditionCheck,\n      setConditionCheck = props.setConditionCheck,\n      codeEditor = props.codeEditor,\n      isReadOnly = props.isReadOnly,\n      templateCode = props.templateCode,\n      sampleData = props.sampleData,\n      infoPopupData = props.infoPopupData,\n      isShowAnswerCode = props.isShowAnswerCode,\n      outro = props.outro,\n      isShowClear = props.isShowClear,\n      checkAnswer = props.checkAnswer,\n      isShowFailScript = props.isShowFailScript,\n      answerFailScript = props.answerFailScript,\n      onClickProjectReplay = props.onClickProjectReplay,\n      onClickNextProjectPlay = props.onClickNextProjectPlay,\n      isShowProjectItems = props.isShowProjectItems,\n      isPlayBGM = props.isPlayBGM,\n      isPlayEffect = props.isPlayEffect,\n      onSaveSettings = props.onSaveSettings,\n      clueMedia = props.clueMedia,\n      myProjectId = props.myProjectId,\n      studiedMinutes = props.studiedMinutes,\n      projectId = props.projectId,\n      intl = props.intl;\n  return React.createElement(\"div\", {\n    className: \"pythonView\",\n    style: {\n      background: \"url(\".concat(buliderBgImg, \") no-repeat center/cover\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"pythonPagePopup\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356\n    },\n    __self: this\n  }), React.createElement(\"section\", {\n    className: \"pythonViewContent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358\n    },\n    __self: this\n  }, React.createElement(Overlay, {\n    sceneMode: sceneMode,\n    currentScriptData: currentScriptData,\n    handleNextScript: handleNextScript,\n    handleNextDestination: handleNextDestination,\n    requestFullscreen: requestFullscreen,\n    goal: goal,\n    onClickProjectReplay: onClickProjectReplay,\n    onClickNextProjectPlay: onClickNextProjectPlay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"defaultView\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370\n    },\n    __self: this\n  }, React.createElement(Header, {\n    handleCodeEditor: handleCodeEditor,\n    handleInfoPopup: handleInfoPopup,\n    onClickRestartBtn: onClickRestartBtn,\n    projectTitle: projectTitle,\n    handleNextScript: handleNextScript,\n    conditionCheck: conditionCheck,\n    setConditionCheck: setConditionCheck // project Items\n    ,\n    isShowProjectItems: isShowProjectItems // play bgm\n    ,\n    isPlayBGM: isPlayBGM,\n    isPlayEffect: isPlayEffect,\n    onSaveSettings: onSaveSettings,\n    projectId: projectId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371\n    },\n    __self: this\n  }), React.createElement(Body, {\n    sceneMode: sceneMode,\n    isCodeEditorOpen: isCodeEditorOpen,\n    isExecWindowOpen: isExecWindowOpen,\n    isInfoPopupOpen: isInfoPopupOpen,\n    isShowClueBtn: isShowClueBtn,\n    handleClueBtn: handleClueBtn,\n    handleExecWindow: handleExecWindow,\n    handleInfoPopup: handleInfoPopup,\n    handleSceneMode: handleSceneMode,\n    contentBoxFontSize: contentBoxFontSize,\n    changeContentFontSize: changeContentFontSize // size options\n    ,\n    contentBoxWidth: contentBoxWidth,\n    contentBoxHeight: contentBoxHeight //sceneData\n    ,\n    currentScriptData: currentScriptData,\n    handleNextScript: handleNextScript,\n    handleNextScene: handleNextScene,\n    chatHistory: chatHistory // codeEditor\n    ,\n    isReadOnly: isReadOnly,\n    codeEditor: codeEditor,\n    templateCode: templateCode,\n    sampleData: sampleData // infoPopup data\n    ,\n    infoPopupData: infoPopupData,\n    isShowAnswerCode: isShowAnswerCode // outro \n    ,\n    outro: outro // check Answer is corred\n    ,\n    isShowClear: isShowClear,\n    checkAnswer: checkAnswer // goto destination\n    ,\n    handleNextDestination: handleNextDestination // answer fail script \n    ,\n    isShowFailScript: isShowFailScript,\n    answerFailScript: answerFailScript // project finished\n    ,\n    onClickProjectReplay: onClickProjectReplay,\n    onClickNextProjectPlay: onClickNextProjectPlay // clue media\n    ,\n    clueMedia: clueMedia,\n    conditionCheck: conditionCheck,\n    setConditionCheck: setConditionCheck,\n    intl: intl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387\n    },\n    __self: this\n  }), React.createElement(StudyTimer, {\n    myProjectId: myProjectId,\n    studiedMinutes: studiedMinutes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434\n    },\n    __self: this\n  }), React.createElement(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435\n    },\n    __self: this\n  }))));\n}\n\nView.propTypes = {\n  sceneMode: PropTypes.string,\n  isCollectionPopupOpen: PropTypes.bool,\n  isSettingPopupOpen: PropTypes.bool,\n  isAlertPopupOpen: PropTypes.bool,\n  isExecResultPopupOpen: PropTypes.bool,\n  isExecWindowOpen: PropTypes.bool,\n  isCodeEditorOpen: PropTypes.bool,\n  handleCodeEditor: PropTypes.func,\n  handleExecWindow: PropTypes.func,\n  handleSceneMode: PropTypes.func\n};\nexport default injectIntl(View);","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Python/View.js"],"names":["React","PropTypes","PopUp","showPopUp","URL","Header","Footer","Title","Chat","Narration","CodeEditor","Select","Result","SCENE_MODE","OVERLAY_VIEW","InfoPopup","buliderBgImg","clueIcon","StudyTimer","injectIntl","Body","props","sceneMode","isExecWindowOpen","isCodeEditorOpen","isInfoPopupOpen","handleExecWindow","handleInfoPopup","handleNextScript","handleNextDestination","handleSceneMode","chatHistory","handleClueBtn","contentBoxWidth","contentBoxHeight","contentBoxFontSize","currentScriptData","isReadOnly","codeEditor","templateCode","sampleData","infoPopupData","isShowAnswerCode","outro","isShowClear","checkAnswer","isShowFailScript","answerFailScript","clueMedia","conditionCheck","setConditionCheck","intl","isLoading","_scriptData","backgroundMediaType","type","media","src","includes","width","height","background","S3_DREAMCLASS","Date","now","formatMessage","id","CHAT","ANNOUNCE","skipIcon","MEDIA","defaultPadding","pythonPopup","dismissButton","right","Overlay","requestFullscreen","goal","onClickProjectReplay","onClickNextProjectPlay","INTRO","QUESTION","RESULT","View","handleCodeEditor","changeContentFontSize","isShowClueBtn","projectTitle","handleNextScene","onClickRestartBtn","isShowProjectItems","isPlayBGM","isPlayEffect","onSaveSettings","myProjectId","studiedMinutes","projectId","propTypes","string","isCollectionPopupOpen","bool","isSettingPopupOpen","isAlertPopupOpen","isExecResultPopupOpen","func"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport PopUp, { showPopUp } from \"../../Common/Component/PopUp\";\nimport { URL } from \"../../Common/Util/Constant\";\nimport \"./index.scss\";\n\n//layout Component\nimport Header from \"./Components/LayoutComponents/Header\";\nimport Footer from \"./Components/LayoutComponents/Footer\";\n// import ReplaceKeyboard from \"./Components/LayoutComponents/ReplaceKeyboard\";\n\n// Scene Compoent\nimport Title from \"./Components/SceneComponents/Title\";\nimport Chat from \"./Components/SceneComponents/MessageComponents/Chat\";\nimport Narration from \"./Components/SceneComponents/MessageComponents/Narration\";\n\n// CodeEditor\nimport CodeEditor from \"./Components/CodeEditor\";\nimport Select from \"./Components/SceneComponents/Select\";\nimport Result from \"./Components/SceneComponents/Result\";\nimport { SCENE_MODE, OVERLAY_VIEW } from \"./Util/Constant\";\n\n// Popup\nimport InfoPopup from \"./Components/PopupComponents/InfoPopup\";\n\nimport buliderBgImg from \"../../Image/newPython/bg-builder@2x.png\";\nimport skipIcon from \"../../Image/newPython/ic-skip.svg\";\nimport clueIcon from \"../../Image/newPython/btn-clue@2x.png\";\n\n// studyTimer\nimport StudyTimer from \"./Components/StudyTimer\"\nimport { injectIntl } from \"react-intl\";\n\nconst Body = props => {\n  const {\n    sceneMode,\n    isExecWindowOpen,\n    isCodeEditorOpen,\n    isInfoPopupOpen,\n    handleExecWindow,\n    handleInfoPopup,\n    handleNextScript,\n    handleNextDestination,\n    handleSceneMode,\n    chatHistory,\n    handleClueBtn,\n\n    // size options\n    contentBoxWidth,\n    contentBoxHeight,\n    contentBoxFontSize,\n    currentScriptData,\n\n    // codeEditor\n    isReadOnly,\n    codeEditor,\n    templateCode,\n    sampleData,\n\n    // infoPopup data\n    infoPopupData,\n    isShowAnswerCode,\n\n    // outro\n    outro,\n\n    // show clear image\n    isShowClear,\n    checkAnswer,\n\n    // answer fail script \n    isShowFailScript,\n    answerFailScript,\n\n    // clue media\n    clueMedia,\n    conditionCheck,\n    setConditionCheck,\n\n    intl\n  } = props;\n  const isLoading = contentBoxWidth;\n\n  let _scriptData = {};\n  let backgroundMediaType = \"image\";\n\n  if(isShowFailScript) {\n    _scriptData = answerFailScript\n  } else {\n    _scriptData = currentScriptData\n  }\n\n  if(currentScriptData.type !== \"result\" && currentScriptData) {\n    if(currentScriptData.media.src.includes(\".mp4\") || outro) {\n      backgroundMediaType = \"video\"\n    }\n  }\n\n  return (\n    <section className=\"body\">\n      <div className=\"mainArea\">\n        {isLoading && (\n          <div\n            className=\"contentBox\"\n            style={{\n              width: `${contentBoxWidth}px`,\n              height: `${contentBoxHeight}px`\n            }}\n          >\n            <div className=\"contentBoxBg\">\n              {\n              isShowClear \n              ? <>\n              <div\n                className=\"imageBg\"\n                style={{\n                  background: `url(${URL.S3_DREAMCLASS}/clear.png?p${Date.now()}) center/cover`\n                }}\n                onClick={()=>{handleNextScript()}}\n              />\n              <span className=\"nextBtn\" >{intl.formatMessage({ id: \"ID_PYTHON_CLICK_VIEW\" })}</span>\n              </>\n              : (backgroundMediaType === \"video\") ? (\n                <div className=\"videoBg\">\n                  <video\n                    autoPlay\n                    loop={true}\n                    width=\"100%\"\n                    height=\"100%\"\n                    src={outro ? `${URL.S3_DREAMCLASS}/`+outro : `${URL.S3_DREAMCLASS}/`+_scriptData.media.src}\n                    onClick={()=>{handleNextScript()}}\n                  >\n                    {/* <source src={outro ? `${URL.S3_DREAMCLASS}/`+outro : `${URL.S3_DREAMCLASS}/`+currentScriptData.media.src} /> */}\n                  </video>\n                </div>\n              ) : (\n                <div\n                  className=\"imageBg\"\n                  style={{\n                    background: `url(${\n                      _scriptData && _scriptData.media\n                        ? `${URL.S3_DREAMCLASS}/`+_scriptData.media.src\n                        : \"\"\n                    }) no-repeat center/cover`\n                  }}\n                  onClick={()=>{handleNextScript()}}\n                />\n              )\n              }\n              {\n                !isShowClear\n                ?\n                <>\n                  <Chat\n                    isDisplayOn={sceneMode === SCENE_MODE.CHAT}\n                    handleNextScript={handleNextScript}\n                    currentScriptData={currentScriptData}\n                    contentBoxFontSize={contentBoxFontSize}\n                    isShowFailScript={isShowFailScript}\n                    answerFailScript={answerFailScript}\n                    conditionCheck={conditionCheck}\n                  />\n                  <Narration\n                    isDisplayOn={sceneMode === SCENE_MODE.ANNOUNCE}\n                    handleNextScript={handleNextScript}\n                    currentScriptData={currentScriptData}\n                    sceneMode={sceneMode}\n                    contentBoxFontSize={contentBoxFontSize}\n                    handleClueBtn={handleClueBtn}\n                    conditionCheck={conditionCheck}\n                  />\n                </>\n                : null\n              }\n              {([\"media\"].includes(currentScriptData.type) || outro) && (\n                <button className=\"skipBtn\" onClick={() => handleNextScript()}>\n                  {intl.formatMessage({ id: \"ID_PYTHON_SKIP_BTN\" })}\n                  <img src={skipIcon} alt=\"\" />\n                </button>\n              )}\n              {clueMedia && sceneMode !== SCENE_MODE.MEDIA && (\n                <button\n                  className=\"clueBtn\"\n                  onClick={() =>\n                    showPopUp(<PopUp.PythonClue clueMedia={clueMedia}/>, {\n                      defaultPadding: false,\n                      pythonPopup: true,\n                      dismissButton: false\n                    })\n                  }\n                  style={{ right: contentBoxWidth * (12 / 648) }}\n                >\n                  <img src={clueIcon} alt=\"\" />\n                </button>\n              )}\n            </div>\n          </div>\n        )}\n\n        <CodeEditor\n          isCodeEditorOpen={isCodeEditorOpen}\n          isExecWindowOpen={isExecWindowOpen}\n          handleExecWindow={handleExecWindow}\n          handleSceneMode={handleSceneMode}\n          handleNextScript={handleNextScript}\n          contentBoxWidth={contentBoxWidth}\n          contentBoxHeight={contentBoxHeight}\n          isReadOnly={isReadOnly}\n          codeEditor={codeEditor}\n          checkAnswer={checkAnswer}\n          templateCode={templateCode}\n          sampleData={sampleData}\n          isShowAnswerCode={isShowAnswerCode}\n          conditionCheck={conditionCheck}\n          setConditionCheck={setConditionCheck}\n          isShowClear={isShowClear}\n        />\n      </div>\n\n      {isInfoPopupOpen && (\n        <InfoPopup\n          handleInfoPopup={handleInfoPopup}\n          chatHistory={chatHistory}\n          infoPopupData={infoPopupData}\n          isShowAnswerCode={isShowAnswerCode}\n          handleNextDestination={handleNextDestination}\n        />\n      )}\n    </section>\n  );\n};\n\nconst Overlay = ({\n  sceneMode,\n  currentScriptData,\n  handleNextScript,\n  handleNextDestination,\n  requestFullscreen,\n  goal,\n  onClickProjectReplay,\n  onClickNextProjectPlay\n}) => {\n  if (OVERLAY_VIEW(sceneMode)) {\n    return (\n      <div\n        className={`overlay ${sceneMode === SCENE_MODE.INTRO ? \"cursor\" : \"\"}`}\n      >\n        {sceneMode === SCENE_MODE.INTRO && (\n          <Title\n            currentScriptData={currentScriptData}\n            handleNextScript={handleNextScript}\n            requestFullscreen={requestFullscreen}\n            goal={goal}\n          />\n        )}\n        {sceneMode === SCENE_MODE.QUESTION && (\n          <Select\n            currentScriptData={currentScriptData}\n            handleNextScript={handleNextScript}\n            handleNextDestination={handleNextDestination}\n          />\n        )}\n        {sceneMode === SCENE_MODE.RESULT && (\n          <Result \n            currentScriptData={currentScriptData} \n            onClickProjectReplay={onClickProjectReplay}\n            onClickNextProjectPlay={onClickNextProjectPlay}\n          />\n        )}\n      </div>\n    );\n  } else {\n    return null;\n  }\n};\n\nfunction View(props) {\n  const {\n    sceneMode,\n    isCodeEditorOpen,\n    isExecWindowOpen,\n    isInfoPopupOpen,\n    handleSceneMode,\n    handleCodeEditor,\n    handleExecWindow,\n    handleInfoPopup,\n    contentBoxFontSize,\n    changeContentFontSize,\n    isShowClueBtn,\n    handleClueBtn,\n    requestFullscreen,\n    // size\n    contentBoxWidth,\n    contentBoxHeight,\n    //sceneData\n    projectTitle,\n    currentScriptData,\n    handleNextScript,\n    handleNextDestination,\n    goal,\n    handleNextScene,\n    onClickRestartBtn,\n    chatHistory,\n    conditionCheck,\n    setConditionCheck,\n    // codeEditor\n    codeEditor,\n    isReadOnly,\n    // setIsReadOnly,\n    templateCode,\n    sampleData,\n\n    // infoPopup data\n    infoPopupData,\n    isShowAnswerCode,\n\n    // outro\n    outro,\n\n    // check Answer is corred\n    isShowClear,\n    checkAnswer,\n\n    // answer fail script \n    isShowFailScript,\n    answerFailScript,\n\n    // project finished \n    onClickProjectReplay,\n    onClickNextProjectPlay,\n\n    // project items\n    isShowProjectItems,\n\n    // play BGM\n    isPlayBGM,\n    isPlayEffect,\n    onSaveSettings,\n\n    //clue media\n    clueMedia,\n    myProjectId,\n    studiedMinutes,\n    projectId,\n\n    intl\n  } = props;\n\n  return (\n    <div\n      className=\"pythonView\"\n      style={{\n        background: `url(${buliderBgImg}) no-repeat center/cover`\n      }}\n    >\n      <div id=\"pythonPagePopup\" />\n\n      <section className=\"pythonViewContent\">\n        <Overlay\n          sceneMode={sceneMode}\n          currentScriptData={currentScriptData}\n          handleNextScript={handleNextScript}\n          handleNextDestination={handleNextDestination}\n          requestFullscreen={requestFullscreen}\n          goal={goal}\n          onClickProjectReplay={onClickProjectReplay}\n          onClickNextProjectPlay={onClickNextProjectPlay}\n        />\n\n        <div className=\"defaultView\">\n          <Header\n            handleCodeEditor={handleCodeEditor}\n            handleInfoPopup={handleInfoPopup}\n            onClickRestartBtn={onClickRestartBtn}\n            projectTitle={projectTitle}\n            handleNextScript={handleNextScript}\n            conditionCheck={conditionCheck}\n            setConditionCheck={setConditionCheck}\n            // project Items\n            isShowProjectItems={isShowProjectItems}\n            // play bgm\n            isPlayBGM={isPlayBGM}\n            isPlayEffect={isPlayEffect}\n            onSaveSettings={onSaveSettings}\n            projectId={projectId}\n          />\n          <Body\n            sceneMode={sceneMode}\n            isCodeEditorOpen={isCodeEditorOpen}\n            isExecWindowOpen={isExecWindowOpen}\n            isInfoPopupOpen={isInfoPopupOpen}\n            isShowClueBtn={isShowClueBtn}\n            handleClueBtn={handleClueBtn}\n            handleExecWindow={handleExecWindow}\n            handleInfoPopup={handleInfoPopup}\n            handleSceneMode={handleSceneMode}\n            contentBoxFontSize={contentBoxFontSize}\n            changeContentFontSize={changeContentFontSize}\n            // size options\n            contentBoxWidth={contentBoxWidth}\n            contentBoxHeight={contentBoxHeight}\n            //sceneData\n            currentScriptData={currentScriptData}\n            handleNextScript={handleNextScript}\n            handleNextScene={handleNextScene}\n            chatHistory={chatHistory}\n            // codeEditor\n            isReadOnly={isReadOnly}\n            codeEditor={codeEditor}\n            templateCode={templateCode}\n            sampleData={sampleData}\n            // infoPopup data\n            infoPopupData={infoPopupData}\n            isShowAnswerCode={isShowAnswerCode}\n            // outro \n            outro={outro}\n            // check Answer is corred\n            isShowClear={isShowClear}\n            checkAnswer={checkAnswer}\n            // goto destination\n            handleNextDestination={handleNextDestination}\n            // answer fail script \n            isShowFailScript={isShowFailScript}\n            answerFailScript={answerFailScript}\n            // project finished\n            onClickProjectReplay={ onClickProjectReplay }\n            onClickNextProjectPlay={ onClickNextProjectPlay }\n            // clue media\n            clueMedia={ clueMedia }\n            conditionCheck={conditionCheck}\n            setConditionCheck={setConditionCheck}\n            intl={intl}\n          />\n          <StudyTimer myProjectId={myProjectId} studiedMinutes={studiedMinutes}/>\n          <Footer />\n          {/* <ReplaceKeyboard\n            isCodeEditorOpen={isCodeEditorOpen}\n            isReadOnly={isReadOnly}\n            setIsReadOnly={setIsReadOnly}\n            codeEditor={codeEditor}\n          /> */}\n        </div>\n      </section>\n    </div>\n  );\n}\n\nView.propTypes = {\n  sceneMode: PropTypes.string,\n  isCollectionPopupOpen: PropTypes.bool,\n  isSettingPopupOpen: PropTypes.bool,\n  isAlertPopupOpen: PropTypes.bool,\n  isExecResultPopupOpen: PropTypes.bool,\n  isExecWindowOpen: PropTypes.bool,\n  isCodeEditorOpen: PropTypes.bool,\n  handleCodeEditor: PropTypes.func,\n  handleExecWindow: PropTypes.func,\n  handleSceneMode: PropTypes.func\n};\n\nexport default injectIntl(View);\n"]},"metadata":{},"sourceType":"module"}