{"ast":null,"code":"import _assertThisInitialized from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _toConsumableArray from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _get from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectSpread from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Context from \"./context\";\nimport Line from \"./line\";\nimport { STATE, GRAMMAR, BLOCK } from \"./type\";\n\nvar Block =\n/*#__PURE__*/\nfunction () {\n  function Block() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Block);\n\n    this.id = props.id || Context.generateId();\n    this.parent = props.parent;\n    this.state = props.state;\n    this.grammar = props.grammar;\n    this.data = props.data;\n    this.children = props.children;\n  }\n\n  _createClass(Block, [{\n    key: \"clone\",\n    value: function clone(parent) {\n      var clone = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n      clone.id = Context.generateId();\n      clone.parent = parent;\n      clone.children = clone.children && this.children.map(function (child) {\n        return child.clone(clone);\n      });\n      return clone;\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(block) {\n      if (!(block instanceof Block)) {\n        return false;\n      }\n\n      return this.type === block.type && this.data === block.data;\n    }\n  }, {\n    key: \"createInstanceBlockWith\",\n    value: function createInstanceBlockWith(prototypeBlock) {\n      var instanceBlock = Object.assign(Object.create(Object.getPrototypeOf(prototypeBlock)), prototypeBlock);\n      instanceBlock.id = Context.generateId();\n      instanceBlock.state = STATE.INSTANCE;\n      instanceBlock.parent = this.parent;\n      instanceBlock.grammar = instanceBlock.getGrammarFor(this.parent);\n      instanceBlock.children = instanceBlock.getDefaultChildren();\n      return instanceBlock;\n    }\n  }, {\n    key: \"getGrammarFor\",\n    value: function getGrammarFor(parent) {// inherit\n    }\n  }, {\n    key: \"getDefaultChildren\",\n    value: function getDefaultChildren() {\n      // inherit\n      return [];\n    }\n  }, {\n    key: \"isCompatibleWith\",\n    value: function isCompatibleWith(instanceBlock) {\n      if (!this.children || this.children.length < 1) return true;\n      if (this.children.length !== instanceBlock.children.length) return false;\n\n      for (var i in this.children) {\n        var childToMaintain = this.children[i];\n        if (!childToMaintain.data) continue;\n\n        if (!instanceBlock.children[i].checkBlockReplaceable(childToMaintain) || childToMaintain.isDisabledFor(instanceBlock.children[i])) {\n          return false;\n        }\n      }\n\n      if (this.children[0] instanceof Action) {\n        var action = this.children[0];\n        var objectives = action.children || [];\n        action.parent = instanceBlock;\n\n        for (var _i in objectives) {\n          var objective = objectives[_i];\n          if (!objective.data) continue;\n\n          if (!objective.checkBlockReplaceable(objective)) {\n            action.parent = this;\n            return false;\n          }\n        }\n\n        action.parent = this;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"coverWith\",\n    value: function coverWith(instanceBlock) {\n      if (this.parent instanceof Line) {\n        this.parent.block = instanceBlock;\n      } else {\n        for (var i in this.parent.children) {\n          if (this.parent.children[i] === this) {\n            this.parent.children[i] = instanceBlock;\n          }\n        }\n      }\n\n      return instanceBlock;\n    }\n  }, {\n    key: \"replaceWith\",\n    value: function replaceWith(instanceBlock) {\n      if (this.parent instanceof Line) {\n        this.parent.block = instanceBlock;\n      } else {\n        for (var i in this.parent.children) {\n          if (this.parent.children[i] === this) {\n            this.parent.children[i] = instanceBlock;\n          }\n        }\n      }\n\n      if (this.children && this.children.length > 0) {\n        instanceBlock.children = this.children;\n\n        for (var _i2 in instanceBlock.children) {\n          instanceBlock.children[_i2].parent = instanceBlock;\n        }\n      }\n\n      return instanceBlock;\n    }\n  }, {\n    key: \"filterPrototypeBlocksReplaceable\",\n    value: function filterPrototypeBlocksReplaceable(prototypeBlocks) {\n      var _this = this;\n\n      return prototypeBlocks.filter(function (block) {\n        return _this.checkBlockReplaceable(block);\n      });\n    }\n  }, {\n    key: \"checkBlockReplaceable\",\n    value: function checkBlockReplaceable(block) {\n      if (!this.parent.isAvailableParentFor(block)) {\n        return false;\n      }\n\n      if (this.parent instanceof Line) {\n        return this.parent.checkAvailableForRootBlock(block);\n      } else if (this.parent instanceof Block) {\n        var childIndex = this.parent.children.indexOf(this);\n        return this.parent.checkChildAvailableAtIndex(block, childIndex);\n      }\n    }\n  }, {\n    key: \"checkChildAvailableAtIndex\",\n    value: function checkChildAvailableAtIndex(child, index) {\n      if (child instanceof Operator) {\n        if (this instanceof Operator) {\n          return false;\n        }\n\n        var operatorTypes = child.getOperatorTypes();\n        var finalChildTypes = this.getFinalChildTypesAt(index);\n\n        for (var i in finalChildTypes) {\n          if (operatorTypes.includes(finalChildTypes[i])) {\n            return true;\n          }\n        }\n\n        return false;\n      } else {\n        var availableChildTypes = this.getAvailableChildTypesAt(index);\n\n        for (var _i3 in availableChildTypes) {\n          if (child instanceof availableChildTypes[_i3]) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    }\n  }, {\n    key: \"getAvailableChildTypesAt\",\n    value: function getAvailableChildTypesAt(index, grammar) {\n      return [];\n    }\n  }, {\n    key: \"getFinalChildTypesAt\",\n    value: function getFinalChildTypesAt(index) {\n      return [];\n    }\n  }, {\n    key: \"isAvailableParentFor\",\n    value: function isAvailableParentFor(block) {\n      var availableParentTypes = block.getAvailableParentTypes();\n\n      for (var i in availableParentTypes) {\n        if (this instanceof availableParentTypes[i]) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getAvailableParentTypes\",\n    value: function getAvailableParentTypes() {\n      return [Line, Block];\n    }\n  }, {\n    key: \"filterPrototypeBlocksDisabled\",\n    value: function filterPrototypeBlocksDisabled(prototypeBlocks) {\n      var _this2 = this;\n\n      return prototypeBlocks.filter(function (block) {\n        return block.isDisabledFor(_this2);\n      });\n    }\n  }, {\n    key: \"isDisabledFor\",\n    value: function isDisabledFor(block) {\n      return false;\n    }\n  }, {\n    key: \"findChild\",\n    value: function findChild(where) {\n      if (!this.children) return;\n\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n\n        if (child.match(where)) {\n          return child;\n        }\n      }\n\n      for (var _i4 = 0; _i4 < this.children.length; _i4++) {\n        var _child = this.children[_i4];\n\n        var grandChild = _child.findChild(where);\n\n        if (grandChild) {\n          return grandChild;\n        }\n      }\n    }\n  }, {\n    key: \"findParent\",\n    value: function findParent(where) {\n      if (!this.parent) return;\n\n      if (this.parent.match(where)) {\n        return this.parent;\n      } else {\n        return this.parent.findParent(where);\n      }\n    }\n  }, {\n    key: \"findNextEmptyBlock\",\n    value: function findNextEmptyBlock() {\n      var whereEmpty = {\n        type: BLOCK.BLOCK\n      };\n      var parentLine = this.getParentLine();\n      var blocks = [];\n      Context.traverse(parentLine, {\n        onBlock: function onBlock(block) {\n          if (block.match(whereEmpty)) {\n            blocks.push(block);\n          }\n        }\n      });\n\n      if (blocks.length > 0) {\n        return blocks[0];\n      } else {\n        var nextLine = parentLine.getNextDisplayLine();\n\n        if (nextLine.block instanceof Block) {\n          return nextLine.block;\n        } else {\n          return;\n        }\n      }\n    }\n  }, {\n    key: \"match\",\n    value: function match(where) {\n      var type = where.type,\n          id = where.id,\n          state = where.state,\n          grammar = where.grammar,\n          data = where.data;\n      if (type && type !== this.type) return false;\n      if (id && id !== this.id) return false;\n      if (state && state !== this.state) return false;\n      if (grammar && grammar !== this.grammar) return false;\n      if (data && data !== this.data) return false;\n      return true;\n    }\n  }, {\n    key: \"getParentLine\",\n    value: function getParentLine() {\n      return this.findParent({\n        type: \"Line\"\n      });\n    }\n  }, {\n    key: \"getParentContext\",\n    value: function getParentContext() {\n      return this.findParent({\n        type: \"Context\"\n      });\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        constructor: this.type,\n        grammar: this.grammar,\n        data: this.data,\n        children: this.children ? this.children.map(function (child) {\n          return child.toJSON();\n        }) : undefined\n      };\n    }\n  }, {\n    key: \"toJavascript\",\n    value: function toJavascript() {\n      return \"\";\n    }\n  }, {\n    key: \"linesToJavascript\",\n    value: function linesToJavascript(lines) {\n      var code = \"\";\n\n      for (var i in lines) {\n        var line = lines[i];\n        var lineCode = line.toJavascript();\n\n        if (lineCode) {\n          if (code !== \"\") {\n            code += \"\\n\";\n          }\n\n          code += \"\\t\";\n          code += lineCode;\n        }\n      }\n\n      return code;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"Block\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return null;\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      return [];\n    }\n  }, {\n    key: \"getConstructorByName\",\n    value: function getConstructorByName(name) {\n      return {\n        Block: Block,\n        GameObject: GameObject,\n        Sprite: Sprite,\n        Screen: Screen,\n        Joystick: Joystick,\n        DPad: DPad,\n        Text: Text,\n        Sound: Sound,\n        Property: Property,\n        Action: Action,\n        Constant: Constant,\n        NumberBlock: NumberBlock,\n        StringBlock: StringBlock,\n        BooleanBlock: BooleanBlock,\n        Key: Key,\n        Direction: Direction,\n        Animation: Animation,\n        Position: Position,\n        Touch: Touch,\n        Random: Random,\n        Scene: Scene,\n        Axis: Axis,\n        Time: Time,\n        Util: Util,\n        Mobile: Mobile,\n        Ranking: Ranking,\n        Timer: Timer,\n        Variable: Variable,\n        Operator: Operator,\n        Callback: Callback,\n        FunctionBlock: FunctionBlock\n      }[name];\n    }\n  }, {\n    key: \"getCompatibleJSONFrom\",\n    value: function getCompatibleJSONFrom(json, parent) {\n      var compatibleJSON = {\n        constructor: json.constructor,\n        state: json.state,\n        grammar: json.grammar,\n        data: json.data,\n        children: json.children\n      };\n\n      if (json.blockType) {\n        compatibleJSON.constructor = json.blockType[0].toUpperCase() + json.blockType.slice(1, json.blockType.length);\n      }\n\n      if (json.blockType === \"sprite\") {\n        compatibleJSON.constructor = json.dataType[0].toUpperCase() + json.dataType.slice(1, json.dataType.length);\n      }\n\n      if (json.blockType === \"util\" && [\"if\", \"else if\", \"else\", \"repeat\"].includes(json.data)) {\n        compatibleJSON.grammar = GRAMMAR.PHRASE;\n      }\n\n      if (json.blockType === \"constant\") {\n        if (parent instanceof Action && parent.data === \"playAnimation\") {\n          compatibleJSON.constructor = BLOCK.ANIMATION;\n        } else if ([\"up\", \"down\", \"left\", \"right\"].includes(json.data)) {\n          compatibleJSON.constructor = BLOCK.DIRECTION;\n        } else if ([\"x\", \"y\"].includes(json.data)) {\n          compatibleJSON.constructor = BLOCK.AXIS;\n        } else if (json.data === \"touch\") {\n          compatibleJSON.constructor = BLOCK.TOUCH;\n        } else if (json.data === \"random\") {\n          compatibleJSON.constructor = BLOCK.RANDOM;\n        } else if (json.data instanceof Object) {\n          compatibleJSON.constructor = BLOCK.POSITION;\n        } else if ([\"true\", \"false\"].includes(json.data)) {\n          compatibleJSON.constructor = BLOCK.BOOLEANBLOCK;\n        } else if (isNaN(json.data)) {\n          compatibleJSON.constructor = BLOCK.STRINGBLOCK;\n        } else {\n          compatibleJSON.constructor = BLOCK.NUMBERBLOCK;\n        }\n      }\n\n      if (json.childs) {\n        compatibleJSON.children = json.childs;\n      }\n\n      if (json.mode) {\n        compatibleJSON.state = json.mode;\n      }\n\n      if (compatibleJSON.constructor === BLOCK.CALLBACK && json.data) {\n        compatibleJSON.children = json.data;\n      }\n\n      return compatibleJSON;\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json, parent) {\n      var compatibleJSON = Block.getCompatibleJSONFrom(json, parent);\n      var constructorName = compatibleJSON.constructor;\n      var Constructor = Block.getConstructorByName(constructorName) || Block;\n      var block = new Constructor(_objectSpread({}, compatibleJSON, {\n        state: STATE.INSTANCE,\n        parent: parent\n      }));\n\n      if (compatibleJSON.children) {\n        if (constructorName === BLOCK.CALLBACK) {\n          block.children = compatibleJSON.children.map(function (child) {\n            return Line.fromJSON(child, block);\n          });\n        } else {\n          block.children = compatibleJSON.children.map(function (child) {\n            return Block.fromJSON(child, block);\n          });\n        }\n      }\n\n      return block;\n    }\n  }]);\n\n  return Block;\n}();\n\nexport var GameObject =\n/*#__PURE__*/\nfunction (_Block) {\n  _inherits(GameObject, _Block);\n\n  function GameObject() {\n    _classCallCheck(this, GameObject);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GameObject).apply(this, arguments));\n  }\n\n  _createClass(GameObject, [{\n    key: \"getGrammarFor\",\n    value: function getGrammarFor(parent) {\n      if (parent instanceof Line) {\n        return GRAMMAR.SUBJECT;\n      } else {\n        return GRAMMAR.OBJECTIVE;\n      }\n    }\n  }, {\n    key: \"getDefaultChildren\",\n    value: function getDefaultChildren() {\n      if (this.grammar === GRAMMAR.SUBJECT) {\n        return [new Block({\n          state: STATE.INSTANCE,\n          parent: this\n        })];\n      } else {\n        return [];\n      }\n    }\n  }, {\n    key: \"getAvailableChildTypesAt\",\n    value: function getAvailableChildTypesAt(index) {\n      if (this.grammar === GRAMMAR.SUBJECT) {\n        return [Property, Action, Util];\n      } else if (this.grammar === GRAMMAR.OBJECTIVE) {\n        return [Property, Util];\n      } else {\n        return [];\n      }\n    }\n  }, {\n    key: \"toJavascript\",\n    value: function toJavascript() {\n      if (this.grammar === GRAMMAR.SUBJECT) {\n        var child = this.children[0];\n        var childCode = child.toJavascript();\n        return \"getSprite(\\\"\".concat(this.data, \"\\\")\").concat(childCode);\n      } else if (this.grammar === GRAMMAR.OBJECTIVE) {\n        var _child2 = this.children && this.children[0];\n\n        if (_child2) {\n          var _childCode = _child2.toJavascript();\n\n          return \"getSprite(\\\"\".concat(this.data, \"\\\")\").concat(_childCode);\n        } else {\n          if (this.parent.type === BLOCK.ACTION && this.parent.data === \"set\") {\n            return \"getSprite(\\\"\".concat(this.data, \"\\\")\");\n          } else {\n            return \"\\\"\".concat(this.data, \"\\\"\");\n          }\n        }\n      }\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"GameObject\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"GameObject\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks(gameObjects) {\n      var prototypeBlocks = [];\n\n      for (var i in gameObjects) {\n        var gameObject = gameObjects[i];\n        var prototypeBlock = void 0;\n\n        switch (gameObject.type) {\n          case \"sprite\":\n          case \"spine\":\n          case \"custom\":\n            prototypeBlock = Sprite.getPrototypeBlock(gameObject);\n            break;\n\n          case \"text\":\n            prototypeBlock = Text.getPrototypeBlock(gameObject);\n            break;\n\n          case \"component\":\n            if (gameObject.subtype === \"dpad\") {\n              prototypeBlock = DPad.getPrototypeBlock(gameObject);\n            } else {\n              prototypeBlock = Joystick.getPrototypeBlock(gameObject);\n            }\n\n            break;\n\n          case \"background\":\n            prototypeBlock = Screen.getPrototypeBlock(gameObject);\n            break;\n\n          case \"sound\":\n            prototypeBlock = Sound.getPrototypeBlock(gameObject);\n            break;\n\n          default:\n            continue;\n        }\n\n        prototypeBlocks.push(prototypeBlock);\n      }\n\n      return prototypeBlocks;\n    }\n  }]);\n\n  return GameObject;\n}(Block);\nexport var Sprite =\n/*#__PURE__*/\nfunction (_GameObject) {\n  _inherits(Sprite, _GameObject);\n\n  function Sprite() {\n    _classCallCheck(this, Sprite);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Sprite).apply(this, arguments));\n  }\n\n  _createClass(Sprite, [{\n    key: \"getDefaultChildren\",\n    value: function getDefaultChildren() {\n      if (this.grammar === GRAMMAR.OBJECTIVE) {\n        if (this.parent instanceof Action && this.parent.data === \"set\" && this.parent.parent instanceof Variable) {\n          return [new Block({\n            state: STATE.INSTANCE,\n            parent: this\n          })];\n        }\n      } else {\n        return _get(_getPrototypeOf(Sprite.prototype), \"getDefaultChildren\", this).call(this);\n      }\n    }\n  }, {\n    key: \"getAnimationIds\",\n    value: function getAnimationIds() {\n      var context = this.getParentContext();\n      if (!context) return [];\n      var gameObjectInfo = context.getGameObjectInfoWithName(this.data);\n      if (!gameObjectInfo) return [];\n      var animationIds = gameObjectInfo.animationIds || [];\n      return animationIds;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"Sprite\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"GameObject\";\n    }\n  }], [{\n    key: \"getPrototypeBlock\",\n    value: function getPrototypeBlock(sprite) {\n      return new Sprite({\n        data: sprite.name,\n        state: STATE.PROTOTYPE\n      });\n    }\n  }]);\n\n  return Sprite;\n}(GameObject);\nexport var Screen =\n/*#__PURE__*/\nfunction (_GameObject2) {\n  _inherits(Screen, _GameObject2);\n\n  function Screen() {\n    _classCallCheck(this, Screen);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Screen).apply(this, arguments));\n  }\n\n  _createClass(Screen, [{\n    key: \"type\",\n    get: function get() {\n      return \"Screen\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"GameObject\";\n    }\n  }], [{\n    key: \"getPrototypeBlock\",\n    value: function getPrototypeBlock(screen) {\n      return new Screen({\n        data: screen.name,\n        state: STATE.PROTOTYPE\n      });\n    }\n  }]);\n\n  return Screen;\n}(GameObject);\nexport var Joystick =\n/*#__PURE__*/\nfunction (_GameObject3) {\n  _inherits(Joystick, _GameObject3);\n\n  function Joystick() {\n    _classCallCheck(this, Joystick);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Joystick).apply(this, arguments));\n  }\n\n  _createClass(Joystick, [{\n    key: \"type\",\n    get: function get() {\n      return \"Joystick\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"GameObject\";\n    }\n  }], [{\n    key: \"getPrototypeBlock\",\n    value: function getPrototypeBlock(joystick) {\n      return new Joystick({\n        data: joystick.name,\n        state: STATE.PROTOTYPE\n      });\n    }\n  }]);\n\n  return Joystick;\n}(GameObject);\nexport var DPad =\n/*#__PURE__*/\nfunction (_GameObject4) {\n  _inherits(DPad, _GameObject4);\n\n  function DPad() {\n    _classCallCheck(this, DPad);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DPad).apply(this, arguments));\n  }\n\n  _createClass(DPad, [{\n    key: \"type\",\n    get: function get() {\n      return \"DPad\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"GameObject\";\n    }\n  }], [{\n    key: \"getPrototypeBlock\",\n    value: function getPrototypeBlock(dPad) {\n      return new DPad({\n        data: dPad.name,\n        state: STATE.PROTOTYPE\n      });\n    }\n  }]);\n\n  return DPad;\n}(GameObject);\nexport var Text =\n/*#__PURE__*/\nfunction (_GameObject5) {\n  _inherits(Text, _GameObject5);\n\n  function Text() {\n    _classCallCheck(this, Text);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Text).apply(this, arguments));\n  }\n\n  _createClass(Text, [{\n    key: \"type\",\n    get: function get() {\n      return \"Text\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"GameObject\";\n    }\n  }], [{\n    key: \"getPrototypeBlock\",\n    value: function getPrototypeBlock(text) {\n      return new Text({\n        data: text.name,\n        state: STATE.PROTOTYPE\n      });\n    }\n  }]);\n\n  return Text;\n}(GameObject);\nexport var Sound =\n/*#__PURE__*/\nfunction (_GameObject6) {\n  _inherits(Sound, _GameObject6);\n\n  function Sound() {\n    _classCallCheck(this, Sound);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Sound).apply(this, arguments));\n  }\n\n  _createClass(Sound, [{\n    key: \"toJavascript\",\n    value: function toJavascript() {\n      var child = this.children[0];\n      var childCode = child.toJavascript();\n      return childCode;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"Sound\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"GameObject\";\n    }\n  }], [{\n    key: \"getPrototypeBlock\",\n    value: function getPrototypeBlock(sound) {\n      return new Sound({\n        data: sound.name,\n        state: STATE.PROTOTYPE\n      });\n    }\n  }]);\n\n  return Sound;\n}(GameObject);\nexport var Property =\n/*#__PURE__*/\nfunction (_Block2) {\n  _inherits(Property, _Block2);\n\n  function Property() {\n    _classCallCheck(this, Property);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Property).apply(this, arguments));\n  }\n\n  _createClass(Property, [{\n    key: \"getGrammarFor\",\n    value: function getGrammarFor(parent) {\n      return parent.grammar;\n    }\n  }, {\n    key: \"getDefaultChildren\",\n    value: function getDefaultChildren() {\n      if (this.grammar === GRAMMAR.SUBJECT) {\n        return [new Block({\n          state: STATE.INSTANCE,\n          parent: this\n        })];\n      } else {\n        return [];\n      }\n    }\n  }, {\n    key: \"getAvailableChildTypesAt\",\n    value: function getAvailableChildTypesAt() {\n      return [Action];\n    }\n  }, {\n    key: \"getAvailableParentTypes\",\n    value: function getAvailableParentTypes() {\n      switch (this.data) {\n        case \"text\":\n          return [Text, Variable];\n\n        case \"x\":\n        case \"y\":\n          return [Sprite, Text, Screen, Joystick, DPad, Variable];\n\n        case \"width\":\n        case \"height\":\n          return [Sprite, Text, Joystick, DPad, Variable];\n\n        case \"size\":\n        case \"degree\":\n        case \"mass\":\n        case \"moveSpeed\":\n        case \"draggable\":\n        case \"movable\":\n        case \"flipX\":\n        case \"flipY\":\n        case \"velocityX\":\n        case \"velocityY\":\n        case \"gravityX\":\n        case \"gravityY\":\n        case \"bounceX\":\n        case \"bounceY\":\n        case \"accelerationX\":\n        case \"accelerationY\":\n          return [Sprite, Text, Variable];\n\n        default:\n          return [];\n      }\n    }\n  }, {\n    key: \"getPropertyType\",\n    value: function getPropertyType() {\n      switch (this.data) {\n        case \"text\":\n          return [StringBlock, Time];\n\n        case \"draggable\":\n        case \"movable\":\n        case \"flipX\":\n        case \"flipY\":\n          return [BooleanBlock];\n\n        case \"x\":\n        case \"y\":\n        case \"width\":\n        case \"height\":\n        case \"size\":\n        case \"degree\":\n        case \"mass\":\n        case \"moveSpeed\":\n        case \"velocityX\":\n        case \"velocityY\":\n        case \"gravityX\":\n        case \"gravityY\":\n        case \"bounceX\":\n        case \"bounceY\":\n        case \"accelerationX\":\n        case \"accelerationY\":\n          return [NumberBlock];\n\n        default:\n          return [];\n      }\n    }\n  }, {\n    key: \"toJavascript\",\n    value: function toJavascript() {\n      if (this.grammar === GRAMMAR.SUBJECT) {\n        var child = this.children[0];\n\n        if (child instanceof Action && child.data === \"set\") {\n          var childCode = child.toJavascript();\n          return childCode;\n        } else {\n          return;\n        }\n      } else if (this.grammar === GRAMMAR.OBJECTIVE) {\n        var upperCased = this.data[0].toUpperCase() + this.data.slice(1);\n        return \".get\".concat(upperCased, \"()\");\n      }\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"Property\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Property\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      var prototypeBlocks = [];\n      var propertyNames = Property.getPropertyNames();\n\n      for (var i = 0; i < propertyNames.length; i++) {\n        var propertyName = propertyNames[i];\n        prototypeBlocks.push(new Property({\n          data: propertyName,\n          state: STATE.PROTOTYPE\n        }));\n      }\n\n      return prototypeBlocks;\n    }\n  }, {\n    key: \"getPropertyNames\",\n    value: function getPropertyNames() {\n      return [\"text\", \"x\", \"y\", \"width\", \"height\", \"size\", \"degree\", \"mass\", \"moveSpeed\", \"draggable\", \"movable\", \"flipX\", \"flipY\", \"velocityX\", \"velocityY\", \"gravityX\", \"gravityY\", \"bounceX\", \"bounceY\", \"accelerationX\", \"accelerationY\"];\n    }\n  }]);\n\n  return Property;\n}(Block);\nexport var Action =\n/*#__PURE__*/\nfunction (_Block3) {\n  _inherits(Action, _Block3);\n\n  function Action() {\n    _classCallCheck(this, Action);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Action).apply(this, arguments));\n  }\n\n  _createClass(Action, [{\n    key: \"getGrammarFor\",\n    value: function getGrammarFor() {\n      return GRAMMAR.VERB;\n    }\n  }, {\n    key: \"getDefaultChildren\",\n    value: function getDefaultChildren() {\n      switch (this.data) {\n        case \"set\":\n        case \"say\":\n        case \"playAnimation\":\n        case \"moveTo\":\n        case \"goTo\":\n        case \"turnTo\":\n        case \"turn\":\n        case \"addSize\":\n        case \"wait\":\n        case \"setCollision\":\n        case \"changeScene\":\n        case \"sendSignal\":\n        case \"saveScore\":\n          return [new Block({\n            state: STATE.INSTANCE,\n            parent: this\n          })];\n\n        case \"onTouch\":\n        case \"onTouchUp\":\n        case \"onOut\":\n        case \"onFrame\":\n        case \"onShake\":\n        case \"speak\":\n          return [new Callback({\n            state: STATE.INSTANCE,\n            parent: this\n          })];\n\n        case \"go\":\n        case \"move\":\n        case \"bind\":\n          return [new Block({\n            state: STATE.INSTANCE,\n            parent: this\n          }), new Block({\n            state: STATE.INSTANCE,\n            parent: this\n          })];\n\n        case \"onSwipe\":\n        case \"onOverlap\":\n        case \"onOverlapOnce\":\n        case \"onKey\":\n        case \"onKeyUp\":\n        case \"onSignal\":\n          return [new Block({\n            state: STATE.INSTANCE,\n            parent: this\n          }), new Callback({\n            state: STATE.INSTANCE,\n            parent: this\n          })];\n\n        default:\n          return [];\n      }\n    }\n  }, {\n    key: \"isAvailableParentFor\",\n    value: function isAvailableParentFor(block) {\n      if (this.data === \"playAnimation\") {\n        var spriteSubject = this.findParent({\n          type: BLOCK.SPRITE\n        });\n        if (!spriteSubject) return true;\n        var context = this.getParentContext();\n        var gameObjectInfo = context.getGameObjectInfoWithName(spriteSubject.data);\n        var availableAnimationIds = gameObjectInfo.animationIds || [];\n        var animationId = block.data;\n        return availableAnimationIds.includes(animationId);\n      } else {\n        return _get(_getPrototypeOf(Action.prototype), \"isAvailableParentFor\", this).call(this, block);\n      }\n    }\n  }, {\n    key: \"getAvailableChildTypesAt\",\n    value: function getAvailableChildTypesAt(index) {\n      switch (this.data) {\n        case \"set\":\n          if (this.parent instanceof Variable) {\n            return [NumberBlock, StringBlock, BooleanBlock, Time, GameObject, Variable, Operator];\n          } else if (this.parent instanceof Property) {\n            return [].concat(_toConsumableArray(this.parent.getPropertyType()), [Variable, Operator]);\n          } else {\n            return [Variable, Operator];\n          }\n\n        case \"say\":\n          return [NumberBlock, StringBlock, Time, Variable];\n\n        case \"playAnimation\":\n          return [Animation, Variable];\n\n        case \"moveTo\":\n        case \"goTo\":\n        case \"turnTo\":\n          return [Sprite, Text, Position, Random, Touch];\n\n        case \"wait\":\n        case \"turn\":\n        case \"addSize\":\n          return [NumberBlock, Variable];\n\n        case \"setCollision\":\n          return [Sprite, Screen, Text];\n\n        case \"onTouch\":\n        case \"onTouchUp\":\n        case \"onOut\":\n        case \"onFrame\":\n        case \"onShake\":\n        case \"speak\":\n          return [Callback];\n\n        case \"changeScene\":\n          return [Scene];\n\n        case \"go\":\n        case \"move\":\n          return [[Direction, Axis], [NumberBlock, Variable]][index] || [];\n\n        case \"onSwipe\":\n          return [[Direction], [Callback]][index] || [];\n\n        case \"onOverlap\":\n        case \"onOverlapOnce\":\n          return [[Sprite, Text], [Callback]][index] || [];\n\n        case \"onKey\":\n        case \"onKeyUp\":\n          return [[Key], [Callback]][index] || [];\n\n        case \"onSignal\":\n          return [[StringBlock], [Callback]][index] || [];\n\n        case \"bind\":\n          return [[Sprite, Text], [NumberBlock, Variable]][index] || [];\n\n        case \"sendSignal\":\n          return [StringBlock];\n\n        case \"saveScore\":\n          return [NumberBlock, Variable, Time];\n\n        default:\n          return [];\n      }\n    }\n  }, {\n    key: \"getFinalChildTypesAt\",\n    value: function getFinalChildTypesAt(index) {\n      switch (this.data) {\n        case \"set\":\n          if (this.parent instanceof Property) {\n            return _toConsumableArray(this.parent.getPropertyType());\n          } else {\n            return this.getAvailableChildTypesAt(index);\n          }\n\n        case \"say\":\n          return [NumberBlock, StringBlock];\n\n        case \"playAnimation\":\n          return [Animation];\n\n        case \"wait\":\n        case \"turn\":\n          return [NumberBlock];\n\n        case \"go\":\n        case \"move\":\n          return [[Direction, Axis], [NumberBlock]][index] || [];\n\n        case \"bind\":\n          return [[Sprite, Text], [NumberBlock]][index] || [];\n\n        default:\n          return this.getAvailableChildTypesAt(index);\n      }\n    }\n  }, {\n    key: \"getAvailableParentTypes\",\n    value: function getAvailableParentTypes() {\n      switch (this.data) {\n        case \"set\":\n          return [Variable, Property];\n\n        case \"say\":\n        case \"playAnimation\":\n        case \"stopAnimation\":\n          return [Variable, Sprite];\n\n        case \"move\":\n        case \"moveTo\":\n        case \"goTo\":\n        case \"turn\":\n        case \"turnTo\":\n        case \"show\":\n        case \"hide\":\n        case \"kill\":\n        case \"revive\":\n        case \"setCollision\":\n        case \"onOverlap\":\n        case \"onOverlapOnce\":\n        case \"onOut\":\n          return [Variable, Sprite, Text];\n\n        case \"shake\":\n        case \"onSwipe\":\n          return [Variable, Sprite, Screen];\n\n        case \"onTouch\":\n        case \"onTouchUp\":\n        case \"onKey\":\n        case \"onKeyUp\":\n        case \"go\":\n        case \"wait\":\n        case \"sendSignal\":\n        case \"onSignal\":\n        case \"addSize\":\n          return [Variable, Sprite, Screen, Text];\n\n        case \"flash\":\n        case \"changeScene\":\n        case \"onFrame\":\n          return [Variable, Screen];\n\n        case \"bind\":\n          return [Variable, Joystick, DPad];\n\n        case \"play\":\n        case \"restart\":\n        case \"resume\":\n        case \"stop\":\n        case \"pause\":\n          return [Variable, Sound];\n\n        case \"showRanking\":\n        case \"showRankingAscending\":\n        case \"saveScore\":\n          return [Ranking];\n\n        case \"startTimer\":\n        case \"pauseTimer\":\n        case \"resumeTimer\":\n        case \"resetTimer\":\n          return [Timer];\n\n        case \"onShake\":\n        case \"vibrate\":\n        case \"speak\":\n          return [Variable, Mobile];\n\n        default:\n          return [];\n      }\n    }\n  }, {\n    key: \"isDisabledFor\",\n    value: function isDisabledFor(block) {\n      if (this.isAnimateAction()) {\n        if (block.parent instanceof Sprite) {\n          var sprite = block.parent;\n          var animationIds = sprite.getAnimationIds();\n          return animationIds.length < 1;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isAnimateAction\",\n    value: function isAnimateAction() {\n      return this.data === \"playAnimation\" || this.data === \"stopAnimation\";\n    }\n  }, {\n    key: \"toJavascript\",\n    value: function toJavascript() {\n      switch (this.data) {\n        case \"set\":\n          return this.toJavascriptForSet();\n\n        case \"move\":\n        case \"go\":\n          return this.toJavascriptForMoveGo();\n\n        case \"moveTo\":\n        case \"goTo\":\n          return this.toJavascriptForMoveToGoTo();\n\n        case \"turnTo\":\n          return this.toJavascriptForTurnTo();\n\n        case \"say\":\n          return this.toJavascriptForSay();\n\n        case \"playAnimation\":\n          return this.toJavascriptForPlayAnimation();\n\n        case \"setCollision\":\n          return this.toJavascriptForSetCollision();\n\n        case \"bind\":\n          return this.toJavascriptForBind();\n\n        case \"onTouch\":\n        case \"onTouchUp\":\n          return this.toJavascriptForTouch();\n\n        default:\n          if (this.parent instanceof Sound) {\n            return this.toJavascriptForSoundParent();\n          } else if (this.parent instanceof Util) {\n            return this.toJavascriptForUtilParent();\n          } else {\n            return this.toJavascriptForDefault();\n          }\n\n      }\n    }\n  }, {\n    key: \"getArgsToJavascript\",\n    value: function getArgsToJavascript() {\n      var args = \"\";\n\n      for (var i in this.children) {\n        var child = this.children[i];\n\n        if (i !== \"0\") {\n          args += \", \";\n        }\n\n        args += child.toJavascript();\n      }\n\n      return args;\n    }\n  }, {\n    key: \"toJavascriptForSet\",\n    value: function toJavascriptForSet() {\n      var child = this.children[0];\n      var childCode = child.toJavascript();\n\n      if (this.parent instanceof Property) {\n        var propertyName = this.parent.data;\n        var upperCased = propertyName[0].toUpperCase() + propertyName.slice(1);\n        return \".set\".concat(upperCased, \"(\").concat(childCode, \")\");\n      } else {\n        return \" = \".concat(childCode);\n      }\n    }\n  }, {\n    key: \"toJavascriptForMoveGo\",\n    value: function toJavascriptForMoveGo() {\n      var distance = this.children[1].toJavascript();\n\n      if (this.children[0] instanceof Direction) {\n        var directionBlock = this.children[0];\n\n        switch (directionBlock.data) {\n          case \"up\":\n            return \".\".concat(this.data, \"Y(\").concat(distance, \" * (-1))\");\n\n          case \"down\":\n            return \".\".concat(this.data, \"Y(\").concat(distance, \")\");\n\n          case \"right\":\n            return \".\".concat(this.data, \"X(\").concat(distance, \")\");\n\n          case \"left\":\n            return \".\".concat(this.data, \"X(\").concat(distance, \" * (-1))\");\n\n          default:\n            return;\n        }\n      } else if (this.children[0] instanceof Axis) {\n        var axisBlock = this.children[0];\n\n        switch (axisBlock.data) {\n          case \"x\":\n            return \".\".concat(this.data, \"X(\").concat(distance, \")\");\n\n          case \"y\":\n            return \".\".concat(this.data, \"Y(\").concat(distance, \")\");\n\n          default:\n            return;\n        }\n      }\n    }\n  }, {\n    key: \"toJavascriptForMoveToGoTo\",\n    value: function toJavascriptForMoveToGoTo() {\n      if (this.children[0] instanceof GameObject) {\n        var gameObject = this.children[0];\n        var apiName = \"\".concat(this.data, \"Sprite\");\n        return \".\".concat(apiName, \"(\").concat(gameObject.toJavascript(), \")\");\n      } else if (this.children[0] instanceof Position) {\n        var positionBlock = this.children[0];\n        var position = positionBlock.data;\n\n        var _apiName = \"\".concat(this.data);\n\n        return \".\".concat(_apiName, \"(\").concat(position.x, \", \").concat(position.y, \")\");\n      } else if (this.children[0] instanceof Random) {\n        var _apiName2 = \"\".concat(this.data, \"Random\");\n\n        return \".\".concat(_apiName2, \"()\");\n      } else if (this.children[0] instanceof Touch) {\n        var _apiName3 = \"\".concat(this.data, \"MousePointer\");\n\n        return \".\".concat(_apiName3, \"()\");\n      }\n    }\n  }, {\n    key: \"toJavascriptForTurnTo\",\n    value: function toJavascriptForTurnTo() {\n      if (this.children[0] instanceof GameObject) {\n        var gameObject = this.children[0];\n        var apiName = \"\".concat(this.data, \"Sprite\");\n        return \".\".concat(apiName, \"(\").concat(gameObject.toJavascript(), \")\");\n      } else if (this.children[0] instanceof Random) {\n        var _apiName4 = \"\".concat(this.data, \"Random\");\n\n        return \".\".concat(_apiName4, \"()\");\n      } else if (this.children[0] instanceof Touch) {\n        var _apiName5 = \"\".concat(this.data, \"MousePointer\");\n\n        return \".\".concat(_apiName5, \"()\");\n      }\n    }\n  }, {\n    key: \"toJavascriptForSay\",\n    value: function toJavascriptForSay() {\n      var stringBlock = this.children[0];\n      var string = stringBlock.toJavascript();\n      var defaultSayTime = 3;\n      return \".say(\".concat(string, \", \").concat(defaultSayTime, \")\");\n    }\n  }, {\n    key: \"toJavascriptForPlayAnimation\",\n    value: function toJavascriptForPlayAnimation() {\n      var animationBlock = this.children[0];\n      var animationId = animationBlock.toJavascript();\n      var defaultRepeat = true;\n      return \".playAnimation(\".concat(animationId, \", \").concat(defaultRepeat, \")\");\n    }\n  }, {\n    key: \"toJavascriptForSetCollision\",\n    value: function toJavascriptForSetCollision() {\n      if (this.children[0] instanceof Screen) {\n        return \".setCollideScene(true)\";\n      } else if (this.children[0] instanceof GameObject) {\n        var gameObject = this.children[0];\n        var gameObjectId = gameObject.toJavascript();\n        return \".\".concat(this.data, \"(\").concat(gameObjectId, \")\");\n      }\n    }\n  }, {\n    key: \"toJavascriptForBind\",\n    value: function toJavascriptForBind() {\n      var gameObjectId = this.children[0].toJavascript();\n      var maxSpeed = this.children[1].toJavascript();\n\n      if (this.parent instanceof DPad) {\n        return \".onDpad(function(direction){\\n  var sprite = getSprite(\".concat(gameObjectId, \")\\n  var speed = \").concat(maxSpeed, \"\\n  sprite.setVelocityX(0)\\n  sprite.setVelocityY(0)\\n  switch(direction) {\\n    case \\\"left\\\":\\n      sprite.setVelocityX(-speed)\\n      break;\\n    case \\\"right\\\":\\n      sprite.setVelocityX(speed)\\n      break;\\n    case \\\"up\\\":\\n      sprite.setVelocityY(-speed)\\n      break;\\n    case\\\"down\\\":\\n      sprite.setVelocityY(speed)\\n      break;\\n    default:\\n      break;\\n  }\\n})\");\n      } else {\n        return \".onJoystick(function(degree, force){\\n  var maxSpeed = \".concat(maxSpeed, \"\\n  var sprite = getSprite(\").concat(gameObjectId, \")\\n  sprite.setVelocityFromDegree(degree, force, maxSpeed)\\n})\");\n      }\n    }\n  }, {\n    key: \"toJavascriptForTouch\",\n    value: function toJavascriptForTouch() {\n      var touchApiName = this.data;\n      var args = this.getArgsToJavascript();\n\n      if (this.parent instanceof Screen) {\n        touchApiName = {\n          onTouch: \"onScreenClick\",\n          onTouchUp: \"onScreenClickUp\"\n        }[touchApiName];\n      }\n\n      return \".\".concat(touchApiName, \"(\").concat(args, \")\");\n    }\n  }, {\n    key: \"toJavascriptForSoundParent\",\n    value: function toJavascriptForSoundParent() {\n      var soundApi = \"\".concat(this.data, \"Sound\");\n      var soundId = this.parent.data;\n      return \"\".concat(soundApi, \"(\\\"\").concat(soundId, \"\\\")\");\n    }\n  }, {\n    key: \"toJavascriptForUtilParent\",\n    value: function toJavascriptForUtilParent() {\n      var apiName = this.data;\n      var args = this.getArgsToJavascript();\n      return \"\".concat(apiName, \"(\").concat(args, \")\");\n    }\n  }, {\n    key: \"toJavascriptForDefault\",\n    value: function toJavascriptForDefault() {\n      var apiName = this.data;\n      var args = this.getArgsToJavascript();\n      return \".\".concat(apiName, \"(\").concat(args, \")\");\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"Action\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Action\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      var prototypeBlocks = [];\n      var actionNames = Action.getActionNames();\n\n      for (var i = 0; i < actionNames.length; i++) {\n        var actionName = actionNames[i];\n        prototypeBlocks.push(new Action({\n          data: actionName,\n          state: STATE.PROTOTYPE\n        }));\n      }\n\n      return prototypeBlocks;\n    }\n  }, {\n    key: \"getActionNames\",\n    value: function getActionNames() {\n      return [\"set\", \"say\", \"playAnimation\", \"stopAnimation\", \"move\", \"moveTo\", \"go\", \"goTo\", \"turn\", \"turnTo\", \"addSize\", \"show\", \"hide\", \"kill\", \"revive\", \"shake\", \"flash\", \"wait\", \"setCollision\", \"sendSignal\", \"onSignal\", \"onOverlap\", \"onOverlapOnce\", \"onKey\", \"onKeyUp\", \"onTouch\", \"onTouchUp\", \"onOut\", \"changeScene\", \"onFrame\", \"onSwipe\", \"bind\", \"play\", \"restart\", \"resume\", \"stop\", \"pause\", \"showRanking\", \"showRankingAscending\", \"saveScore\", \"startTimer\", \"pauseTimer\", \"resumeTimer\", \"resetTimer\", \"onShake\", \"speak\", \"vibrate\"];\n    }\n  }]);\n\n  return Action;\n}(Block);\nexport var Constant =\n/*#__PURE__*/\nfunction (_Block4) {\n  _inherits(Constant, _Block4);\n\n  function Constant() {\n    _classCallCheck(this, Constant);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Constant).apply(this, arguments));\n  }\n\n  _createClass(Constant, [{\n    key: \"getGrammarFor\",\n    value: function getGrammarFor() {\n      return GRAMMAR.OBJECTIVE;\n    }\n  }, {\n    key: \"toJavascript\",\n    value: function toJavascript() {\n      return \"\\\"\".concat(this.data, \"\\\"\");\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"Constant\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Constant\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$gameObjects = _ref.gameObjects,\n          gameObjects = _ref$gameObjects === void 0 ? [] : _ref$gameObjects,\n          sceneIds = _ref.sceneIds,\n          strings = _ref.strings;\n\n      var animationIds = this.getAnimationIdsFrom(gameObjects);\n      var prototypeBlocks = [].concat(_toConsumableArray(NumberBlock.getPrototypeBlocks()), _toConsumableArray(StringBlock.getPrototypeBlocks(strings)), _toConsumableArray(BooleanBlock.getPrototypeBlocks()), _toConsumableArray(Key.getPrototypeBlocks()), _toConsumableArray(Direction.getPrototypeBlocks()), _toConsumableArray(Animation.getPrototypeBlocks(animationIds)), _toConsumableArray(Position.getPrototypeBlocks()), _toConsumableArray(Touch.getPrototypeBlocks()), _toConsumableArray(Random.getPrototypeBlocks()), _toConsumableArray(Scene.getPrototypeBlocks(sceneIds)), _toConsumableArray(Axis.getPrototypeBlocks()), _toConsumableArray(Time.getPrototypeBlocks()));\n      return prototypeBlocks;\n    }\n  }, {\n    key: \"getAnimationIdsFrom\",\n    value: function getAnimationIdsFrom(gameObjects) {\n      var animationIdSet = new Set();\n\n      for (var i = 0; i < gameObjects.length; i++) {\n        var gameObject = gameObjects[i];\n        if (!gameObject.animationIds) continue;\n\n        for (var j = 0; j < gameObject.animationIds.length; j++) {\n          var animationId = gameObject.animationIds[j];\n          animationIdSet.add(animationId);\n        }\n      }\n\n      var animationIds = Array.from(animationIdSet);\n      return animationIds;\n    }\n  }]);\n\n  return Constant;\n}(Block);\nexport var NumberBlock =\n/*#__PURE__*/\nfunction (_Constant) {\n  _inherits(NumberBlock, _Constant);\n\n  function NumberBlock() {\n    _classCallCheck(this, NumberBlock);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NumberBlock).apply(this, arguments));\n  }\n\n  _createClass(NumberBlock, [{\n    key: \"toJavascript\",\n    value: function toJavascript() {\n      return this.data;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"NumberBlock\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Constant\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      return [new NumberBlock({\n        data: null,\n        state: STATE.PROTOTYPE\n      })];\n    }\n  }]);\n\n  return NumberBlock;\n}(Constant);\nexport var StringBlock =\n/*#__PURE__*/\nfunction (_Constant2) {\n  _inherits(StringBlock, _Constant2);\n\n  function StringBlock() {\n    _classCallCheck(this, StringBlock);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StringBlock).apply(this, arguments));\n  }\n\n  _createClass(StringBlock, [{\n    key: \"type\",\n    get: function get() {\n      return \"StringBlock\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Constant\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      var strings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var prototypeBlocks = [new StringBlock({\n        data: null,\n        state: STATE.PROTOTYPE\n      })];\n\n      for (var i = 0; i < strings.length; i++) {\n        var string = strings[i];\n        prototypeBlocks.push(new StringBlock({\n          data: string,\n          state: STATE.PROTOTYPE\n        }));\n      }\n\n      return prototypeBlocks;\n    }\n  }]);\n\n  return StringBlock;\n}(Constant);\nexport var BooleanBlock =\n/*#__PURE__*/\nfunction (_Constant3) {\n  _inherits(BooleanBlock, _Constant3);\n\n  function BooleanBlock() {\n    _classCallCheck(this, BooleanBlock);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BooleanBlock).apply(this, arguments));\n  }\n\n  _createClass(BooleanBlock, [{\n    key: \"toJavascript\",\n    value: function toJavascript() {\n      return this.data;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"BooleanBlock\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Constant\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      return [new BooleanBlock({\n        data: \"true\",\n        state: STATE.PROTOTYPE\n      }), new BooleanBlock({\n        data: \"false\",\n        state: STATE.PROTOTYPE\n      })];\n    }\n  }]);\n\n  return BooleanBlock;\n}(Constant);\nexport var Direction =\n/*#__PURE__*/\nfunction (_Constant4) {\n  _inherits(Direction, _Constant4);\n\n  function Direction() {\n    _classCallCheck(this, Direction);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Direction).apply(this, arguments));\n  }\n\n  _createClass(Direction, [{\n    key: \"type\",\n    get: function get() {\n      return \"Direction\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Constant\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      return [new Direction({\n        data: \"up\",\n        state: STATE.PROTOTYPE\n      }), new Direction({\n        data: \"down\",\n        state: STATE.PROTOTYPE\n      }), new Direction({\n        data: \"left\",\n        state: STATE.PROTOTYPE\n      }), new Direction({\n        data: \"right\",\n        state: STATE.PROTOTYPE\n      })];\n    }\n  }]);\n\n  return Direction;\n}(Constant);\nexport var Key =\n/*#__PURE__*/\nfunction (_Constant5) {\n  _inherits(Key, _Constant5);\n\n  function Key() {\n    _classCallCheck(this, Key);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Key).apply(this, arguments));\n  }\n\n  _createClass(Key, [{\n    key: \"type\",\n    get: function get() {\n      return \"Key\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Constant\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      return [new Key({\n        data: null,\n        state: STATE.PROTOTYPE\n      })];\n    }\n  }]);\n\n  return Key;\n}(Constant);\nexport var Animation =\n/*#__PURE__*/\nfunction (_Constant6) {\n  _inherits(Animation, _Constant6);\n\n  function Animation() {\n    _classCallCheck(this, Animation);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Animation).apply(this, arguments));\n  }\n\n  _createClass(Animation, [{\n    key: \"type\",\n    get: function get() {\n      return \"Animation\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Constant\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks(animationIds) {\n      var prototypeBlocks = [];\n\n      for (var i = 0; i < animationIds.length; i++) {\n        var animationId = animationIds[i];\n        prototypeBlocks.push(new Animation({\n          data: animationId,\n          state: STATE.PROTOTYPE\n        }));\n      }\n\n      return prototypeBlocks;\n    }\n  }]);\n\n  return Animation;\n}(Constant);\nexport var Position =\n/*#__PURE__*/\nfunction (_Constant7) {\n  _inherits(Position, _Constant7);\n\n  function Position() {\n    _classCallCheck(this, Position);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Position).apply(this, arguments));\n  }\n\n  _createClass(Position, [{\n    key: \"isEqual\",\n    value: function isEqual(block) {\n      if (!(block instanceof Block)) {\n        return false;\n      }\n\n      return this.type === block.type && this.data.x === block.data.x && this.data.y === block.data.y;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"Position\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Constant\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      return [new Position({\n        data: {\n          x: 100,\n          y: 100\n        },\n        state: STATE.PROTOTYPE\n      })];\n    }\n  }]);\n\n  return Position;\n}(Constant);\nexport var Touch =\n/*#__PURE__*/\nfunction (_Constant8) {\n  _inherits(Touch, _Constant8);\n\n  function Touch() {\n    _classCallCheck(this, Touch);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Touch).apply(this, arguments));\n  }\n\n  _createClass(Touch, [{\n    key: \"type\",\n    get: function get() {\n      return \"Touch\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Constant\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      return [new Touch({\n        data: \"touch\",\n        state: STATE.PROTOTYPE\n      })];\n    }\n  }]);\n\n  return Touch;\n}(Constant);\nexport var Random =\n/*#__PURE__*/\nfunction (_Constant9) {\n  _inherits(Random, _Constant9);\n\n  function Random() {\n    _classCallCheck(this, Random);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Random).apply(this, arguments));\n  }\n\n  _createClass(Random, [{\n    key: \"type\",\n    get: function get() {\n      return \"Random\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Constant\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      return [new Random({\n        data: \"random\",\n        state: STATE.PROTOTYPE\n      })];\n    }\n  }]);\n\n  return Random;\n}(Constant);\nexport var Scene =\n/*#__PURE__*/\nfunction (_Constant10) {\n  _inherits(Scene, _Constant10);\n\n  function Scene() {\n    _classCallCheck(this, Scene);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Scene).apply(this, arguments));\n  }\n\n  _createClass(Scene, [{\n    key: \"type\",\n    get: function get() {\n      return \"Scene\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Constant\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      var sceneIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var prototypeBlocks = [];\n\n      for (var i = 0; i < sceneIds.length; i++) {\n        var sceneId = sceneIds[i];\n        prototypeBlocks.push(new Scene({\n          data: sceneId,\n          state: STATE.PROTOTYPE\n        }));\n      }\n\n      return prototypeBlocks;\n    }\n  }]);\n\n  return Scene;\n}(Constant);\nexport var Axis =\n/*#__PURE__*/\nfunction (_Constant11) {\n  _inherits(Axis, _Constant11);\n\n  function Axis() {\n    _classCallCheck(this, Axis);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Axis).apply(this, arguments));\n  }\n\n  _createClass(Axis, [{\n    key: \"type\",\n    get: function get() {\n      return \"Axis\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Constant\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      return [new Axis({\n        data: \"x\",\n        state: STATE.PROTOTYPE\n      }), new Axis({\n        data: \"y\",\n        state: STATE.PROTOTYPE\n      })];\n    }\n  }]);\n\n  return Axis;\n}(Constant);\nexport var Time =\n/*#__PURE__*/\nfunction (_Constant12) {\n  _inherits(Time, _Constant12);\n\n  function Time() {\n    _classCallCheck(this, Time);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Time).apply(this, arguments));\n  }\n\n  _createClass(Time, [{\n    key: \"toJavascript\",\n    value: function toJavascript() {\n      return \"getTimer()\";\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"Time\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Constant\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      return [new Time({\n        data: \"time\",\n        state: STATE.PROTOTYPE\n      })];\n    }\n  }]);\n\n  return Time;\n}(Constant);\nexport var Util =\n/*#__PURE__*/\nfunction (_Block5) {\n  _inherits(Util, _Block5);\n\n  function Util() {\n    _classCallCheck(this, Util);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Util).apply(this, arguments));\n  }\n\n  _createClass(Util, [{\n    key: \"getGrammarFor\",\n    value: function getGrammarFor(parent) {\n      switch (this.data) {\n        case \"if\":\n        case \"else if\":\n        case \"repeat\":\n        case \"else\":\n          return GRAMMAR.PHRASE;\n\n        case \"clone\":\n          return parent.grammar;\n\n        default:\n          return GRAMMAR.SUBJECT;\n      }\n    }\n  }, {\n    key: \"getDefaultChildren\",\n    value: function getDefaultChildren() {\n      switch (this.data) {\n        case \"if\":\n        case \"else if\":\n        case \"repeat\":\n          return [new Block({\n            state: STATE.INSTANCE,\n            parent: this\n          }), new Callback({\n            state: STATE.INSTANCE,\n            parent: this\n          })];\n\n        case \"else\":\n          return [new Callback({\n            state: STATE.INSTANCE,\n            parent: this\n          })];\n\n        case \"clone\":\n          if (this.grammar === GRAMMAR.SUBJECT) {\n            return [new Block({\n              state: STATE.INSTANCE,\n              parent: this\n            })];\n          } else {\n            return [];\n          }\n\n        default:\n          return [];\n      }\n    }\n  }, {\n    key: \"isAvailableParentFor\",\n    value: function isAvailableParentFor(block) {\n      if (this.data === \"clone\") {\n        if (block instanceof Util && block.data === \"clone\") {\n          return false;\n        }\n\n        var availableParentTypes = block.getAvailableParentTypes();\n\n        for (var i in availableParentTypes) {\n          if (this.parent instanceof availableParentTypes[i]) {\n            return true;\n          }\n        }\n\n        return false;\n      } else {\n        return _get(_getPrototypeOf(Util.prototype), \"isAvailableParentFor\", this).call(this, block);\n      }\n    }\n  }, {\n    key: \"getAvailableChildTypesAt\",\n    value: function getAvailableChildTypesAt(index) {\n      switch (this.data) {\n        case \"if\":\n        case \"else if\":\n          return [[BooleanBlock, Variable, Operator], [Callback]][index] || [];\n\n        case \"repeat\":\n          return [[NumberBlock, Variable, Operator], [Callback]][index] || [];\n\n        case \"else\":\n          return [Callback];\n\n        case \"clone\":\n          return this.parent.getAvailableChildTypesAt(index);\n\n        default:\n          return [];\n      }\n    }\n  }, {\n    key: \"getFinalChildTypesAt\",\n    value: function getFinalChildTypesAt(index) {\n      switch (this.data) {\n        case \"if\":\n        case \"else if\":\n          return [[BooleanBlock], [Callback]][index] || [];\n\n        case \"repeat\":\n          return [[NumberBlock], [Callback]][index] || [];\n\n        default:\n          return this.getAvailableChildTypesAt(index);\n      }\n    }\n  }, {\n    key: \"getAvailableParentTypes\",\n    value: function getAvailableParentTypes() {\n      switch (this.data) {\n        case \"if\":\n        case \"else if\":\n        case \"repeat\":\n        case \"else\":\n          return [Line];\n\n        case \"clone\":\n          return [Sprite, Text];\n\n        default:\n          return [];\n      }\n    }\n  }, {\n    key: \"toJavascript\",\n    value: function toJavascript() {\n      switch (this.data) {\n        case \"repeat\":\n          return this.toJavascriptForRepeat();\n\n        case \"if\":\n        case \"else if\":\n          return this.toJavascriptForIf();\n\n        case \"else\":\n          return this.toJavascriptForElse();\n\n        case \"clone\":\n          return this.toJavascriptForClone();\n\n        default:\n          return;\n      }\n    }\n  }, {\n    key: \"toJavascriptForRepeat\",\n    value: function toJavascriptForRepeat() {\n      var repeat = this.children[0].toJavascript();\n      var statement = this.linesToJavascript(this.children[1].children);\n      return \"for(let i = 0; i < \".concat(repeat, \"; i++) {\\n\").concat(statement, \"\\n}\");\n    }\n  }, {\n    key: \"toJavascriptForIf\",\n    value: function toJavascriptForIf() {\n      var condition = this.children[0].toJavascript();\n      var statement = this.linesToJavascript(this.children[1].children);\n      return \"\".concat(this.data, \"(\").concat(condition, \") {\\n\").concat(statement, \"\\n}\");\n    }\n  }, {\n    key: \"toJavascriptForElse\",\n    value: function toJavascriptForElse() {\n      var statement = this.linesToJavascript(this.children[0].children);\n      return \"else {\\n\".concat(statement, \"\\n}\");\n    }\n  }, {\n    key: \"toJavascriptForClone\",\n    value: function toJavascriptForClone() {\n      var child = this.children && this.children[0];\n\n      if (child) {\n        var childCode = child.toJavascript();\n        return \".clone()\".concat(childCode);\n      } else {\n        return \".clone()\";\n      }\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"Util\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Util\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      var prototypeBlocks = [new Util({\n        data: \"if\",\n        state: STATE.PROTOTYPE\n      }), new Util({\n        data: \"else if\",\n        state: STATE.PROTOTYPE\n      }), new Util({\n        data: \"else\",\n        state: STATE.PROTOTYPE\n      }), new Util({\n        data: \"repeat\",\n        state: STATE.PROTOTYPE\n      }), new Util({\n        data: \"clone\",\n        state: STATE.PROTOTYPE\n      })].concat(_toConsumableArray(Mobile.getPrototypeBlocks()), _toConsumableArray(Ranking.getPrototypeBlocks()), _toConsumableArray(Timer.getPrototypeBlocks()));\n      return prototypeBlocks;\n    }\n  }]);\n\n  return Util;\n}(Block);\nexport var Mobile =\n/*#__PURE__*/\nfunction (_Util) {\n  _inherits(Mobile, _Util);\n\n  function Mobile() {\n    _classCallCheck(this, Mobile);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Mobile).apply(this, arguments));\n  }\n\n  _createClass(Mobile, [{\n    key: \"getGrammarFor\",\n    value: function getGrammarFor() {\n      return GRAMMAR.SUBJECT;\n    }\n  }, {\n    key: \"getDefaultChildren\",\n    value: function getDefaultChildren() {\n      return [new Block({\n        state: STATE.INSTANCE,\n        parent: this\n      })];\n    }\n  }, {\n    key: \"getAvailableChildTypesAt\",\n    value: function getAvailableChildTypesAt() {\n      return [Action];\n    }\n  }, {\n    key: \"getAvailableParentTypes\",\n    value: function getAvailableParentTypes() {\n      return [Line];\n    }\n  }, {\n    key: \"toJavascript\",\n    value: function toJavascript() {\n      var child = this.children[0];\n      var childCode = child.toJavascript();\n      return childCode;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"Mobile\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Util\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      return [new Mobile({\n        data: \"mobile\",\n        state: STATE.PROTOTYPE\n      })];\n    }\n  }]);\n\n  return Mobile;\n}(Util);\nexport var Ranking =\n/*#__PURE__*/\nfunction (_Util2) {\n  _inherits(Ranking, _Util2);\n\n  function Ranking() {\n    _classCallCheck(this, Ranking);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Ranking).apply(this, arguments));\n  }\n\n  _createClass(Ranking, [{\n    key: \"getGrammarFor\",\n    value: function getGrammarFor() {\n      return GRAMMAR.SUBJECT;\n    }\n  }, {\n    key: \"getDefaultChildren\",\n    value: function getDefaultChildren() {\n      return [new Block({\n        state: STATE.INSTANCE,\n        parent: this\n      })];\n    }\n  }, {\n    key: \"getAvailableChildTypesAt\",\n    value: function getAvailableChildTypesAt() {\n      return [Action];\n    }\n  }, {\n    key: \"getAvailableParentTypes\",\n    value: function getAvailableParentTypes() {\n      return [Line];\n    }\n  }, {\n    key: \"toJavascript\",\n    value: function toJavascript() {\n      var child = this.children[0];\n      var childCode = child.toJavascript();\n      return childCode;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"Ranking\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Util\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      return [new Ranking({\n        data: \"ranking\",\n        state: STATE.PROTOTYPE\n      })];\n    }\n  }]);\n\n  return Ranking;\n}(Util);\nexport var Timer =\n/*#__PURE__*/\nfunction (_Util3) {\n  _inherits(Timer, _Util3);\n\n  function Timer() {\n    _classCallCheck(this, Timer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Timer).apply(this, arguments));\n  }\n\n  _createClass(Timer, [{\n    key: \"getGrammarFor\",\n    value: function getGrammarFor() {\n      return GRAMMAR.SUBJECT;\n    }\n  }, {\n    key: \"getDefaultChildren\",\n    value: function getDefaultChildren() {\n      return [new Block({\n        state: STATE.INSTANCE,\n        parent: this\n      })];\n    }\n  }, {\n    key: \"getAvailableChildTypesAt\",\n    value: function getAvailableChildTypesAt() {\n      return [Action];\n    }\n  }, {\n    key: \"getAvailableParentTypes\",\n    value: function getAvailableParentTypes() {\n      return [Line];\n    }\n  }, {\n    key: \"toJavascript\",\n    value: function toJavascript() {\n      var child = this.children[0];\n      var childCode = child.toJavascript();\n      return childCode;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"Timer\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Util\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      return [new Timer({\n        data: \"timer\",\n        state: STATE.PROTOTYPE\n      })];\n    }\n  }]);\n\n  return Timer;\n}(Util);\nexport var Variable =\n/*#__PURE__*/\nfunction (_Block6) {\n  _inherits(Variable, _Block6);\n\n  function Variable() {\n    _classCallCheck(this, Variable);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Variable).apply(this, arguments));\n  }\n\n  _createClass(Variable, [{\n    key: \"getGrammarFor\",\n    value: function getGrammarFor(parent) {\n      if (parent instanceof Line) {\n        return GRAMMAR.SUBJECT;\n      } else {\n        return GRAMMAR.OBJECTIVE;\n      }\n    }\n  }, {\n    key: \"getDefaultChildren\",\n    value: function getDefaultChildren() {\n      if (this.grammar === GRAMMAR.SUBJECT) {\n        return [new Block({\n          state: STATE.INSTANCE,\n          parent: this\n        })];\n      } else {\n        return [];\n      }\n    }\n  }, {\n    key: \"getAvailableChildTypesAt\",\n    value: function getAvailableChildTypesAt(index) {\n      if (this.grammar === GRAMMAR.SUBJECT) {\n        return [Property, Action, Util];\n      } else if (this.grammar === GRAMMAR.OBJECTIVE) {\n        return [Property];\n      } else {\n        return [];\n      }\n    }\n  }, {\n    key: \"getPropertyType\",\n    value: function getPropertyType() {\n      return [Block];\n    }\n  }, {\n    key: \"toJavascript\",\n    value: function toJavascript() {\n      var variableId = this.data;\n      var child = this.children && this.children[0];\n\n      if (child) {\n        var childCode = child.toJavascript();\n        return \"global.\".concat(variableId).concat(childCode);\n      } else {\n        return \"global.\".concat(variableId);\n      }\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"Variable\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Variable\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks(variables) {\n      var prototypeBlocks = [];\n\n      for (var i in variables) {\n        var variable = variables[i];\n        prototypeBlocks.push(new Variable({\n          data: variable,\n          state: STATE.PROTOTYPE\n        }));\n      }\n\n      return prototypeBlocks;\n    }\n  }]);\n\n  return Variable;\n}(Block);\nexport var Operator =\n/*#__PURE__*/\nfunction (_Block7) {\n  _inherits(Operator, _Block7);\n\n  function Operator() {\n    _classCallCheck(this, Operator);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Operator).apply(this, arguments));\n  }\n\n  _createClass(Operator, [{\n    key: \"getGrammarFor\",\n    value: function getGrammarFor() {\n      return GRAMMAR.OBJECTIVE;\n    }\n  }, {\n    key: \"getDefaultChildren\",\n    value: function getDefaultChildren() {\n      if (this.data === \"!\") {\n        return [new Block({\n          state: STATE.INSTANCE,\n          parent: this\n        })];\n      } else {\n        return [new Block({\n          state: STATE.INSTANCE,\n          parent: this\n        }), new Block({\n          state: STATE.INSTANCE,\n          parent: this\n        })];\n      }\n    }\n  }, {\n    key: \"getAvailableChildTypesAt\",\n    value: function getAvailableChildTypesAt() {\n      switch (this.data) {\n        case \"-\":\n        case \"/\":\n        case \"*\":\n        case \"%\":\n          return [NumberBlock, Variable];\n\n        case \"+\":\n          if (this.parent instanceof Action) {\n            var childIndex = this.parent.children.indexOf(this);\n            return this.parent.getAvailableChildTypesAt(childIndex);\n          } else {\n            return [NumberBlock, Variable];\n          }\n\n        case \">\":\n        case \">=\":\n        case \"<=\":\n        case \"<\":\n          return [NumberBlock, Variable];\n\n        case \"==\":\n          return [NumberBlock, StringBlock, BooleanBlock, Variable];\n\n        case \"&&\":\n        case \"||\":\n        case \"!\":\n          return [BooleanBlock, Variable];\n\n        default:\n          return [];\n      }\n    }\n  }, {\n    key: \"getOperatorTypes\",\n    value: function getOperatorTypes() {\n      switch (this.data) {\n        case \"-\":\n        case \"/\":\n        case \"*\":\n        case \"%\":\n          return [NumberBlock];\n\n        case \"+\":\n          return [NumberBlock, StringBlock];\n\n        case \">\":\n        case \">=\":\n        case \"==\":\n        case \"<=\":\n        case \"<\":\n          return [BooleanBlock];\n\n        case \"&&\":\n        case \"||\":\n        case \"!\":\n          return [BooleanBlock];\n\n        default:\n          return [];\n      }\n    }\n  }, {\n    key: \"toJavascript\",\n    value: function toJavascript() {\n      if (this.data === \"!\") {\n        var operator = this.data;\n        var flag = this.children[0].toJavascript();\n        return \"\".concat(operator).concat(flag);\n      } else {\n        var _operator = this.data;\n        var prev = this.children[0].toJavascript();\n        var next = this.children[1].toJavascript();\n        return \"\".concat(prev, \" \").concat(_operator, \" \").concat(next);\n      }\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"Operator\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Operator\";\n    }\n  }], [{\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      return [new Operator({\n        data: \"+\",\n        state: STATE.PROTOTYPE\n      }), new Operator({\n        data: \"-\",\n        state: STATE.PROTOTYPE\n      }), new Operator({\n        data: \"/\",\n        state: STATE.PROTOTYPE\n      }), new Operator({\n        data: \"*\",\n        state: STATE.PROTOTYPE\n      }), new Operator({\n        data: \"%\",\n        state: STATE.PROTOTYPE\n      }), new Operator({\n        data: \">\",\n        state: STATE.PROTOTYPE\n      }), new Operator({\n        data: \">=\",\n        state: STATE.PROTOTYPE\n      }), new Operator({\n        data: \"==\",\n        state: STATE.PROTOTYPE\n      }), new Operator({\n        data: \"<=\",\n        state: STATE.PROTOTYPE\n      }), new Operator({\n        data: \"<\",\n        state: STATE.PROTOTYPE\n      }), new Operator({\n        data: \"&&\",\n        state: STATE.PROTOTYPE\n      }), new Operator({\n        data: \"||\",\n        state: STATE.PROTOTYPE\n      }), new Operator({\n        data: \"!\",\n        state: STATE.PROTOTYPE\n      })];\n    }\n  }]);\n\n  return Operator;\n}(Block);\nexport var Callback =\n/*#__PURE__*/\nfunction (_Block8) {\n  _inherits(Callback, _Block8);\n\n  function Callback() {\n    var _this3;\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Callback);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Callback).call(this, props));\n    _this3.children = _this3.children || [new Line({\n      parent: _assertThisInitialized(_assertThisInitialized(_this3))\n    })];\n    delete _this3.data;\n    return _this3;\n  }\n\n  _createClass(Callback, [{\n    key: \"toJavascript\",\n    value: function toJavascript() {\n      var code = this.linesToJavascript(this.children);\n      return \"function() {\\n\".concat(code, \"\\n}\");\n    }\n  }, {\n    key: \"getLines\",\n    value: function getLines() {\n      return this.children;\n    }\n  }, {\n    key: \"addLineAt\",\n    value: function addLineAt(line, index) {\n      line.parent = this;\n      this.children.splice(index, 0, line);\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"Callback\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"Callback\";\n    }\n  }]);\n\n  return Callback;\n}(Block);\nexport var FunctionBlock =\n/*#__PURE__*/\nfunction (_Block9) {\n  _inherits(FunctionBlock, _Block9);\n\n  function FunctionBlock() {\n    _classCallCheck(this, FunctionBlock);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FunctionBlock).apply(this, arguments));\n  }\n\n  _createClass(FunctionBlock, [{\n    key: \"getAvailableChildTypesAt\",\n    value: function getAvailableChildTypesAt() {\n      return [GameObject, Constant, Variable];\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"FunctionBlock\";\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return \"FunctionBlock\";\n    }\n  }]);\n\n  return FunctionBlock;\n}(Block);\nexport default Block;","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Common/Component/OOBCEditor/OOBC/block.js"],"names":["Context","Line","STATE","GRAMMAR","BLOCK","Block","props","id","generateId","parent","state","grammar","data","children","clone","Object","assign","create","getPrototypeOf","map","child","block","type","prototypeBlock","instanceBlock","INSTANCE","getGrammarFor","getDefaultChildren","length","i","childToMaintain","checkBlockReplaceable","isDisabledFor","Action","action","objectives","objective","prototypeBlocks","filter","isAvailableParentFor","checkAvailableForRootBlock","childIndex","indexOf","checkChildAvailableAtIndex","index","Operator","operatorTypes","getOperatorTypes","finalChildTypes","getFinalChildTypesAt","includes","availableChildTypes","getAvailableChildTypesAt","availableParentTypes","getAvailableParentTypes","where","match","grandChild","findChild","findParent","whereEmpty","parentLine","getParentLine","blocks","traverse","onBlock","push","nextLine","getNextDisplayLine","constructor","toJSON","undefined","lines","code","line","lineCode","toJavascript","name","GameObject","Sprite","Screen","Joystick","DPad","Text","Sound","Property","Constant","NumberBlock","StringBlock","BooleanBlock","Key","Direction","Animation","Position","Touch","Random","Scene","Axis","Time","Util","Mobile","Ranking","Timer","Variable","Callback","FunctionBlock","json","compatibleJSON","blockType","toUpperCase","slice","dataType","PHRASE","ANIMATION","DIRECTION","AXIS","TOUCH","RANDOM","POSITION","BOOLEANBLOCK","isNaN","STRINGBLOCK","NUMBERBLOCK","childs","mode","CALLBACK","getCompatibleJSONFrom","constructorName","Constructor","getConstructorByName","fromJSON","SUBJECT","OBJECTIVE","childCode","ACTION","gameObjects","gameObject","getPrototypeBlock","subtype","context","getParentContext","gameObjectInfo","getGameObjectInfoWithName","animationIds","sprite","PROTOTYPE","screen","joystick","dPad","text","sound","upperCased","propertyNames","getPropertyNames","propertyName","VERB","spriteSubject","SPRITE","availableAnimationIds","animationId","getPropertyType","isAnimateAction","getAnimationIds","toJavascriptForSet","toJavascriptForMoveGo","toJavascriptForMoveToGoTo","toJavascriptForTurnTo","toJavascriptForSay","toJavascriptForPlayAnimation","toJavascriptForSetCollision","toJavascriptForBind","toJavascriptForTouch","toJavascriptForSoundParent","toJavascriptForUtilParent","toJavascriptForDefault","args","distance","directionBlock","axisBlock","apiName","positionBlock","position","x","y","stringBlock","string","defaultSayTime","animationBlock","defaultRepeat","gameObjectId","maxSpeed","touchApiName","getArgsToJavascript","onTouch","onTouchUp","soundApi","soundId","actionNames","getActionNames","actionName","sceneIds","strings","getAnimationIdsFrom","getPrototypeBlocks","animationIdSet","Set","j","add","Array","from","sceneId","toJavascriptForRepeat","toJavascriptForIf","toJavascriptForElse","toJavascriptForClone","repeat","statement","linesToJavascript","condition","variableId","variables","variable","operator","flag","prev","next","splice"],"mappings":"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","sourcesContent":["import Context from \"./context\";\nimport Line from \"./line\";\nimport { STATE, GRAMMAR, BLOCK } from \"./type\";\n\nclass Block {\n  constructor(props = {}) {\n    this.id = props.id || Context.generateId();\n    this.parent = props.parent;\n    this.state = props.state;\n    this.grammar = props.grammar;\n    this.data = props.data;\n    this.children = props.children;\n  }\n\n  get type() {\n    return \"Block\";\n  }\n  get category() {\n    return null;\n  }\n  \n\n  clone(parent) {\n    const clone = Object.assign(\n      Object.create(Object.getPrototypeOf(this)),\n      this\n    );\n    clone.id = Context.generateId();\n    clone.parent = parent;\n    clone.children =\n      clone.children && this.children.map(child => child.clone(clone));\n    return clone;\n  }\n  isEqual(block) {\n    if(!(block instanceof Block)) {\n      return false;\n    }\n\n    return (\n      this.type === block.type &&\n      this.data === block.data\n    );\n  }\n\n  createInstanceBlockWith(prototypeBlock) {\n    const instanceBlock = Object.assign(\n      Object.create(Object.getPrototypeOf(prototypeBlock)),\n      prototypeBlock\n    );\n    instanceBlock.id = Context.generateId();\n    instanceBlock.state = STATE.INSTANCE;\n    instanceBlock.parent = this.parent;\n    instanceBlock.grammar = instanceBlock.getGrammarFor(this.parent);\n    instanceBlock.children = instanceBlock.getDefaultChildren();\n    return instanceBlock;\n  }\n  getGrammarFor(parent) {\n    // inherit\n  }\n  getDefaultChildren() {\n    // inherit\n    return [];\n  }\n  isCompatibleWith(instanceBlock) {\n    if (!this.children || this.children.length < 1) return true;\n\n    if (this.children.length !== instanceBlock.children.length) return false;\n\n    for (let i in this.children) {\n      const childToMaintain = this.children[i];\n      if (!childToMaintain.data) continue;\n      if (\n        !instanceBlock.children[i].checkBlockReplaceable(childToMaintain) ||\n        childToMaintain.isDisabledFor(instanceBlock.children[i])\n      ) {\n        return false;\n      }\n    }\n\n    if (this.children[0] instanceof Action) {\n      const action = this.children[0];\n      const objectives = action.children || [];\n      action.parent = instanceBlock;\n      for (let i in objectives) {\n        const objective = objectives[i];\n        if (!objective.data) continue;\n        if (!objective.checkBlockReplaceable(objective)) {\n          action.parent = this;\n          return false;\n        }\n      }\n      action.parent = this;\n    }\n\n    return true;\n  }\n  coverWith(instanceBlock) {\n    if (this.parent instanceof Line) {\n      this.parent.block = instanceBlock;\n    } else {\n      for (let i in this.parent.children) {\n        if (this.parent.children[i] === this) {\n          this.parent.children[i] = instanceBlock;\n        }\n      }\n    }\n    return instanceBlock;\n  }\n  replaceWith(instanceBlock) {\n    if (this.parent instanceof Line) {\n      this.parent.block = instanceBlock;\n    } else {\n      for (let i in this.parent.children) {\n        if (this.parent.children[i] === this) {\n          this.parent.children[i] = instanceBlock;\n        }\n      }\n    }\n    if (this.children && this.children.length > 0) {\n      instanceBlock.children = this.children;\n      for (let i in instanceBlock.children) {\n        instanceBlock.children[i].parent = instanceBlock;\n      }\n    }\n    return instanceBlock;\n  }\n\n  static getPrototypeBlocks() {\n    return [];\n  }\n  filterPrototypeBlocksReplaceable(prototypeBlocks) {\n    return prototypeBlocks.filter(block => this.checkBlockReplaceable(block));\n  }\n  checkBlockReplaceable(block) {\n    if (!this.parent.isAvailableParentFor(block)) {\n      return false;\n    }\n    if (this.parent instanceof Line) {\n      return this.parent.checkAvailableForRootBlock(block);\n    } else if (this.parent instanceof Block) {\n      const childIndex = this.parent.children.indexOf(this);\n      return this.parent.checkChildAvailableAtIndex(block, childIndex);\n    }\n  }\n  checkChildAvailableAtIndex(child, index) {\n    if (child instanceof Operator) {\n      if (this instanceof Operator) {\n        return false;\n      }\n      const operatorTypes = child.getOperatorTypes();\n      const finalChildTypes = this.getFinalChildTypesAt(index);\n      for (let i in finalChildTypes) {\n        if (operatorTypes.includes(finalChildTypes[i])) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      const availableChildTypes = this.getAvailableChildTypesAt(index);\n      for (let i in availableChildTypes) {\n        if (child instanceof availableChildTypes[i]) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n  getAvailableChildTypesAt(index, grammar) {\n    return [];\n  }\n  getFinalChildTypesAt(index) {\n    return [];\n  }\n  isAvailableParentFor(block) {\n    const availableParentTypes = block.getAvailableParentTypes();\n    for (let i in availableParentTypes) {\n      if (this instanceof availableParentTypes[i]) {\n        return true;\n      }\n    }\n    return false;\n  }\n  getAvailableParentTypes() {\n    return [Line, Block];\n  }\n\n  filterPrototypeBlocksDisabled(prototypeBlocks) {\n    return prototypeBlocks.filter(block => block.isDisabledFor(this));\n  }\n  isDisabledFor(block) {\n    return false;\n  }\n\n  findChild(where) {\n    if (!this.children) return;\n\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i];\n      if (child.match(where)) {\n        return child;\n      }\n    }\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i];\n      const grandChild = child.findChild(where);\n      if (grandChild) {\n        return grandChild;\n      }\n    }\n  }\n  findParent(where) {\n    if (!this.parent) return;\n    if (this.parent.match(where)) {\n      return this.parent;\n    } else {\n      return this.parent.findParent(where);\n    }\n  }\n  findNextEmptyBlock() {\n    const whereEmpty = { type: BLOCK.BLOCK };\n    const parentLine = this.getParentLine();\n    const blocks = [];\n    Context.traverse(parentLine, {\n      onBlock(block) {\n        if (block.match(whereEmpty)) {\n          blocks.push(block);\n        }\n      }\n    });\n    if (blocks.length > 0) {\n      return blocks[0];\n    } else {\n      const nextLine = parentLine.getNextDisplayLine();\n      if (nextLine.block instanceof Block) {\n        return nextLine.block;\n      } else {\n        return;\n      }\n    }\n  }\n  match(where) {\n    const { type, id, state, grammar, data } = where;\n    if (type && type !== this.type)\n      return false;\n    if (id && id !== this.id) return false;\n    if (state && state !== this.state) return false;\n    if (grammar && grammar !== this.grammar) return false;\n    if (data && data !== this.data) return false;\n    return true;\n  }\n  getParentLine() {\n    return this.findParent({ type: \"Line\" });\n  }\n  getParentContext() {\n    return this.findParent({ type: \"Context\" });\n  }\n\n  static getConstructorByName(name) {\n    return {\n      Block: Block,\n      GameObject: GameObject,\n      Sprite: Sprite,\n      Screen: Screen,\n      Joystick: Joystick,\n      DPad: DPad,\n      Text: Text,\n      Sound: Sound,\n      Property: Property,\n      Action: Action,\n      Constant: Constant,\n      NumberBlock: NumberBlock,\n      StringBlock: StringBlock,\n      BooleanBlock: BooleanBlock,\n      Key: Key,\n      Direction: Direction,\n      Animation: Animation,\n      Position: Position,\n      Touch: Touch,\n      Random: Random,\n      Scene: Scene,\n      Axis: Axis,\n      Time: Time,\n      Util: Util,\n      Mobile: Mobile,\n      Ranking: Ranking,\n      Timer: Timer,\n      Variable: Variable,\n      Operator: Operator,\n      Callback: Callback,\n      FunctionBlock: FunctionBlock\n    }[name];\n  }\n  static getCompatibleJSONFrom(json, parent) {\n    const compatibleJSON = {\n      constructor: json.constructor,\n      state: json.state,\n      grammar: json.grammar,\n      data: json.data,\n      children: json.children\n    };\n    if (json.blockType) {\n      compatibleJSON.constructor =\n        json.blockType[0].toUpperCase() +\n        json.blockType.slice(1, json.blockType.length);\n    }\n    if (json.blockType === \"sprite\") {\n      compatibleJSON.constructor =\n        json.dataType[0].toUpperCase() +\n        json.dataType.slice(1, json.dataType.length);\n    }\n    if (\n      json.blockType === \"util\" &&\n      [\"if\", \"else if\", \"else\", \"repeat\"].includes(json.data)\n    ) {\n      compatibleJSON.grammar = GRAMMAR.PHRASE;\n    }\n    if (json.blockType === \"constant\") {\n      if (parent instanceof Action && parent.data === \"playAnimation\") {\n        compatibleJSON.constructor = BLOCK.ANIMATION;\n      } else if ([\"up\", \"down\", \"left\", \"right\"].includes(json.data)) {\n        compatibleJSON.constructor = BLOCK.DIRECTION;\n      } else if ([\"x\", \"y\"].includes(json.data)) {\n        compatibleJSON.constructor = BLOCK.AXIS;\n      } else if (json.data === \"touch\") {\n        compatibleJSON.constructor = BLOCK.TOUCH;\n      } else if (json.data === \"random\") {\n        compatibleJSON.constructor = BLOCK.RANDOM;\n      } else if (json.data instanceof Object) {\n        compatibleJSON.constructor = BLOCK.POSITION;\n      } else if ([\"true\", \"false\"].includes(json.data)) {\n        compatibleJSON.constructor = BLOCK.BOOLEANBLOCK;\n      } else if (isNaN(json.data)) {\n        compatibleJSON.constructor = BLOCK.STRINGBLOCK;\n      } else {\n        compatibleJSON.constructor = BLOCK.NUMBERBLOCK;\n      }\n    }\n    if (json.childs) {\n      compatibleJSON.children = json.childs;\n    }\n    if (json.mode) {\n      compatibleJSON.state = json.mode;\n    }\n    if (compatibleJSON.constructor === BLOCK.CALLBACK && json.data) {\n      compatibleJSON.children = json.data;\n    }\n    return compatibleJSON;\n  }\n  static fromJSON(json, parent) {\n    const compatibleJSON = Block.getCompatibleJSONFrom(json, parent);\n    const constructorName = compatibleJSON.constructor;\n    const Constructor = Block.getConstructorByName(constructorName) || Block;\n    const block = new Constructor({\n      ...compatibleJSON,\n      state: STATE.INSTANCE,\n      parent\n    });\n    if (compatibleJSON.children) {\n      if (constructorName === BLOCK.CALLBACK) {\n        block.children = compatibleJSON.children.map(child =>\n          Line.fromJSON(child, block)\n        );\n      } else {\n        block.children = compatibleJSON.children.map(child =>\n          Block.fromJSON(child, block)\n        );\n      }\n    }\n    return block;\n  }\n  toJSON() {\n    return {\n      constructor: this.type,\n      grammar: this.grammar,\n      data: this.data,\n      children: this.children\n        ? this.children.map(child => child.toJSON())\n        : undefined\n    };\n  }\n  toJavascript() {\n    return \"\";\n  }\n  linesToJavascript(lines) {\n    let code = \"\";\n    for (let i in lines) {\n      const line = lines[i];\n      const lineCode = line.toJavascript();\n      if (lineCode) {\n        if (code !== \"\") {\n          code += \"\\n\";\n        }\n        code += \"\\t\";\n        code += lineCode;\n      }\n    }\n    return code;\n  }\n}\n\nexport class GameObject extends Block {\n  get type() {\n    return \"GameObject\";\n  }\n  get category() {\n    return \"GameObject\";\n  }\n\n  getGrammarFor(parent) {\n    if (parent instanceof Line) {\n      return GRAMMAR.SUBJECT;\n    } else {\n      return GRAMMAR.OBJECTIVE;\n    }\n  }\n  getDefaultChildren() {\n    if (this.grammar === GRAMMAR.SUBJECT) {\n      return [new Block({ state: STATE.INSTANCE, parent: this })];\n    } else {\n      return [];\n    }\n  }\n\n  static getPrototypeBlocks(gameObjects) {\n    const prototypeBlocks = [];\n    for (let i in gameObjects) {\n      const gameObject = gameObjects[i];\n      let prototypeBlock;\n      switch (gameObject.type) {\n        case \"sprite\":\n        case \"spine\":\n        case \"custom\":\n          prototypeBlock = Sprite.getPrototypeBlock(gameObject);\n          break;\n        case \"text\":\n          prototypeBlock = Text.getPrototypeBlock(gameObject);\n          break;\n        case \"component\":\n          if(gameObject.subtype === \"dpad\") {\n            prototypeBlock = DPad.getPrototypeBlock(gameObject);\n          } else {\n            prototypeBlock = Joystick.getPrototypeBlock(gameObject);\n          }\n          break;\n        case \"background\":\n          prototypeBlock = Screen.getPrototypeBlock(gameObject);\n          break;\n        case \"sound\":\n          prototypeBlock = Sound.getPrototypeBlock(gameObject);\n          break;\n        default:\n          continue;\n      }\n      prototypeBlocks.push(prototypeBlock);\n    }\n    return prototypeBlocks;\n  }\n  getAvailableChildTypesAt(index) {\n    if (this.grammar === GRAMMAR.SUBJECT) {\n      return [Property, Action, Util];\n    } else if (this.grammar === GRAMMAR.OBJECTIVE) {\n      return [Property, Util];\n    } else {\n      return [];\n    }\n  }\n\n  toJavascript() {\n    if (this.grammar === GRAMMAR.SUBJECT) {\n      const child = this.children[0];\n      const childCode = child.toJavascript();\n      return `getSprite(\"${this.data}\")${childCode}`;\n    } else if (this.grammar === GRAMMAR.OBJECTIVE) {\n      const child = this.children && this.children[0];\n      if (child) {\n        const childCode = child.toJavascript();\n        return `getSprite(\"${this.data}\")${childCode}`;\n      } else {\n        if(this.parent.type === BLOCK.ACTION && this.parent.data === \"set\") {\n          return `getSprite(\"${this.data}\")`;\n        } else {\n          return `\"${this.data}\"`;\n        }\n      }\n    }\n  }\n}\nexport class Sprite extends GameObject {\n  get type() {\n    return \"Sprite\";\n  }\n  get category() {\n    return \"GameObject\";\n  }\n\n  getDefaultChildren() {\n    if (this.grammar === GRAMMAR.OBJECTIVE) {\n      if(\n        this.parent instanceof Action\n        && this.parent.data === \"set\"\n        && this.parent.parent instanceof Variable  \n      ) {\n        return [new Block({ state: STATE.INSTANCE, parent: this })];\n      }\n    } else {\n      return super.getDefaultChildren();\n    }\n  }\n\n  static getPrototypeBlock(sprite) {\n    return new Sprite({ data: sprite.name, state: STATE.PROTOTYPE });\n  }\n  getAnimationIds() {\n    const context = this.getParentContext();\n    if (!context) return [];\n    const gameObjectInfo = context.getGameObjectInfoWithName(this.data);\n    if (!gameObjectInfo) return [];\n    const animationIds = gameObjectInfo.animationIds || [];\n    return animationIds;\n  }\n}\nexport class Screen extends GameObject {\n  get type() {\n    return \"Screen\";\n  }\n  get category() {\n    return \"GameObject\";\n  }\n\n  static getPrototypeBlock(screen) {\n    return new Screen({ data: screen.name, state: STATE.PROTOTYPE });\n  }\n}\nexport class Joystick extends GameObject {\n  get type() {\n    return \"Joystick\";\n  }\n  get category() {\n    return \"GameObject\";\n  }\n\n  static getPrototypeBlock(joystick) {\n    return new Joystick({ data: joystick.name, state: STATE.PROTOTYPE });\n  }\n}\nexport class DPad extends GameObject {\n  get type() {\n    return \"DPad\";\n  }\n  get category() {\n    return \"GameObject\";\n  }\n\n  static getPrototypeBlock(dPad) {\n    return new DPad({ data: dPad.name, state: STATE.PROTOTYPE });\n  }\n}\nexport class Text extends GameObject {\n  get type() {\n    return \"Text\";\n  }\n  get category() {\n    return \"GameObject\";\n  }\n\n  static getPrototypeBlock(text) {\n    return new Text({ data: text.name, state: STATE.PROTOTYPE });\n  }\n}\nexport class Sound extends GameObject {\n  get type() {\n    return \"Sound\";\n  }\n  get category() {\n    return \"GameObject\";\n  }\n\n  static getPrototypeBlock(sound) {\n    return new Sound({ data: sound.name, state: STATE.PROTOTYPE });\n  }\n\n  toJavascript() {\n    const child = this.children[0];\n    const childCode = child.toJavascript();\n    return childCode;\n  }\n}\n\nexport class Property extends Block {\n  get type() {\n    return \"Property\";\n  }\n  get category() {\n    return \"Property\";\n  }\n\n  getGrammarFor(parent) {\n    return parent.grammar;\n  }\n  getDefaultChildren() {\n    if (this.grammar === GRAMMAR.SUBJECT) {\n      return [new Block({ state: STATE.INSTANCE, parent: this })];\n    } else {\n      return [];\n    }\n  }\n\n  static getPrototypeBlocks() {\n    const prototypeBlocks = [];\n    const propertyNames = Property.getPropertyNames();\n    for (let i = 0; i < propertyNames.length; i++) {\n      const propertyName = propertyNames[i];\n      prototypeBlocks.push(\n        new Property({ data: propertyName, state: STATE.PROTOTYPE })\n      );\n    }\n    return prototypeBlocks;\n  }\n  static getPropertyNames() {\n    return [\n      \"text\",\n      \"x\",\n      \"y\",\n      \"width\",\n      \"height\",\n      \"size\",\n      \"degree\",\n      \"mass\",\n      \"moveSpeed\",\n      \"draggable\",\n      \"movable\",\n      \"flipX\",\n      \"flipY\",\n      \"velocityX\",\n      \"velocityY\",\n      \"gravityX\",\n      \"gravityY\",\n      \"bounceX\",\n      \"bounceY\",\n      \"accelerationX\",\n      \"accelerationY\"\n    ];\n  }\n  getAvailableChildTypesAt() {\n    return [Action];\n  }\n  getAvailableParentTypes() {\n    switch (this.data) {\n      case \"text\":\n        return [Text, Variable];\n      case \"x\":\n      case \"y\":\n        return [Sprite, Text, Screen, Joystick, DPad, Variable];\n      case \"width\":\n      case \"height\":\n        return [Sprite, Text, Joystick, DPad, Variable];\n      case \"size\":\n      case \"degree\":\n      case \"mass\":\n      case \"moveSpeed\":\n      case \"draggable\":\n      case \"movable\":\n      case \"flipX\":\n      case \"flipY\":\n      case \"velocityX\":\n      case \"velocityY\":\n      case \"gravityX\":\n      case \"gravityY\":\n      case \"bounceX\":\n      case \"bounceY\":\n      case \"accelerationX\":\n      case \"accelerationY\":\n        return [Sprite, Text, Variable];\n      default:\n        return [];\n    }\n  }\n\n  getPropertyType() {\n    switch (this.data) {\n      case \"text\":\n        return [StringBlock, Time];\n      case \"draggable\":\n      case \"movable\":\n      case \"flipX\":\n      case \"flipY\":\n        return [BooleanBlock];\n      case \"x\":\n      case \"y\":\n      case \"width\":\n      case \"height\":\n      case \"size\":\n      case \"degree\":\n      case \"mass\":\n      case \"moveSpeed\":\n      case \"velocityX\":\n      case \"velocityY\":\n      case \"gravityX\":\n      case \"gravityY\":\n      case \"bounceX\":\n      case \"bounceY\":\n      case \"accelerationX\":\n      case \"accelerationY\":\n        return [NumberBlock];\n      default:\n        return [];\n    }\n  }\n\n  toJavascript() {\n    if (this.grammar === GRAMMAR.SUBJECT) {\n      const child = this.children[0];\n      if (child instanceof Action && child.data === \"set\") {\n        const childCode = child.toJavascript();\n        return childCode;\n      } else {\n        return;\n      }\n    } else if (this.grammar === GRAMMAR.OBJECTIVE) {\n      const upperCased = this.data[0].toUpperCase() + this.data.slice(1);\n      return `.get${upperCased}()`;\n    }\n  }\n}\n\nexport class Action extends Block {\n  get type() {\n    return \"Action\";\n  }\n  get category() {\n    return \"Action\";\n  }\n\n  getGrammarFor() {\n    return GRAMMAR.VERB;\n  }\n  getDefaultChildren() {\n    switch (this.data) {\n      case \"set\":\n      case \"say\":\n      case \"playAnimation\":\n      case \"moveTo\":\n      case \"goTo\":\n      case \"turnTo\":\n      case \"turn\":\n      case \"addSize\":\n      case \"wait\":\n      case \"setCollision\":\n      case \"changeScene\":\n      case \"sendSignal\":\n      case \"saveScore\":\n        return [new Block({ state: STATE.INSTANCE, parent: this })];\n      case \"onTouch\":\n      case \"onTouchUp\":\n      case \"onOut\":\n      case \"onFrame\":\n      case \"onShake\":\n      case \"speak\":\n        return [new Callback({ state: STATE.INSTANCE, parent: this })];\n      case \"go\":\n      case \"move\":\n      case \"bind\":\n        return [\n          new Block({ state: STATE.INSTANCE, parent: this }),\n          new Block({ state: STATE.INSTANCE, parent: this })\n        ];\n      case \"onSwipe\":\n      case \"onOverlap\":\n      case \"onOverlapOnce\":\n      case \"onKey\":\n      case \"onKeyUp\":\n      case \"onSignal\":\n        return [\n          new Block({ state: STATE.INSTANCE, parent: this }),\n          new Callback({ state: STATE.INSTANCE, parent: this })\n        ];\n      default:\n        return [];\n    }\n  }\n\n  static getPrototypeBlocks() {\n    const prototypeBlocks = [];\n    const actionNames = Action.getActionNames();\n    for (let i = 0; i < actionNames.length; i++) {\n      const actionName = actionNames[i];\n      prototypeBlocks.push(\n        new Action({ data: actionName, state: STATE.PROTOTYPE })\n      );\n    }\n    return prototypeBlocks;\n  }\n  static getActionNames() {\n    return [\n      \"set\",\n      \"say\",\n      \"playAnimation\",\n      \"stopAnimation\",\n      \"move\",\n      \"moveTo\",\n      \"go\",\n      \"goTo\",\n      \"turn\",\n      \"turnTo\",\n      \"addSize\",\n      \"show\",\n      \"hide\",\n      \"kill\",\n      \"revive\",\n      \"shake\",\n      \"flash\",\n      \"wait\",\n      \"setCollision\",\n      \"sendSignal\",\n      \"onSignal\",\n      \"onOverlap\",\n      \"onOverlapOnce\",\n      \"onKey\",\n      \"onKeyUp\",\n      \"onTouch\",\n      \"onTouchUp\",\n      \"onOut\",\n      \"changeScene\",\n      \"onFrame\",\n      \"onSwipe\",\n      \"bind\",\n      \"play\",\n      \"restart\",\n      \"resume\",\n      \"stop\",\n      \"pause\",\n      \"showRanking\",\n      \"showRankingAscending\",\n      \"saveScore\",\n      \"startTimer\",\n      \"pauseTimer\",\n      \"resumeTimer\",\n      \"resetTimer\",\n      \"onShake\",\n      \"speak\",\n      \"vibrate\"\n    ];\n  }\n  isAvailableParentFor(block) {\n    if (this.data === \"playAnimation\") {\n      const spriteSubject = this.findParent({ type: BLOCK.SPRITE });\n      if (!spriteSubject) return true;\n      const context = this.getParentContext();\n      const gameObjectInfo = context.getGameObjectInfoWithName(\n        spriteSubject.data\n      );\n      const availableAnimationIds = gameObjectInfo.animationIds || [];\n      const animationId = block.data;\n      return availableAnimationIds.includes(animationId);\n    } else {\n      return super.isAvailableParentFor(block);\n    }\n  }\n  getAvailableChildTypesAt(index) {\n    switch (this.data) {\n      case \"set\":\n        if (this.parent instanceof Variable) {\n          return [NumberBlock, StringBlock, BooleanBlock, Time, GameObject, Variable, Operator];\n        } else if (this.parent instanceof Property) {\n          return [...this.parent.getPropertyType(), Variable, Operator];\n        } else {\n          return [Variable, Operator];\n        }\n      case \"say\":\n        return [NumberBlock, StringBlock, Time, Variable];\n      case \"playAnimation\":\n        return [Animation, Variable];\n      case \"moveTo\":\n      case \"goTo\":\n      case \"turnTo\":\n        return [Sprite, Text, Position, Random, Touch];\n      case \"wait\":\n      case \"turn\":\n      case \"addSize\":\n        return [NumberBlock, Variable];\n      case \"setCollision\":\n        return [Sprite, Screen, Text];\n      case \"onTouch\":\n      case \"onTouchUp\":\n      case \"onOut\":\n      case \"onFrame\":\n      case \"onShake\":\n      case \"speak\":\n        return [Callback];\n      case \"changeScene\":\n        return [Scene];\n      case \"go\":\n      case \"move\":\n        return (\n          [\n            [Direction, Axis],\n            [NumberBlock, Variable]\n          ][index] || []\n        );\n      case \"onSwipe\":\n        return [[Direction], [Callback]][index] || [];\n      case \"onOverlap\":\n      case \"onOverlapOnce\":\n        return [[Sprite, Text], [Callback]][index] || [];\n      case \"onKey\":\n      case \"onKeyUp\":\n        return [[Key], [Callback]][index] || [];\n      case \"onSignal\":\n        return [[StringBlock], [Callback]][index] || [];\n      case \"bind\":\n        return (\n          [\n            [Sprite, Text],\n            [NumberBlock, Variable]\n          ][index] || []\n        );\n      case \"sendSignal\":\n        return [StringBlock];\n      case \"saveScore\":\n        return [NumberBlock, Variable, Time];\n      default:\n        return [];\n    }\n  }\n  getFinalChildTypesAt(index) {\n    switch (this.data) {\n      case \"set\":\n        if (this.parent instanceof Property) {\n          return [...this.parent.getPropertyType()];\n        } else {\n          return this.getAvailableChildTypesAt(index);\n        }\n      case \"say\":\n        return [NumberBlock, StringBlock];\n      case \"playAnimation\":\n        return [Animation];\n      case \"wait\":\n      case \"turn\":\n        return [NumberBlock];\n      case \"go\":\n      case \"move\":\n        return [[Direction, Axis], [NumberBlock]][index] || [];\n      case \"bind\":\n        return [[Sprite, Text], [NumberBlock]][index] || [];\n      default:\n        return this.getAvailableChildTypesAt(index);\n    }\n  }\n  getAvailableParentTypes() {\n    switch (this.data) {\n      case \"set\":\n        return [Variable, Property];\n      case \"say\":\n      case \"playAnimation\":\n      case \"stopAnimation\":\n        return [Variable, Sprite];\n      case \"move\":\n      case \"moveTo\":\n      case \"goTo\":\n      case \"turn\":\n      case \"turnTo\":\n      case \"show\":\n      case \"hide\":\n      case \"kill\":\n      case \"revive\":\n      case \"setCollision\":\n      case \"onOverlap\":\n      case \"onOverlapOnce\":\n      case \"onOut\":\n        return [Variable, Sprite, Text];\n      case \"shake\":\n      case \"onSwipe\":\n        return [Variable, Sprite, Screen];\n      case \"onTouch\":\n      case \"onTouchUp\":\n      case \"onKey\":\n      case \"onKeyUp\":\n      case \"go\":\n      case \"wait\":\n      case \"sendSignal\":\n      case \"onSignal\":\n      case \"addSize\":\n        return [Variable, Sprite, Screen, Text];\n      case \"flash\":\n      case \"changeScene\":\n      case \"onFrame\":\n        return [Variable, Screen];\n      case \"bind\":\n        return [Variable, Joystick, DPad];\n      case \"play\":\n      case \"restart\":\n      case \"resume\":\n      case \"stop\":\n      case \"pause\":\n        return [Variable, Sound];\n      case \"showRanking\":\n      case \"showRankingAscending\":\n      case \"saveScore\":\n        return [Ranking];\n      case \"startTimer\":\n      case \"pauseTimer\":\n      case \"resumeTimer\":\n      case \"resetTimer\":\n        return [Timer];\n      case \"onShake\":\n      case \"vibrate\":\n      case \"speak\":\n        return [Variable, Mobile];\n      default:\n        return [];\n    }\n  }\n\n  isDisabledFor(block) {\n    if (this.isAnimateAction()) {\n      if (block.parent instanceof Sprite) {\n        const sprite = block.parent;\n        const animationIds = sprite.getAnimationIds();\n        return animationIds.length < 1;\n      }\n    }\n    return false;\n  }\n  isAnimateAction() {\n    return this.data === \"playAnimation\" || this.data === \"stopAnimation\";\n  }\n\n  toJavascript() {\n    switch (this.data) {\n      case \"set\":\n        return this.toJavascriptForSet();\n      case \"move\":\n      case \"go\":\n        return this.toJavascriptForMoveGo();\n      case \"moveTo\":\n      case \"goTo\":\n        return this.toJavascriptForMoveToGoTo();\n      case \"turnTo\":\n        return this.toJavascriptForTurnTo();\n      case \"say\":\n        return this.toJavascriptForSay();\n      case \"playAnimation\":\n        return this.toJavascriptForPlayAnimation();\n      case \"setCollision\":\n        return this.toJavascriptForSetCollision();\n      case \"bind\":\n        return this.toJavascriptForBind();\n      case \"onTouch\":\n      case \"onTouchUp\":\n        return this.toJavascriptForTouch();\n      default:\n        if (this.parent instanceof Sound) {\n          return this.toJavascriptForSoundParent();\n        } else if (this.parent instanceof Util) {\n          return this.toJavascriptForUtilParent();\n        } else {\n          return this.toJavascriptForDefault();\n        }\n    }\n  }\n  getArgsToJavascript() {\n    let args = \"\";\n    for (let i in this.children) {\n      const child = this.children[i];\n      if (i !== \"0\") {\n        args += \", \";\n      }\n      args += child.toJavascript();\n    }\n    return args;\n  }\n  toJavascriptForSet() {\n    const child = this.children[0];\n    const childCode = child.toJavascript();\n    if (this.parent instanceof Property) {\n      const propertyName = this.parent.data;\n      const upperCased = propertyName[0].toUpperCase() + propertyName.slice(1);\n      return `.set${upperCased}(${childCode})`;\n    } else {\n      return ` = ${childCode}`;\n    }\n  }\n  toJavascriptForMoveGo() {\n    const distance = this.children[1].toJavascript();\n    if (this.children[0] instanceof Direction) {\n      const directionBlock = this.children[0];\n      switch (directionBlock.data) {\n        case \"up\":\n          return `.${this.data}Y(${distance} * (-1))`;\n        case \"down\":\n          return `.${this.data}Y(${distance})`;\n        case \"right\":\n          return `.${this.data}X(${distance})`;\n        case \"left\":\n          return `.${this.data}X(${distance} * (-1))`;\n        default:\n          return;\n      }\n    } else if (this.children[0] instanceof Axis) {\n      const axisBlock = this.children[0];\n      switch (axisBlock.data) {\n        case \"x\":\n          return `.${this.data}X(${distance})`;\n        case \"y\":\n          return `.${this.data}Y(${distance})`;\n        default:\n          return;\n      }\n    }\n  }\n  toJavascriptForMoveToGoTo() {\n    if (this.children[0] instanceof GameObject) {\n      const gameObject = this.children[0];\n      const apiName = `${this.data}Sprite`;\n      return `.${apiName}(${gameObject.toJavascript()})`;\n    } else if (this.children[0] instanceof Position) {\n      const positionBlock = this.children[0];\n      const position = positionBlock.data;\n      const apiName = `${this.data}`;\n      return `.${apiName}(${position.x}, ${position.y})`;\n    } else if (this.children[0] instanceof Random) {\n      const apiName = `${this.data}Random`;\n      return `.${apiName}()`;\n    } else if (this.children[0] instanceof Touch) {\n      const apiName = `${this.data}MousePointer`;\n      return `.${apiName}()`;\n    }\n  }\n  toJavascriptForTurnTo() {\n    if (this.children[0] instanceof GameObject) {\n      const gameObject = this.children[0];\n      const apiName = `${this.data}Sprite`;\n      return `.${apiName}(${gameObject.toJavascript()})`;\n    } else if (this.children[0] instanceof Random) {\n      const apiName = `${this.data}Random`;\n      return `.${apiName}()`;\n    } else if (this.children[0] instanceof Touch) {\n      const apiName = `${this.data}MousePointer`;\n      return `.${apiName}()`;\n    }\n  }\n  toJavascriptForSay() {\n    const stringBlock = this.children[0];\n    const string = stringBlock.toJavascript();\n    const defaultSayTime = 3;\n    return `.say(${string}, ${defaultSayTime})`;\n  }\n  toJavascriptForPlayAnimation() {\n    const animationBlock = this.children[0];\n    const animationId = animationBlock.toJavascript();\n    const defaultRepeat = true;\n    return `.playAnimation(${animationId}, ${defaultRepeat})`;\n  }\n  toJavascriptForSetCollision() {\n    if (this.children[0] instanceof Screen) {\n      return \".setCollideScene(true)\";\n    } else if (this.children[0] instanceof GameObject) {\n      const gameObject = this.children[0];\n      const gameObjectId = gameObject.toJavascript();\n      return `.${this.data}(${gameObjectId})`;\n    }\n  }\n  toJavascriptForBind() {\n    const gameObjectId = this.children[0].toJavascript();\n    const maxSpeed = this.children[1].toJavascript();\n    if(this.parent instanceof DPad) {\n      return `.onDpad(function(direction){\n  var sprite = getSprite(${gameObjectId})\n  var speed = ${maxSpeed}\n  sprite.setVelocityX(0)\n  sprite.setVelocityY(0)\n  switch(direction) {\n    case \"left\":\n      sprite.setVelocityX(-speed)\n      break;\n    case \"right\":\n      sprite.setVelocityX(speed)\n      break;\n    case \"up\":\n      sprite.setVelocityY(-speed)\n      break;\n    case\"down\":\n      sprite.setVelocityY(speed)\n      break;\n    default:\n      break;\n  }\n})`;\n    } else {\n      return `.onJoystick(function(degree, force){\n  var maxSpeed = ${maxSpeed}\n  var sprite = getSprite(${gameObjectId})\n  sprite.setVelocityFromDegree(degree, force, maxSpeed)\n})`;\n    }\n  }\n  toJavascriptForTouch() {\n    let touchApiName = this.data;\n    const args = this.getArgsToJavascript();\n    if (this.parent instanceof Screen) {\n      touchApiName = {\n        onTouch: \"onScreenClick\",\n        onTouchUp: \"onScreenClickUp\"\n      }[touchApiName];\n    }\n    return `.${touchApiName}(${args})`;\n  }\n  toJavascriptForSoundParent() {\n    const soundApi = `${this.data}Sound`;\n    const soundId = this.parent.data;\n    return `${soundApi}(\"${soundId}\")`;\n  }\n  toJavascriptForUtilParent() {\n    const apiName = this.data;\n    const args = this.getArgsToJavascript();\n    return `${apiName}(${args})`;\n  }\n  toJavascriptForDefault() {\n    const apiName = this.data;\n    const args = this.getArgsToJavascript();\n    return `.${apiName}(${args})`;\n  }\n}\n\nexport class Constant extends Block {\n  get type() {\n    return \"Constant\";\n  }\n  get category() {\n    return \"Constant\";\n  }\n\n  getGrammarFor() {\n    return GRAMMAR.OBJECTIVE;\n  }\n\n  static getPrototypeBlocks({ gameObjects = [], sceneIds, strings } = {}) {\n    const animationIds = this.getAnimationIdsFrom(gameObjects);\n    const prototypeBlocks = [\n      ...NumberBlock.getPrototypeBlocks(),\n      ...StringBlock.getPrototypeBlocks(strings),\n      ...BooleanBlock.getPrototypeBlocks(),\n      ...Key.getPrototypeBlocks(),\n      ...Direction.getPrototypeBlocks(),\n      ...Animation.getPrototypeBlocks(animationIds),\n      ...Position.getPrototypeBlocks(),\n      ...Touch.getPrototypeBlocks(),\n      ...Random.getPrototypeBlocks(),\n      ...Scene.getPrototypeBlocks(sceneIds),\n      ...Axis.getPrototypeBlocks(),\n      ...Time.getPrototypeBlocks()\n    ];\n    return prototypeBlocks;\n  }\n  static getAnimationIdsFrom(gameObjects) {\n    const animationIdSet = new Set();\n    for (let i = 0; i < gameObjects.length; i++) {\n      const gameObject = gameObjects[i];\n      if (!gameObject.animationIds) continue;\n      for (let j = 0; j < gameObject.animationIds.length; j++) {\n        const animationId = gameObject.animationIds[j];\n        animationIdSet.add(animationId);\n      }\n    }\n    const animationIds = Array.from(animationIdSet);\n    return animationIds;\n  }\n\n  toJavascript() {\n    return `\"${this.data}\"`;\n  }\n}\nexport class NumberBlock extends Constant {\n  get type() {\n    return \"NumberBlock\";\n  }\n  get category() {\n    return \"Constant\";\n  }\n  static getPrototypeBlocks() {\n    return [new NumberBlock({ data: null, state: STATE.PROTOTYPE })];\n  }\n\n  toJavascript() {\n    return this.data;\n  }\n}\nexport class StringBlock extends Constant {\n  get type() {\n    return \"StringBlock\";\n  }\n  get category() {\n    return \"Constant\";\n  }\n\n  static getPrototypeBlocks(strings = []) {\n    const prototypeBlocks = [\n      new StringBlock({ data: null, state: STATE.PROTOTYPE })\n    ];\n    for (let i = 0; i < strings.length; i++) {\n      const string = strings[i];\n      prototypeBlocks.push(\n        new StringBlock({ data: string, state: STATE.PROTOTYPE })\n      );\n    }\n    return prototypeBlocks;\n  }\n}\nexport class BooleanBlock extends Constant {\n  get type() {\n    return \"BooleanBlock\";\n  }\n  get category() {\n    return \"Constant\";\n  }\n  static getPrototypeBlocks() {\n    return [\n      new BooleanBlock({ data: \"true\", state: STATE.PROTOTYPE }),\n      new BooleanBlock({ data: \"false\", state: STATE.PROTOTYPE })\n    ];\n  }\n\n  toJavascript() {\n    return this.data;\n  }\n}\nexport class Direction extends Constant {\n  get type() {\n    return \"Direction\";\n  }\n  get category() {\n    return \"Constant\";\n  }\n\n  static getPrototypeBlocks() {\n    return [\n      new Direction({ data: \"up\", state: STATE.PROTOTYPE }),\n      new Direction({ data: \"down\", state: STATE.PROTOTYPE }),\n      new Direction({ data: \"left\", state: STATE.PROTOTYPE }),\n      new Direction({ data: \"right\", state: STATE.PROTOTYPE })\n    ];\n  }\n}\nexport class Key extends Constant {\n  get type() {\n    return \"Key\";\n  }\n  get category() {\n    return \"Constant\";\n  }\n\n  static getPrototypeBlocks() {\n    return [new Key({ data: null, state: STATE.PROTOTYPE })];\n  }\n}\nexport class Animation extends Constant {\n  get type() {\n    return \"Animation\";\n  }\n  get category() {\n    return \"Constant\";\n  }\n\n  static getPrototypeBlocks(animationIds) {\n    const prototypeBlocks = [];\n    for (let i = 0; i < animationIds.length; i++) {\n      const animationId = animationIds[i];\n      prototypeBlocks.push(\n        new Animation({ data: animationId, state: STATE.PROTOTYPE })\n      );\n    }\n    return prototypeBlocks;\n  }\n}\nexport class Position extends Constant {\n  get type() {\n    return \"Position\";\n  }\n  get category() {\n    return \"Constant\";\n  }\n\n  isEqual(block) {\n    if(!(block instanceof Block)) {\n      return false;\n    }\n\n    return (\n      this.type === block.type &&\n      this.data.x === block.data.x &&\n      this.data.y === block.data.y\n    );\n  }\n\n  static getPrototypeBlocks() {\n    return [new Position({ data: { x: 100, y: 100 }, state: STATE.PROTOTYPE })];\n  }\n}\nexport class Touch extends Constant {\n  get type() {\n    return \"Touch\";\n  }\n  get category() {\n    return \"Constant\";\n  }\n\n  static getPrototypeBlocks() {\n    return [new Touch({ data: \"touch\", state: STATE.PROTOTYPE })];\n  }\n}\nexport class Random extends Constant {\n  get type() {\n    return \"Random\";\n  }\n  get category() {\n    return \"Constant\";\n  }\n\n  static getPrototypeBlocks() {\n    return [new Random({ data: \"random\", state: STATE.PROTOTYPE })];\n  }\n}\nexport class Scene extends Constant {\n  get type() {\n    return \"Scene\";\n  }\n  get category() {\n    return \"Constant\";\n  }\n\n  static getPrototypeBlocks(sceneIds = []) {\n    const prototypeBlocks = [];\n    for (let i = 0; i < sceneIds.length; i++) {\n      const sceneId = sceneIds[i];\n      prototypeBlocks.push(\n        new Scene({ data: sceneId, state: STATE.PROTOTYPE })\n      );\n    }\n    return prototypeBlocks;\n  }\n}\nexport class Axis extends Constant {\n  get type() {\n    return \"Axis\";\n  }\n  get category() {\n    return \"Constant\";\n  }\n\n  static getPrototypeBlocks() {\n    return [\n      new Axis({ data: \"x\", state: STATE.PROTOTYPE }),\n      new Axis({ data: \"y\", state: STATE.PROTOTYPE })\n    ];\n  }\n}\nexport class Time extends Constant {\n  get type() {\n    return \"Time\";\n  }\n  get category() {\n    return \"Constant\";\n  }\n\n  static getPrototypeBlocks() {\n    return [new Time({ data: \"time\", state: STATE.PROTOTYPE })];\n  }\n\n  toJavascript() {\n    return \"getTimer()\";\n  }\n}\n\nexport class Util extends Block {\n  get type() {\n    return \"Util\";\n  }\n  get category() {\n    return \"Util\";\n  }\n\n  getGrammarFor(parent) {\n    switch (this.data) {\n      case \"if\":\n      case \"else if\":\n      case \"repeat\":\n      case \"else\":\n        return GRAMMAR.PHRASE;\n      case \"clone\":\n        return parent.grammar;\n      default:\n        return GRAMMAR.SUBJECT;\n    }\n  }\n  getDefaultChildren() {\n    switch (this.data) {\n      case \"if\":\n      case \"else if\":\n      case \"repeat\":\n        return [\n          new Block({ state: STATE.INSTANCE, parent: this }),\n          new Callback({ state: STATE.INSTANCE, parent: this })\n        ];\n      case \"else\":\n        return [new Callback({ state: STATE.INSTANCE, parent: this })];\n      case \"clone\":\n        if(this.grammar === GRAMMAR.SUBJECT) {\n          return [new Block({ state: STATE.INSTANCE, parent: this })];\n        } else {\n          return [];\n        }\n      default:\n        return [];\n    }\n  }\n\n  static getPrototypeBlocks() {\n    const prototypeBlocks = [\n      new Util({ data: \"if\", state: STATE.PROTOTYPE }),\n      new Util({ data: \"else if\", state: STATE.PROTOTYPE }),\n      new Util({ data: \"else\", state: STATE.PROTOTYPE }),\n      new Util({ data: \"repeat\", state: STATE.PROTOTYPE }),\n      new Util({ data: \"clone\", state: STATE.PROTOTYPE }),\n      ...Mobile.getPrototypeBlocks(),\n      ...Ranking.getPrototypeBlocks(),\n      ...Timer.getPrototypeBlocks()\n    ];\n    return prototypeBlocks;\n  }\n  isAvailableParentFor(block) {\n    if (this.data === \"clone\") {\n      if(block instanceof Util && block.data === \"clone\") {\n        return false;\n      }\n\n      const availableParentTypes = block.getAvailableParentTypes();\n      for (let i in availableParentTypes) {\n        if (this.parent instanceof availableParentTypes[i]) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return super.isAvailableParentFor(block);\n    }\n  }\n  getAvailableChildTypesAt(index) {\n    switch (this.data) {\n      case \"if\":\n      case \"else if\":\n        return [[BooleanBlock, Variable, Operator], [Callback]][index] || [];\n      case \"repeat\":\n        return [[NumberBlock, Variable, Operator], [Callback]][index] || [];\n      case \"else\":\n        return [Callback];\n      case \"clone\":\n        return this.parent.getAvailableChildTypesAt(index);\n      default:\n        return [];\n    }\n  }\n  getFinalChildTypesAt(index) {\n    switch (this.data) {\n      case \"if\":\n      case \"else if\":\n        return [[BooleanBlock], [Callback]][index] || [];\n      case \"repeat\":\n        return [[NumberBlock], [Callback]][index] || [];\n      default:\n        return this.getAvailableChildTypesAt(index);\n    }\n  }\n  getAvailableParentTypes() {\n    switch (this.data) {\n      case \"if\":\n      case \"else if\":\n      case \"repeat\":\n      case \"else\":\n        return [Line];\n      case \"clone\":\n        return [Sprite, Text];\n      default:\n        return [];\n    }\n  }\n\n  toJavascript() {\n    switch (this.data) {\n      case \"repeat\":\n        return this.toJavascriptForRepeat();\n      case \"if\":\n      case \"else if\":\n        return this.toJavascriptForIf();\n      case \"else\":\n        return this.toJavascriptForElse();\n      case \"clone\":\n        return this.toJavascriptForClone();\n      default:\n        return;\n    }\n  }\n  toJavascriptForRepeat() {\n    const repeat = this.children[0].toJavascript();\n    const statement = this.linesToJavascript(this.children[1].children);\n    return `for(let i = 0; i < ${repeat}; i++) {\\n${statement}\\n}`;\n  }\n  toJavascriptForIf() {\n    const condition = this.children[0].toJavascript();\n    const statement = this.linesToJavascript(this.children[1].children);\n    return `${this.data}(${condition}) {\\n${statement}\\n}`;\n  }\n  toJavascriptForElse() {\n    const statement = this.linesToJavascript(this.children[0].children);\n    return `else {\\n${statement}\\n}`;\n  }\n  toJavascriptForClone() {\n    const child = this.children && this.children[0];\n    if (child) {\n      const childCode = child.toJavascript();\n      return `.clone()${childCode}`;\n    } else {\n      return `.clone()`;\n    }\n  }\n}\nexport class Mobile extends Util {\n  get type() {\n    return \"Mobile\";\n  }\n  get category() {\n    return \"Util\";\n  }\n\n  getGrammarFor() {\n    return GRAMMAR.SUBJECT;\n  }\n  getDefaultChildren() {\n    return [new Block({ state: STATE.INSTANCE, parent: this })];\n  }\n\n  static getPrototypeBlocks() {\n    return [new Mobile({ data: \"mobile\", state: STATE.PROTOTYPE })];\n  }\n  getAvailableChildTypesAt() {\n    return [Action];\n  }\n  getAvailableParentTypes() {\n    return [Line];\n  }\n\n  toJavascript() {\n    const child = this.children[0];\n    const childCode = child.toJavascript();\n    return childCode;\n  }\n}\nexport class Ranking extends Util {\n  get type() {\n    return \"Ranking\";\n  }\n  get category() {\n    return \"Util\";\n  }\n\n  getGrammarFor() {\n    return GRAMMAR.SUBJECT;\n  }\n  getDefaultChildren() {\n    return [new Block({ state: STATE.INSTANCE, parent: this })];\n  }\n\n  static getPrototypeBlocks() {\n    return [new Ranking({ data: \"ranking\", state: STATE.PROTOTYPE })];\n  }\n  getAvailableChildTypesAt() {\n    return [Action];\n  }\n  getAvailableParentTypes() {\n    return [Line];\n  }\n\n  toJavascript() {\n    const child = this.children[0];\n    const childCode = child.toJavascript();\n    return childCode;\n  }\n}\nexport class Timer extends Util {\n  get type() {\n    return \"Timer\";\n  }\n  get category() {\n    return \"Util\";\n  }\n\n  getGrammarFor() {\n    return GRAMMAR.SUBJECT;\n  }\n  getDefaultChildren() {\n    return [new Block({ state: STATE.INSTANCE, parent: this })];\n  }\n\n  static getPrototypeBlocks() {\n    return [new Timer({ data: \"timer\", state: STATE.PROTOTYPE })];\n  }\n  getAvailableChildTypesAt() {\n    return [Action];\n  }\n  getAvailableParentTypes() {\n    return [Line];\n  }\n\n  toJavascript() {\n    const child = this.children[0];\n    const childCode = child.toJavascript();\n    return childCode;\n  }\n}\n\nexport class Variable extends Block {\n  get type() {\n    return \"Variable\";\n  }\n  get category() {\n    return \"Variable\";\n  }\n\n  getGrammarFor(parent) {\n    if (parent instanceof Line) {\n      return GRAMMAR.SUBJECT;\n    } else {\n      return GRAMMAR.OBJECTIVE;\n    }\n  }\n  getDefaultChildren() {\n    if (this.grammar === GRAMMAR.SUBJECT) {\n      return [new Block({ state: STATE.INSTANCE, parent: this })];\n    } else {\n      return [];\n    }\n  }\n\n  static getPrototypeBlocks(variables) {\n    const prototypeBlocks = [];\n    for (let i in variables) {\n      const variable = variables[i];\n      prototypeBlocks.push(\n        new Variable({ data: variable, state: STATE.PROTOTYPE })\n      );\n    }\n    return prototypeBlocks;\n  }\n  getAvailableChildTypesAt(index) {\n    if (this.grammar === GRAMMAR.SUBJECT) {\n      return [Property, Action, Util];\n    } else if (this.grammar === GRAMMAR.OBJECTIVE) {\n      return [Property];\n    } else {\n      return [];\n    }\n  }\n\n  getPropertyType() {\n    return [Block];\n  }\n\n  toJavascript() {\n    const variableId = this.data;\n    const child = this.children && this.children[0];\n    if (child) {\n      const childCode = child.toJavascript();\n      return `global.${variableId}${childCode}`;\n    } else {\n      return `global.${variableId}`;\n    }\n  }\n}\n\nexport class Operator extends Block {\n  get type() {\n    return \"Operator\";\n  }\n  get category() {\n    return \"Operator\";\n  }\n\n  getGrammarFor() {\n    return GRAMMAR.OBJECTIVE;\n  }\n  getDefaultChildren() {\n    if (this.data === \"!\") {\n      return [new Block({ state: STATE.INSTANCE, parent: this })];\n    } else {\n      return [\n        new Block({ state: STATE.INSTANCE, parent: this }),\n        new Block({ state: STATE.INSTANCE, parent: this })\n      ];\n    }\n  }\n\n  static getPrototypeBlocks() {\n    return [\n      new Operator({ data: \"+\", state: STATE.PROTOTYPE }),\n      new Operator({ data: \"-\", state: STATE.PROTOTYPE }),\n      new Operator({ data: \"/\", state: STATE.PROTOTYPE }),\n      new Operator({ data: \"*\", state: STATE.PROTOTYPE }),\n      new Operator({ data: \"%\", state: STATE.PROTOTYPE }),\n      new Operator({ data: \">\", state: STATE.PROTOTYPE }),\n      new Operator({ data: \">=\", state: STATE.PROTOTYPE }),\n      new Operator({ data: \"==\", state: STATE.PROTOTYPE }),\n      new Operator({ data: \"<=\", state: STATE.PROTOTYPE }),\n      new Operator({ data: \"<\", state: STATE.PROTOTYPE }),\n      new Operator({ data: \"&&\", state: STATE.PROTOTYPE }),\n      new Operator({ data: \"||\", state: STATE.PROTOTYPE }),\n      new Operator({ data: \"!\", state: STATE.PROTOTYPE })\n    ];\n  }\n  getAvailableChildTypesAt() {\n    switch (this.data) {\n      case \"-\":\n      case \"/\":\n      case \"*\":\n      case \"%\":\n        return [NumberBlock, Variable];\n      case \"+\":\n        if (this.parent instanceof Action) {\n          const childIndex = this.parent.children.indexOf(this);\n          return this.parent.getAvailableChildTypesAt(childIndex);\n        } else {\n          return [NumberBlock, Variable];\n        }\n      case \">\":\n      case \">=\":\n      case \"<=\":\n      case \"<\":\n        return [NumberBlock, Variable];\n      case \"==\":\n        return [NumberBlock, StringBlock, BooleanBlock, Variable];\n      case \"&&\":\n      case \"||\":\n      case \"!\":\n        return [BooleanBlock, Variable];\n      default:\n        return [];\n    }\n  }\n  getOperatorTypes() {\n    switch (this.data) {\n      case \"-\":\n      case \"/\":\n      case \"*\":\n      case \"%\":\n        return [NumberBlock];\n      case \"+\":\n        return [NumberBlock, StringBlock];\n      case \">\":\n      case \">=\":\n      case \"==\":\n      case \"<=\":\n      case \"<\":\n        return [BooleanBlock];\n      case \"&&\":\n      case \"||\":\n      case \"!\":\n        return [BooleanBlock];\n      default:\n        return [];\n    }\n  }\n\n  toJavascript() {\n    if (this.data === \"!\") {\n      const operator = this.data;\n      const flag = this.children[0].toJavascript();\n      return `${operator}${flag}`;\n    } else {\n      const operator = this.data;\n      const prev = this.children[0].toJavascript();\n      const next = this.children[1].toJavascript();\n      return `${prev} ${operator} ${next}`;\n    }\n  }\n}\n\nexport class Callback extends Block {\n  constructor(props = {}) {\n    super(props);\n    this.children = this.children || [new Line({ parent: this })];\n    delete this.data;\n  }\n\n  get type() {\n    return \"Callback\";\n  }\n  get category() {\n    return \"Callback\";\n  }\n\n  toJavascript() {\n    const code = this.linesToJavascript(this.children);\n    return `function() {\\n${code}\\n}`;\n  }\n\n  getLines() {\n    return this.children;\n  }\n  addLineAt(line, index) {\n    line.parent = this;\n    this.children.splice(index, 0, line);\n  }\n}\n\nexport class FunctionBlock extends Block {\n  get type() {\n    return \"FunctionBlock\";\n  }\n  get category() {\n    return \"FunctionBlock\";\n  }\n\n  getAvailableChildTypesAt() {\n    return [GameObject, Constant, Variable];\n  }\n}\n\nexport default Block;\n"]},"metadata":{},"sourceType":"module"}