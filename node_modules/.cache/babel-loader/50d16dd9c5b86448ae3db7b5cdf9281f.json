{"ast":null,"code":"import _toConsumableArray from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Line from \"./line\";\nimport Block, { GameObject, Property, Action, Constant, Util, Variable, Operator } from \"./block\";\n\nvar Context =\n/*#__PURE__*/\nfunction () {\n  function Context() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Context);\n\n    this.id = props.id || Context.generateId();\n    this.lines = [new Line({\n      parent: this\n    })];\n    this.prototypesInfo = props.prototypesInfo;\n    this.prototypeBlocks = props.prototypeBlocks || [];\n  }\n\n  _createClass(Context, [{\n    key: \"clone\",\n    value: function clone() {\n      var clone = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n      clone.id = Context.generateId();\n      clone.lines = this.lines.map(function (line) {\n        return line.clone();\n      });\n      return clone;\n    }\n  }, {\n    key: \"getLines\",\n    value: function getLines() {\n      return this.lines;\n    }\n  }, {\n    key: \"getDisplayLines\",\n    value: function getDisplayLines() {\n      var lines = [];\n      var lineNum = 0;\n      Context.traverse(this.lines, {\n        onLine: function onLine(line) {\n          var parentLine = line.findParent({\n            type: \"Line\"\n          });\n\n          if (parentLine && parentLine.folded) {\n            lineNum++;\n          } else {\n            if (line.block.data) {\n              line.lineNum = lineNum;\n              lineNum++;\n            } else {\n              line.lineNum = null;\n            }\n\n            lines.push(line);\n          }\n        }\n      });\n      return lines;\n    }\n  }, {\n    key: \"getLineAt\",\n    value: function getLineAt(lineNum) {\n      return this.getDisplayLines()[lineNum];\n    }\n  }, {\n    key: \"deleteLine\",\n    value: function deleteLine(line) {\n      var lines = line.parent.getLines();\n      var index = lines.indexOf(line);\n      if (index >= 0) lines.splice(index, 1);\n    }\n  }, {\n    key: \"getBlockWithId\",\n    value: function getBlockWithId(blockId) {\n      var _block;\n\n      Context.traverse(this, {\n        onBlock: function onBlock(block) {\n          if (block.id === blockId) {\n            _block = block;\n          }\n        }\n      });\n      return _block;\n    }\n  }, {\n    key: \"getBlockAt\",\n    value: function getBlockAt(lineNum, blockNum) {\n      var line = this.getLineAt(lineNum);\n      var blocks = line.getDisplayBlocks();\n      return blocks[blockNum];\n    }\n  }, {\n    key: \"updatePrototypesInfo\",\n    value: function updatePrototypesInfo(prototypesInfo) {\n      this.prototypesInfo = prototypesInfo;\n      this.updatePrototypeBlocks();\n    }\n  }, {\n    key: \"updatePrototypeBlocks\",\n    value: function updatePrototypeBlocks() {\n      var _ref = this.prototypesInfo || {},\n          gameObjects = _ref.gameObjects,\n          sceneIds = _ref.sceneIds,\n          variables = _ref.variables,\n          strings = _ref.strings;\n\n      this.prototypeBlocks = [].concat(_toConsumableArray(GameObject.getPrototypeBlocks(gameObjects)), _toConsumableArray(Property.getPrototypeBlocks()), _toConsumableArray(Action.getPrototypeBlocks()), _toConsumableArray(Constant.getPrototypeBlocks({\n        gameObjects: gameObjects,\n        sceneIds: sceneIds,\n        strings: strings\n      })), _toConsumableArray(Util.getPrototypeBlocks()), _toConsumableArray(Variable.getPrototypeBlocks(variables)), _toConsumableArray(Operator.getPrototypeBlocks()));\n    }\n  }, {\n    key: \"getGameObjectInfoWithName\",\n    value: function getGameObjectInfoWithName(name) {\n      var _ref2 = this.prototypesInfo || {},\n          gameObjects = _ref2.gameObjects;\n\n      if (!gameObjects) return;\n      return gameObjects.find(function (gameObject) {\n        return gameObject.name === name;\n      });\n    }\n  }, {\n    key: \"getPrototypeBlocks\",\n    value: function getPrototypeBlocks() {\n      if (this.prototypesInfo && this.prototypesInfo.filter && Object.keys(this.prototypesInfo.filter).length > 0) {\n        return this.getFilteredPrototypeBlocks();\n      } else {\n        return this.prototypeBlocks;\n      }\n    }\n  }, {\n    key: \"getFilteredPrototypeBlocks\",\n    value: function getFilteredPrototypeBlocks() {\n      var filter = this.prototypesInfo.filter;\n      var filteredPrototypeBlocks = this.prototypeBlocks.filter(function (prototypeBlock) {\n        for (var category in filter) {\n          var categoryConstructor = Block.getConstructorByName(category);\n          var categoryFilter = filter[category];\n\n          if (prototypeBlock instanceof categoryConstructor) {\n            if (categoryFilter.length > 0) {\n              if (categoryFilter.includes(prototypeBlock.data)) {\n                return true;\n              }\n            } else {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      });\n      return filteredPrototypeBlocks;\n    }\n  }, {\n    key: \"findParent\",\n    value: function findParent() {\n      return null;\n    }\n  }, {\n    key: \"match\",\n    value: function match(where) {\n      var type = where.type,\n          id = where.id;\n      if (type && type !== this.type) return false;\n      if (id && id !== this.id) return false;\n      return true;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        lines: this.lines.map(function (line) {\n          return line.toJSON();\n        })\n      };\n    }\n  }, {\n    key: \"toJavascript\",\n    value: function toJavascript() {\n      var code = \"\";\n\n      for (var i in this.lines) {\n        var line = this.lines[i];\n        var lineCode = line.toJavascript();\n\n        if (lineCode) {\n          if (code !== \"\") {\n            code += \"\\n\";\n          }\n\n          code += lineCode;\n        }\n      }\n\n      return code;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"Context\";\n    }\n  }], [{\n    key: \"traverse\",\n    value: function traverse(oobcObject, behavior) {\n      var onContext = behavior.onContext,\n          onLine = behavior.onLine,\n          onBlock = behavior.onBlock;\n\n      if (oobcObject instanceof Context) {\n        if (onContext) onContext(oobcObject);\n        if (oobcObject.lines) Context.traverse(oobcObject.lines, behavior);\n      } else if (oobcObject instanceof Array) {\n        for (var i = 0; i < oobcObject.length; i++) {\n          if (oobcObject[i]) Context.traverse(oobcObject[i], behavior);\n        }\n      } else if (oobcObject instanceof Line) {\n        if (onLine) onLine(oobcObject);\n        if (oobcObject.block) Context.traverse(oobcObject.block, behavior);\n      } else if (oobcObject instanceof Block) {\n        if (onBlock) onBlock(oobcObject);\n        if (oobcObject.children) Context.traverse(oobcObject.children, behavior);\n      } else {\n        console.warn(\"oobc context traverse warning::unknown oobcObject\", oobcObject);\n      }\n    }\n  }, {\n    key: \"generateId\",\n    value: function generateId() {\n      var charSet = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n      var id = \"\";\n\n      for (var i = 0; i < 6; i++) {\n        var index = Math.floor(Math.random() * charSet.length);\n        id += charSet.substring(index, index + 1);\n      }\n\n      return id;\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      var contextJSON = json || {\n        lines: []\n      };\n      var context = new Context();\n      var lines = contextJSON.lines.map(function (line) {\n        return Line.fromJSON(line, context);\n      });\n      context.lines = lines;\n      return context;\n    }\n  }]);\n\n  return Context;\n}();\n\nexport default Context;","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Common/Component/OOBCEditor/OOBC/context.js"],"names":["Line","Block","GameObject","Property","Action","Constant","Util","Variable","Operator","Context","props","id","generateId","lines","parent","prototypesInfo","prototypeBlocks","clone","Object","assign","create","getPrototypeOf","map","line","lineNum","traverse","onLine","parentLine","findParent","type","folded","block","data","push","getDisplayLines","getLines","index","indexOf","splice","blockId","_block","onBlock","blockNum","getLineAt","blocks","getDisplayBlocks","updatePrototypeBlocks","gameObjects","sceneIds","variables","strings","getPrototypeBlocks","name","find","gameObject","filter","keys","length","getFilteredPrototypeBlocks","filteredPrototypeBlocks","prototypeBlock","category","categoryConstructor","getConstructorByName","categoryFilter","includes","where","toJSON","code","i","lineCode","toJavascript","oobcObject","behavior","onContext","Array","children","console","warn","charSet","Math","floor","random","substring","json","contextJSON","context","fromJSON"],"mappings":"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","sourcesContent":["import Line from \"./line\";\nimport Block, {\n  GameObject,\n  Property,\n  Action,\n  Constant,\n  Util,\n  Variable,\n  Operator\n} from \"./block\";\n\nclass Context {\n  constructor(props = {}) {\n    this.id = props.id || Context.generateId();\n    this.lines = [new Line({ parent: this })];\n    this.prototypesInfo = props.prototypesInfo;\n    this.prototypeBlocks = props.prototypeBlocks || [];\n  }\n\n  get type() {\n    return \"Context\"\n  }\n\n  clone() {\n    const clone = Object.assign(\n      Object.create(Object.getPrototypeOf(this)),\n      this\n    );\n    clone.id = Context.generateId();\n    clone.lines = this.lines.map(line => line.clone());\n    return clone;\n  }\n  getLines() {\n    return this.lines;\n  }\n  getDisplayLines() {\n    const lines = [];\n    let lineNum = 0;\n    Context.traverse(this.lines, {\n      onLine(line) {\n        const parentLine = line.findParent({ type: \"Line\" });\n        if (parentLine && parentLine.folded) {\n          lineNum++;\n        } else {\n          if (line.block.data) {\n            line.lineNum = lineNum;\n            lineNum++;\n          } else {\n            line.lineNum = null;\n          }\n          lines.push(line);\n        }\n      }\n    });\n    return lines;\n  }\n  getLineAt(lineNum) {\n    return this.getDisplayLines()[lineNum];\n  }\n  deleteLine(line) {\n    const lines = line.parent.getLines();\n    const index = lines.indexOf(line);\n    if (index >= 0) lines.splice(index, 1);\n  }\n\n  getBlockWithId(blockId) {\n    let _block;\n    Context.traverse(this, {\n      onBlock(block) {\n        if (block.id === blockId) {\n          _block = block;\n        }\n      }\n    });\n    return _block;\n  }\n  getBlockAt(lineNum, blockNum) {\n    const line = this.getLineAt(lineNum);\n    const blocks = line.getDisplayBlocks();\n    return blocks[blockNum];\n  }\n\n  updatePrototypesInfo(prototypesInfo) {\n    this.prototypesInfo = prototypesInfo;\n    this.updatePrototypeBlocks();\n  }\n  updatePrototypeBlocks() {\n    const { gameObjects, sceneIds, variables, strings } =\n      this.prototypesInfo || {};\n    this.prototypeBlocks = [\n      ...GameObject.getPrototypeBlocks(gameObjects),\n      ...Property.getPrototypeBlocks(),\n      ...Action.getPrototypeBlocks(),\n      ...Constant.getPrototypeBlocks({ gameObjects, sceneIds, strings }),\n      ...Util.getPrototypeBlocks(),\n      ...Variable.getPrototypeBlocks(variables),\n      ...Operator.getPrototypeBlocks()\n    ];\n  }\n  getGameObjectInfoWithName(name) {\n    const { gameObjects } = this.prototypesInfo || {};\n    if (!gameObjects) return;\n    return gameObjects.find(gameObject => gameObject.name === name);\n  }\n  getPrototypeBlocks() {\n    if (\n      this.prototypesInfo &&\n      this.prototypesInfo.filter &&\n      Object.keys(this.prototypesInfo.filter).length > 0\n    ) {\n      return this.getFilteredPrototypeBlocks();\n    } else {\n      return this.prototypeBlocks;\n    }\n  }\n  getFilteredPrototypeBlocks() {\n    const { filter } = this.prototypesInfo;\n    const filteredPrototypeBlocks = this.prototypeBlocks.filter(\n      prototypeBlock => {\n        for (let category in filter) {\n          const categoryConstructor = Block.getConstructorByName(category);\n          const categoryFilter = filter[category];\n          if (prototypeBlock instanceof categoryConstructor) {\n            if (categoryFilter.length > 0) {\n              if (categoryFilter.includes(prototypeBlock.data)) {\n                return true;\n              }\n            } else {\n              return true;\n            }\n          }\n        }\n        return false;\n      }\n    );\n    return filteredPrototypeBlocks;\n  }\n\n  static traverse(oobcObject, behavior) {\n    const { onContext, onLine, onBlock } = behavior;\n    if (oobcObject instanceof Context) {\n      if (onContext) onContext(oobcObject);\n      if (oobcObject.lines) Context.traverse(oobcObject.lines, behavior);\n    } else if (oobcObject instanceof Array) {\n      for (let i = 0; i < oobcObject.length; i++) {\n        if (oobcObject[i]) Context.traverse(oobcObject[i], behavior);\n      }\n    } else if (oobcObject instanceof Line) {\n      if (onLine) onLine(oobcObject);\n      if (oobcObject.block) Context.traverse(oobcObject.block, behavior);\n    } else if (oobcObject instanceof Block) {\n      if (onBlock) onBlock(oobcObject);\n      if (oobcObject.children) Context.traverse(oobcObject.children, behavior);\n    } else {\n      console.warn(\n        \"oobc context traverse warning::unknown oobcObject\",\n        oobcObject\n      );\n    }\n  }\n  findParent() {\n    return null;\n  }\n  match(where) {\n    const { type, id } = where;\n    if (type && type !== this.type)\n      return false;\n    if (id && id !== this.id) return false;\n    return true;\n  }\n\n  static generateId() {\n    const charSet = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n    let id = \"\";\n    for (let i = 0; i < 6; i++) {\n      const index = Math.floor(Math.random() * charSet.length);\n      id += charSet.substring(index, index + 1);\n    }\n    return id;\n  }\n  static fromJSON(json) {\n    const contextJSON = json || { lines: [] }\n    const context = new Context();\n    const lines = contextJSON.lines.map(line => Line.fromJSON(line, context));\n    context.lines = lines;\n    return context;\n  }\n  toJSON() {\n    return {\n      lines: this.lines.map(line => line.toJSON())\n    };\n  }\n  toJavascript() {\n    let code = \"\";\n    for (let i in this.lines) {\n      const line = this.lines[i];\n      const lineCode = line.toJavascript();\n      if (lineCode) {\n        if (code !== \"\") {\n          code += \"\\n\";\n        }\n        code += lineCode;\n      }\n    }\n    return code;\n  }\n}\n\nexport default Context;\n"]},"metadata":{},"sourceType":"module"}