{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Preview/Component/PreviewCanvas/Container.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { injectIntl } from \"react-intl\";\nimport { connect } from \"react-redux\";\nimport { fabric } from \"fabric\";\nimport WebFont from \"webfontloader\";\nimport stringify from \"json-stringify-safe\";\nimport * as sceneActions from \"../../../../Store/Reducer/scene\";\nimport * as projectActions from \"../../../../Store/Reducer/project\";\nimport * as interactionActions from \"../../../../Store/Reducer/interaction\";\nimport * as TrackingUtil from \"../../../../../../Common/Util/TrackingUtil\";\nimport { SpriteType, WORLD } from \"../../../../../../Common/Util/Constant\";\nimport * as request from \"../../../../../../Common/Util/HTTPRequest\";\nimport AssetLibrary from \"../../../../utils/assetLibrary\";\nimport View from \"./View\";\n\nvar Container = /*#__PURE__*/function (_Component) {\n  _inherits(Container, _Component);\n\n  var _super = _createSuper(Container);\n\n  function Container(props) {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _super.call(this, props);\n\n    _this.onChangeWorldSize = function () {\n      _this.updateWorldSize();\n    };\n\n    _this.onChangeCurrentScene = function () {\n      _this.updateWorldSize();\n    };\n\n    _this.updateWorldSize = function () {\n      // const { selectedScene } = this.props;\n      // if (!selectedScene) return;\n      // const {\n      //   worldWidth = WORLD.DEFAULT_WIDTH,\n      //   worldHeight = WORLD.DEFAULT_HEIGHT\n      // } = selectedScene;\n      var _this$props = _this.props,\n          screenMode = _this$props.screenMode,\n          selectedSceneId = _this$props.selectedSceneId;\n      var isHorizontal = screenMode === \"HORIZONTAL\";\n      var worldWidth = isHorizontal ? WORLD.DEFAULT_WIDTH : WORLD.DEFAULT_HEIGHT;\n      var worldHeight = isHorizontal ? WORLD.DEFAULT_HEIGHT : WORLD.DEFAULT_WIDTH;\n      _this.WORLD_WIDTH = worldWidth;\n      _this.WORLD_HEIGHT = worldHeight;\n\n      _this.previewCanvas.setWidth(_this.WORLD_WIDTH);\n\n      _this.previewCanvas.setHeight(_this.WORLD_HEIGHT);\n\n      _this.previewCanvas.setDimensions({\n        width: \"100%\",\n        height: \"100%\"\n      }, {\n        cssOnly: true\n      });\n\n      _this.previewCanvas.getObjects().forEach(function (object) {\n        if (object.type === SpriteType.BACKGROUND) {\n          var _width = object.fill.source.width < _this.WORLD_WIDTH ? _this.WORLD_WIDTH : object.fill.source.width;\n\n          var _height = object.fill.source.height < _this.WORLD_HEIGHT ? _this.WORLD_HEIGHT : object.fill.source.height;\n\n          var left = _this.WORLD_WIDTH < _width ? -(_width - _this.WORLD_WIDTH) / 2 : 0;\n          var top = _this.WORLD_HEIGHT < _height ? -(_height - _this.WORLD_HEIGHT) / 2 : 0;\n          object.set({\n            width: _width,\n            height: _height,\n            left: left,\n            top: top\n          });\n        }\n\n        _this.exportPreviewData(object);\n      });\n\n      _this.previewCanvas.renderAll();\n\n      setTimeout(function () {\n        _this.updatePreviewStyle();\n      }, 10);\n\n      _this.props.setWorldSize(selectedSceneId, worldWidth, worldHeight);\n    };\n\n    _this.onModified = function (event) {\n      if (event.target) {\n        _this.exportPreviewData(event.target);\n      }\n    };\n\n    _this.onTextChanged = function (event) {\n      if (event.target) {\n        _this.exportPreviewData(event.target);\n      }\n    };\n\n    _this.onMouseUp = function (event) {\n      _this.previewCanvas.isMouseDown = false;\n    };\n\n    _this.onMouseDown = function (event) {\n      _this.props.handleChangeZIndex(\"preview\");\n\n      _this.previewCanvas.isMouseDown = true;\n\n      if (event.target) {\n        var selectedSceneId = _this.props.selectedSceneId;\n        var _event$target = event.target,\n            name = _event$target.name,\n            type = _event$target.type;\n\n        if (!_this.props.sprites[name]) {\n          _this.previewCanvas.remove(event.target);\n\n          return;\n        }\n\n        if (_this.props.selectedObject.name !== name) {\n          if (!_this.props.sprites[name].locked) {\n            TrackingUtil.sendGAEvent({\n              category: \"Builder\",\n              action: \"ClickSprite\",\n              label: \"Preview\"\n            });\n\n            _this.props.selectSprite(selectedSceneId, name, type);\n          }\n        }\n      }\n    };\n\n    _this.exportPreviewData = function (sprite) {\n      var mapper = function mapper(item) {\n        var name = item.name,\n            type = item.type,\n            subtype = item.subtype,\n            angle = item.angle,\n            left = item.left,\n            top = item.top,\n            scaleX = item.scaleX,\n            scaleY = item.scaleY,\n            width = item.width,\n            height = item.height,\n            opacity = item.opacity;\n        return {\n          name: name,\n          type: type,\n          subtype: subtype,\n          angle: angle,\n          left: left,\n          top: top,\n          scaleX: scaleX,\n          scaleY: scaleY,\n          width: width,\n          height: height,\n          opacity: opacity\n        };\n      };\n\n      var selectedSceneId = _this.props.selectedSceneId;\n      var previewData = mapper(sprite);\n\n      if (sprite.type === SpriteType.TEXT) {\n        var text = sprite.text;\n        previewData.textValue = text;\n      }\n\n      if (_this.props.sprites[_this.props.selectedObject.name]) {\n        var currentData = stringify(previewData);\n        var prevData = stringify(_this.props.sprites[_this.props.selectedObject.name].preview);\n\n        if (currentData !== prevData && _this.props.sprites[sprite.name]) {\n          if (stringify(previewData) !== stringify(_this.props.sprites[sprite.name].preview)) {\n            _this.props.setSpritePreview(selectedSceneId, sprite.name, previewData);\n          }\n        }\n\n        _this.updateScreenshotData();\n      }\n    };\n\n    _this.updateScreenshotData = function () {\n      var immediate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      // if (this.thumbTimer) clearTimeout(this.thumbTimer);\n      // this.thumbTimer = setTimeout(() => {\n      //   let screenShotdata = undefined;\n      //   try {\n      //     screenShotdata = this.previewCanvas.toDataURL({\n      //       format: \"jpeg\",\n      //       quality: 0.7\n      //     });\n      //   } catch (e) {\n      //     console.error(e);\n      //   }\n      //   this.previewCanvas.renderAll();\n      // }, 100);\n      // if (!this.props.email) {\n      //   return;\n      // }\n      if (_this.updateScreenshotTimer) {\n        clearTimeout(_this.updateScreenshotTimer);\n      }\n\n      _this.updateScreenshotTimer = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var screenShotdata, icon, pId, params;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (_this.updateCycleMills === _this.firstUpdateCycleMills) {\n                  _this.updateCycleMills = _this.commonUpdateCycleMills;\n                }\n\n                _context.prev = 1;\n                screenShotdata = _this.previewCanvas.toDataURL({\n                  format: \"jpeg\",\n                  quality: 0.7\n                });\n                _context.next = 5;\n                return _this.uploadScreenshot(screenShotdata);\n\n              case 5:\n                icon = _context.sent;\n\n                if (_this.props.email && !_this.props.useCustomIcon) {\n                  pId = _this.props.pId;\n                  params = {\n                    pId: pId,\n                    icon: icon,\n                    useCustomIcon: false\n                  };\n                  request.updateDevelopingProject(params);\n\n                  _this.props.setScreenshotURL(icon, false);\n                }\n\n                _this.props.setScenePreview(_this.props.selectedSceneId, icon);\n\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                console.error(_context.t0);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 10]]);\n      })), immediate ? 0 : _this.updateCycleMills);\n    };\n\n    _this.uploadScreenshot = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(screenshotData) {\n        var byteString, mimeString, ia, i, blob, data, url, response, json;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (screenshotData.split(\",\")[0].indexOf(\"base64\") >= 0) {\n                  byteString = atob(screenshotData.split(\",\")[1]);\n                } else {\n                  byteString = unescape(screenshotData.split(\",\")[1]);\n                } // separate out the mime component\n\n\n                mimeString = screenshotData.split(\",\")[0].split(\":\")[1].split(\";\")[0]; // write the bytes of the string to a typed array\n\n                ia = new Uint8Array(byteString.length);\n\n                for (i = 0; i < byteString.length; i++) {\n                  ia[i] = byteString.charCodeAt(i);\n                }\n\n                blob = new Blob([ia], {\n                  type: mimeString\n                });\n                data = new FormData();\n                data.append(\"file\", blob);\n                url = undefined;\n                _context2.prev = 8;\n                _context2.next = 11;\n                return request.upload(data);\n\n              case 11:\n                response = _context2.sent;\n                _context2.next = 14;\n                return response.json();\n\n              case 14:\n                json = _context2.sent;\n                url = json.url;\n                _context2.next = 21;\n                break;\n\n              case 18:\n                _context2.prev = 18;\n                _context2.t0 = _context2[\"catch\"](8);\n                console.error(_context2.t0);\n\n              case 21:\n                return _context2.abrupt(\"return\", url);\n\n              case 22:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[8, 18]]);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.createPreviewStyle = function () {\n      var previewContainerRect = _this.getPreviewContatinerRect();\n\n      var isHorizontalMode = _this.getIsHorizontalMode();\n\n      var defaultWidth = isHorizontalMode ? WORLD.DEFAULT_WIDTH : WORLD.DEFAULT_HEIGHT;\n      var defaultHeight = isHorizontalMode ? WORLD.DEFAULT_HEIGHT : WORLD.DEFAULT_WIDTH;\n      var width = previewContainerRect.width * _this.WORLD_WIDTH / defaultWidth + 2;\n      var height = previewContainerRect.height * _this.WORLD_HEIGHT / defaultHeight + 2;\n      var top = -1;\n      var left = -1;\n      return {\n        top: top,\n        left: left,\n        width: width,\n        height: height\n      };\n    };\n\n    _this.updatePreviewStyle = function () {\n      _this.setState({\n        previewStyle: _this.createPreviewStyle()\n      });\n    };\n\n    _this.getPreviewContainerElement = function () {\n      var previewContainerElement = document.getElementById(\"preview_container\");\n      return previewContainerElement;\n    };\n\n    _this.getPreviewContatinerRect = function () {\n      var previewContainerElement = _this.getPreviewContainerElement();\n\n      return previewContainerElement.getBoundingClientRect();\n    };\n\n    _this.onResize = function (e) {\n      _this.updatePreviewStyle();\n    };\n\n    _this.getIsHorizontalMode = function () {\n      var screenMode = _this.props.screenMode;\n      return screenMode === \"HORIZONTAL\";\n    };\n\n    if (props.setRef) {\n      props.setRef(_assertThisInitialized(_this));\n    }\n\n    var _ref3 = props.selectedScene || {},\n        _ref3$worldWidth = _ref3.worldWidth,\n        _worldWidth = _ref3$worldWidth === void 0 ? WORLD.DEFAULT_WIDTH : _ref3$worldWidth,\n        _ref3$worldHeight = _ref3.worldHeight,\n        _worldHeight = _ref3$worldHeight === void 0 ? WORLD.DEFAULT_HEIGHT : _ref3$worldHeight;\n\n    _this.WORLD_WIDTH = _worldWidth;\n    _this.WORLD_HEIGHT = _worldHeight;\n    _this.refreshSprites = [];\n    _this.firstUpdateCycleMills = 1000;\n    _this.commonUpdateCycleMills = 3000;\n    _this.updateCycleMills = _this.firstUpdateCycleMills;\n    _this.imagesOnLoading = [];\n    _this.state = {\n      previewStyle: null\n    };\n    return _this;\n  } // life cycle\n\n\n  _createClass(Container, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initFabric();\n      this.drawSprites();\n      this.selectObject();\n      this.updateWorldSize();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.selectedSceneId === this.props.selectedSceneId) {\n        if (prevProps.selectedScene.worldWidth !== this.props.selectedScene.worldWidth || prevProps.selectedScene.worldHeight !== this.props.selectedScene.worldHeight) {\n          this.onChangeWorldSize();\n        }\n      } else {\n        this.onChangeCurrentScene();\n      }\n\n      if (prevProps.screenMode !== this.props.screenMode) {\n        this.onChangeScreenMode();\n      }\n\n      this.drawFabric();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.updateScreenshotTimer) {\n        clearTimeout(this.updateScreenshotTimer);\n      } // if (this.thumbTimer) {\n      //   clearTimeout(this.thumbTimer);\n      // }\n\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextStates) {\n      if (this.props.email && !nextProps.screenshotURL && !nextProps.useCustomIcon) {\n        this.updateScreenshotData(true);\n      }\n\n      this.checkRefreshSprites(this.props, nextProps);\n\n      if (this.refreshSprites.length > 0) {\n        return true;\n      }\n\n      if (this.state.previewStyle !== nextStates.previewStyle) {\n        return true;\n      }\n\n      if (nextProps.selectedSceneId === this.props.selectedSceneId) {\n        if (nextProps.selectedScene.worldWidth !== this.props.selectedScene.worldWidth || nextProps.selectedScene.worldHeight !== this.props.selectedScene.worldHeight) {\n          return true;\n        }\n      }\n\n      if (nextProps.screenMode !== this.props.screenMode) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"checkRefreshSprites\",\n    value: function checkRefreshSprites(currentProps, nextProps) {\n      var _this2 = this;\n\n      var currentSprites = currentProps.sprites;\n      var currentSpriteIds = currentProps.spriteIds;\n      var nextSprites = nextProps.sprites;\n      var nextSpriteIds = nextProps.spriteIds;\n      var currentSelectedScene = currentProps.selectedSceneId;\n      var nextSelectedScene = nextProps.selectedSceneId;\n      this.refreshSprites = [];\n\n      if (currentSelectedScene !== nextSelectedScene) {\n        this.imagesOnLoading = [];\n        this.previewCanvas.clear();\n        Object.keys(nextSprites).forEach(function (key, index) {\n          _this2.refreshSprites.push({\n            type: \"ADD\",\n            id: key\n          });\n        });\n      } else {\n        // 씬 번경이 아니라면 기존 로직 그대로\n        for (var i = 0; i < currentSpriteIds.length; i++) {\n          if (nextSprites[currentSpriteIds[i]] === undefined) {\n            this.refreshSprites.push({\n              type: \"REMOVE\",\n              id: currentSpriteIds[i]\n            });\n          }\n        }\n\n        for (var _i = 0; _i < nextSpriteIds.length; _i++) {\n          if (currentSprites[nextSpriteIds[_i]] === undefined) {\n            this.refreshSprites.push({\n              type: \"ADD\",\n              id: nextSpriteIds[_i]\n            });\n          } else {\n            var currentPreview = currentSprites[nextSpriteIds[_i]].preview;\n            var nextPreview = nextSprites[nextSpriteIds[_i]].preview;\n            var previewKeys = Object.keys(nextPreview);\n\n            for (var j = 0; j < previewKeys.length; j++) {\n              var key = previewKeys[j];\n\n              if (!this.previewCanvas.isMouseDown) {\n                if (currentPreview[key] !== nextPreview[key]) {\n                  this.refreshSprites.push({\n                    type: \"REFRESH\",\n                    id: nextSpriteIds[_i]\n                  });\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n        if (this.props.selectedObject.name !== nextProps.selectedObject.name) {\n          this.refreshSprites.push({\n            type: \"SELECT\"\n          });\n        }\n\n        for (var _i2 in currentSpriteIds) {\n          if (currentSpriteIds[_i2] !== nextSpriteIds[_i2]) {\n            this.refreshSprites.push({\n              type: \"REORDER\"\n            });\n            break;\n          }\n        }\n\n        if (nextSpriteIds.includes(currentProps.selectedObject.name) && currentProps.sprites[currentProps.selectedObject.name].locked !== nextProps.sprites[currentProps.selectedObject.name].locked) {\n          this.refreshSprites.push({\n            type: \"LOCK\"\n          });\n        }\n\n        if (this.props.screenMode !== nextProps.screenMode) {\n          this.refreshSprites.push({\n            type: \"SCREEN\"\n          });\n        }\n      }\n    }\n  }, {\n    key: \"initFabric\",\n    value: function initFabric() {\n      // create a wrapper around native canvas element (with id=\"previewCanvas\")\n      this.previewCanvas = new fabric.Canvas(\"previewCanvas\");\n      this.previewCanvas.setWidth(this.WORLD_WIDTH);\n      this.previewCanvas.setHeight(this.WORLD_HEIGHT);\n      this.previewCanvas.setDimensions({\n        width: \"100%\",\n        height: \"100%\"\n      }, {\n        cssOnly: true\n      });\n      this.previewCanvas.selection = false;\n      this.previewCanvas.on(\"mouse:down\", this.onMouseDown);\n      this.previewCanvas.on(\"mouse:up\", this.onMouseUp);\n      this.previewCanvas.on(\"object:modified\", this.onModified);\n      this.previewCanvas.on(\"text:changed\", this.onTextChanged); // this.previewCanvas.on(\"object:moving\", this.onModified);\n      // this.previewCanvas.on(\"object:scaling\", this.onModified);\n      // this.previewCanvas.on(\"object:rotating\", this.onModified);\n\n      this.previewCanvas.isMouseDown = false;\n    }\n  }, {\n    key: \"drawFabric\",\n    value: function drawFabric() {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          sprites = _this$props2.sprites,\n          selectedObject = _this$props2.selectedObject;\n      this.refreshSprites.forEach(function (sprite) {\n        switch (sprite.type) {\n          case \"ADD\":\n            _this3.drawSprite(sprites[sprite.id], sprite.id);\n\n            break;\n\n          case \"REMOVE\":\n            _this3.removeSprite(sprite.id);\n\n            break;\n\n          case \"REFRESH\":\n            _this3.refreshProperty(sprite.id);\n\n            break;\n\n          case \"SELECT\":\n            _this3.selectObject();\n\n            break;\n\n          case \"REORDER\":\n            _this3.sortObjects();\n\n            break;\n\n          case \"LOCK\":\n            _this3.lockSprite(selectedObject.name);\n\n            break;\n\n          case \"SCREEN\":\n            // const shouldAdjust = this.refreshSprites.length === 1;\n            // this.setScreenMode(shouldAdjust);\n            break;\n\n          default:\n            break;\n        }\n      }); //for preview thumb\n\n      this.updateScreenshotData();\n    }\n  }, {\n    key: \"drawSprite\",\n    value: function drawSprite(sprite, id) {\n      switch (sprite.type) {\n        case SpriteType.PLAIN:\n        case SpriteType.SPRITE:\n        case SpriteType.CUSTOM:\n        case SpriteType.COMPONENT:\n          this.drawPlainSprite(sprite, id);\n          break;\n\n        case SpriteType.BACKGROUND:\n          this.drawBackgroundSprite(sprite, id);\n          break;\n\n        case SpriteType.TEXT:\n          this.drawTextSprite(sprite, id);\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"drawSprites\",\n    value: function drawSprites() {\n      var _this4 = this;\n\n      var _this$props3 = this.props,\n          sprites = _this$props3.sprites,\n          spriteIds = _this$props3.spriteIds;\n      spriteIds.forEach(function (id) {\n        _this4.drawSprite(sprites[id], id);\n      });\n    }\n  }, {\n    key: \"drawPlainSprite\",\n    value: function drawPlainSprite(sprite, name) {\n      var _this5 = this;\n\n      var asset = AssetLibrary.getAsset(sprite.assetId);\n      var type = sprite.type;\n      var prevTexture = sprite.preview;\n      var subtype = asset.subtype;\n      var image = new Image();\n      this.imagesOnLoading.push(image);\n      image.crossOrigin = \"anonymous\";\n      image.src = asset.path + \"?fabric=1\";\n\n      image.onload = function () {\n        var index = _this5.imagesOnLoading.indexOf(image);\n\n        if (index >= 0) {\n          _this5.imagesOnLoading.splice(index, 1);\n        } else {\n          return;\n        }\n\n        var img = new fabric.Image(image, {\n          width: image.width,\n          height: image.height,\n          left: _this5.WORLD_WIDTH / 2,\n          top: _this5.WORLD_HEIGHT / 2\n        });\n        img.name = name;\n        img.type = type;\n        img.subtype = subtype;\n        img.originX = \"center\";\n        img.originY = \"center\";\n        img.selectable = subtype !== \"ranking\" || sprite.locked ? !sprite.locked : true;\n\n        if (prevTexture.name) {\n          //restore texture infos\n          var left = prevTexture.left,\n              top = prevTexture.top,\n              scaleX = prevTexture.scaleX,\n              scaleY = prevTexture.scaleY,\n              angle = prevTexture.angle,\n              opacity = prevTexture.opacity;\n          img.set({\n            left: left,\n            top: top,\n            scaleX: scaleX,\n            scaleY: scaleY,\n            angle: angle,\n            opacity: opacity\n          });\n        } //set selection style\n\n\n        img.set({\n          borderColor: \"#8592A6\",\n          cornerSize: 20,\n          cornerStyle: \"circle\",\n          cornerColor: \"white\",\n          cornerStrokeColor: \"#8592A6\",\n          padding: 5,\n          borderScaleFactor: 2,\n          transparentCorners: false\n        });\n        img.setControlVisible(\"mb\", false);\n        img.setControlVisible(\"ml\", false);\n        img.setControlVisible(\"mr\", false);\n        img.setControlVisible(\"mt\", false); //add to canvas\n\n        _this5.previewCanvas.add(img);\n\n        _this5.sortObjects();\n\n        _this5.exportPreviewData(img);\n      };\n    }\n  }, {\n    key: \"drawBackgroundSprite\",\n    value: function drawBackgroundSprite(sprite, name) {\n      var _this6 = this;\n\n      var asset = AssetLibrary.getAsset(sprite.assetId);\n      var type = sprite.type;\n      var img = new Image();\n      this.imagesOnLoading.push(img);\n      img.crossOrigin = \"anonymous\";\n      img.src = asset.path + \"?fabric=1\";\n\n      img.onload = function () {\n        var index = _this6.imagesOnLoading.indexOf(img);\n\n        if (index >= 0) {\n          _this6.imagesOnLoading.splice(index, 1);\n        } else {\n          return;\n        }\n\n        var previewHeight = _this6.WORLD_HEIGHT;\n        var previewWidth = _this6.WORLD_WIDTH;\n        var width = img.width < previewWidth ? previewWidth : img.width;\n        var height = img.height < previewHeight ? previewHeight : img.height;\n        var left = previewWidth < width ? -(width - previewWidth) / 2 : 0;\n        var top = previewHeight < height ? -(height - previewHeight) / 2 : 0;\n        var shape = new fabric.Rect({\n          width: width,\n          height: height,\n          left: left,\n          top: top\n        });\n        shape.name = name;\n        shape.type = type; // shape.opacity = sprite.preview.opacity;\n\n        shape.selectable = false;\n        var prevTexture = sprite.preview;\n\n        if (prevTexture.name) {\n          //restore texture infos\n          var opacity = prevTexture.opacity;\n          shape.set({\n            opacity: opacity\n          });\n        }\n\n        shape.set(\"fill\", new fabric.Pattern({\n          source: img,\n          repeat: \"repeat\"\n        })); //add to canvas\n\n        _this6.previewCanvas.add(shape);\n\n        _this6.sortObjects();\n\n        _this6.exportPreviewData(shape);\n      };\n    }\n  }, {\n    key: \"drawTextSprite\",\n    value: function drawTextSprite(sprite, id) {\n      var _this7 = this;\n\n      var preview = sprite.preview;\n\n      var draw = function draw() {\n        var type = sprite.type;\n        var text = new fabric.IText(preview.textValue, {\n          name: id,\n          fontFamily: preview.fontFamily,\n          fontSize: preview.fontSize,\n          fontWeight: preview.fontWeight,\n          fontStyle: preview.fontStyle,\n          fill: preview.fontColor,\n          type: type,\n          left: _this7.WORLD_WIDTH / 2,\n          top: _this7.WORLD_HEIGHT / 2,\n          originX: \"center\",\n          originY: \"center\",\n          borderColor: \"#8592A6\",\n          cornerSize: 20,\n          cornerStyle: \"circle\",\n          cornerColor: \"white\",\n          cornerStrokeColor: \"#8592A6\",\n          padding: 5,\n          borderScaleFactor: 2,\n          transparentCorners: false,\n          selectable: sprite.locked ? !sprite.locked : true,\n          editable: sprite.locked ? !sprite.locked : true\n        });\n        var prevTexture = sprite.preview;\n\n        if (prevTexture.name) {\n          //restore texture infos\n          var left = prevTexture.left,\n              top = prevTexture.top,\n              scaleX = prevTexture.scaleX,\n              scaleY = prevTexture.scaleY,\n              angle = prevTexture.angle,\n              opacity = prevTexture.opacity;\n          text.set({\n            left: left,\n            top: top,\n            scaleX: scaleX,\n            scaleY: scaleY,\n            angle: angle,\n            opacity: opacity\n          });\n        }\n\n        text.setControlVisible(\"mb\", false);\n        text.setControlVisible(\"ml\", false);\n        text.setControlVisible(\"mr\", false);\n        text.setControlVisible(\"mt\", false);\n\n        _this7.previewCanvas.add(text);\n\n        _this7.sortObjects();\n\n        _this7.exportPreviewData(text);\n      };\n\n      WebFont.load({\n        google: {\n          families: [preview.fontFamily],\n          text: preview.textValue\n        },\n        fontactive: draw,\n        fontinactive: draw\n      });\n    }\n  }, {\n    key: \"removeSprite\",\n    value: function removeSprite(name) {\n      var spritesOnPreview = this.previewCanvas.getObjects();\n\n      for (var i = 0; i < spritesOnPreview.length; i++) {\n        var onSprite = spritesOnPreview[i];\n\n        if (onSprite.name === name) {\n          this.previewCanvas.remove(onSprite);\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"lockSprite\",\n    value: function lockSprite(name) {\n      var sprites = this.props.sprites;\n      var spritesOnPreview = this.previewCanvas.getObjects();\n\n      for (var i in spritesOnPreview) {\n        if (name === spritesOnPreview[i].name) {\n          this.previewCanvas.discardActiveObject();\n\n          if (spritesOnPreview[i].type !== \"background\") {\n            spritesOnPreview[i].selectable = !sprites[name].locked;\n          }\n\n          if (spritesOnPreview[i].type === \"text\") {\n            spritesOnPreview[i].editable = !sprites[name].locked;\n          }\n\n          this.previewCanvas.renderAll();\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"refreshProperty\",\n    value: function refreshProperty(name) {\n      var _this8 = this;\n\n      var sprites = this.props.sprites;\n      var sprite = sprites[name];\n      var preview = sprite.preview;\n      var left = preview.left,\n          top = preview.top,\n          scaleX = preview.scaleX,\n          scaleY = preview.scaleY,\n          angle = preview.angle,\n          opacity = preview.opacity;\n      var textValue = preview.textValue,\n          fontColor = preview.fontColor,\n          fontFamily = preview.fontFamily,\n          fontSize = preview.fontSize,\n          fontStyle = preview.fontStyle,\n          fontWeight = preview.fontWeight;\n      var isText = fontColor !== undefined;\n      if (left === undefined) return;\n      var spritesOnPreview = this.previewCanvas.getObjects();\n\n      var _loop = function _loop(i) {\n        var onSprite = spritesOnPreview[i];\n\n        if (onSprite.name === name) {\n          // refresh preview\n          onSprite.set({\n            left: left,\n            top: top,\n            scaleX: scaleX,\n            scaleY: scaleY,\n            angle: angle,\n            opacity: opacity\n          });\n          onSprite.setCoords(); // refresh lock\n\n          if (onSprite.type !== \"background\") {\n            onSprite.selectable = !sprite.locked;\n          }\n\n          if (onSprite.type === \"text\") {\n            onSprite.editable = !sprite.locked;\n          } // refresh select\n\n\n          _this8.selectObject(); // refresh text\n\n\n          if (isText) {\n            var draw = function draw() {\n              onSprite.set({\n                text: textValue,\n                fill: fontColor,\n                fontFamily: fontFamily,\n                fontSize: fontSize,\n                fontStyle: fontStyle,\n                fontWeight: fontWeight\n              });\n\n              _this8.previewCanvas.renderAll();\n            };\n\n            WebFont.load({\n              google: {\n                families: [fontFamily],\n                text: textValue\n              },\n              fontactive: draw,\n              fontinactive: draw\n            });\n          } else {\n            _this8.previewCanvas.renderAll();\n          }\n\n          return \"break\";\n        }\n      };\n\n      for (var i = 0; i < spritesOnPreview.length; i++) {\n        var _ret = _loop(i);\n\n        if (_ret === \"break\") break;\n      }\n    }\n  }, {\n    key: \"sortObjects\",\n    value: function sortObjects() {\n      var _this9 = this;\n\n      if (this.sortTimer) {\n        clearTimeout(this.sortTimer);\n        this.sortTimer = undefined;\n      }\n\n      this.sortTimer = setTimeout(function () {\n        var spriteIds = _this9.props.spriteIds;\n\n        var addedSprites = _this9.previewCanvas.getObjects();\n\n        if (spriteIds.length === addedSprites.length) {\n          _this9.previewCanvas.getObjects().forEach(function (object) {\n            var fabricZorder = _this9.getZorder(object);\n\n            var spriteIndex = spriteIds.indexOf(object.name);\n\n            if (fabricZorder !== spriteIndex) {\n              _this9.setZorder(object, spriteIndex);\n            }\n          });\n\n          for (var i in addedSprites) {\n            var object = addedSprites[i];\n\n            var fabricZorder = _this9.getZorder(object);\n\n            var spriteIndex = spriteIds.indexOf(object.name);\n\n            if (fabricZorder !== spriteIndex) {\n              _this9.sortObjects();\n\n              break;\n            }\n          }\n        }\n      }, 100);\n    }\n  }, {\n    key: \"getZorder\",\n    value: function getZorder(object) {\n      return this.previewCanvas.getObjects().indexOf(object);\n    }\n  }, {\n    key: \"setZorder\",\n    value: function setZorder(object, position) {\n      while (this.getZorder(object) > position) {\n        this.previewCanvas.sendBackwards(object);\n      }\n\n      while (this.getZorder(object) < position) {\n        this.previewCanvas.bringForward(object);\n      }\n    }\n  }, {\n    key: \"selectObject\",\n    value: function selectObject() {\n      var selectedObject = this.props.selectedObject;\n      var name = selectedObject.name;\n\n      if (this.previewCanvas.getActiveObject()) {\n        if (this.previewCanvas.getActiveObject().name === name) {\n          return;\n        }\n      }\n\n      var spritesOnPreview = this.previewCanvas.getObjects();\n\n      for (var i in spritesOnPreview) {\n        if (name === spritesOnPreview[i].name) {\n          if (spritesOnPreview[i].selectable) {\n            this.previewCanvas.setActiveObject(this.previewCanvas.item(i));\n          } else {\n            this.previewCanvas.discardActiveObject();\n          }\n\n          this.previewCanvas.renderAll();\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"onChangeScreenMode\",\n    value: function onChangeScreenMode() {\n      this.setScreenMode(false);\n    }\n  }, {\n    key: \"setScreenMode\",\n    value: function setScreenMode(shouldAdjust) {\n      var _this10 = this;\n\n      var screenMode = this.props.screenMode;\n      var canvasWidth = this.previewCanvas.getWidth();\n      var verticalToHorizontal = false;\n      var horizontalToVertical = false;\n      var width, height;\n\n      if (screenMode === \"HORIZONTAL\" && canvasWidth !== WORLD.DEFAULT_WIDTH) {\n        verticalToHorizontal = true;\n        width = WORLD.DEFAULT_WIDTH;\n        height = WORLD.DEFAULT_HEIGHT;\n      } else if (screenMode === \"VERTICAL\" && canvasWidth === WORLD.DEFAULT_WIDTH) {\n        horizontalToVertical = true;\n        width = WORLD.DEFAULT_HEIGHT;\n        height = WORLD.DEFAULT_WIDTH;\n      }\n\n      if (verticalToHorizontal || horizontalToVertical) {\n        this.previewCanvas.setWidth(width);\n        this.previewCanvas.setHeight(height);\n        this.previewCanvas.setDimensions({\n          width: \"100%\",\n          height: \"100%\"\n        }, {\n          cssOnly: true\n        });\n\n        if (shouldAdjust) {\n          this.previewCanvas.getObjects().forEach(function (object) {\n            if (object.type === SpriteType.BACKGROUND) {\n              var previewHeight = height;\n              var previewWidth = width;\n\n              var _width = object.fill.source.width < previewWidth ? previewWidth : object.fill.source.width;\n\n              var _height = object.fill.source.height < previewHeight ? previewHeight : object.fill.source.height;\n\n              var left = previewWidth < _width ? -(_width - previewWidth) / 2 : 0;\n              var top = previewHeight < _height ? -(_height - previewHeight) / 2 : 0;\n              object.set({\n                width: _width,\n                height: _height,\n                left: left,\n                top: top\n              });\n            } else {\n              object.top = object.top / width * height;\n              object.left = object.left / height * width;\n              object.setCoords();\n            }\n\n            _this10.exportPreviewData(object);\n          });\n        }\n\n        this.previewCanvas.renderAll();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var fixed = this.props.fixed;\n      var previewStyle = this.state.previewStyle;\n      return /*#__PURE__*/React.createElement(View, {\n        fixed: fixed,\n        previewStyle: previewStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 902,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    selectedSceneId: state.interaction.selected.scene,\n    selectedScene: state.scene.scenes[state.interaction.selected.scene],\n    sprites: state.scene.scenes[state.interaction.selected.scene].sprites,\n    spriteIds: state.scene.scenes[state.interaction.selected.scene].spriteIds,\n    screenMode: state.preview.screenMode,\n    selectedObject: state.interaction.selected.objects[state.interaction.selected.scene],\n    pId: state.project.pId,\n    email: state.userinfo.email,\n    timeStamp: state.project.timeStamp,\n    screenshotURL: state.project.screenshotURL,\n    useCustomIcon: state.project.useCustomIcon\n  };\n}, {\n  setSpritePreview: sceneActions.setSpritePreview,\n  selectSprite: interactionActions.selectSprite,\n  setScreenshotURL: projectActions.setScreenshotURL,\n  setScenePreview: sceneActions.setScenePreview,\n  setWorldSize: sceneActions.setWorldSize\n})(injectIntl(Container));","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Preview/Component/PreviewCanvas/Container.js"],"names":["React","Component","injectIntl","connect","fabric","WebFont","stringify","sceneActions","projectActions","interactionActions","TrackingUtil","SpriteType","WORLD","request","AssetLibrary","View","Container","props","onChangeWorldSize","updateWorldSize","onChangeCurrentScene","screenMode","selectedSceneId","isHorizontal","worldWidth","DEFAULT_WIDTH","DEFAULT_HEIGHT","worldHeight","WORLD_WIDTH","WORLD_HEIGHT","previewCanvas","setWidth","setHeight","setDimensions","width","height","cssOnly","getObjects","forEach","object","type","BACKGROUND","_width","fill","source","_height","left","top","set","exportPreviewData","renderAll","setTimeout","updatePreviewStyle","setWorldSize","onModified","event","target","onTextChanged","onMouseUp","isMouseDown","onMouseDown","handleChangeZIndex","name","sprites","remove","selectedObject","locked","sendGAEvent","category","action","label","selectSprite","sprite","mapper","item","subtype","angle","scaleX","scaleY","opacity","previewData","TEXT","text","textValue","currentData","prevData","preview","setSpritePreview","updateScreenshotData","immediate","updateScreenshotTimer","clearTimeout","updateCycleMills","firstUpdateCycleMills","commonUpdateCycleMills","screenShotdata","toDataURL","format","quality","uploadScreenshot","icon","email","useCustomIcon","pId","params","updateDevelopingProject","setScreenshotURL","setScenePreview","console","error","screenshotData","split","indexOf","byteString","atob","unescape","mimeString","ia","Uint8Array","length","i","charCodeAt","blob","Blob","data","FormData","append","url","undefined","upload","response","json","createPreviewStyle","previewContainerRect","getPreviewContatinerRect","isHorizontalMode","getIsHorizontalMode","defaultWidth","defaultHeight","setState","previewStyle","getPreviewContainerElement","previewContainerElement","document","getElementById","getBoundingClientRect","onResize","e","setRef","selectedScene","refreshSprites","imagesOnLoading","state","initFabric","drawSprites","selectObject","prevProps","onChangeScreenMode","drawFabric","nextProps","nextStates","screenshotURL","checkRefreshSprites","currentProps","currentSprites","currentSpriteIds","spriteIds","nextSprites","nextSpriteIds","currentSelectedScene","nextSelectedScene","clear","Object","keys","key","index","push","id","currentPreview","nextPreview","previewKeys","j","includes","Canvas","selection","on","drawSprite","removeSprite","refreshProperty","sortObjects","lockSprite","PLAIN","SPRITE","CUSTOM","COMPONENT","drawPlainSprite","drawBackgroundSprite","drawTextSprite","asset","getAsset","assetId","prevTexture","image","Image","crossOrigin","src","path","onload","splice","img","originX","originY","selectable","borderColor","cornerSize","cornerStyle","cornerColor","cornerStrokeColor","padding","borderScaleFactor","transparentCorners","setControlVisible","add","previewHeight","previewWidth","shape","Rect","Pattern","repeat","draw","IText","fontFamily","fontSize","fontWeight","fontStyle","fontColor","editable","load","google","families","fontactive","fontinactive","spritesOnPreview","onSprite","discardActiveObject","isText","setCoords","sortTimer","addedSprites","fabricZorder","getZorder","spriteIndex","setZorder","position","sendBackwards","bringForward","getActiveObject","setActiveObject","setScreenMode","shouldAdjust","canvasWidth","getWidth","verticalToHorizontal","horizontalToVertical","fixed","interaction","selected","scene","scenes","objects","project","userinfo","timeStamp"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { injectIntl } from \"react-intl\";\nimport { connect } from \"react-redux\";\nimport { fabric } from \"fabric\";\nimport WebFont from \"webfontloader\";\nimport stringify from \"json-stringify-safe\";\n\nimport * as sceneActions from \"../../../../Store/Reducer/scene\";\nimport * as projectActions from \"../../../../Store/Reducer/project\";\nimport * as interactionActions from \"../../../../Store/Reducer/interaction\";\n\nimport * as TrackingUtil from \"../../../../../../Common/Util/TrackingUtil\";\nimport { SpriteType, WORLD } from \"../../../../../../Common/Util/Constant\";\nimport * as request from \"../../../../../../Common/Util/HTTPRequest\";\nimport AssetLibrary from \"../../../../utils/assetLibrary\";\nimport View from \"./View\";\n\nclass Container extends Component {\n  constructor(props) {\n    super(props);\n    if (props.setRef) {\n      props.setRef(this);\n    }\n\n    const {\n      worldWidth = WORLD.DEFAULT_WIDTH,\n      worldHeight = WORLD.DEFAULT_HEIGHT\n    } = props.selectedScene || {};\n    this.WORLD_WIDTH = worldWidth;\n    this.WORLD_HEIGHT = worldHeight;\n\n    this.refreshSprites = [];\n    this.firstUpdateCycleMills = 1000;\n    this.commonUpdateCycleMills = 3000;\n    this.updateCycleMills = this.firstUpdateCycleMills;\n\n    this.imagesOnLoading = [];\n\n    this.state = { previewStyle: null };\n  }\n  // life cycle\n  componentDidMount() {\n    this.initFabric();\n    this.drawSprites();\n    this.selectObject();\n    this.updateWorldSize();\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.selectedSceneId === this.props.selectedSceneId) {\n      if (\n        prevProps.selectedScene.worldWidth !==\n          this.props.selectedScene.worldWidth ||\n        prevProps.selectedScene.worldHeight !==\n          this.props.selectedScene.worldHeight\n      ) {\n        this.onChangeWorldSize();\n      }\n    } else {\n      this.onChangeCurrentScene();\n    }\n    if (prevProps.screenMode !== this.props.screenMode) {\n      this.onChangeScreenMode();\n    }\n    this.drawFabric();\n  }\n  componentWillUnmount() {\n    if (this.updateScreenshotTimer) {\n      clearTimeout(this.updateScreenshotTimer);\n    }\n    // if (this.thumbTimer) {\n    //   clearTimeout(this.thumbTimer);\n    // }\n  }\n  shouldComponentUpdate(nextProps, nextStates) {\n    if (\n      this.props.email &&\n      !nextProps.screenshotURL &&\n      !nextProps.useCustomIcon\n    ) {\n      this.updateScreenshotData(true);\n    }\n\n    this.checkRefreshSprites(this.props, nextProps);\n    if (this.refreshSprites.length > 0) {\n      return true;\n    }\n\n    if (this.state.previewStyle !== nextStates.previewStyle) {\n      return true;\n    }\n\n    if (nextProps.selectedSceneId === this.props.selectedSceneId) {\n      if (\n        nextProps.selectedScene.worldWidth !==\n          this.props.selectedScene.worldWidth ||\n        nextProps.selectedScene.worldHeight !==\n          this.props.selectedScene.worldHeight\n      ) {\n        return true;\n      }\n    }\n\n    if (nextProps.screenMode !== this.props.screenMode) {\n      return true;\n    }\n\n    return false;\n  }\n  checkRefreshSprites(currentProps, nextProps) {\n    const currentSprites = currentProps.sprites;\n    const currentSpriteIds = currentProps.spriteIds;\n    const nextSprites = nextProps.sprites;\n    const nextSpriteIds = nextProps.spriteIds;\n    const currentSelectedScene = currentProps.selectedSceneId;\n    const nextSelectedScene = nextProps.selectedSceneId;\n\n    this.refreshSprites = [];\n\n    if (currentSelectedScene !== nextSelectedScene) {\n      this.imagesOnLoading = [];\n      this.previewCanvas.clear();\n      Object.keys(nextSprites).forEach((key, index) => {\n        this.refreshSprites.push({\n          type: \"ADD\",\n          id: key\n        });\n      });\n    } else {\n      // 씬 번경이 아니라면 기존 로직 그대로\n      for (let i = 0; i < currentSpriteIds.length; i++) {\n        if (nextSprites[currentSpriteIds[i]] === undefined) {\n          this.refreshSprites.push({\n            type: \"REMOVE\",\n            id: currentSpriteIds[i]\n          });\n        }\n      }\n      for (let i = 0; i < nextSpriteIds.length; i++) {\n        if (currentSprites[nextSpriteIds[i]] === undefined) {\n          this.refreshSprites.push({\n            type: \"ADD\",\n            id: nextSpriteIds[i]\n          });\n        } else {\n          const currentPreview = currentSprites[nextSpriteIds[i]].preview;\n          const nextPreview = nextSprites[nextSpriteIds[i]].preview;\n          const previewKeys = Object.keys(nextPreview);\n          for (let j = 0; j < previewKeys.length; j++) {\n            const key = previewKeys[j];\n            if (!this.previewCanvas.isMouseDown) {\n              if (currentPreview[key] !== nextPreview[key]) {\n                this.refreshSprites.push({\n                  type: \"REFRESH\",\n                  id: nextSpriteIds[i]\n                });\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      if (this.props.selectedObject.name !== nextProps.selectedObject.name) {\n        this.refreshSprites.push({ type: \"SELECT\" });\n      }\n\n      for (let i in currentSpriteIds) {\n        if (currentSpriteIds[i] !== nextSpriteIds[i]) {\n          this.refreshSprites.push({ type: \"REORDER\" });\n          break;\n        }\n      }\n\n      if (\n        nextSpriteIds.includes(currentProps.selectedObject.name) &&\n        currentProps.sprites[currentProps.selectedObject.name].locked !==\n          nextProps.sprites[currentProps.selectedObject.name].locked\n      ) {\n        this.refreshSprites.push({ type: \"LOCK\" });\n      }\n\n      if (this.props.screenMode !== nextProps.screenMode) {\n        this.refreshSprites.push({ type: \"SCREEN\" });\n      }\n    }\n  }\n  onChangeWorldSize = () => {\n    this.updateWorldSize();\n  };\n  onChangeCurrentScene = () => {\n    this.updateWorldSize();\n  };\n  updateWorldSize = () => {\n    // const { selectedScene } = this.props;\n    // if (!selectedScene) return;\n    // const {\n    //   worldWidth = WORLD.DEFAULT_WIDTH,\n    //   worldHeight = WORLD.DEFAULT_HEIGHT\n    // } = selectedScene;\n    const { screenMode, selectedSceneId } = this.props;\n    const isHorizontal = screenMode === \"HORIZONTAL\";\n    const worldWidth = isHorizontal ? WORLD.DEFAULT_WIDTH : WORLD.DEFAULT_HEIGHT;\n    const worldHeight = isHorizontal ? WORLD.DEFAULT_HEIGHT : WORLD.DEFAULT_WIDTH;\n    this.WORLD_WIDTH = worldWidth;\n    this.WORLD_HEIGHT = worldHeight;\n    this.previewCanvas.setWidth(this.WORLD_WIDTH);\n    this.previewCanvas.setHeight(this.WORLD_HEIGHT);\n    this.previewCanvas.setDimensions(\n      { width: \"100%\", height: \"100%\" },\n      { cssOnly: true }\n    );\n    this.previewCanvas.getObjects().forEach(object => {\n      if (object.type === SpriteType.BACKGROUND) {\n        const _width =\n          object.fill.source.width < this.WORLD_WIDTH\n            ? this.WORLD_WIDTH\n            : object.fill.source.width;\n        const _height =\n          object.fill.source.height < this.WORLD_HEIGHT\n            ? this.WORLD_HEIGHT\n            : object.fill.source.height;\n        const left =\n          this.WORLD_WIDTH < _width ? -(_width - this.WORLD_WIDTH) / 2 : 0;\n        const top =\n          this.WORLD_HEIGHT < _height ? -(_height - this.WORLD_HEIGHT) / 2 : 0;\n        object.set({ width: _width, height: _height, left, top });\n      }\n      this.exportPreviewData(object);\n    });\n    this.previewCanvas.renderAll();\n    setTimeout(() => {\n      this.updatePreviewStyle();\n    }, 10);\n\n    this.props.setWorldSize(selectedSceneId, worldWidth, worldHeight);\n  };\n\n  initFabric() {\n    // create a wrapper around native canvas element (with id=\"previewCanvas\")\n    this.previewCanvas = new fabric.Canvas(\"previewCanvas\");\n    this.previewCanvas.setWidth(this.WORLD_WIDTH);\n    this.previewCanvas.setHeight(this.WORLD_HEIGHT);\n    this.previewCanvas.setDimensions(\n      { width: \"100%\", height: \"100%\" },\n      { cssOnly: true }\n    );\n    this.previewCanvas.selection = false;\n    this.previewCanvas.on(\"mouse:down\", this.onMouseDown);\n    this.previewCanvas.on(\"mouse:up\", this.onMouseUp);\n    this.previewCanvas.on(\"object:modified\", this.onModified);\n    this.previewCanvas.on(\"text:changed\", this.onTextChanged);\n    // this.previewCanvas.on(\"object:moving\", this.onModified);\n    // this.previewCanvas.on(\"object:scaling\", this.onModified);\n    // this.previewCanvas.on(\"object:rotating\", this.onModified);\n    this.previewCanvas.isMouseDown = false;\n  }\n  onModified = event => {\n    if (event.target) {\n      this.exportPreviewData(event.target);\n    }\n  };\n  onTextChanged = event => {\n    if (event.target) {\n      this.exportPreviewData(event.target);\n    }\n  };\n  onMouseUp = event => {\n    this.previewCanvas.isMouseDown = false;\n  };\n  onMouseDown = event => {\n    this.props.handleChangeZIndex(\"preview\");\n    this.previewCanvas.isMouseDown = true;\n    if (event.target) {\n      const { selectedSceneId } = this.props;\n      const { name, type } = event.target;\n      if (!this.props.sprites[name]) {\n        this.previewCanvas.remove(event.target);\n        return;\n      }\n      if (this.props.selectedObject.name !== name) {\n        if (!this.props.sprites[name].locked) {\n          TrackingUtil.sendGAEvent({\n            category: \"Builder\",\n            action: `ClickSprite`,\n            label: \"Preview\"\n          });\n          this.props.selectSprite(selectedSceneId, name, type);\n        }\n      }\n    }\n  };\n\n  drawFabric() {\n    const { sprites, selectedObject } = this.props;\n    this.refreshSprites.forEach(sprite => {\n      switch (sprite.type) {\n        case \"ADD\":\n          this.drawSprite(sprites[sprite.id], sprite.id);\n          break;\n        case \"REMOVE\":\n          this.removeSprite(sprite.id);\n          break;\n        case \"REFRESH\":\n          this.refreshProperty(sprite.id);\n          break;\n        case \"SELECT\":\n          this.selectObject();\n          break;\n        case \"REORDER\":\n          this.sortObjects();\n          break;\n        case \"LOCK\":\n          this.lockSprite(selectedObject.name);\n          break;\n        case \"SCREEN\":\n          // const shouldAdjust = this.refreshSprites.length === 1;\n          // this.setScreenMode(shouldAdjust);\n          break;\n        default:\n          break;\n      }\n    });\n    //for preview thumb\n    this.updateScreenshotData();\n  }\n  drawSprite(sprite, id) {\n    switch (sprite.type) {\n      case SpriteType.PLAIN:\n      case SpriteType.SPRITE:\n      case SpriteType.CUSTOM:\n      case SpriteType.COMPONENT:\n        this.drawPlainSprite(sprite, id);\n        break;\n      case SpriteType.BACKGROUND:\n        this.drawBackgroundSprite(sprite, id);\n        break;\n      case SpriteType.TEXT:\n        this.drawTextSprite(sprite, id);\n        break;\n      default:\n        break;\n    }\n  }\n  drawSprites() {\n    const { sprites, spriteIds } = this.props;\n    spriteIds.forEach(id => {\n      this.drawSprite(sprites[id], id);\n    });\n  }\n  drawPlainSprite(sprite, name) {\n    const asset = AssetLibrary.getAsset(sprite.assetId);\n    const type = sprite.type;\n    const prevTexture = sprite.preview;\n    const subtype = asset.subtype;\n    const image = new Image();\n    this.imagesOnLoading.push(image);\n    image.crossOrigin = \"anonymous\";\n    image.src = asset.path + \"?fabric=1\";\n    image.onload = () => {\n      const index = this.imagesOnLoading.indexOf(image);\n      if (index >= 0) {\n        this.imagesOnLoading.splice(index, 1);\n      } else {\n        return;\n      }\n\n      const img = new fabric.Image(image, {\n        width: image.width,\n        height: image.height,\n        left: this.WORLD_WIDTH / 2,\n        top: this.WORLD_HEIGHT / 2\n      });\n\n      img.name = name;\n      img.type = type;\n      img.subtype = subtype;\n      img.originX = \"center\";\n      img.originY = \"center\";\n      img.selectable =\n        subtype !== \"ranking\" || sprite.locked ? !sprite.locked : true;\n      if (prevTexture.name) {\n        //restore texture infos\n        const { left, top, scaleX, scaleY, angle, opacity } = prevTexture;\n        img.set({ left, top, scaleX, scaleY, angle, opacity });\n      }\n\n      //set selection style\n      img.set({\n        borderColor: \"#8592A6\",\n        cornerSize: 20,\n        cornerStyle: \"circle\",\n        cornerColor: \"white\",\n        cornerStrokeColor: \"#8592A6\",\n        padding: 5,\n        borderScaleFactor: 2,\n        transparentCorners: false\n      });\n\n      img.setControlVisible(\"mb\", false);\n      img.setControlVisible(\"ml\", false);\n      img.setControlVisible(\"mr\", false);\n      img.setControlVisible(\"mt\", false);\n\n      //add to canvas\n      this.previewCanvas.add(img);\n      this.sortObjects();\n      this.exportPreviewData(img);\n    };\n  }\n  drawBackgroundSprite(sprite, name) {\n    const asset = AssetLibrary.getAsset(sprite.assetId);\n    const type = sprite.type;\n    const img = new Image();\n    this.imagesOnLoading.push(img);\n    img.crossOrigin = \"anonymous\";\n    img.src = asset.path + \"?fabric=1\";\n    img.onload = () => {\n      const index = this.imagesOnLoading.indexOf(img);\n      if (index >= 0) {\n        this.imagesOnLoading.splice(index, 1);\n      } else {\n        return;\n      }\n\n      const previewHeight = this.WORLD_HEIGHT;\n      const previewWidth = this.WORLD_WIDTH;\n      const width = img.width < previewWidth ? previewWidth : img.width;\n      const height = img.height < previewHeight ? previewHeight : img.height;\n      const left = previewWidth < width ? -(width - previewWidth) / 2 : 0;\n      const top = previewHeight < height ? -(height - previewHeight) / 2 : 0;\n      const shape = new fabric.Rect({ width, height, left, top });\n\n      shape.name = name;\n      shape.type = type;\n      // shape.opacity = sprite.preview.opacity;\n      shape.selectable = false;\n\n      const prevTexture = sprite.preview;\n      if (prevTexture.name) {\n        //restore texture infos\n        const { opacity } = prevTexture;\n        shape.set({ opacity });\n      }\n\n      shape.set(\n        \"fill\",\n        new fabric.Pattern({\n          source: img,\n          repeat: \"repeat\"\n        })\n      );\n      //add to canvas\n      this.previewCanvas.add(shape);\n      this.sortObjects();\n      this.exportPreviewData(shape);\n    };\n  }\n  drawTextSprite(sprite, id) {\n    const preview = sprite.preview;\n    const draw = () => {\n      const type = sprite.type;\n      var text = new fabric.IText(preview.textValue, {\n        name: id,\n        fontFamily: preview.fontFamily,\n        fontSize: preview.fontSize,\n        fontWeight: preview.fontWeight,\n        fontStyle: preview.fontStyle,\n        fill: preview.fontColor,\n        type: type,\n        left: this.WORLD_WIDTH / 2,\n        top: this.WORLD_HEIGHT / 2,\n        originX: \"center\",\n        originY: \"center\",\n        borderColor: \"#8592A6\",\n        cornerSize: 20,\n        cornerStyle: \"circle\",\n        cornerColor: \"white\",\n        cornerStrokeColor: \"#8592A6\",\n        padding: 5,\n        borderScaleFactor: 2,\n        transparentCorners: false,\n        selectable: sprite.locked ? !sprite.locked : true,\n        editable: sprite.locked ? !sprite.locked : true\n      });\n\n      const prevTexture = sprite.preview;\n      if (prevTexture.name) {\n        //restore texture infos\n        const { left, top, scaleX, scaleY, angle, opacity } = prevTexture;\n        text.set({ left, top, scaleX, scaleY, angle, opacity });\n      }\n      text.setControlVisible(\"mb\", false);\n      text.setControlVisible(\"ml\", false);\n      text.setControlVisible(\"mr\", false);\n      text.setControlVisible(\"mt\", false);\n      this.previewCanvas.add(text);\n      this.sortObjects();\n      this.exportPreviewData(text);\n    };\n\n    WebFont.load({\n      google: {\n        families: [preview.fontFamily],\n        text: preview.textValue\n      },\n      fontactive: draw,\n      fontinactive: draw\n    });\n  }\n  removeSprite(name) {\n    let spritesOnPreview = this.previewCanvas.getObjects();\n    for (let i = 0; i < spritesOnPreview.length; i++) {\n      const onSprite = spritesOnPreview[i];\n      if (onSprite.name === name) {\n        this.previewCanvas.remove(onSprite);\n        break;\n      }\n    }\n  }\n  lockSprite(name) {\n    const { sprites } = this.props;\n    let spritesOnPreview = this.previewCanvas.getObjects();\n    for (let i in spritesOnPreview) {\n      if (name === spritesOnPreview[i].name) {\n        this.previewCanvas.discardActiveObject();\n        if (spritesOnPreview[i].type !== \"background\") {\n          spritesOnPreview[i].selectable = !sprites[name].locked;\n        }\n        if (spritesOnPreview[i].type === \"text\") {\n          spritesOnPreview[i].editable = !sprites[name].locked;\n        }\n        this.previewCanvas.renderAll();\n        break;\n      }\n    }\n  }\n\n  refreshProperty(name) {\n    const { sprites } = this.props;\n    const sprite = sprites[name];\n    const preview = sprite.preview;\n    const { left, top, scaleX, scaleY, angle, opacity } = preview;\n    const {\n      textValue,\n      fontColor,\n      fontFamily,\n      fontSize,\n      fontStyle,\n      fontWeight\n    } = preview;\n    const isText = fontColor !== undefined;\n    if (left === undefined) return;\n\n    let spritesOnPreview = this.previewCanvas.getObjects();\n    for (let i = 0; i < spritesOnPreview.length; i++) {\n      const onSprite = spritesOnPreview[i];\n      if (onSprite.name === name) {\n        // refresh preview\n        onSprite.set({ left, top, scaleX, scaleY, angle, opacity });\n        onSprite.setCoords();\n\n        // refresh lock\n        if (onSprite.type !== \"background\") {\n          onSprite.selectable = !sprite.locked;\n        }\n        if (onSprite.type === \"text\") {\n          onSprite.editable = !sprite.locked;\n        }\n\n        // refresh select\n        this.selectObject();\n\n        // refresh text\n        if (isText) {\n          const draw = () => {\n            onSprite.set({\n              text: textValue,\n              fill: fontColor,\n              fontFamily,\n              fontSize,\n              fontStyle,\n              fontWeight\n            });\n            this.previewCanvas.renderAll();\n          };\n\n          WebFont.load({\n            google: {\n              families: [fontFamily],\n              text: textValue\n            },\n            fontactive: draw,\n            fontinactive: draw\n          });\n        } else {\n          this.previewCanvas.renderAll();\n        }\n        break;\n      }\n    }\n  }\n  sortObjects() {\n    if (this.sortTimer) {\n      clearTimeout(this.sortTimer);\n      this.sortTimer = undefined;\n    }\n    this.sortTimer = setTimeout(() => {\n      const { spriteIds } = this.props;\n      const addedSprites = this.previewCanvas.getObjects();\n      if (spriteIds.length === addedSprites.length) {\n        this.previewCanvas.getObjects().forEach(object => {\n          const fabricZorder = this.getZorder(object);\n          const spriteIndex = spriteIds.indexOf(object.name);\n          if (fabricZorder !== spriteIndex) {\n            this.setZorder(object, spriteIndex);\n          }\n        });\n        for (let i in addedSprites) {\n          const object = addedSprites[i];\n          const fabricZorder = this.getZorder(object);\n          const spriteIndex = spriteIds.indexOf(object.name);\n          if (fabricZorder !== spriteIndex) {\n            this.sortObjects();\n            break;\n          }\n        }\n      }\n    }, 100);\n  }\n  getZorder(object) {\n    return this.previewCanvas.getObjects().indexOf(object);\n  }\n  setZorder(object, position) {\n    while (this.getZorder(object) > position) {\n      this.previewCanvas.sendBackwards(object);\n    }\n    while (this.getZorder(object) < position) {\n      this.previewCanvas.bringForward(object);\n    }\n  }\n  selectObject() {\n    const { selectedObject } = this.props;\n    const name = selectedObject.name;\n\n    if (this.previewCanvas.getActiveObject()) {\n      if (this.previewCanvas.getActiveObject().name === name) {\n        return;\n      }\n    }\n\n    let spritesOnPreview = this.previewCanvas.getObjects();\n    for (let i in spritesOnPreview) {\n      if (name === spritesOnPreview[i].name) {\n        if (spritesOnPreview[i].selectable) {\n          this.previewCanvas.setActiveObject(this.previewCanvas.item(i));\n        } else {\n          this.previewCanvas.discardActiveObject();\n        }\n        this.previewCanvas.renderAll();\n        break;\n      }\n    }\n  }\n  onChangeScreenMode() {\n    this.setScreenMode(false);\n  }\n  setScreenMode(shouldAdjust) {\n    const { screenMode } = this.props;\n    const canvasWidth = this.previewCanvas.getWidth();\n    let verticalToHorizontal = false;\n    let horizontalToVertical = false;\n    let width, height;\n    if (screenMode === \"HORIZONTAL\" && canvasWidth !== WORLD.DEFAULT_WIDTH) {\n      verticalToHorizontal = true;\n      width = WORLD.DEFAULT_WIDTH;\n      height = WORLD.DEFAULT_HEIGHT;\n    } else if (\n      screenMode === \"VERTICAL\" &&\n      canvasWidth === WORLD.DEFAULT_WIDTH\n    ) {\n      horizontalToVertical = true;\n      width = WORLD.DEFAULT_HEIGHT;\n      height = WORLD.DEFAULT_WIDTH;\n    }\n\n    if (verticalToHorizontal || horizontalToVertical) {\n      this.previewCanvas.setWidth(width);\n      this.previewCanvas.setHeight(height);\n      this.previewCanvas.setDimensions(\n        { width: \"100%\", height: \"100%\" },\n        { cssOnly: true }\n      );\n\n      if (shouldAdjust) {\n        this.previewCanvas.getObjects().forEach(object => {\n          if (object.type === SpriteType.BACKGROUND) {\n            const previewHeight = height;\n            const previewWidth = width;\n            const _width =\n              object.fill.source.width < previewWidth\n                ? previewWidth\n                : object.fill.source.width;\n            const _height =\n              object.fill.source.height < previewHeight\n                ? previewHeight\n                : object.fill.source.height;\n            const left =\n              previewWidth < _width ? -(_width - previewWidth) / 2 : 0;\n            const top =\n              previewHeight < _height ? -(_height - previewHeight) / 2 : 0;\n            object.set({ width: _width, height: _height, left, top });\n          } else {\n            object.top = (object.top / width) * height;\n            object.left = (object.left / height) * width;\n            object.setCoords();\n          }\n          this.exportPreviewData(object);\n        });\n      }\n      this.previewCanvas.renderAll();\n    }\n  }\n\n  exportPreviewData = sprite => {\n    let mapper = item => {\n      const {\n        name,\n        type,\n        subtype,\n        angle,\n        left,\n        top,\n        scaleX,\n        scaleY,\n        width,\n        height,\n        opacity\n      } = item;\n      return {\n        name,\n        type,\n        subtype,\n        angle,\n        left,\n        top,\n        scaleX,\n        scaleY,\n        width,\n        height,\n        opacity\n      };\n    };\n    const { selectedSceneId } = this.props;\n    const previewData = mapper(sprite);\n    if (sprite.type === SpriteType.TEXT) {\n      const { text } = sprite;\n      previewData.textValue = text;\n    }\n\n    if (this.props.sprites[this.props.selectedObject.name]) {\n      const currentData = stringify(previewData);\n      const prevData = stringify(\n        this.props.sprites[this.props.selectedObject.name].preview\n      );\n\n      if (currentData !== prevData && this.props.sprites[sprite.name]) {\n        if (\n          stringify(previewData) !==\n          stringify(this.props.sprites[sprite.name].preview)\n        ) {\n          this.props.setSpritePreview(\n            selectedSceneId,\n            sprite.name,\n            previewData\n          );\n        }\n      }\n      this.updateScreenshotData();\n    }\n  };\n\n  updateScreenshotData = (immediate = false) => {\n    // if (this.thumbTimer) clearTimeout(this.thumbTimer);\n    // this.thumbTimer = setTimeout(() => {\n    //   let screenShotdata = undefined;\n    //   try {\n    //     screenShotdata = this.previewCanvas.toDataURL({\n    //       format: \"jpeg\",\n    //       quality: 0.7\n    //     });\n    //   } catch (e) {\n    //     console.error(e);\n    //   }\n    //   this.previewCanvas.renderAll();\n    // }, 100);\n\n    // if (!this.props.email) {\n    //   return;\n    // }\n    if (this.updateScreenshotTimer) {\n      clearTimeout(this.updateScreenshotTimer);\n    }\n    this.updateScreenshotTimer = setTimeout(\n      async () => {\n        if (this.updateCycleMills === this.firstUpdateCycleMills) {\n          this.updateCycleMills = this.commonUpdateCycleMills;\n        }\n        try {\n          const screenShotdata = this.previewCanvas.toDataURL({\n            format: \"jpeg\",\n            quality: 0.7\n          });\n          const icon = await this.uploadScreenshot(screenShotdata);\n          if (this.props.email && !this.props.useCustomIcon) {\n            const { pId } = this.props;\n            const params = { pId, icon, useCustomIcon: false };\n            request.updateDevelopingProject(params);\n            this.props.setScreenshotURL(icon, false);\n          }\n          this.props.setScenePreview(this.props.selectedSceneId, icon);\n        } catch (e) {\n          console.error(e);\n        }\n      },\n      immediate ? 0 : this.updateCycleMills\n    );\n  };\n  uploadScreenshot = async screenshotData => {\n    let byteString;\n    if (screenshotData.split(\",\")[0].indexOf(\"base64\") >= 0) {\n      byteString = atob(screenshotData.split(\",\")[1]);\n    } else {\n      byteString = unescape(screenshotData.split(\",\")[1]);\n    }\n    // separate out the mime component\n    const mimeString = screenshotData\n      .split(\",\")[0]\n      .split(\":\")[1]\n      .split(\";\")[0];\n    // write the bytes of the string to a typed array\n    let ia = new Uint8Array(byteString.length);\n    for (let i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n\n    const blob = new Blob([ia], { type: mimeString });\n    let data = new FormData();\n    data.append(\"file\", blob);\n    let url = undefined;\n    try {\n      const response = await request.upload(data);\n      const json = await response.json();\n      url = json.url;\n    } catch (e) {\n      console.error(e);\n    }\n    return url;\n  };\n\n  createPreviewStyle = () => {\n    const previewContainerRect = this.getPreviewContatinerRect();\n    const isHorizontalMode = this.getIsHorizontalMode();\n    const defaultWidth = isHorizontalMode\n      ? WORLD.DEFAULT_WIDTH\n      : WORLD.DEFAULT_HEIGHT;\n    const defaultHeight = isHorizontalMode\n      ? WORLD.DEFAULT_HEIGHT\n      : WORLD.DEFAULT_WIDTH;\n    const width =\n      (previewContainerRect.width * this.WORLD_WIDTH) / defaultWidth + 2;\n    const height =\n      (previewContainerRect.height * this.WORLD_HEIGHT) / defaultHeight + 2;\n    const top = -1;\n    const left = -1;\n    return { top, left, width, height };\n  };\n  updatePreviewStyle = () => {\n    this.setState({ previewStyle: this.createPreviewStyle() });\n  };\n  getPreviewContainerElement = () => {\n    const previewContainerElement = document.getElementById(\n      \"preview_container\"\n    );\n    return previewContainerElement;\n  };\n  getPreviewContatinerRect = () => {\n    const previewContainerElement = this.getPreviewContainerElement();\n    return previewContainerElement.getBoundingClientRect();\n  };\n  onResize = e => {\n    this.updatePreviewStyle();\n  };\n\n  getIsHorizontalMode = () => {\n    const { screenMode } = this.props;\n    return screenMode === \"HORIZONTAL\";\n  };\n\n  render() {\n    const { fixed } = this.props;\n    const { previewStyle } = this.state;\n    return <View fixed={fixed} previewStyle={previewStyle} />;\n  }\n}\n\nexport default connect(\n  state => ({\n    selectedSceneId: state.interaction.selected.scene,\n    selectedScene: state.scene.scenes[state.interaction.selected.scene],\n    sprites: state.scene.scenes[state.interaction.selected.scene].sprites,\n    spriteIds: state.scene.scenes[state.interaction.selected.scene].spriteIds,\n    screenMode: state.preview.screenMode,\n    selectedObject:\n      state.interaction.selected.objects[state.interaction.selected.scene],\n    pId: state.project.pId,\n    email: state.userinfo.email,\n    timeStamp: state.project.timeStamp,\n    screenshotURL: state.project.screenshotURL,\n    useCustomIcon: state.project.useCustomIcon\n  }),\n  {\n    setSpritePreview: sceneActions.setSpritePreview,\n    selectSprite: interactionActions.selectSprite,\n    setScreenshotURL: projectActions.setScreenshotURL,\n    setScenePreview: sceneActions.setScenePreview,\n    setWorldSize: sceneActions.setWorldSize\n  }\n)(injectIntl(Container));\n"]},"metadata":{},"sourceType":"module"}