{"ast":null,"code":"var acorn = require(\"acorn\");\n\nvar walk = require(\"acorn-walk\");\n\nexport function isCodeExist(code, targetCode) {\n  var ast, targetAST;\n\n  try {\n    ast = acorn.parse(code);\n    targetAST = acorn.parse(targetCode);\n  } catch (err) {\n    console.warn(err);\n    return false;\n  }\n\n  return isASTExist(ast, targetAST);\n}\nexport function isASTExist(ast, targetAST) {\n  var nodes, targetNodes;\n\n  try {\n    nodes = getNodesFrom(ast);\n    targetNodes = getNodesFrom(targetAST);\n  } catch (err) {\n    console.warn(err);\n    return false;\n  }\n\n  for (var i = 0; i < targetNodes.length - nodes.length + 1; i++) {\n    var isEqual = true;\n\n    for (var j = 0; j < nodes.length; j++) {\n      var node = nodes[j];\n      var targetNode = targetNodes[i + j];\n\n      if (!compareASTNode(node, targetNode)) {\n        isEqual = false;\n        break;\n      }\n    }\n\n    if (isEqual) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getNodesFrom(ast) {\n  var nodes = [];\n  walk.ancestor(ast, {\n    Literal: function Literal(node, ancestors) {\n      nodes.push({\n        type: \"Literal\",\n        value: node.value,\n        ancestors: ancestors.map(function (n) {\n          return n.type;\n        })\n      });\n    },\n    Identifier: function Identifier(node, ancestors) {\n      nodes.push({\n        type: \"Identifier\",\n        name: node.name,\n        ancestors: ancestors.map(function (n) {\n          return n.type;\n        })\n      });\n    }\n  });\n  return nodes;\n}\n\nfunction compareASTNode(node, targetNode) {\n  for (var key in node) {\n    switch (key) {\n      case \"ancestors\":\n        if (JSON.stringify(node[key]) !== JSON.stringify(targetNode[key])) {\n          return false;\n        } else {\n          break;\n        }\n\n      default:\n        if (node[key] !== targetNode[key]) {\n          return false;\n        } else {\n          break;\n        }\n\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Common/Util/codeComparable.js"],"names":["acorn","require","walk","isCodeExist","code","targetCode","ast","targetAST","parse","err","console","warn","isASTExist","nodes","targetNodes","getNodesFrom","i","length","isEqual","j","node","targetNode","compareASTNode","ancestor","Literal","ancestors","push","type","value","map","n","Identifier","name","key","JSON","stringify"],"mappings":"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","sourcesContent":["const acorn = require(\"acorn\");\nconst walk = require(\"acorn-walk\");\n\nexport function isCodeExist(code, targetCode) {\n  let ast, targetAST;\n  try {\n    ast = acorn.parse(code);\n    targetAST = acorn.parse(targetCode);\n  } catch(err) {\n    console.warn(err);\n    return false;\n  }\n  return isASTExist(ast, targetAST);\n}\n\nexport function isASTExist(ast, targetAST) {\n  let nodes, targetNodes;\n  try {\n    nodes = getNodesFrom(ast);\n    targetNodes = getNodesFrom(targetAST);\n  } catch(err) {\n    console.warn(err);\n    return false;\n  }\n\n  for (let i = 0; i < targetNodes.length - nodes.length + 1; i++) {\n    let isEqual = true;\n    for (let j = 0; j < nodes.length; j++) {\n      const node = nodes[j];\n      const targetNode = targetNodes[i + j];\n      if(!compareASTNode(node, targetNode)) {\n        isEqual = false;\n        break;\n      }\n    }\n    if(isEqual) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\nfunction getNodesFrom(ast) {\n  const nodes = [];\n\n  walk.ancestor(ast, {\n    Literal(node, ancestors) {\n      nodes.push({\n        type: \"Literal\",\n        value: node.value,\n        ancestors: ancestors.map(n => n.type)\n      });\n    },\n    Identifier(node, ancestors) {\n      nodes.push({\n        type: \"Identifier\",\n        name: node.name,\n        ancestors: ancestors.map(n => n.type)\n      });\n    }\n  });\n\n  return nodes;\n}\n\nfunction compareASTNode(node, targetNode) {\n  for(let key in node) {\n    switch(key) {\n      case \"ancestors\":\n        if(JSON.stringify(node[key]) !== JSON.stringify(targetNode[key])) {\n          return false;\n        } else {\n          break;\n        }\n      default:\n        if(node[key] !== targetNode[key]) {\n          return false;\n        } else {\n          break;\n        }\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}