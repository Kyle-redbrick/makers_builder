{"ast":null,"code":"import _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/QnA/Component/AnswerWriter/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport { injectIntl } from \"react-intl\";\nimport CodeWriter from \"../CodeWriter\";\nimport PopUp, { showPopUp } from \"../../../../../../Common/Component/PopUp\";\nimport * as request from \"../../../../../../Common/Util/HTTPRequest\";\nimport checkImg from \"../../../../../../Image/checkbox-on-btn.svg\";\nimport \"./index.scss\";\n\nvar AnswerWriter = /*#__PURE__*/function (_Component) {\n  _inherits(AnswerWriter, _Component);\n\n  var _super = _createSuper(AnswerWriter);\n\n  function AnswerWriter(props) {\n    var _this;\n\n    _classCallCheck(this, AnswerWriter);\n\n    _this = _super.call(this, props);\n\n    _this.toggleOpt = function (opt) {\n      if (opt === \"code\") {\n        _this.setState({\n          isCodeOpen: !_this.state.isCodeOpen\n        });\n      }\n    };\n\n    _this.showAlert = function (titleId) {\n      showPopUp( /*#__PURE__*/React.createElement(PopUp.OneButton, {\n        title: _this.props.intl.formatMessage({\n          id: titleId\n        }),\n        buttonName: _this.props.intl.formatMessage({\n          id: \"ID_SPAM_POPUP_CONFIRM\"\n        }),\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 7\n        }\n      }), {\n        darkmode: true,\n        dismissButton: false,\n        dismissOverlay: true\n      });\n    };\n\n    _this.onCodeChanged = function (code) {\n      _this.setState({\n        code: code\n      });\n    };\n\n    _this.onContentChanged = function (e) {\n      _this.setState({\n        content: e.target.value\n      });\n    };\n\n    _this.onClickCreate = function () {\n      if (!_this.props.userId) return;\n      var _this$state = _this.state,\n          isCodeOpen = _this$state.isCodeOpen,\n          code = _this$state.code,\n          content = _this$state.content;\n\n      if (!content || content.length < 2) {\n        _this.showAlert(\"ID_QNA_ANSWER_WRITE_WARN\");\n\n        return;\n      }\n\n      var params = {\n        userId: _this.props.userId,\n        content: content,\n        code: isCodeOpen ? code : null,\n        questionId: _this.props.questionId\n      };\n      request.postBuilderAnswer(params).then(function (res) {\n        return res.json();\n      }).then(function () {\n        _this.showAlert(\"ID_QNA_ANSWER_WRITE_SUCCESS\");\n\n        _this.setState({\n          isCodeOpen: false,\n          code: _this.props.intl.formatMessage({\n            id: \"ID_QNA_ACE_PLACEHOLDER\"\n          }),\n          content: \"\"\n        }, function () {\n          return _this.props.onSuccessWriteAnswer(_this.props.questionId);\n        });\n      }).catch(function (e) {\n        return console.error(e);\n      });\n    };\n\n    _this.state = {\n      isCodeOpen: false,\n      code: props.intl.formatMessage({\n        id: \"ID_QNA_ACE_PLACEHOLDER\"\n      }),\n      content: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(AnswerWriter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          isCodeOpen = _this$state2.isCodeOpen,\n          code = _this$state2.code,\n          content = _this$state2.content;\n      var toggleOpt = this.toggleOpt,\n          onClickCreate = this.onClickCreate,\n          onContentChanged = this.onContentChanged,\n          onCodeChanged = this.onCodeChanged;\n      var intl = this.props.intl;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"AnswerWriter\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"AnswerWriterTitleLine\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"AnswerWriterTitle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"ID_QNA_WRITE_ANSWER_TITLE\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"AnswerWriterOpt \".concat(isCodeOpen && \"AnswerWriterOptActive\"),\n        onClick: function onClick() {\n          return toggleOpt(\"code\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"AnswerWriterOptChkHolder\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: checkImg,\n        alt: \"checkbx\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"ID_QNA_WRITE_QUESTION_OPT1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"AnswerWriterWriters\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"textarea\", {\n        onChange: onContentChanged,\n        className: \"AnswerWriterInput\",\n        placeholder: intl.formatMessage({\n          id: \"ID_QNA_TEXTAREA_PLACEHOLDER\"\n        }),\n        value: content,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }\n      }), isCodeOpen && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"AnswerWriterCodeWriter\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(CodeWriter, {\n        code: code,\n        onChange: onCodeChanged,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"AnswerWriterCreate\",\n        onClick: onClickCreate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"ID_QNA_WRITE_QUESTION_ADD\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return AnswerWriter;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    userId: state.userinfo.id\n  };\n}, {})(injectIntl(AnswerWriter));","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/QnA/Component/AnswerWriter/index.js"],"names":["React","Component","connect","FormattedMessage","injectIntl","CodeWriter","PopUp","showPopUp","request","AnswerWriter","props","toggleOpt","opt","setState","isCodeOpen","state","showAlert","titleId","intl","formatMessage","id","darkmode","dismissButton","dismissOverlay","onCodeChanged","code","onContentChanged","e","content","target","value","onClickCreate","userId","length","params","questionId","postBuilderAnswer","then","res","json","onSuccessWriteAnswer","catch","console","error","checkImg","userinfo"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormattedMessage } from \"react-intl\";\nimport { injectIntl } from \"react-intl\";\nimport CodeWriter from \"../CodeWriter\";\nimport PopUp, { showPopUp } from \"../../../../../../Common/Component/PopUp\";\nimport * as request from \"../../../../../../Common/Util/HTTPRequest\";\nimport checkImg from \"../../../../../../Image/checkbox-on-btn.svg\";\nimport \"./index.scss\";\n\nclass AnswerWriter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isCodeOpen: false,\n      code: props.intl.formatMessage({ id: \"ID_QNA_ACE_PLACEHOLDER\" }),\n      content: \"\"\n    };\n  }\n  componentDidMount() {}\n\n  toggleOpt = opt => {\n    if (opt === \"code\") {\n      this.setState({ isCodeOpen: !this.state.isCodeOpen });\n    }\n  };\n\n  showAlert = titleId => {\n    showPopUp(\n      <PopUp.OneButton\n        title={this.props.intl.formatMessage({ id: titleId })}\n        buttonName={this.props.intl.formatMessage({\n          id: \"ID_SPAM_POPUP_CONFIRM\"\n        })}\n      />,\n      {\n        darkmode: true,\n        dismissButton: false,\n        dismissOverlay: true\n      }\n    );\n  };\n\n  onCodeChanged = code => {\n    this.setState({ code });\n  };\n\n  onContentChanged = e => {\n    this.setState({ content: e.target.value });\n  };\n\n  onClickCreate = () => {\n    if (!this.props.userId) return;\n\n    const { isCodeOpen, code, content } = this.state;\n\n    if (!content || content.length < 2) {\n      this.showAlert(\"ID_QNA_ANSWER_WRITE_WARN\");\n      return;\n    }\n\n    const params = {\n      userId: this.props.userId,\n      content,\n      code: isCodeOpen ? code : null,\n      questionId: this.props.questionId\n    };\n\n    request\n      .postBuilderAnswer(params)\n      .then(res => res.json())\n      .then(() => {\n        this.showAlert(\"ID_QNA_ANSWER_WRITE_SUCCESS\");\n        this.setState(\n          {\n            isCodeOpen: false,\n            code: this.props.intl.formatMessage({\n              id: \"ID_QNA_ACE_PLACEHOLDER\"\n            }),\n            content: \"\"\n          },\n          () => this.props.onSuccessWriteAnswer(this.props.questionId)\n        );\n      })\n      .catch(e => console.error(e));\n  };\n\n  render() {\n    const { isCodeOpen, code, content } = this.state;\n    const { toggleOpt, onClickCreate, onContentChanged, onCodeChanged } = this;\n    const { intl } = this.props;\n\n    return (\n      <div className=\"AnswerWriter\">\n        <div className=\"AnswerWriterTitleLine\">\n          <div className=\"AnswerWriterTitle\">\n            <FormattedMessage id=\"ID_QNA_WRITE_ANSWER_TITLE\" />\n          </div>\n          <div\n            className={`AnswerWriterOpt ${isCodeOpen &&\n              \"AnswerWriterOptActive\"}`}\n            onClick={() => toggleOpt(\"code\")}\n          >\n            <div className=\"AnswerWriterOptChkHolder\">\n              <img src={checkImg} alt=\"checkbx\" />\n            </div>\n            <FormattedMessage id=\"ID_QNA_WRITE_QUESTION_OPT1\" />\n          </div>\n        </div>\n        <div className=\"AnswerWriterWriters\">\n          <textarea\n            onChange={onContentChanged}\n            className=\"AnswerWriterInput\"\n            placeholder={intl.formatMessage({\n              id: \"ID_QNA_TEXTAREA_PLACEHOLDER\"\n            })}\n            value={content}\n          />\n\n          {isCodeOpen && (\n            <div className=\"AnswerWriterCodeWriter\">\n              <CodeWriter code={code} onChange={onCodeChanged} />\n            </div>\n          )}\n        </div>\n        <div className=\"AnswerWriterCreate\" onClick={onClickCreate}>\n          <FormattedMessage id=\"ID_QNA_WRITE_QUESTION_ADD\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  state => ({ userId: state.userinfo.id }),\n  {}\n)(injectIntl(AnswerWriter));\n"]},"metadata":{},"sourceType":"module"}