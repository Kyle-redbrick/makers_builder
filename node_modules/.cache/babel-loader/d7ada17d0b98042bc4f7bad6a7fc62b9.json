{"ast":null,"code":"import _toConsumableArray from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Editor/Component/AceEditor/Container.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport * as sceneActions from \"../../../../Store/Reducer/scene\";\nimport * as chatActions from \"../../../../Store/Reducer/chat\";\nimport * as chatbotActions from \"../../../../Store/Reducer/chatbot\";\nimport * as webrtcActions from \"../../../../Store/Reducer/webrtc\";\nimport { SpriteType, EDITORMODE } from \"../../../../../../Common/Util/Constant\";\nimport ApiLibrary from \"../../../../utils/apiLibrary\";\nimport stringify from \"json-stringify-safe\";\nimport AssetLibrary from \"../../../../utils/assetLibrary\";\nimport JSEvaluator from \"../../../../utils/JSEvaluator\";\nimport View from \"./View\";\nimport { injectIntl } from \"react-intl\";\nimport Parser from \"../../../../utils/parser\";\nimport { toast } from \"react-toastify\";\nimport { ChatbotMsgType } from \"../../../../../../Common/Util/Constant\";\nimport * as TrackingUtil from \"../../../../../../Common/Util/TrackingUtil\";\nvar enableJSEval = true;\nvar signalNameWorker = undefined;\nvar signalNames = [];\nvar globalValueWorker = undefined;\nvar globalValues = [];\n\nvar Container =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Container, _Component);\n\n  function Container(props) {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Container).call(this, props));\n\n    _this.getCompleters = function (selectionType) {\n      switch (selectionType) {\n        case \"all\":\n          return Object.keys(_this.completers).map(function (key) {\n            return _this.completers[key];\n          });\n\n        case \"global\":\n          return [_this.completers[selectionType + \"ValueCompleter\"]];\n\n        default:\n          return [_this.completers[selectionType + \"Completer\"]];\n      }\n    };\n\n    _this.getStoredFontSize = function () {\n      var fontSize = localStorage.getItem(\"wizFontSize\");\n\n      if (fontSize) {\n        return parseInt(fontSize);\n      }\n\n      return 18;\n    };\n\n    _this.handleMousemove = function (e) {\n      try {\n        var tooltip = document.getElementById(\"EditorContainer_tooltip\");\n        var pos = e.getDocumentPosition();\n        var line = e.editor.session.getLine(pos.row); // 해당 라인에 있는 함수들의 범위 구하기\n\n        var funcsRanges = [];\n        var funcRegex = /([a-zA-Z_{1}][a-zA-Z0-9_]+)(?=\\()/gim;\n        var funcMatch;\n\n        while (funcMatch = funcRegex.exec(line)) {\n          funcsRanges.push({\n            start: funcMatch.index,\n            end: funcRegex.lastIndex\n          });\n        } // 현재 커서가 있는 함수의 범위 구하기\n\n\n        var currentFuncRange;\n\n        for (var i = 0; i < funcsRanges.length; i++) {\n          var funcRange = funcsRanges[i];\n\n          if (funcRange.start <= pos.column && pos.column <= funcRange.end) {\n            currentFuncRange = funcRange;\n            break;\n          }\n        } // 현재 커서가 있는 함수의 이름 구하기\n\n\n        if (currentFuncRange) {\n          var currentFunctionName = line.substring(currentFuncRange.start, currentFuncRange.end); // 해당 함수의 api 정보 불러오기\n\n          var api = _this.apiList.find(function (api) {\n            return api.name === currentFunctionName;\n          });\n\n          if (!api) {\n            tooltip.style.display = \"none\";\n            return;\n          } // 이름이 대체된 api라면 대체된 api의 정보를 불러오기\n\n\n          var equal = api.equal;\n          var caption = api.caption;\n\n          if (equal) {\n            api = _objectSpread({}, _this.apiList.find(function (api) {\n              return api.name === equal;\n            }));\n            api.caption = caption;\n          } // 툴팁 보여주기\n\n\n          _this.setState({\n            tooltip: _objectSpread({}, api)\n          }, function () {\n            tooltip.style.display = \"block\";\n            tooltip.style.left = \"\".concat(e.domEvent.offsetX, \"px\");\n            tooltip.style.top = \"\".concat(e.domEvent.offsetY + 18, \"px\");\n          });\n        } else {\n          tooltip.style.display = \"none\";\n        }\n      } catch (e) {}\n    };\n\n    _this.handleOnChange = function (event, editor) {\n      var code = editor.getValue();\n      var _this$props = _this.props,\n          selectedSceneId = _this$props.selectedSceneId,\n          selectedObject = _this$props.selectedObject;\n      var spriteName = selectedObject.name;\n\n      if (editor.completer === undefined) {\n        try {\n          editor.execCommand(\"startAutocomplete\");\n          editor.completer.detach();\n\n          _this.refreshCompleterPopupSize();\n        } catch (e) {}\n      } // If inserted number, disable autocomplete\n\n\n      if (event) {\n        editor.setOptions({\n          enableLiveAutocompletion: isNaN(event.lines[0])\n        });\n      }\n\n      if (_this.JSEvaluatorTimer) {\n        clearTimeout(_this.JSEvaluatorTimer);\n      }\n\n      _this.JSEvaluatorTimer = setTimeout(function () {\n        _this.parseJSEvaluator(code, editor);\n      }, 3000);\n\n      if (spriteName) {\n        if (editor.curOp && editor.curOp.command.name) {\n          //changed by user\n          // if (this.codeTimer) {\n          // clearTimeout(this.codeTimer);\n          // }\n          // this.codeTimer = setTimeout(() => {\n          _this.props.setSpriteCode(selectedSceneId, spriteName, code); // }, 100);\n\n        } else {\n          if (_this.isLive) {\n            var _this$props2 = _this.props,\n                _selectedObject = _this$props2.selectedObject,\n                _selectedSceneId = _this$props2.selectedSceneId;\n            var name = _selectedObject.name;\n\n            if (!_this.undoManagers[_selectedSceneId]) {\n              _this.undoManagers[_selectedSceneId] = {};\n            }\n\n            _this.undoManagers[_selectedSceneId][name] = new window.ace.UndoManager();\n            var undoManager = _this.undoManagers[_selectedSceneId][name];\n\n            _this.aceEditor.session.setUndoManager(undoManager);\n          }\n        }\n      }\n    };\n\n    _this.parseJSEvaluator = function (code, editor) {\n      // Parsing the code (JSEvaluator uses the Acorn)\n      var errors = []; // eslint-disable-next-line\n\n      var annotations = []; // TODO:\n      // Ugly way to enable the following code block only for the development version.\n\n      if (enableJSEval) {\n        // if (enableJSEval || window.location.hostname !== \"wizlab.net\") {\n        var ret;\n\n        try {\n          // Parsing the code (JSEvaluator uses the Acorn)\n          ret = _this.JSEval.parse(code);\n        } catch (e) {\n          // console.log(\"JSEvaluator\", e);\n          ret = false;\n        }\n\n        if (ret === true) {\n          // Evaluating the parsed code (AST)\n          // In order to build the symbol table and get the runtime errors\n          var symtab;\n\n          if (_this.JSEval.build() === true) {\n            symtab = _this.JSEval.SymbolTable(); // Update the symbol table only if the JSEval successfully built the table.\n            // Otherwise uses the old table for the auto completions.\n\n            if (symtab !== null) {\n              _this.symtab = symtab;\n            }\n          }\n        }\n      }\n\n      errors = _this.JSEval.getErrors();\n      annotations = editor.getSession().getAnnotations(); // TODO:\n      // Pass the errors to the chatbot\n      // console.log(\"JSEvaluator detects\", errors);\n      // let chatbotErrors = [...errors, ...annotations];\n\n      var chatbotErrors = _toConsumableArray(errors);\n\n      _this.props.setChatbotErrors(chatbotErrors);\n\n      _this.props.removeChatbotMessages({\n        type: ChatbotMsgType.BOT_ERROR\n      });\n\n      if (chatbotErrors.length > 0) {\n        _this.handleShowErrors(editor);\n      }\n    };\n\n    _this.handleShowErrors = function () {\n      var errors = _this.props.errors;\n      errors.forEach(function (item) {\n        item.text = _this.setErrorText(item);\n\n        item.onClick = function () {\n          var end = item.loc && item.loc.end;\n          if (!end) return;\n          var position = {\n            row: end.line - 1,\n            column: end.column\n          };\n\n          _this.aceEditor.selection.moveCursorToPosition(position);\n\n          _this.aceEditor.selection.clearSelection();\n        };\n      });\n      var newMsg = {\n        sender: \"WIZBOT\",\n        type: ChatbotMsgType.BOT_ERROR,\n        errors: errors\n      };\n\n      _this.props.addNewMsg([newMsg]);\n    };\n\n    _this.setErrorText = function (item) {\n      // let startLine = item.loc ? item.loc.start.line : item.row + 1;\n      var message = item.message;\n      var text = \"\";\n\n      if (/parameter/i.test(message)) {\n        text += message.split(\" \")[0] + \" 함수는 \";\n        text += message.split(\" \")[2] + \"개의 매개변수를 넣어주어야 해~\";\n      }\n\n      if (/is undefined/i.test(message)) {\n        text += message.split(\" \")[0] + \" 는 아직 정의되지 않은 것 같은데?\";\n      }\n\n      if (/has already been declared/i.test(message)) {\n        var name = message.match(/'\\w+'/);\n        text += \"\\uC774\\uBBF8 \\uC815\\uC758\\uB41C \".concat(name, \"\\uB97C \\uB2E4\\uC2DC \\uC815\\uC758\\uD558\\uACE0 \\uC788\\uC5B4.\");\n      }\n\n      if (/Cannot change the constant/i.test(message)) {\n        var _name = message.split(\" \")[4];\n        text += \"const\\uB85C \\uC815\\uC758\\uD55C \".concat(_name, \"\\uB97C \\uB2E4\\uC2DC \\uC815\\uC758\\uD558\\uACE0 \\uC788\\uAD70.\");\n      } // if (/(subtract|divide|multiply) operation/i.test(message)) {\n      //   let operation = message\n      //     .match(/\\w+ operation/i)[0]\n      //     .replace(/ operation/i, \"\");\n      //   let ko_operation;\n      //   if (operation === \"subtract\") ko_operation = \"빼기\";\n      //   else if (operation === \"divide\") ko_operation = \"나누기\";\n      //   else if (operation === \"multiply\") ko_operation = \"곱하기\";\n      //   let [left, right] = message.match(/\\w+ \\| \\w+/i)[0].split(/\\s\\|\\s/i);\n      //   text += `${left} 타입에서 ${right} 타입을 ${operation}(${ko_operation}) 하네.`;\n      // }\n\n\n      if (message === _this.JSEval.ERROR_MESSAGE.FUNCTION_UPPER_LOWER) {\n        text += \"\\uD568\\uC218\\uC758 \\uB300\\uC18C\\uBB38\\uC790\\uB97C \\uD655\\uC778\\uD574\\uBD10.\\n (\".concat(item.typingFunction, \" \\u2192 \").concat(item.originFunction, \")\");\n      }\n\n      if (!text) {\n        text += \"을 확인해봐!\";\n      }\n\n      return text;\n    };\n\n    _this.handleOnChangeSelection = function (event, editor) {\n      var range = _this.getSelectionRange();\n\n      if (editor.curOp && editor.curOp.selectionChanged && editor.curOp.command.name) {\n        //changed by user\n        var diff = function diff(rang1, rang2) {\n          return {\n            val1: rang1.row === rang2.row,\n            val2: rang1.column === rang2.column\n          };\n        };\n\n        if (_this.props.editorRange && range) {\n          var v1 = diff(_this.props.editorRange.end, range.end);\n          var v2 = diff(_this.props.editorRange.start, range.start);\n\n          if (!v1.val1 || !v1.val2 || !v2.val1 || !v2.val2) {\n            range.byUser = true;\n\n            _this.props.setEditorRange(range);\n          }\n        } else if (!_this.props.editorRange && range) {\n          range.byUser = true;\n\n          _this.props.setEditorRange(range);\n        } // if (this.rangeTimer) {\n        // clearTimeout(this.rangeTimer);\n        // }\n        // this.rangeTimer = setTimeout(() => {\n        // range.byUser = true;\n        // this.props.setEditorRange(range);\n        // }, 10);\n        // }\n\n      } else {\n        return;\n      }\n\n      var line = editor.session.getLine(range.start.row); // 문자열의 범위 모두 구하기\n\n      var quotesRanges = [];\n      var quoteRegex = /'((?:\\\\.|[^'])*)'|\"((?:\\\\.|[^\"])*)\"/gim;\n      var quoteMatch;\n\n      while (quoteMatch = quoteRegex.exec(line)) {\n        quotesRanges.push({\n          start: quoteMatch.index,\n          end: quoteRegex.lastIndex\n        });\n      } // console.log(\"quotesRanges\", quotesRanges);\n      // 커서가 위치한 문자열을 현재 문자열로 저장\n\n\n      var currentQuoteRange;\n\n      for (var i in quotesRanges) {\n        var quoteRange = quotesRanges[i];\n\n        if (range.start.column === quoteRange.start + 1 || range.end.column === quoteRange.end - 1) {\n          currentQuoteRange = quoteRange;\n          break;\n        }\n      } // console.log(\"currentQuoteRange\", currentQuoteRange);\n      // 현재 문자열이 있으면 자동완성 활성화\n\n\n      if (currentQuoteRange) {\n        // 함수이름의 범위 모두 구하기\n        var funcsRanges = [];\n        var funcRegex = /([a-zA-Z_{1}][a-zA-Z0-9_]+)(?=\\()/gim;\n        var funcMatch;\n\n        while (funcMatch = funcRegex.exec(line)) {\n          funcsRanges.push({\n            start: funcMatch.index,\n            end: funcRegex.lastIndex\n          });\n        } // console.log(\"funcsRanges\", funcsRanges);\n        // 현재 문자열의 start에 가장 가까운 함수이름의 범위 구하기\n\n\n        var currentFunctionRange;\n\n        for (var _i in funcsRanges) {\n          var funcRange = funcsRanges[_i];\n\n          if (funcRange.end < currentQuoteRange.start) {\n            currentFunctionRange = funcRange;\n          } else {\n            break;\n          }\n        }\n\n        if (!currentFunctionRange) {\n          return;\n        } // 해당 함수의 이름 구하기\n\n\n        var currentFunctionName = line.substring(currentFunctionRange.start, currentFunctionRange.end); // console.log(\"currentFunctionName\", currentFunctionName);\n        // 함수 이름으로 자동완성 리스트 업데이트 및 보여주기\n\n        var list = _this.autoCompleteApiList.filter(function (api) {\n          return api.caption.indexOf(currentFunctionName) !== -1;\n        });\n\n        if (list && list[0]) {\n          var selectionType = list[0].selectionType;\n\n          if (selectionType) {\n            setTimeout(function () {\n              _this.isCustomCompleterOpen = true;\n\n              _this.langTools.setCompleters(_this.getCompleters(selectionType));\n\n              editor.completer.showPopup(editor);\n\n              _this.langTools.setCompleters(_this.getCompleters(\"all\"));\n            }, 10);\n          }\n        }\n      } else {\n        // 문자열 밖에 커서가 있을 때는 커스텀 컴플리터를 해제\n        if (_this.isCustomCompleterOpen) {\n          setTimeout(function () {\n            _this.isCustomCompleterOpen = false;\n            editor.completer.detach();\n          }, 10);\n        }\n      }\n    };\n\n    _this.setSorting = function () {\n      try {\n        var _this$props3 = _this.props,\n            selectedSceneId = _this$props3.selectedSceneId,\n            selectedObject = _this$props3.selectedObject;\n        var spriteName = selectedObject.name;\n\n        var code = _this.aceEditor.getValue();\n\n        var parsedCode = Parser.parseForSort(code);\n\n        _this.props.setSpriteCode(selectedSceneId, spriteName, parsedCode);\n\n        _this.aceEditor.setValue(parsedCode, 1);\n\n        toast.info(\"코드가 정렬되었습니다\", {\n          position: toast.POSITION.BOTTOM_RIGHT\n        });\n        TrackingUtil.sendGAEvent({\n          category: \"Builder\",\n          action: \"EditorActions\",\n          label: \"Align\"\n        });\n        _this.aceEditor.curOp.command.name = \"Return\";\n\n        _this.handleOnChange(undefined, _this.aceEditor);\n      } catch (e) {\n        toast.warn(\"에러를 수정한 후 정렬해주세요\", {\n          position: toast.POSITION.BOTTOM_RIGHT\n        });\n      }\n    };\n\n    _this.setFontZoomIn = function () {\n      var size = _this.aceEditor.getFontSize() + 2;\n\n      if (size > 50) {\n        return;\n      }\n\n      TrackingUtil.sendGAEvent({\n        category: \"Builder\",\n        action: \"EditorActions\",\n        label: \"ZoomIn\"\n      });\n      localStorage.setItem(\"wizFontSize\", size);\n\n      _this.aceEditor.setFontSize(size);\n\n      _this.refreshCompleterPopupSize();\n    };\n\n    _this.setFontZoomOut = function () {\n      var MIN_SIZE = 8;\n      var size = _this.aceEditor.getFontSize() - 2;\n\n      if (size < MIN_SIZE) {\n        return;\n      }\n\n      TrackingUtil.sendGAEvent({\n        category: \"Builder\",\n        action: \"EditorActions\",\n        label: \"ZoomOut\"\n      });\n      localStorage.setItem(\"wizFontSize\", size);\n\n      _this.aceEditor.setFontSize(size);\n\n      _this.refreshCompleterPopupSize();\n    };\n\n    _this.refreshCompleterPopupSize = function () {\n      if (_this.aceEditor.completer) {\n        var percent = _this.aceEditor.getFontSize() + 10 + \"%\";\n        _this.aceEditor.completer.popup.container.style.width = percent;\n      }\n    };\n\n    _this.isLive = _this.props.match.path.startsWith(\"/monitor\") || _this.props.match.path.startsWith(\"/wizlive\") || _this.props.match.path.startsWith(\"/live\");\n    _this.ace = window.ace;\n    _this.langTools = undefined;\n    _this.completers = {};\n    _this.aceEditor = undefined;\n    _this.undoManagers = {};\n    _this.JSEval = new JSEvaluator();\n    _this.symtab = undefined;\n    _this.errorTimer = null;\n    _this.apiList = ApiLibrary.getAllFunctions();\n    _this.autoCompleteApiList = _this.getAutoCompleteApiList(_this.apiList);\n    _this.apiNameSet = _this.getApiNameSet(_this.apiList);\n\n    _this.JSEval.setListOfReserved(_this.apiList.map(function (api) {\n      var cleanCaption = api.caption.replace(/\\[.+\\]/, \"array\");\n      var tokens = cleanCaption.match(/[a-z|A-Z]+/g);\n      return {\n        id: tokens[0],\n        type: \"function\",\n        value: {\n          /* Return value of a function */\n          type: \"object\",\n          value: {}\n        },\n        params: tokens.slice(1),\n        requiredParamCount: api.requiredParamCount || tokens.length - 1\n      };\n    }));\n\n    _this.state = {\n      tooltip: null\n    };\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"getAutoCompleteApiList\",\n    value: function getAutoCompleteApiList(apiList) {\n      var captionList = apiList.map(function (_ref) {\n        var caption = _ref.caption;\n        return caption;\n      });\n      var filteredApiList = apiList.filter(function (item, index) {\n        return captionList.indexOf(item.caption) === index;\n      });\n      return filteredApiList;\n    }\n  }, {\n    key: \"getApiNameSet\",\n    value: function getApiNameSet(apiList) {\n      var ret = new Set();\n\n      for (var i = 0; i < apiList.length; i++) {\n        var api = apiList[i];\n        var caption = api.caption;\n        var idx = caption.indexOf(\"(\");\n\n        if (idx === -1) {\n          continue;\n        }\n\n        var name = caption.substring(0, idx);\n        ret.add(name);\n      } // Additional Reserved Keyword\n\n\n      ret.add(\"let\");\n      ret.add(\"var\");\n      ret.add(\"function\");\n      ret.add(\"switch\");\n      ret.add(\"case\");\n      ret.add(\"default\");\n      ret.add(\"global\");\n      ret.add(\"if\");\n      ret.add(\"else if\");\n      ret.add(\"else\");\n      return ret;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setAceEditor();\n      this.setUndoManager();\n      this.setCode();\n      this.setWorkers();\n      this.setSignalNames();\n      this.setGlobalValues();\n      this.setAPILibrary();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.setCode();\n      this.setSignalNames();\n      this.setGlobalValues();\n      this.setSelectionRange(this.props.editorRange); // for changing editor mode\n      // isUpdateEditorMode is for minimize unnecessary function call related to editorMode\n\n      if (this.isUpdateEditorMode) {\n        this.setAceEditor();\n        this.setAPILibrary();\n        this.isUpdateEditorMode = false;\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (this.props.editorMode !== nextProps.editorMode) {\n        this.isUpdateEditorMode = true;\n        return true;\n      }\n\n      if (this.state.tooltip !== nextState.tooltip) {\n        return true;\n      }\n\n      if (this.props.log.api !== nextProps.log.api || this.props.log.animation !== nextProps.log.animation || this.props.log.sound !== nextProps.log.sound || this.props.log.chatbot !== nextProps.log.chatbot) {\n        this.aceEditor.resize();\n      }\n\n      if (this.isLive && stringify(nextProps.editorRange) !== stringify(this.props.editorRange)) {\n        return true;\n      }\n\n      if (this.props.timeStamp !== nextProps.timeStamp) {\n        return true;\n      }\n\n      if (this.props.editorTimeStamp !== nextProps.editorTimeStamp) {\n        return true;\n      }\n\n      if (this.props.selectedSceneId !== nextProps.selectedSceneId) {\n        return true;\n      }\n\n      var currentSpriteName = this.props.selectedObject.name;\n      var nextSpriteName = nextProps.selectedObject.name;\n\n      if (currentSpriteName === nextSpriteName) {\n        if (nextProps.sprites[currentSpriteName] && this.props.sprites[currentSpriteName].locked !== nextProps.sprites[currentSpriteName].locked) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"setAPILibrary\",\n    value: function setAPILibrary() {\n      this.apiList = ApiLibrary.getAllFunctions(this.props.editorMode);\n      this.autoCompleteApiList = this.getAutoCompleteApiList(this.apiList);\n      this.apiNameSet = this.getApiNameSet(this.apiList);\n      this.JSEval.setListOfReserved(this.apiList.map(function (api) {\n        var cleanCaption = api.caption.replace(/\\[.+\\]/, \"array\");\n        var tokens = cleanCaption.match(/[a-z|A-Z]+/g);\n        return {\n          id: tokens[0],\n          type: \"function\",\n          value: {\n            /* Return value of a function */\n            type: \"object\",\n            value: {}\n          },\n          params: tokens.slice(1),\n          requiredParamCount: api.requiredParamCount || tokens.length - 1\n        };\n      }));\n    }\n  }, {\n    key: \"setAutoCompleters\",\n    value: function setAutoCompleters() {\n      var _this2 = this;\n\n      this.langTools = this.ace.require(\"ace/ext/language_tools\"); // const TokenIterator = this.ace.require(\"ace/token_iterator\").TokenIterator;\n      //default completers\n\n      var staticWordCompleter = {\n        getCompletions: function getCompletions(editor, session, pos, prefix, callback) {\n          var list = _this2.autoCompleteApiList.map(function (_ref2) {\n            var caption = _ref2.caption,\n                value = _ref2.value,\n                newLine = _ref2.newLine,\n                selection = _ref2.selection,\n                selectionType = _ref2.selectionType;\n            return {\n              caption: caption,\n              value: value,\n              meta: \"function\",\n              completer: {\n                insertMatch: function insertMatch(editor) {\n                  editor.removeWordLeft();\n                  editor.insert(value);\n\n                  if (editor.curOp && !editor.curOp.command.name) {\n                    editor.curOp.command.name = \"Return\";\n\n                    _this2.handleOnChange(undefined, editor);\n                  }\n\n                  setNewLine(editor, newLine);\n                  setNewLines(editor, caption);\n                  setSelectionWord(editor, getMatchedValue(newLine, value), selection, selectionType); // showSelectionWordList(selectionType);\n                }\n              }\n            };\n          });\n\n          function setNewLine(editor, newLine) {\n            if (newLine === undefined) {\n              return;\n            }\n\n            var valueRange = editor.find(newLine, {\n              backwards: true,\n              caseSensitive: true\n            });\n\n            if (valueRange === undefined) {\n              return;\n            }\n\n            editor.selection.moveCursorToPosition(valueRange.end);\n            editor.selection.clearSelection();\n            editor.insert(editor.session.doc.getNewLineCharacter());\n\n            if (editor.curOp && !editor.curOp.command.name) {\n              // editor.curOp.command.name = \"Return\";\n              this.handleOnChange(undefined, editor);\n            }\n          }\n\n          function setNewLines(editor, caption) {\n            switch (caption) {\n              case \"switch~case\":\n                var afterNewLines = [\"case \\\"\\\" :\", \"break;\", \"default :\", \"break;\"];\n                var afterNewLine = afterNewLines.join(\"\");\n                var valueRange = editor.find(afterNewLine, {\n                  backwards: false,\n                  caseSensitive: true\n                });\n\n                if (valueRange === undefined) {\n                  return;\n                }\n\n                editor.selection.moveCursorToPosition(valueRange.end);\n                editor.selection.clearSelection();\n\n                for (var i = afterNewLines.length - 1; i >= 0; i--) {\n                  setNewLine(editor, afterNewLines[i]);\n                }\n\n                break;\n\n              default:\n                break;\n            }\n          }\n\n          function getMatchedValue(newLine, value) {\n            if (newLine !== undefined) {\n              return newLine;\n            } else {\n              return value;\n            }\n          }\n\n          function setSelectionWord(editor, value, selection, selectionType) {\n            if (selection === undefined) {\n              return;\n            }\n\n            var valueRange = editor.find(value, {\n              backwards: true,\n              caseSensitive: true\n            });\n\n            if (valueRange === undefined) {\n              return;\n            }\n\n            editor.selection.moveCursorToPosition(valueRange.start);\n            var selectionRange = editor.find(selection, {\n              backwards: false\n            });\n\n            if (selectionRange === undefined) {\n              return;\n            }\n\n            editor.selection.setSelectionRange(selectionRange, isSelectionRangeReverse(selectionType));\n          }\n\n          function isSelectionRangeReverse(selectionType) {\n            return selectionType !== undefined;\n          } // const showSelectionWordList = selectionType => {\n          //   if (selectionType) {\n          //     setTimeout(() => {\n          //       this.langTools.setCompleters(this.getCompleters(selectionType));\n          //       this.aceEditor.completer.showPopup(this.aceEditor);\n          //       this.langTools.setCompleters(this.getCompleters(\"all\"));\n          //     }, 10); //TODO : remove delay\n          //   }\n          // };\n\n\n          var start = prefix.split(\"\").reverse().join(\"\");\n\n          var entries = _this2.JSEval.FindSymbol(start, {\n            start: {\n              line: pos.row + 1,\n              column: pos.column\n            },\n            end: {\n              line: pos.row + 1,\n              column: pos.column\n            }\n          }, _this2.symtab, true);\n\n          if (Array.isArray(entries) === true) {\n            entries.forEach(function (entry) {\n              list.push({\n                caption: entry.id,\n                name: entry.id,\n                value: entry.id,\n                score: 1,\n                meta: entry.type\n              });\n            });\n          }\n\n          return callback(null, list);\n        }\n      };\n\n      var clearCompleterTarget = function clearCompleterTarget(editor) {\n        var start = editor.selection.getRange().start;\n        var end = editor.selection.getRange().end;\n        var line = editor.session.getLine(start.row);\n\n        if (line[start.column - 1] && line[start.column - 1] !== \"\\\"\") {\n          editor.removeWordLeft();\n        }\n\n        if (line[end.column] && line[end.column] !== \"\\\"\") {\n          editor.removeWordRight();\n        }\n      };\n\n      var animationCompleter = {\n        getCompletions: function getCompletions(editor, session, pos, prefix, callback) {\n          var _this2$props = _this2.props,\n              selectedObject = _this2$props.selectedObject,\n              sprites = _this2$props.sprites;\n          var sprite = sprites[selectedObject.name];\n          var animations = [];\n\n          if (AssetLibrary.getAsset(sprite.assetId)) {\n            animations = AssetLibrary.getAsset(sprite.assetId).spriteAnimations;\n          }\n\n          var names = [];\n\n          if (animations) {\n            names = Object.keys(animations);\n          }\n\n          callback(null, names.map(function (name) {\n            return {\n              caption: name,\n              value: name,\n              meta: \"Animation\",\n              completer: {\n                insertMatch: function insertMatch(editor) {\n                  clearCompleterTarget(editor);\n                  editor.insert(name);\n\n                  if (editor.curOp && !editor.curOp.command.name) {\n                    editor.curOp.command.name = \"Return\";\n\n                    _this2.handleOnChange(undefined, editor);\n                  }\n\n                  setTimeout(function () {\n                    editor.completer.detach();\n                  }, 10);\n                  var newPos = {\n                    row: pos.row,\n                    column: session.getLine(pos.row).length\n                  };\n                  editor.selection.moveCursorToPosition(newPos);\n                }\n              }\n            };\n          }));\n        }\n      };\n      var soundCompleter = {\n        getCompletions: function getCompletions(editor, session, pos, prefix, callback) {\n          var _this2$props2 = _this2.props,\n              soundIds = _this2$props2.soundIds,\n              _this2$props2$soundNa = _this2$props2.soundNames,\n              soundNames = _this2$props2$soundNa === void 0 ? {} : _this2$props2$soundNa;\n          callback(null, soundIds.map(function (soundId) {\n            var name;\n\n            if (soundNames[soundId]) {\n              name = soundNames[soundId];\n            } else {\n              name = AssetLibrary.getSoundAsset(soundId).defaultName;\n            }\n\n            return {\n              caption: name,\n              value: name,\n              meta: \"Sound\",\n              completer: {\n                insertMatch: function insertMatch(editor) {\n                  clearCompleterTarget(editor);\n                  editor.insert(name);\n\n                  if (editor.curOp && !editor.curOp.command.name) {\n                    editor.curOp.command.name = \"Return\";\n\n                    _this2.handleOnChange(undefined, editor);\n                  }\n\n                  setTimeout(function () {\n                    editor.completer.detach();\n                  }, 10);\n                  var newPos = {\n                    row: pos.row,\n                    column: session.getLine(pos.row).length\n                  };\n                  editor.selection.moveCursorToPosition(newPos);\n                }\n              }\n            };\n          }));\n        }\n      };\n      var spriteCompleter = {\n        getCompletions: function getCompletions(editor, session, pos, prefix, callback) {\n          var sprites = _this2.props.sprites;\n          callback(null, Object.keys(sprites).map(function (name) {\n            return {\n              caption: name,\n              value: name,\n              meta: \"Sprite\",\n              completer: {\n                insertMatch: function insertMatch(editor) {\n                  clearCompleterTarget(editor);\n                  editor.insert(name);\n\n                  if (editor.curOp && !editor.curOp.command.name) {\n                    editor.curOp.command.name = \"Return\";\n\n                    _this2.handleOnChange(undefined, editor);\n                  }\n\n                  setTimeout(function () {\n                    editor.completer.detach();\n                  }, 10);\n                  var newLine = false;\n                  var functions = session.getLine(editor.selection.getRange().start.row).match(/([a-zA-Z_{1}][a-zA-Z0-9_]+)(?=\\()/g);\n\n                  if (functions && functions[0]) {\n                    var f = functions[0];\n\n                    if (f === \"onOverlap\") {\n                      newLine = true;\n                    }\n                  }\n\n                  var newPos = {\n                    row: pos.row + (newLine ? 1 : 0),\n                    column: session.getLine(pos.row).length\n                  };\n                  editor.selection.moveCursorToPosition(newPos);\n                }\n              }\n            };\n          }));\n        }\n      };\n      var sceneCompleter = {\n        getCompletions: function getCompletions(editor, session, pos, prefix, callback) {\n          var sceneIds = _this2.props.sceneIds;\n          callback(null, sceneIds.map(function (name) {\n            return {\n              caption: name,\n              value: name,\n              meta: \"Scene\",\n              completer: {\n                insertMatch: function insertMatch(editor) {\n                  clearCompleterTarget(editor);\n                  editor.insert(name);\n\n                  if (editor.curOp && !editor.curOp.command.name) {\n                    editor.curOp.command.name = \"Return\";\n\n                    _this2.handleOnChange(undefined, editor);\n                  }\n\n                  setTimeout(function () {\n                    editor.completer.detach();\n                  }, 10);\n                  var newPos = {\n                    row: pos.row,\n                    column: session.getLine(pos.row).length\n                  };\n                  editor.selection.moveCursorToPosition(newPos);\n                }\n              }\n            };\n          }));\n        }\n      };\n      var directionCompleter = {\n        getCompletions: function getCompletions(editor, session, pos, prefix, callback) {\n          var directions = [\"left\", \"right\", \"up\", \"down\"];\n          callback(null, directions.map(function (name) {\n            return {\n              caption: name,\n              value: name,\n              meta: \"Direction\",\n              completer: {\n                insertMatch: function insertMatch(editor) {\n                  clearCompleterTarget(editor);\n                  editor.insert(name);\n\n                  if (editor.curOp && !editor.curOp.command.name) {\n                    editor.curOp.command.name = \"Return\";\n\n                    _this2.handleOnChange(undefined, editor);\n                  }\n\n                  setTimeout(function () {\n                    editor.completer.detach();\n                  }, 10);\n                  var newPos = {\n                    row: pos.row + 1,\n                    column: session.getLine(pos.row).length\n                  };\n                  editor.selection.moveCursorToPosition(newPos);\n                }\n              }\n            };\n          }));\n        }\n      };\n      var keyCompleter = {\n        getCompletions: function getCompletions(editor, session, pos, prefix, callback) {\n          var keys = [\"left\", \"right\", \"up\", \"down\", \"shift\", \"control\", \"space\", \"enter\", \"esc\", \"f1\", \"f2\", \"f3\", \"f4\", \"f5\", \"f6\", \"f7\", \"f8\", \"f9\", \"f10\", \"f11\", \"f12\"];\n          callback(null, keys.map(function (name) {\n            return {\n              caption: name,\n              value: name,\n              meta: \"Key\",\n              completer: {\n                insertMatch: function insertMatch(editor) {\n                  clearCompleterTarget(editor);\n                  editor.insert(name);\n\n                  if (editor.curOp && !editor.curOp.command.name) {\n                    editor.curOp.command.name = \"Return\";\n\n                    _this2.handleOnChange(undefined, editor);\n                  }\n\n                  setTimeout(function () {\n                    editor.completer.detach();\n                  }, 10);\n                  var newPos = {\n                    row: pos.row + 1,\n                    column: session.getLine(pos.row).length\n                  };\n                  editor.selection.moveCursorToPosition(newPos);\n                }\n              }\n            };\n          }));\n        }\n      };\n      var colorCompleter = {\n        getCompletions: function getCompletions(editor, session, pos, prefix, callback) {\n          var colors = window.HTML_Colors;\n          var colorNames = Object.keys(colors);\n          callback(null, colorNames.map(function (name) {\n            return {\n              caption: name,\n              value: name,\n              meta: \"Color\",\n              completer: {\n                insertMatch: function insertMatch(editor) {\n                  clearCompleterTarget(editor);\n                  editor.insert(name);\n\n                  if (editor.curOp && !editor.curOp.command.name) {\n                    editor.curOp.command.name = \"Return\";\n\n                    _this2.handleOnChange(undefined, editor);\n                  }\n\n                  setTimeout(function () {\n                    editor.completer.detach();\n                  }, 10);\n                  var newPos = {\n                    row: pos.row,\n                    column: session.getLine(pos.row).length\n                  };\n                  editor.selection.moveCursorToPosition(newPos);\n                }\n              }\n            };\n          }));\n        }\n      };\n      var textCompleter = {\n        getCompletions: function getCompletions(editor, session, pos, prefix, callback) {\n          var completer = _this2.langTools.textCompleter;\n          var completions = completer.getCompletions(editor, session, pos, prefix, function (e, items) {\n            var filteredItems = getFilteredItems(items, _this2.apiNameSet);\n            callback(null, filteredItems);\n          });\n\n          function getFilteredItems(items, apiNameSet) {\n            return items.filter(function (item) {\n              if (apiNameSet.has(item.caption)) {\n                return false;\n              } else if (isAlreadySignalName(item.caption)) {\n                return false;\n              } else if (isAlreadyGlobalValue(item.caption)) {\n                return false;\n              } else {\n                return true;\n              }\n            });\n          }\n\n          function isAlreadySignalName(itemCaption) {\n            for (var i = 0; i < signalNames.length; i++) {\n              if (signalNames[i] === itemCaption) {\n                return true;\n              }\n            }\n\n            return false;\n          }\n\n          function isAlreadyGlobalValue(itemCaption) {\n            for (var i = 0; i < globalValues.length; i++) {\n              if (globalValues[i] === itemCaption) {\n                return true;\n              }\n            }\n\n            return false;\n          }\n\n          return completions;\n        }\n      };\n      var signalCompleter = {\n        getCompletions: function getCompletions(editor, session, pos, prefix, callback) {\n          callback(null, signalNames.map(function (name) {\n            return {\n              caption: name,\n              value: name,\n              meta: \"Signal\",\n              completer: {\n                insertMatch: function insertMatch(editor) {\n                  clearCompleterTarget(editor);\n                  editor.insert(name);\n\n                  if (editor.curOp && !editor.curOp.command.name) {\n                    editor.curOp.command.name = \"Return\";\n\n                    _this2.handleOnChange(undefined, editor);\n                  }\n\n                  setTimeout(function () {\n                    editor.completer.detach();\n                  }, 10);\n                  var newPos = {\n                    row: pos.row + 1,\n                    column: session.getLine(pos.row).length\n                  };\n                  editor.selection.moveCursorToPosition(newPos);\n                }\n              }\n            };\n          }));\n        }\n      };\n      var globalValueCompleter = {\n        getCompletions: function getCompletions(editor, session, pos, prefix, callback) {\n          callback(null, globalValues.map(function (name) {\n            return {\n              caption: name,\n              value: name,\n              meta: \"Global\"\n            };\n          }));\n        }\n      };\n      this.completers = {\n        staticWordCompleter: staticWordCompleter,\n        animationCompleter: animationCompleter,\n        soundCompleter: soundCompleter,\n        spriteCompleter: spriteCompleter,\n        sceneCompleter: sceneCompleter,\n        directionCompleter: directionCompleter,\n        keyCompleter: keyCompleter,\n        colorCompleter: colorCompleter,\n        textCompleter: textCompleter,\n        signalCompleter: signalCompleter,\n        globalValueCompleter: globalValueCompleter\n      };\n      this.langTools.setCompleters(this.getCompleters(\"all\"));\n    }\n  }, {\n    key: \"setAceEditor\",\n    value: function setAceEditor() {\n      this.aceEditor = this.ace.edit(\"ace-editor\"); // this.aceEditor.session.setMode(`ace/mode/${this.props.editorMode}`);\n      // if (this.isLive) {\n      //   this.aceEditor.setTheme(\"ace/theme/wizschool-clive\");\n      // } else {\n      //   this.aceEditor.setTheme(\"ace/theme/wizschool\");\n      // }\n\n      this.aceEditor.session.setMode(\"ace/mode/\".concat(EDITORMODE.JAVASCRIPT));\n      this.aceEditor.setTheme(\"ace/theme/wizschool\");\n      this.aceEditor.on(\"changeSelection\", this.handleOnChangeSelection);\n      this.aceEditor.on(\"change\", this.handleOnChange);\n      this.aceEditor.on(\"mousemove\", this.handleMousemove);\n      document.getElementById(\"ace-editor\").addEventListener(\"mouseout\", function () {\n        document.getElementById(\"EditorContainer_tooltip\").style.display = \"none\";\n      });\n      this.aceEditor.getSession().setUseWrapMode(false);\n      this.aceEditor.setFontSize(this.getStoredFontSize());\n      this.undoManagers.defaultManager = this.aceEditor.session.getUndoManager();\n      this.aceEditor.setOptions({\n        enableBasicAutocompletion: true,\n        enableSnippets: true,\n        enableLiveAutocompletion: true\n      });\n      this.setAutoCompleters(); // const currentEditorMode = this.props.editorMode;\n\n      this.aceEditor.session.on(\"changeMode\", function (e, session) {\n        if (\"ace/mode/\".concat(EDITORMODE.JAVASCRIPT) === session.getMode().$id) {\n          if (!!session.$worker) {\n            session.$worker.send(\"setOptions\", [{\n              \"-W041\": false,\n              \"-W033\": false,\n              \"-W104\": false,\n              \"-W118\": false\n            }]);\n          }\n        }\n      }); // this.aceEditor.session.on(\"changeMode\", function(e, session) {\n      //   if (\"ace/mode/javascript-wiz\" === session.getMode().$id) {\n      //     const worker = session.$worker;\n      //     if (worker === undefined || worker === null) {\n      //       return;\n      //     }\n      //     // worker.send(\"command\", \"args\");\n      //   }\n      // });\n    }\n  }, {\n    key: \"setUndoManager\",\n    value: function setUndoManager() {\n      var _this$props4 = this.props,\n          selectedObject = _this$props4.selectedObject,\n          selectedSceneId = _this$props4.selectedSceneId;\n      var name = selectedObject.name;\n\n      if (!this.undoManagers[selectedSceneId]) {\n        this.undoManagers[selectedSceneId] = {};\n      }\n\n      if (!this.undoManagers[selectedSceneId][name]) {\n        this.undoManagers[selectedSceneId][name] = new window.ace.UndoManager();\n      }\n\n      var undoManager = this.undoManagers[selectedSceneId][name];\n      this.aceEditor.session.setUndoManager(undoManager);\n    }\n  }, {\n    key: \"setCode\",\n    value: function setCode() {\n      var _this$props5 = this.props,\n          sprites = _this$props5.sprites,\n          selectedObject = _this$props5.selectedObject;\n\n      if (selectedObject.name && sprites[selectedObject.name]) {\n        var code = sprites[selectedObject.name].code;\n        this.aceEditor.session.setUndoManager(this.undoManagers.defaultManager);\n\n        if (this.aceEditor.getValue() !== code) {\n          this.aceEditor.setValue(code ? code : \"\", 1);\n        }\n\n        this.setUndoManager();\n        this.aceEditor.setReadOnly(false);\n      } else {\n        this.aceEditor.session.setUndoManager(this.undoManagers.defaultManager);\n        this.aceEditor.setValue(\"// \" + this.props.intl.formatMessage({\n          id: \"ID_EDITOR_EMPTYSPIRTE\"\n        }), 1);\n        this.aceEditor.setReadOnly(true);\n      }\n    }\n  }, {\n    key: \"setWorkers\",\n    value: function setWorkers() {\n      if (window.Worker) {\n        signalNameWorker = new Worker(\"ace/worker-signal-name.js\");\n        globalValueWorker = new Worker(\"ace/worker-global-value.js\");\n      }\n    }\n  }, {\n    key: \"setSignalNames\",\n    value: function setSignalNames() {\n      if (window.Worker && signalNameWorker) {\n        signalNameWorker.onmessage = function (e) {\n          if (e === undefined || e.data === undefined) {\n            return;\n          }\n\n          signalNames = e.data;\n        };\n\n        var _this$props6 = this.props,\n            sprites = _this$props6.sprites,\n            spriteIds = _this$props6.spriteIds;\n        signalNameWorker.postMessage({\n          sprites: sprites,\n          spriteIds: spriteIds\n        });\n      } else {// worker not supported logic\n      }\n    }\n  }, {\n    key: \"setGlobalValues\",\n    value: function setGlobalValues() {\n      if (window.Worker && globalValueWorker) {\n        globalValueWorker.onmessage = function (e) {\n          if (e === undefined || e.data === undefined) {\n            return;\n          }\n\n          globalValues = e.data;\n        };\n\n        var _this$props7 = this.props,\n            sprites = _this$props7.sprites,\n            spriteIds = _this$props7.spriteIds;\n        globalValueWorker.postMessage({\n          sprites: sprites,\n          spriteIds: spriteIds\n        });\n      } else {// worker not supported logic\n      }\n    }\n  }, {\n    key: \"getSelectionRange\",\n    value: function getSelectionRange() {\n      return this.aceEditor.selection.getRange();\n    }\n  }, {\n    key: \"setSelectionRange\",\n    value: function setSelectionRange(range) {\n      if (!this.isLive || !range) {\n        return;\n      }\n\n      var editorRange = _objectSpread({}, this.getSelectionRange());\n\n      var propsRange = _objectSpread({}, range);\n\n      delete editorRange[\"byUser\"];\n      delete propsRange[\"byUser\"];\n\n      if (stringify(editorRange) !== stringify(propsRange)) {\n        this.aceEditor.selection.setRange(range);\n      } else {}\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.clearTimeout(this.errorTimer);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props8 = this.props,\n          selectedObject = _this$props8.selectedObject,\n          sprites = _this$props8.sprites;\n      var spriteName = selectedObject.name;\n      var setFontZoomIn = this.setFontZoomIn,\n          setFontZoomOut = this.setFontZoomOut,\n          setSorting = this.setSorting;\n      var tooltip = this.state.tooltip;\n      var sprite = sprites[spriteName];\n      var spriteIcon = sprite ? sprite.type === SpriteType.TEXT ? AssetLibrary.textboxThumb : AssetLibrary.getAsset(sprite.assetId).thumb : undefined;\n      return React.createElement(View, {\n        selectedObject: sprites[spriteName],\n        spriteName: spriteName,\n        spriteIcon: spriteIcon,\n        setFontZoomIn: setFontZoomIn,\n        setFontZoomOut: setFontZoomOut,\n        setSorting: setSorting,\n        tooltip: tooltip,\n        intl: this.props.intl,\n        editorMode: this.props.editorMode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1402\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    selectedSceneId: state.interaction.selected.scene,\n    selectedObject: state.interaction.selected.objects[state.interaction.selected.scene],\n    sprites: state.scene.scenes[state.interaction.selected.scene].sprites,\n    spriteIds: state.scene.scenes[state.interaction.selected.scene].spriteIds,\n    soundIds: state.scene.soundIds,\n    soundNames: state.scene.soundNames,\n    sceneIds: state.scene.sceneIds,\n    timeStamp: state.project.timeStamp,\n    editorTimeStamp: state.scene.timeStamp,\n    errors: state.chatbot.errors,\n    editorRange: state.webrtc.editorRange,\n    log: state.webrtc.log,\n    editorMode: state.scene.editorMode\n  };\n}, {\n  setSpriteCode: sceneActions.setSpriteCode,\n  setChatbotErrors: chatbotActions.setChatbotErrors,\n  setEditorRange: webrtcActions.setEditorRange,\n  removeChatbotMessages: chatbotActions.removeChatbotMessages,\n  addMsg: chatActions.addMsg,\n  addNewMsg: chatbotActions.addNewMsg\n})(withRouter(injectIntl(Container)));","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Editor/Component/AceEditor/Container.js"],"names":["React","Component","connect","withRouter","sceneActions","chatActions","chatbotActions","webrtcActions","SpriteType","EDITORMODE","ApiLibrary","stringify","AssetLibrary","JSEvaluator","View","injectIntl","Parser","toast","ChatbotMsgType","TrackingUtil","enableJSEval","signalNameWorker","undefined","signalNames","globalValueWorker","globalValues","Container","props","getCompleters","selectionType","Object","keys","completers","map","key","getStoredFontSize","fontSize","localStorage","getItem","parseInt","handleMousemove","e","tooltip","document","getElementById","pos","getDocumentPosition","line","editor","session","getLine","row","funcsRanges","funcRegex","funcMatch","exec","push","start","index","end","lastIndex","currentFuncRange","i","length","funcRange","column","currentFunctionName","substring","api","apiList","find","name","style","display","equal","caption","setState","left","domEvent","offsetX","top","offsetY","handleOnChange","event","code","getValue","selectedSceneId","selectedObject","spriteName","completer","execCommand","detach","refreshCompleterPopupSize","setOptions","enableLiveAutocompletion","isNaN","lines","JSEvaluatorTimer","clearTimeout","setTimeout","parseJSEvaluator","curOp","command","setSpriteCode","isLive","undoManagers","window","ace","UndoManager","undoManager","aceEditor","setUndoManager","errors","annotations","ret","JSEval","parse","symtab","build","SymbolTable","getErrors","getSession","getAnnotations","chatbotErrors","setChatbotErrors","removeChatbotMessages","type","BOT_ERROR","handleShowErrors","forEach","item","text","setErrorText","onClick","loc","position","selection","moveCursorToPosition","clearSelection","newMsg","sender","addNewMsg","message","test","split","match","ERROR_MESSAGE","FUNCTION_UPPER_LOWER","typingFunction","originFunction","handleOnChangeSelection","range","getSelectionRange","selectionChanged","diff","rang1","rang2","val1","val2","editorRange","v1","v2","byUser","setEditorRange","quotesRanges","quoteRegex","quoteMatch","currentQuoteRange","quoteRange","currentFunctionRange","list","autoCompleteApiList","filter","indexOf","isCustomCompleterOpen","langTools","setCompleters","showPopup","setSorting","parsedCode","parseForSort","setValue","info","POSITION","BOTTOM_RIGHT","sendGAEvent","category","action","label","warn","setFontZoomIn","size","getFontSize","setItem","setFontSize","setFontZoomOut","MIN_SIZE","percent","popup","container","width","path","startsWith","errorTimer","getAllFunctions","getAutoCompleteApiList","apiNameSet","getApiNameSet","setListOfReserved","cleanCaption","replace","tokens","id","value","params","slice","requiredParamCount","state","captionList","filteredApiList","Set","idx","add","setAceEditor","setCode","setWorkers","setSignalNames","setGlobalValues","setAPILibrary","setSelectionRange","isUpdateEditorMode","nextProps","nextState","editorMode","log","animation","sound","chatbot","resize","timeStamp","editorTimeStamp","currentSpriteName","nextSpriteName","sprites","locked","require","staticWordCompleter","getCompletions","prefix","callback","newLine","meta","insertMatch","removeWordLeft","insert","setNewLine","setNewLines","setSelectionWord","getMatchedValue","valueRange","backwards","caseSensitive","doc","getNewLineCharacter","afterNewLines","afterNewLine","join","selectionRange","isSelectionRangeReverse","reverse","entries","FindSymbol","Array","isArray","entry","score","clearCompleterTarget","getRange","removeWordRight","animationCompleter","sprite","animations","getAsset","assetId","spriteAnimations","names","newPos","soundCompleter","soundIds","soundNames","soundId","getSoundAsset","defaultName","spriteCompleter","functions","f","sceneCompleter","sceneIds","directionCompleter","directions","keyCompleter","colorCompleter","colors","HTML_Colors","colorNames","textCompleter","completions","items","filteredItems","getFilteredItems","has","isAlreadySignalName","isAlreadyGlobalValue","itemCaption","signalCompleter","globalValueCompleter","edit","setMode","JAVASCRIPT","setTheme","on","addEventListener","setUseWrapMode","defaultManager","getUndoManager","enableBasicAutocompletion","enableSnippets","setAutoCompleters","getMode","$id","$worker","send","setReadOnly","intl","formatMessage","Worker","onmessage","data","spriteIds","postMessage","propsRange","setRange","spriteIcon","TEXT","textboxThumb","thumb","interaction","selected","scene","objects","scenes","project","webrtc","addMsg"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport * as sceneActions from \"../../../../Store/Reducer/scene\";\nimport * as chatActions from \"../../../../Store/Reducer/chat\";\nimport * as chatbotActions from \"../../../../Store/Reducer/chatbot\";\nimport * as webrtcActions from \"../../../../Store/Reducer/webrtc\";\nimport { SpriteType, EDITORMODE } from \"../../../../../../Common/Util/Constant\";\nimport ApiLibrary from \"../../../../utils/apiLibrary\";\nimport stringify from \"json-stringify-safe\";\nimport AssetLibrary from \"../../../../utils/assetLibrary\";\nimport JSEvaluator from \"../../../../utils/JSEvaluator\";\nimport View from \"./View\";\nimport { injectIntl } from \"react-intl\";\nimport Parser from \"../../../../utils/parser\";\nimport { toast } from \"react-toastify\";\nimport { ChatbotMsgType } from \"../../../../../../Common/Util/Constant\";\nimport * as TrackingUtil from \"../../../../../../Common/Util/TrackingUtil\";\n\nconst enableJSEval = true;\nlet signalNameWorker = undefined;\nlet signalNames = [];\nlet globalValueWorker = undefined;\nlet globalValues = [];\n\nclass Container extends Component {\n  constructor(props) {\n    super(props);\n    this.isLive =\n      this.props.match.path.startsWith(\"/monitor\") ||\n      this.props.match.path.startsWith(\"/wizlive\") ||\n      this.props.match.path.startsWith(\"/live\");\n    this.ace = window.ace;\n    this.langTools = undefined;\n    this.completers = {};\n    this.aceEditor = undefined;\n    this.undoManagers = {};\n    this.JSEval = new JSEvaluator();\n    this.symtab = undefined;\n    this.errorTimer = null;\n    this.apiList = ApiLibrary.getAllFunctions();\n    this.autoCompleteApiList = this.getAutoCompleteApiList(this.apiList);\n    this.apiNameSet = this.getApiNameSet(this.apiList);\n    this.JSEval.setListOfReserved(\n      this.apiList.map(api => {\n        const cleanCaption = api.caption.replace(/\\[.+\\]/, \"array\");\n        const tokens = cleanCaption.match(/[a-z|A-Z]+/g);\n        return {\n          id: tokens[0],\n          type: \"function\",\n          value: {\n            /* Return value of a function */\n            type: \"object\",\n            value: {}\n          },\n          params: tokens.slice(1),\n          requiredParamCount: api.requiredParamCount || tokens.length - 1\n        };\n      })\n    );\n    this.state = { tooltip: null };\n  }\n\n  getAutoCompleteApiList(apiList) {\n    const captionList = apiList.map(({ caption }) => {\n      return caption;\n    });\n\n    const filteredApiList = apiList.filter((item, index) => {\n      return captionList.indexOf(item.caption) === index;\n    });\n\n    return filteredApiList;\n  }\n\n  getApiNameSet(apiList) {\n    const ret = new Set();\n\n    for (let i = 0; i < apiList.length; i++) {\n      const api = apiList[i];\n      const caption = api.caption;\n      const idx = caption.indexOf(\"(\");\n\n      if (idx === -1) {\n        continue;\n      }\n\n      const name = caption.substring(0, idx);\n      ret.add(name);\n    }\n\n    // Additional Reserved Keyword\n    ret.add(\"let\");\n    ret.add(\"var\");\n    ret.add(\"function\");\n    ret.add(\"switch\");\n    ret.add(\"case\");\n    ret.add(\"default\");\n    ret.add(\"global\");\n    ret.add(\"if\");\n    ret.add(\"else if\");\n    ret.add(\"else\");\n\n    return ret;\n  }\n\n  componentDidMount() {\n    this.setAceEditor();\n    this.setUndoManager();\n    this.setCode();\n    this.setWorkers();\n    this.setSignalNames();\n    this.setGlobalValues();\n    this.setAPILibrary();\n  }\n\n  componentDidUpdate() {\n    this.setCode();\n    this.setSignalNames();\n    this.setGlobalValues();\n    this.setSelectionRange(this.props.editorRange);\n\n    // for changing editor mode\n    // isUpdateEditorMode is for minimize unnecessary function call related to editorMode\n    if (this.isUpdateEditorMode) {\n      this.setAceEditor();\n      this.setAPILibrary();\n      this.isUpdateEditorMode = false;\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.editorMode !== nextProps.editorMode) {\n      this.isUpdateEditorMode = true;\n      return true;\n    }\n    if (this.state.tooltip !== nextState.tooltip) {\n      return true;\n    }\n    if (\n      this.props.log.api !== nextProps.log.api ||\n      this.props.log.animation !== nextProps.log.animation ||\n      this.props.log.sound !== nextProps.log.sound ||\n      this.props.log.chatbot !== nextProps.log.chatbot\n    ) {\n      this.aceEditor.resize();\n    }\n\n    if (\n      this.isLive &&\n      stringify(nextProps.editorRange) !== stringify(this.props.editorRange)\n    ) {\n      return true;\n    }\n    if (this.props.timeStamp !== nextProps.timeStamp) {\n      return true;\n    }\n    if (this.props.editorTimeStamp !== nextProps.editorTimeStamp) {\n      return true;\n    }\n    if (this.props.selectedSceneId !== nextProps.selectedSceneId) {\n      return true;\n    }\n\n    const currentSpriteName = this.props.selectedObject.name;\n    const nextSpriteName = nextProps.selectedObject.name;\n    if (currentSpriteName === nextSpriteName) {\n      if (\n        nextProps.sprites[currentSpriteName] &&\n        this.props.sprites[currentSpriteName].locked !==\n          nextProps.sprites[currentSpriteName].locked\n      ) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  setAPILibrary() {\n    this.apiList = ApiLibrary.getAllFunctions(this.props.editorMode);\n    this.autoCompleteApiList = this.getAutoCompleteApiList(this.apiList);\n    this.apiNameSet = this.getApiNameSet(this.apiList);\n    this.JSEval.setListOfReserved(\n      this.apiList.map(api => {\n        const cleanCaption = api.caption.replace(/\\[.+\\]/, \"array\");\n        const tokens = cleanCaption.match(/[a-z|A-Z]+/g);\n        return {\n          id: tokens[0],\n          type: \"function\",\n          value: {\n            /* Return value of a function */\n            type: \"object\",\n            value: {}\n          },\n          params: tokens.slice(1),\n          requiredParamCount: api.requiredParamCount || tokens.length - 1\n        };\n      })\n    );\n  }\n\n  setAutoCompleters() {\n    this.langTools = this.ace.require(\"ace/ext/language_tools\");\n    // const TokenIterator = this.ace.require(\"ace/token_iterator\").TokenIterator;\n\n    //default completers\n    const staticWordCompleter = {\n      getCompletions: (editor, session, pos, prefix, callback) => {\n        let list = this.autoCompleteApiList.map(\n          ({ caption, value, newLine, selection, selectionType }) => {\n            return {\n              caption: caption,\n              value: value,\n              meta: \"function\",\n              completer: {\n                insertMatch: editor => {\n                  editor.removeWordLeft();\n                  editor.insert(value);\n                  if (editor.curOp && !editor.curOp.command.name) {\n                    editor.curOp.command.name = \"Return\";\n                    this.handleOnChange(undefined, editor);\n                  }\n                  setNewLine(editor, newLine);\n                  setNewLines(editor, caption);\n                  setSelectionWord(\n                    editor,\n                    getMatchedValue(newLine, value),\n                    selection,\n                    selectionType\n                  );\n                  // showSelectionWordList(selectionType);\n                }\n              }\n            };\n          }\n        );\n\n        function setNewLine(editor, newLine) {\n          if (newLine === undefined) {\n            return;\n          }\n\n          const valueRange = editor.find(newLine, {\n            backwards: true,\n            caseSensitive: true\n          });\n          if (valueRange === undefined) {\n            return;\n          }\n          editor.selection.moveCursorToPosition(valueRange.end);\n          editor.selection.clearSelection();\n          editor.insert(editor.session.doc.getNewLineCharacter());\n          if (editor.curOp && !editor.curOp.command.name) {\n            // editor.curOp.command.name = \"Return\";\n            this.handleOnChange(undefined, editor);\n          }\n        }\n\n        function setNewLines(editor, caption) {\n          switch (caption) {\n            case \"switch~case\":\n              const afterNewLines = [\n                `case \"\" :`,\n                `break;`,\n                `default :`,\n                `break;`\n              ];\n\n              const afterNewLine = afterNewLines.join(\"\");\n              const valueRange = editor.find(afterNewLine, {\n                backwards: false,\n                caseSensitive: true\n              });\n              if (valueRange === undefined) {\n                return;\n              }\n\n              editor.selection.moveCursorToPosition(valueRange.end);\n              editor.selection.clearSelection();\n\n              for (let i = afterNewLines.length - 1; i >= 0; i--) {\n                setNewLine(editor, afterNewLines[i]);\n              }\n              break;\n            default:\n              break;\n          }\n        }\n\n        function getMatchedValue(newLine, value) {\n          if (newLine !== undefined) {\n            return newLine;\n          } else {\n            return value;\n          }\n        }\n\n        function setSelectionWord(editor, value, selection, selectionType) {\n          if (selection === undefined) {\n            return;\n          }\n          const valueRange = editor.find(value, {\n            backwards: true,\n            caseSensitive: true\n          });\n          if (valueRange === undefined) {\n            return;\n          }\n          editor.selection.moveCursorToPosition(valueRange.start);\n          const selectionRange = editor.find(selection, { backwards: false });\n          if (selectionRange === undefined) {\n            return;\n          }\n          editor.selection.setSelectionRange(\n            selectionRange,\n            isSelectionRangeReverse(selectionType)\n          );\n        }\n\n        function isSelectionRangeReverse(selectionType) {\n          return selectionType !== undefined;\n        }\n\n        // const showSelectionWordList = selectionType => {\n        //   if (selectionType) {\n        //     setTimeout(() => {\n        //       this.langTools.setCompleters(this.getCompleters(selectionType));\n        //       this.aceEditor.completer.showPopup(this.aceEditor);\n        //       this.langTools.setCompleters(this.getCompleters(\"all\"));\n        //     }, 10); //TODO : remove delay\n        //   }\n        // };\n\n        let start = prefix\n          .split(\"\")\n          .reverse()\n          .join(\"\");\n\n        const entries = this.JSEval.FindSymbol(\n          start,\n          {\n            start: {\n              line: pos.row + 1,\n              column: pos.column\n            },\n            end: {\n              line: pos.row + 1,\n              column: pos.column\n            }\n          },\n          this.symtab,\n          true\n        );\n\n        if (Array.isArray(entries) === true) {\n          entries.forEach(entry => {\n            list.push({\n              caption: entry.id,\n              name: entry.id,\n              value: entry.id,\n              score: 1,\n              meta: entry.type\n            });\n          });\n        }\n\n        return callback(null, list);\n      }\n    };\n\n    const clearCompleterTarget = editor => {\n      const start = editor.selection.getRange().start;\n      const end = editor.selection.getRange().end;\n      const line = editor.session.getLine(start.row);\n      if (line[start.column - 1] && line[start.column - 1] !== `\"`) {\n        editor.removeWordLeft();\n      }\n      if (line[end.column] && line[end.column] !== `\"`) {\n        editor.removeWordRight();\n      }\n    };\n\n    const animationCompleter = {\n      getCompletions: (editor, session, pos, prefix, callback) => {\n        const { selectedObject, sprites } = this.props;\n        const sprite = sprites[selectedObject.name];\n        let animations = [];\n        if (AssetLibrary.getAsset(sprite.assetId)) {\n          animations = AssetLibrary.getAsset(sprite.assetId).spriteAnimations;\n        }\n        let names = [];\n        if (animations) {\n          names = Object.keys(animations);\n        }\n\n        callback(\n          null,\n          names.map(name => {\n            return {\n              caption: name,\n              value: name,\n              meta: \"Animation\",\n              completer: {\n                insertMatch: editor => {\n                  clearCompleterTarget(editor);\n                  editor.insert(name);\n                  if (editor.curOp && !editor.curOp.command.name) {\n                    editor.curOp.command.name = \"Return\";\n                    this.handleOnChange(undefined, editor);\n                  }\n                  setTimeout(() => {\n                    editor.completer.detach();\n                  }, 10);\n\n                  const newPos = {\n                    row: pos.row,\n                    column: session.getLine(pos.row).length\n                  };\n                  editor.selection.moveCursorToPosition(newPos);\n                }\n              }\n            };\n          })\n        );\n      }\n    };\n\n    const soundCompleter = {\n      getCompletions: (editor, session, pos, prefix, callback) => {\n        const { soundIds, soundNames={} } = this.props;\n        callback(\n          null,\n          soundIds.map(soundId => {\n            let name;\n            if (soundNames[soundId]) {\n              name = soundNames[soundId];\n            } else {\n              name = AssetLibrary.getSoundAsset(soundId).defaultName;\n            }\n            return {\n              caption: name,\n              value: name,\n              meta: \"Sound\",\n              completer: {\n                insertMatch: editor => {\n                  clearCompleterTarget(editor);\n                  editor.insert(name);\n                  if (editor.curOp && !editor.curOp.command.name) {\n                    editor.curOp.command.name = \"Return\";\n                    this.handleOnChange(undefined, editor);\n                  }\n                  setTimeout(() => {\n                    editor.completer.detach();\n                  }, 10);\n\n                  const newPos = {\n                    row: pos.row,\n                    column: session.getLine(pos.row).length\n                  };\n                  editor.selection.moveCursorToPosition(newPos);\n                }\n              }\n            };\n          })\n        );\n      }\n    };\n\n    const spriteCompleter = {\n      getCompletions: (editor, session, pos, prefix, callback) => {\n        const { sprites } = this.props;\n        callback(\n          null,\n          Object.keys(sprites).map(name => {\n            return {\n              caption: name,\n              value: name,\n              meta: \"Sprite\",\n              completer: {\n                insertMatch: editor => {\n                  clearCompleterTarget(editor);\n                  editor.insert(name);\n                  if (editor.curOp && !editor.curOp.command.name) {\n                    editor.curOp.command.name = \"Return\";\n                    this.handleOnChange(undefined, editor);\n                  }\n                  setTimeout(() => {\n                    editor.completer.detach();\n                  }, 10);\n\n                  let newLine = false;\n                  const functions = session\n                    .getLine(editor.selection.getRange().start.row)\n                    .match(/([a-zA-Z_{1}][a-zA-Z0-9_]+)(?=\\()/g);\n                  if (functions && functions[0]) {\n                    const f = functions[0];\n                    if (f === \"onOverlap\") {\n                      newLine = true;\n                    }\n                  }\n                  const newPos = {\n                    row: pos.row + (newLine ? 1 : 0),\n                    column: session.getLine(pos.row).length\n                  };\n                  editor.selection.moveCursorToPosition(newPos);\n                }\n              }\n            };\n          })\n        );\n      }\n    };\n\n    const sceneCompleter = {\n      getCompletions: (editor, session, pos, prefix, callback) => {\n        const { sceneIds } = this.props;\n        callback(\n          null,\n          sceneIds.map(name => {\n            return {\n              caption: name,\n              value: name,\n              meta: \"Scene\",\n              completer: {\n                insertMatch: editor => {\n                  clearCompleterTarget(editor);\n                  editor.insert(name);\n                  if (editor.curOp && !editor.curOp.command.name) {\n                    editor.curOp.command.name = \"Return\";\n                    this.handleOnChange(undefined, editor);\n                  }\n                  setTimeout(() => {\n                    editor.completer.detach();\n                  }, 10);\n\n                  const newPos = {\n                    row: pos.row,\n                    column: session.getLine(pos.row).length\n                  };\n                  editor.selection.moveCursorToPosition(newPos);\n                }\n              }\n            };\n          })\n        );\n      }\n    };\n\n    const directionCompleter = {\n      getCompletions: (editor, session, pos, prefix, callback) => {\n        const directions = [\"left\", \"right\", \"up\", \"down\"];\n        callback(\n          null,\n          directions.map(name => {\n            return {\n              caption: name,\n              value: name,\n              meta: \"Direction\",\n              completer: {\n                insertMatch: editor => {\n                  clearCompleterTarget(editor);\n                  editor.insert(name);\n                  if (editor.curOp && !editor.curOp.command.name) {\n                    editor.curOp.command.name = \"Return\";\n                    this.handleOnChange(undefined, editor);\n                  }\n                  setTimeout(() => {\n                    editor.completer.detach();\n                  }, 10);\n\n                  const newPos = {\n                    row: pos.row + 1,\n                    column: session.getLine(pos.row).length\n                  };\n                  editor.selection.moveCursorToPosition(newPos);\n                }\n              }\n            };\n          })\n        );\n      }\n    };\n\n    const keyCompleter = {\n      getCompletions: (editor, session, pos, prefix, callback) => {\n        const keys = [\n          \"left\",\n          \"right\",\n          \"up\",\n          \"down\",\n          \"shift\",\n          \"control\",\n          \"space\",\n          \"enter\",\n          \"esc\",\n          \"f1\",\n          \"f2\",\n          \"f3\",\n          \"f4\",\n          \"f5\",\n          \"f6\",\n          \"f7\",\n          \"f8\",\n          \"f9\",\n          \"f10\",\n          \"f11\",\n          \"f12\"\n        ];\n\n        callback(\n          null,\n          keys.map(name => {\n            return {\n              caption: name,\n              value: name,\n              meta: \"Key\",\n              completer: {\n                insertMatch: editor => {\n                  clearCompleterTarget(editor);\n                  editor.insert(name);\n                  if (editor.curOp && !editor.curOp.command.name) {\n                    editor.curOp.command.name = \"Return\";\n                    this.handleOnChange(undefined, editor);\n                  }\n                  setTimeout(() => {\n                    editor.completer.detach();\n                  }, 10);\n\n                  const newPos = {\n                    row: pos.row + 1,\n                    column: session.getLine(pos.row).length\n                  };\n                  editor.selection.moveCursorToPosition(newPos);\n                }\n              }\n            };\n          })\n        );\n      }\n    };\n\n    const colorCompleter = {\n      getCompletions: (editor, session, pos, prefix, callback) => {\n        const colors = window.HTML_Colors;\n        const colorNames = Object.keys(colors);\n        callback(\n          null,\n          colorNames.map(name => {\n            return {\n              caption: name,\n              value: name,\n              meta: \"Color\",\n              completer: {\n                insertMatch: editor => {\n                  clearCompleterTarget(editor);\n                  editor.insert(name);\n                  if (editor.curOp && !editor.curOp.command.name) {\n                    editor.curOp.command.name = \"Return\";\n                    this.handleOnChange(undefined, editor);\n                  }\n                  setTimeout(() => {\n                    editor.completer.detach();\n                  }, 10);\n\n                  const newPos = {\n                    row: pos.row,\n                    column: session.getLine(pos.row).length\n                  };\n                  editor.selection.moveCursorToPosition(newPos);\n                }\n              }\n            };\n          })\n        );\n      }\n    };\n\n    const textCompleter = {\n      getCompletions: (editor, session, pos, prefix, callback) => {\n        const completer = this.langTools.textCompleter;\n        const completions = completer.getCompletions(\n          editor,\n          session,\n          pos,\n          prefix,\n          (e, items) => {\n            const filteredItems = getFilteredItems(items, this.apiNameSet);\n            callback(null, filteredItems);\n          }\n        );\n\n        function getFilteredItems(items, apiNameSet) {\n          return items.filter(item => {\n            if (apiNameSet.has(item.caption)) {\n              return false;\n            } else if (isAlreadySignalName(item.caption)) {\n              return false;\n            } else if (isAlreadyGlobalValue(item.caption)) {\n              return false;\n            } else {\n              return true;\n            }\n          });\n        }\n\n        function isAlreadySignalName(itemCaption) {\n          for (let i = 0; i < signalNames.length; i++) {\n            if (signalNames[i] === itemCaption) {\n              return true;\n            }\n          }\n\n          return false;\n        }\n\n        function isAlreadyGlobalValue(itemCaption) {\n          for (let i = 0; i < globalValues.length; i++) {\n            if (globalValues[i] === itemCaption) {\n              return true;\n            }\n          }\n\n          return false;\n        }\n\n        return completions;\n      }\n    };\n\n    const signalCompleter = {\n      getCompletions: (editor, session, pos, prefix, callback) => {\n        callback(\n          null,\n          signalNames.map(name => {\n            return {\n              caption: name,\n              value: name,\n              meta: \"Signal\",\n              completer: {\n                insertMatch: editor => {\n                  clearCompleterTarget(editor);\n                  editor.insert(name);\n                  if (editor.curOp && !editor.curOp.command.name) {\n                    editor.curOp.command.name = \"Return\";\n                    this.handleOnChange(undefined, editor);\n                  }\n                  setTimeout(() => {\n                    editor.completer.detach();\n                  }, 10);\n\n                  const newPos = {\n                    row: pos.row + 1,\n                    column: session.getLine(pos.row).length\n                  };\n                  editor.selection.moveCursorToPosition(newPos);\n                }\n              }\n            };\n          })\n        );\n      }\n    };\n\n    const globalValueCompleter = {\n      getCompletions: (editor, session, pos, prefix, callback) => {\n        callback(\n          null,\n          globalValues.map(function(name) {\n            return {\n              caption: name,\n              value: name,\n              meta: \"Global\"\n            };\n          })\n        );\n      }\n    };\n\n    this.completers = {\n      staticWordCompleter,\n      animationCompleter,\n      soundCompleter,\n      spriteCompleter,\n      sceneCompleter,\n      directionCompleter,\n      keyCompleter,\n      colorCompleter,\n      textCompleter,\n      signalCompleter,\n      globalValueCompleter\n    };\n\n    this.langTools.setCompleters(this.getCompleters(\"all\"));\n  }\n\n  getCompleters = selectionType => {\n    switch (selectionType) {\n      case \"all\":\n        return Object.keys(this.completers).map(key => this.completers[key]);\n      case \"global\":\n        return [this.completers[selectionType + \"ValueCompleter\"]];\n      default:\n        return [this.completers[selectionType + \"Completer\"]];\n    }\n  };\n\n  setAceEditor() {\n    this.aceEditor = this.ace.edit(\"ace-editor\");\n    // this.aceEditor.session.setMode(`ace/mode/${this.props.editorMode}`);\n    // if (this.isLive) {\n    //   this.aceEditor.setTheme(\"ace/theme/wizschool-clive\");\n    // } else {\n    //   this.aceEditor.setTheme(\"ace/theme/wizschool\");\n    // }\n    this.aceEditor.session.setMode(`ace/mode/${EDITORMODE.JAVASCRIPT}`);\n    this.aceEditor.setTheme(\"ace/theme/wizschool\");\n\n    this.aceEditor.on(\"changeSelection\", this.handleOnChangeSelection);\n    this.aceEditor.on(\"change\", this.handleOnChange);\n    this.aceEditor.on(\"mousemove\", this.handleMousemove);\n    document.getElementById(\"ace-editor\").addEventListener(\"mouseout\", () => {\n      document.getElementById(\"EditorContainer_tooltip\").style.display = \"none\";\n    });\n    this.aceEditor.getSession().setUseWrapMode(false);\n    this.aceEditor.setFontSize(this.getStoredFontSize());\n\n    this.undoManagers.defaultManager = this.aceEditor.session.getUndoManager();\n\n    this.aceEditor.setOptions({\n      enableBasicAutocompletion: true,\n      enableSnippets: true,\n      enableLiveAutocompletion: true\n    });\n\n    this.setAutoCompleters();\n\n    // const currentEditorMode = this.props.editorMode;\n    this.aceEditor.session.on(\"changeMode\", function(e, session) {\n      if (`ace/mode/${EDITORMODE.JAVASCRIPT}` === session.getMode().$id) {\n        if (!!session.$worker) {\n          session.$worker.send(\"setOptions\", [\n            {\n              \"-W041\": false,\n              \"-W033\": false,\n              \"-W104\": false,\n              \"-W118\": false\n            }\n          ]);\n        }\n      }\n    });\n\n    // this.aceEditor.session.on(\"changeMode\", function(e, session) {\n    //   if (\"ace/mode/javascript-wiz\" === session.getMode().$id) {\n    //     const worker = session.$worker;\n\n    //     if (worker === undefined || worker === null) {\n    //       return;\n    //     }\n    //     // worker.send(\"command\", \"args\");\n    //   }\n    // });\n  }\n\n  getStoredFontSize = () => {\n    const fontSize = localStorage.getItem(\"wizFontSize\");\n    if (fontSize) {\n      return parseInt(fontSize);\n    }\n    return 18;\n  };\n\n  setUndoManager() {\n    const { selectedObject, selectedSceneId } = this.props;\n    const name = selectedObject.name;\n\n    if (!this.undoManagers[selectedSceneId]) {\n      this.undoManagers[selectedSceneId] = {};\n    }\n    if (!this.undoManagers[selectedSceneId][name]) {\n      this.undoManagers[selectedSceneId][name] = new window.ace.UndoManager();\n    }\n    const undoManager = this.undoManagers[selectedSceneId][name];\n    this.aceEditor.session.setUndoManager(undoManager);\n  }\n\n  setCode() {\n    const { sprites, selectedObject } = this.props;\n    if (selectedObject.name && sprites[selectedObject.name]) {\n      const code = sprites[selectedObject.name].code;\n      this.aceEditor.session.setUndoManager(this.undoManagers.defaultManager);\n      if (this.aceEditor.getValue() !== code) {\n        this.aceEditor.setValue(code ? code : \"\", 1);\n      }\n      this.setUndoManager();\n      this.aceEditor.setReadOnly(false);\n    } else {\n      this.aceEditor.session.setUndoManager(this.undoManagers.defaultManager);\n      this.aceEditor.setValue(\n        \"// \" + this.props.intl.formatMessage({ id: \"ID_EDITOR_EMPTYSPIRTE\" }),\n        1\n      );\n      this.aceEditor.setReadOnly(true);\n    }\n  }\n\n  setWorkers() {\n    if (window.Worker) {\n      signalNameWorker = new Worker(\"ace/worker-signal-name.js\");\n      globalValueWorker = new Worker(\"ace/worker-global-value.js\");\n    }\n  }\n\n  setSignalNames() {\n    if (window.Worker && signalNameWorker) {\n      signalNameWorker.onmessage = function(e) {\n        if (e === undefined || e.data === undefined) {\n          return;\n        }\n        signalNames = e.data;\n      };\n\n      const { sprites, spriteIds } = this.props;\n      signalNameWorker.postMessage({ sprites, spriteIds });\n    } else {\n      // worker not supported logic\n    }\n  }\n\n  setGlobalValues() {\n    if (window.Worker && globalValueWorker) {\n      globalValueWorker.onmessage = function(e) {\n        if (e === undefined || e.data === undefined) {\n          return;\n        }\n\n        globalValues = e.data;\n      };\n\n      const { sprites, spriteIds } = this.props;\n      globalValueWorker.postMessage({ sprites, spriteIds });\n    } else {\n      // worker not supported logic\n    }\n  }\n\n  handleMousemove = e => {\n    try {\n      const tooltip = document.getElementById(\"EditorContainer_tooltip\");\n      const pos = e.getDocumentPosition();\n      const line = e.editor.session.getLine(pos.row);\n\n      // 해당 라인에 있는 함수들의 범위 구하기\n      let funcsRanges = [];\n      const funcRegex = /([a-zA-Z_{1}][a-zA-Z0-9_]+)(?=\\()/gim;\n      let funcMatch;\n      while ((funcMatch = funcRegex.exec(line))) {\n        funcsRanges.push({ start: funcMatch.index, end: funcRegex.lastIndex });\n      }\n\n      // 현재 커서가 있는 함수의 범위 구하기\n      let currentFuncRange;\n      for (let i = 0; i < funcsRanges.length; i++) {\n        const funcRange = funcsRanges[i];\n        if (funcRange.start <= pos.column && pos.column <= funcRange.end) {\n          currentFuncRange = funcRange;\n          break;\n        }\n      }\n\n      // 현재 커서가 있는 함수의 이름 구하기\n      if (currentFuncRange) {\n        const currentFunctionName = line.substring(\n          currentFuncRange.start,\n          currentFuncRange.end\n        );\n\n        // 해당 함수의 api 정보 불러오기\n        let api = this.apiList.find(api => api.name === currentFunctionName);\n        if (!api) {\n          tooltip.style.display = \"none\";\n          return;\n        }\n\n        // 이름이 대체된 api라면 대체된 api의 정보를 불러오기\n        const equal = api.equal;\n        const caption = api.caption;\n        if (equal) {\n          api = { ...this.apiList.find(api => api.name === equal) };\n          api.caption = caption;\n        }\n\n        // 툴팁 보여주기\n        this.setState({ tooltip: { ...api } }, () => {\n          tooltip.style.display = \"block\";\n          tooltip.style.left = `${e.domEvent.offsetX}px`;\n          tooltip.style.top = `${e.domEvent.offsetY + 18}px`;\n        });\n      } else {\n        tooltip.style.display = \"none\";\n      }\n    } catch (e) {}\n  };\n\n  handleOnChange = (event, editor) => {\n    const code = editor.getValue();\n    const { selectedSceneId, selectedObject } = this.props;\n    const spriteName = selectedObject.name;\n\n    if (editor.completer === undefined) {\n      try {\n        editor.execCommand(\"startAutocomplete\");\n        editor.completer.detach();\n        this.refreshCompleterPopupSize();\n      } catch (e) {}\n    }\n\n    // If inserted number, disable autocomplete\n    if (event) {\n      editor.setOptions({ enableLiveAutocompletion: isNaN(event.lines[0]) });\n    }\n\n    if (this.JSEvaluatorTimer) {\n      clearTimeout(this.JSEvaluatorTimer);\n    }\n    this.JSEvaluatorTimer = setTimeout(() => {\n      this.parseJSEvaluator(code, editor);\n    }, 3000);\n\n    if (spriteName) {\n      if (editor.curOp && editor.curOp.command.name) {\n        //changed by user\n        // if (this.codeTimer) {\n        // clearTimeout(this.codeTimer);\n        // }\n        // this.codeTimer = setTimeout(() => {\n        this.props.setSpriteCode(selectedSceneId, spriteName, code);\n        // }, 100);\n      } else {\n        if (this.isLive) {\n          const { selectedObject, selectedSceneId } = this.props;\n          const name = selectedObject.name;\n\n          if (!this.undoManagers[selectedSceneId]) {\n            this.undoManagers[selectedSceneId] = {};\n          }\n          this.undoManagers[selectedSceneId][\n            name\n          ] = new window.ace.UndoManager();\n          const undoManager = this.undoManagers[selectedSceneId][name];\n          this.aceEditor.session.setUndoManager(undoManager);\n        }\n      }\n    }\n  };\n\n  parseJSEvaluator = (code, editor) => {\n    // Parsing the code (JSEvaluator uses the Acorn)\n    let errors = [];\n    // eslint-disable-next-line\n    let annotations = [];\n\n    // TODO:\n    // Ugly way to enable the following code block only for the development version.\n    if (enableJSEval) {\n      // if (enableJSEval || window.location.hostname !== \"wizlab.net\") {\n      var ret;\n\n      try {\n        // Parsing the code (JSEvaluator uses the Acorn)\n        ret = this.JSEval.parse(code);\n      } catch (e) {\n        // console.log(\"JSEvaluator\", e);\n        ret = false;\n      }\n\n      if (ret === true) {\n        // Evaluating the parsed code (AST)\n        // In order to build the symbol table and get the runtime errors\n        let symtab;\n\n        if (this.JSEval.build() === true) {\n          symtab = this.JSEval.SymbolTable();\n          // Update the symbol table only if the JSEval successfully built the table.\n          // Otherwise uses the old table for the auto completions.\n          if (symtab !== null) {\n            this.symtab = symtab;\n          }\n        }\n      }\n    }\n\n    errors = this.JSEval.getErrors();\n    annotations = editor.getSession().getAnnotations();\n\n    // TODO:\n    // Pass the errors to the chatbot\n    // console.log(\"JSEvaluator detects\", errors);\n    // let chatbotErrors = [...errors, ...annotations];\n    let chatbotErrors = [...errors];\n    this.props.setChatbotErrors(chatbotErrors);\n    this.props.removeChatbotMessages({ type: ChatbotMsgType.BOT_ERROR });\n\n    if (chatbotErrors.length > 0) {\n      this.handleShowErrors(editor);\n    }\n  };\n\n  handleShowErrors = () => {\n    const errors = this.props.errors;\n    errors.forEach(item => {\n      item.text = this.setErrorText(item);\n      item.onClick = () => {\n        let end = item.loc && item.loc.end;\n        if (!end) return;\n        let position = {\n          row: end.line - 1,\n          column: end.column\n        };\n        this.aceEditor.selection.moveCursorToPosition(position);\n        this.aceEditor.selection.clearSelection();\n      };\n    });\n\n    let newMsg = {\n      sender: \"WIZBOT\",\n      type: ChatbotMsgType.BOT_ERROR,\n      errors\n    };\n\n    this.props.addNewMsg([newMsg]);\n  };\n\n  setErrorText = item => {\n    // let startLine = item.loc ? item.loc.start.line : item.row + 1;\n    let message = item.message;\n\n    let text = ``;\n    if (/parameter/i.test(message)) {\n      text += message.split(\" \")[0] + \" 함수는 \";\n      text += message.split(\" \")[2] + \"개의 매개변수를 넣어주어야 해~\";\n    }\n    if (/is undefined/i.test(message)) {\n      text += message.split(\" \")[0] + \" 는 아직 정의되지 않은 것 같은데?\";\n    }\n    if (/has already been declared/i.test(message)) {\n      let name = message.match(/'\\w+'/);\n      text += `이미 정의된 ${name}를 다시 정의하고 있어.`;\n    }\n    if (/Cannot change the constant/i.test(message)) {\n      let name = message.split(\" \")[4];\n      text += `const로 정의한 ${name}를 다시 정의하고 있군.`;\n    }\n    // if (/(subtract|divide|multiply) operation/i.test(message)) {\n    //   let operation = message\n    //     .match(/\\w+ operation/i)[0]\n    //     .replace(/ operation/i, \"\");\n\n    //   let ko_operation;\n    //   if (operation === \"subtract\") ko_operation = \"빼기\";\n    //   else if (operation === \"divide\") ko_operation = \"나누기\";\n    //   else if (operation === \"multiply\") ko_operation = \"곱하기\";\n\n    //   let [left, right] = message.match(/\\w+ \\| \\w+/i)[0].split(/\\s\\|\\s/i);\n\n    //   text += `${left} 타입에서 ${right} 타입을 ${operation}(${ko_operation}) 하네.`;\n    // }\n    if (message === this.JSEval.ERROR_MESSAGE.FUNCTION_UPPER_LOWER) {\n      text += `함수의 대소문자를 확인해봐.\\n (${item.typingFunction} → ${item.originFunction})`;\n    }\n    if (!text) {\n      text += \"을 확인해봐!\";\n    }\n\n    return text;\n  };\n\n  handleOnChangeSelection = (event, editor) => {\n    let range = this.getSelectionRange();\n    if (\n      editor.curOp &&\n      editor.curOp.selectionChanged &&\n      editor.curOp.command.name\n    ) {\n      //changed by user\n      function diff(rang1, rang2) {\n        return {\n          val1: rang1.row === rang2.row,\n          val2: rang1.column === rang2.column\n        };\n      }\n\n      if (this.props.editorRange && range) {\n        const v1 = diff(this.props.editorRange.end, range.end);\n        const v2 = diff(this.props.editorRange.start, range.start);\n\n        if (!v1.val1 || !v1.val2 || !v2.val1 || !v2.val2) {\n          range.byUser = true;\n          this.props.setEditorRange(range);\n        }\n      } else if (!this.props.editorRange && range) {\n        range.byUser = true;\n        this.props.setEditorRange(range);\n      }\n\n      // if (this.rangeTimer) {\n      // clearTimeout(this.rangeTimer);\n      // }\n      // this.rangeTimer = setTimeout(() => {\n      // range.byUser = true;\n      // this.props.setEditorRange(range);\n      // }, 10);\n      // }\n    } else {\n      return;\n    }\n\n    const line = editor.session.getLine(range.start.row);\n\n    // 문자열의 범위 모두 구하기\n    let quotesRanges = [];\n    const quoteRegex = /'((?:\\\\.|[^'])*)'|\"((?:\\\\.|[^\"])*)\"/gim;\n    let quoteMatch;\n    while ((quoteMatch = quoteRegex.exec(line))) {\n      quotesRanges.push({ start: quoteMatch.index, end: quoteRegex.lastIndex });\n    }\n    // console.log(\"quotesRanges\", quotesRanges);\n\n    // 커서가 위치한 문자열을 현재 문자열로 저장\n    let currentQuoteRange;\n    for (let i in quotesRanges) {\n      const quoteRange = quotesRanges[i];\n      if (\n        range.start.column === quoteRange.start + 1 ||\n        range.end.column === quoteRange.end - 1\n      ) {\n        currentQuoteRange = quoteRange;\n        break;\n      }\n    }\n    // console.log(\"currentQuoteRange\", currentQuoteRange);\n\n    // 현재 문자열이 있으면 자동완성 활성화\n    if (currentQuoteRange) {\n      // 함수이름의 범위 모두 구하기\n      let funcsRanges = [];\n      const funcRegex = /([a-zA-Z_{1}][a-zA-Z0-9_]+)(?=\\()/gim;\n      let funcMatch;\n      while ((funcMatch = funcRegex.exec(line))) {\n        funcsRanges.push({ start: funcMatch.index, end: funcRegex.lastIndex });\n      }\n      // console.log(\"funcsRanges\", funcsRanges);\n\n      // 현재 문자열의 start에 가장 가까운 함수이름의 범위 구하기\n      let currentFunctionRange;\n      for (let i in funcsRanges) {\n        const funcRange = funcsRanges[i];\n        if (funcRange.end < currentQuoteRange.start) {\n          currentFunctionRange = funcRange;\n        } else {\n          break;\n        }\n      }\n      if (!currentFunctionRange) {\n        return;\n      }\n\n      // 해당 함수의 이름 구하기\n      const currentFunctionName = line.substring(\n        currentFunctionRange.start,\n        currentFunctionRange.end\n      );\n      // console.log(\"currentFunctionName\", currentFunctionName);\n\n      // 함수 이름으로 자동완성 리스트 업데이트 및 보여주기\n      let list = this.autoCompleteApiList.filter(\n        api => api.caption.indexOf(currentFunctionName) !== -1\n      );\n      if (list && list[0]) {\n        let selectionType = list[0].selectionType;\n        if (selectionType) {\n          setTimeout(() => {\n            this.isCustomCompleterOpen = true;\n            this.langTools.setCompleters(this.getCompleters(selectionType));\n            editor.completer.showPopup(editor);\n            this.langTools.setCompleters(this.getCompleters(\"all\"));\n          }, 10);\n        }\n      }\n    } else {\n      // 문자열 밖에 커서가 있을 때는 커스텀 컴플리터를 해제\n      if (this.isCustomCompleterOpen) {\n        setTimeout(() => {\n          this.isCustomCompleterOpen = false;\n          editor.completer.detach();\n        }, 10);\n      }\n    }\n  };\n\n  setSorting = () => {\n    try {\n      const { selectedSceneId, selectedObject } = this.props;\n      const spriteName = selectedObject.name;\n      const code = this.aceEditor.getValue();\n      const parsedCode = Parser.parseForSort(code);\n      this.props.setSpriteCode(selectedSceneId, spriteName, parsedCode);\n      this.aceEditor.setValue(parsedCode, 1);\n      toast.info(\"코드가 정렬되었습니다\", {\n        position: toast.POSITION.BOTTOM_RIGHT\n      });\n      TrackingUtil.sendGAEvent({\n        category: \"Builder\",\n        action: `EditorActions`,\n        label: \"Align\"\n      });\n\n      this.aceEditor.curOp.command.name = \"Return\";\n      this.handleOnChange(undefined, this.aceEditor);\n    } catch (e) {\n      toast.warn(\"에러를 수정한 후 정렬해주세요\", {\n        position: toast.POSITION.BOTTOM_RIGHT\n      });\n    }\n  };\n\n  setFontZoomIn = () => {\n    const size = this.aceEditor.getFontSize() + 2;\n    if (size > 50) {\n      return;\n    }\n    TrackingUtil.sendGAEvent({\n      category: \"Builder\",\n      action: `EditorActions`,\n      label: \"ZoomIn\"\n    });\n    localStorage.setItem(\"wizFontSize\", size);\n    this.aceEditor.setFontSize(size);\n    this.refreshCompleterPopupSize();\n  };\n\n  setFontZoomOut = () => {\n    const MIN_SIZE = 8;\n    const size = this.aceEditor.getFontSize() - 2;\n    if (size < MIN_SIZE) {\n      return;\n    }\n    TrackingUtil.sendGAEvent({\n      category: \"Builder\",\n      action: `EditorActions`,\n      label: \"ZoomOut\"\n    });\n    localStorage.setItem(\"wizFontSize\", size);\n    this.aceEditor.setFontSize(size);\n    this.refreshCompleterPopupSize();\n  };\n\n  refreshCompleterPopupSize = () => {\n    if (this.aceEditor.completer) {\n      const percent = this.aceEditor.getFontSize() + 10 + \"%\";\n      this.aceEditor.completer.popup.container.style.width = percent;\n    }\n  };\n\n  getSelectionRange() {\n    return this.aceEditor.selection.getRange();\n  }\n\n  setSelectionRange(range) {\n    if (!this.isLive || !range) {\n      return;\n    }\n    let editorRange = { ...this.getSelectionRange() };\n    let propsRange = { ...range };\n    delete editorRange[\"byUser\"];\n    delete propsRange[\"byUser\"];\n    if (stringify(editorRange) !== stringify(propsRange)) {\n      this.aceEditor.selection.setRange(range);\n    } else {\n    }\n  }\n\n  componentWillUnmount() {\n    window.clearTimeout(this.errorTimer);\n  }\n\n  render() {\n    const { selectedObject, sprites } = this.props;\n    const spriteName = selectedObject.name;\n    const { setFontZoomIn, setFontZoomOut, setSorting } = this;\n    const { tooltip } = this.state;\n    const sprite = sprites[spriteName];\n    const spriteIcon = sprite\n      ? sprite.type === SpriteType.TEXT\n        ? AssetLibrary.textboxThumb\n        : AssetLibrary.getAsset(sprite.assetId).thumb\n      : undefined;\n    return (\n      <View\n        selectedObject={sprites[spriteName]}\n        spriteName={spriteName}\n        spriteIcon={spriteIcon}\n        setFontZoomIn={setFontZoomIn}\n        setFontZoomOut={setFontZoomOut}\n        setSorting={setSorting}\n        tooltip={tooltip}\n        intl={this.props.intl}\n        editorMode={this.props.editorMode}\n      />\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    selectedSceneId: state.interaction.selected.scene,\n    selectedObject:\n      state.interaction.selected.objects[state.interaction.selected.scene],\n    sprites: state.scene.scenes[state.interaction.selected.scene].sprites,\n    spriteIds: state.scene.scenes[state.interaction.selected.scene].spriteIds,\n    soundIds: state.scene.soundIds,\n    soundNames: state.scene.soundNames,\n    sceneIds: state.scene.sceneIds,\n    timeStamp: state.project.timeStamp,\n    editorTimeStamp: state.scene.timeStamp,\n    errors: state.chatbot.errors,\n    editorRange: state.webrtc.editorRange,\n    log: state.webrtc.log,\n    editorMode: state.scene.editorMode\n  }),\n  {\n    setSpriteCode: sceneActions.setSpriteCode,\n    setChatbotErrors: chatbotActions.setChatbotErrors,\n    setEditorRange: webrtcActions.setEditorRange,\n    removeChatbotMessages: chatbotActions.removeChatbotMessages,\n    addMsg: chatActions.addMsg,\n    addNewMsg: chatbotActions.addNewMsg\n  }\n)(withRouter(injectIntl(Container)));\n"]},"metadata":{},"sourceType":"module"}