{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Game/Container.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { injectIntl } from \"react-intl\";\nimport { connect } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport Popup, { showPopUp } from \"../../../../Common/Component/PopUp\";\nimport WizError from \"../../../../Common/Util/WizError\";\nimport * as chatbotActions from \"../../Store/Reducer/chatbot\";\nimport * as previewActions from \"../../Store/Reducer/preview\";\nimport * as webrtcActions from \"../../Store/Reducer/webrtc\";\nimport { generatePhaserPage } from \"../../utils/gamePageGenerator\";\nimport View from \"./View\";\n\nvar Container = /*#__PURE__*/function (_Component) {\n  _inherits(Container, _Component);\n\n  var _super = _createSuper(Container);\n\n  function Container(props) {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _super.call(this, props);\n\n    _this.resizeView = function () {\n      var h = window.innerHeight;\n      var w = window.innerWidth;\n      var gameWrapperWidth, gameWrapperHeight;\n\n      if (_this.props.screenMode === \"HORIZONTAL\") {\n        if (h / w > 9 / 16) {\n          gameWrapperWidth = w;\n          gameWrapperHeight = w * 9 / 16;\n        } else {\n          gameWrapperWidth = h * 16 / 9;\n          gameWrapperHeight = h;\n        }\n      } else {\n        if (w / h > 9 / 16) {\n          gameWrapperWidth = h * 9 / 16;\n          gameWrapperHeight = h;\n        } else {\n          gameWrapperWidth = w;\n          gameWrapperHeight = w * 16 / 9;\n        }\n      }\n\n      gameWrapperHeight *= 0.8;\n      gameWrapperWidth *= 0.8;\n\n      _this.setState({\n        gameWrapperWidth: gameWrapperWidth,\n        gameWrapperHeight: gameWrapperHeight\n      });\n    };\n\n    _this.handleParseError = function (error, payload) {\n      _this.props.setIsPlaying(false);\n\n      var wizError = WizError.create({\n        error: error,\n        payload: payload,\n        intl: _this.props.intl\n      });\n\n      _this.showWizError(wizError);\n\n      _this.props.setLog({\n        game: false\n      });\n    };\n\n    _this.showDummyRanking = function () {\n      _this.setState({\n        isDummyRankingVisiable: true\n      });\n    };\n\n    _this.handleDummyRankingHide = function () {\n      _this.setState({\n        isDummyRankingVisiable: false\n      });\n    };\n\n    _this.onUpdateSystemVolume = function (volume) {\n      _this.gameIframe.current.contentWindow.postMessage({\n        type: \"onUpdateSystemVolume\",\n        source: \"wizlab\",\n        data: _this.props.volume\n      }, \"*\");\n    };\n\n    _this.onClickVolume = function (e) {\n      e.stopPropagation(0);\n\n      if (_this.props.volume === 0) {\n        _this.props.setGameVolume(_this.oldVolume || 0);\n      } else {\n        _this.oldVolume = _this.props.volume;\n\n        _this.props.setGameVolume(0);\n      }\n    };\n\n    _this.onChangeVolume = function (e) {\n      e.stopPropagation(0);\n      var volume = parseInt(e.target.value);\n\n      _this.props.setGameVolume(volume);\n    };\n\n    _this.gamePageMessageListener = function (message) {\n      if (message.data.source === \"wizlab\") {\n        if (message.data.type === \"error\") {\n          var _message$data = message.data,\n              error = _message$data.error,\n              payload = _message$data.payload;\n\n          _this.handleGameError(error, payload);\n        } else if (message.data.type === \"gameEvent\") {\n          var gameEvent = JSON.parse(message.data.message);\n\n          _this.handleGameEvent(gameEvent);\n        }\n      }\n    };\n\n    _this.state = {\n      gameDoc: undefined,\n      isDummyRankingVisiable: false,\n      gameWrapperWidth: 0,\n      gameWrapperHeight: 0\n    };\n    _this.gameIframe = React.createRef();\n    _this.isPlaying = false;\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"message\", this.gamePageMessageListener, false);\n      window.addEventListener(\"resize\", this.resizeView);\n      this.resizeView();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n          isPlaying = _this$props.isPlaying,\n          volume = _this$props.volume;\n\n      if (isPlaying !== prevProps.isPlaying) {\n        if (isPlaying) {\n          this.showGame();\n        } else {\n          this.setState({\n            gameDoc: undefined,\n            isDummyRankingVisiable: false\n          });\n        }\n      }\n\n      if (volume !== prevProps.volume && isPlaying) {\n        this.onUpdateSystemVolume();\n      }\n\n      if (prevProps.screenMode !== this.props.screenMode) {\n        this.resizeView();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"message\", this.gamePageMessageListener);\n      window.removeEventListener(\"resize\", this.resizeView);\n    }\n  }, {\n    key: \"showGame\",\n    value: function () {\n      var _showGame = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var state, gameMeta, page;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                state = {\n                  editorMode: this.props.editorMode,\n                  scene: {\n                    scenes: this.props.scenes,\n                    sceneIds: this.props.sceneIds,\n                    soundIds: this.props.soundIds\n                  },\n                  preview: {\n                    screenMode: this.props.screenMode\n                  }\n                };\n                gameMeta = {\n                  pId: this.props.project.pId,\n                  isFromWizlab: true,\n                  systemVolume: this.props.volume\n                };\n                _context.next = 4;\n                return generatePhaserPage(state, gameMeta, this.handleParseError);\n\n              case 4:\n                page = _context.sent;\n                this.setState({\n                  gameDoc: page\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function showGame() {\n        return _showGame.apply(this, arguments);\n      }\n\n      return showGame;\n    }()\n  }, {\n    key: \"showWizError\",\n    value: function showWizError(wizError) {\n      var formatMessage = this.props.intl.formatMessage;\n      showPopUp( /*#__PURE__*/React.createElement(Popup.OneButton, {\n        title: wizError.getTitle(),\n        subtitle: wizError.getMessage(),\n        buttonName: formatMessage({\n          id: \"ID_BUILDER_ALERT_CONFIRMBTN\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 7\n        }\n      }));\n    }\n  }, {\n    key: \"handleGameError\",\n    value: function handleGameError(error, payload) {\n      this.props.setIsPlaying(false);\n      var wizError = WizError.create({\n        error: error,\n        payload: payload,\n        intl: this.props.intl\n      });\n      this.showWizError(wizError);\n    }\n  }, {\n    key: \"handleGameEvent\",\n    value: function handleGameEvent(gameEvent) {\n      var type = gameEvent.type;\n\n      if (this.getRankingGameEventTypes().includes(type)) {\n        this.handleRankingGameEvent(gameEvent);\n      } else if (this.getDataGameEventTypes().includes(type)) {\n        this.handleDataGameEvent(gameEvent);\n      }\n    }\n  }, {\n    key: \"getRankingGameEventTypes\",\n    value: function getRankingGameEventTypes() {\n      return [\"saveScore\", \"showRanking\", \"showRankingAscending\", \"hideRanking\"];\n    }\n  }, {\n    key: \"handleRankingGameEvent\",\n    value: function handleRankingGameEvent(rankingGameEvent) {\n      var type = rankingGameEvent.type;\n\n      if (type === \"showRanking\" || type === \"showRankingAscending\") {\n        this.showDummyRanking();\n      }\n\n      var toastMsg = this.getToastMsgWithGameEventType(type);\n      this.showToast(toastMsg);\n    }\n  }, {\n    key: \"getDataGameEventTypes\",\n    value: function getDataGameEventTypes() {\n      return [\"saveGameData\", \"loadGameData\", \"resetGameData\"];\n    }\n  }, {\n    key: \"handleDataGameEvent\",\n    value: function handleDataGameEvent(dataGameEvent) {\n      var type = dataGameEvent.type;\n      var toastMsg = this.getToastMsgWithGameEventType(type);\n      this.showToast(toastMsg);\n    }\n  }, {\n    key: \"getToastMsgWithGameEventType\",\n    value: function getToastMsgWithGameEventType(gameEventType) {\n      var apiName = {\n        saveGameData: \"server.save\",\n        loadGameData: \"server.load\",\n        resetGameData: \"server.reset\"\n      }[gameEventType] || gameEventType;\n      var formatMessage = this.props.intl.formatMessage;\n      var toastMsg = formatMessage({\n        id: \"ID_TOAST_API_NOT_SUPPORT\"\n      }, {\n        apiName: apiName\n      });\n      return toastMsg;\n    }\n  }, {\n    key: \"showToast\",\n    value: function showToast(toastMsg) {\n      toast.info(toastMsg, {\n        position: toast.POSITION.BOTTOM_LEFT\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          isPlaying = _this$props2.isPlaying,\n          setIsPlaying = _this$props2.setIsPlaying,\n          setLog = _this$props2.setLog,\n          volume = _this$props2.volume,\n          intl = _this$props2.intl;\n      var _this$state = this.state,\n          gameDoc = _this$state.gameDoc,\n          isDummyRankingVisiable = _this$state.isDummyRankingVisiable,\n          gameWrapperWidth = _this$state.gameWrapperWidth,\n          gameWrapperHeight = _this$state.gameWrapperHeight;\n      var gameIframe = this.gameIframe,\n          handleDummyRankingHide = this.handleDummyRankingHide,\n          onClickVolume = this.onClickVolume,\n          onChangeVolume = this.onChangeVolume;\n      return /*#__PURE__*/React.createElement(View, {\n        volume: volume,\n        onClickVolume: onClickVolume,\n        onChangeVolume: onChangeVolume,\n        isPlaying: isPlaying,\n        setIsPlaying: setIsPlaying,\n        setLog: setLog,\n        gameDoc: gameDoc,\n        gameIframe: gameIframe,\n        handleDummyRankingHide: handleDummyRankingHide,\n        isDummyRankingVisiable: isDummyRankingVisiable,\n        gameWrapperWidth: gameWrapperWidth,\n        gameWrapperHeight: gameWrapperHeight,\n        intl: intl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    project: state.project,\n    isPlaying: state.preview.isPlaying,\n    scene: state.scene,\n    scenes: state.scene.scenes,\n    sceneIds: state.scene.sceneIds,\n    soundIds: state.scene.soundIds,\n    screenMode: state.preview.screenMode,\n    volume: state.preview.volume,\n    editorMode: state.scene.editorMode\n  };\n}, {\n  setIsPlaying: previewActions.setIsPlaying,\n  addNewMsg: chatbotActions.addNewMsg,\n  setGameVolume: previewActions.setGameVolume,\n  setLog: webrtcActions.setLog\n})(injectIntl(Container));","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Game/Container.js"],"names":["React","Component","injectIntl","connect","toast","Popup","showPopUp","WizError","chatbotActions","previewActions","webrtcActions","generatePhaserPage","View","Container","props","resizeView","h","window","innerHeight","w","innerWidth","gameWrapperWidth","gameWrapperHeight","screenMode","setState","handleParseError","error","payload","setIsPlaying","wizError","create","intl","showWizError","setLog","game","showDummyRanking","isDummyRankingVisiable","handleDummyRankingHide","onUpdateSystemVolume","volume","gameIframe","current","contentWindow","postMessage","type","source","data","onClickVolume","e","stopPropagation","setGameVolume","oldVolume","onChangeVolume","parseInt","target","value","gamePageMessageListener","message","handleGameError","gameEvent","JSON","parse","handleGameEvent","state","gameDoc","undefined","createRef","isPlaying","addEventListener","prevProps","showGame","removeEventListener","editorMode","scene","scenes","sceneIds","soundIds","preview","gameMeta","pId","project","isFromWizlab","systemVolume","page","formatMessage","getTitle","getMessage","id","getRankingGameEventTypes","includes","handleRankingGameEvent","getDataGameEventTypes","handleDataGameEvent","rankingGameEvent","toastMsg","getToastMsgWithGameEventType","showToast","dataGameEvent","gameEventType","apiName","saveGameData","loadGameData","resetGameData","info","position","POSITION","BOTTOM_LEFT","addNewMsg"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,oCAAjC;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,OAAO,KAAKC,cAAZ,MAAgC,6BAAhC;AACA,OAAO,KAAKC,cAAZ,MAAgC,6BAAhC;AACA,OAAO,KAAKC,aAAZ,MAA+B,4BAA/B;AACA,SACEC,kBADF,QAEO,+BAFP;AAGA,OAAOC,IAAP,MAAiB,QAAjB;;IAEMC,S;;;;;AACJ,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAqCnBC,UArCmB,GAqCN,YAAM;AACjB,UAAMC,CAAC,GAAGC,MAAM,CAACC,WAAjB;AACA,UAAMC,CAAC,GAAGF,MAAM,CAACG,UAAjB;AACA,UAAIC,gBAAJ,EAAsBC,iBAAtB;;AACA,UAAI,MAAKR,KAAL,CAAWS,UAAX,KAA0B,YAA9B,EAA4C;AAC1C,YAAIP,CAAC,GAAGG,CAAJ,GAAQ,IAAI,EAAhB,EAAoB;AAClBE,UAAAA,gBAAgB,GAAGF,CAAnB;AACAG,UAAAA,iBAAiB,GAAIH,CAAC,GAAG,CAAL,GAAU,EAA9B;AACD,SAHD,MAGO;AACLE,UAAAA,gBAAgB,GAAIL,CAAC,GAAG,EAAL,GAAW,CAA9B;AACAM,UAAAA,iBAAiB,GAAGN,CAApB;AACD;AACF,OARD,MAQO;AACL,YAAIG,CAAC,GAAGH,CAAJ,GAAQ,IAAI,EAAhB,EAAoB;AAClBK,UAAAA,gBAAgB,GAAIL,CAAC,GAAG,CAAL,GAAU,EAA7B;AACAM,UAAAA,iBAAiB,GAAGN,CAApB;AACD,SAHD,MAGO;AACLK,UAAAA,gBAAgB,GAAGF,CAAnB;AACAG,UAAAA,iBAAiB,GAAIH,CAAC,GAAG,EAAL,GAAW,CAA/B;AACD;AACF;;AAEDG,MAAAA,iBAAiB,IAAI,GAArB;AACAD,MAAAA,gBAAgB,IAAI,GAApB;;AACA,YAAKG,QAAL,CAAc;AACZH,QAAAA,gBAAgB,EAAhBA,gBADY;AAEZC,QAAAA,iBAAiB,EAAjBA;AAFY,OAAd;AAID,KAjEkB;;AAAA,UA2FnBG,gBA3FmB,GA2FA,UAACC,KAAD,EAAQC,OAAR,EAAoB;AACrC,YAAKb,KAAL,CAAWc,YAAX,CAAwB,KAAxB;;AACA,UAAMC,QAAQ,GAAGtB,QAAQ,CAACuB,MAAT,CAAgB;AAC/BJ,QAAAA,KAAK,EAALA,KAD+B;AAE/BC,QAAAA,OAAO,EAAPA,OAF+B;AAG/BI,QAAAA,IAAI,EAAE,MAAKjB,KAAL,CAAWiB;AAHc,OAAhB,CAAjB;;AAKA,YAAKC,YAAL,CAAkBH,QAAlB;;AACA,YAAKf,KAAL,CAAWmB,MAAX,CAAkB;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAlB;AACD,KApGkB;;AAAA,UAgHnBC,gBAhHmB,GAgHA,YAAM;AACvB,YAAKX,QAAL,CAAc;AAAEY,QAAAA,sBAAsB,EAAE;AAA1B,OAAd;AACD,KAlHkB;;AAAA,UAmHnBC,sBAnHmB,GAmHM,YAAM;AAC7B,YAAKb,QAAL,CAAc;AAAEY,QAAAA,sBAAsB,EAAE;AAA1B,OAAd;AACD,KArHkB;;AAAA,UAuHnBE,oBAvHmB,GAuHI,UAAAC,MAAM,EAAI;AAC/B,YAAKC,UAAL,CAAgBC,OAAhB,CAAwBC,aAAxB,CAAsCC,WAAtC,CACE;AACEC,QAAAA,IAAI,EAAE,sBADR;AAEEC,QAAAA,MAAM,EAAE,QAFV;AAGEC,QAAAA,IAAI,EAAE,MAAKhC,KAAL,CAAWyB;AAHnB,OADF,EAME,GANF;AAQD,KAhIkB;;AAAA,UAiInBQ,aAjImB,GAiIH,UAAAC,CAAC,EAAI;AACnBA,MAAAA,CAAC,CAACC,eAAF,CAAkB,CAAlB;;AACA,UAAI,MAAKnC,KAAL,CAAWyB,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,cAAKzB,KAAL,CAAWoC,aAAX,CAAyB,MAAKC,SAAL,IAAkB,CAA3C;AACD,OAFD,MAEO;AACL,cAAKA,SAAL,GAAiB,MAAKrC,KAAL,CAAWyB,MAA5B;;AACA,cAAKzB,KAAL,CAAWoC,aAAX,CAAyB,CAAzB;AACD;AACF,KAzIkB;;AAAA,UA0InBE,cA1ImB,GA0IF,UAAAJ,CAAC,EAAI;AACpBA,MAAAA,CAAC,CAACC,eAAF,CAAkB,CAAlB;AACA,UAAMV,MAAM,GAAGc,QAAQ,CAACL,CAAC,CAACM,MAAF,CAASC,KAAV,CAAvB;;AACA,YAAKzC,KAAL,CAAWoC,aAAX,CAAyBX,MAAzB;AACD,KA9IkB;;AAAA,UAgJnBiB,uBAhJmB,GAgJO,UAAAC,OAAO,EAAI;AACnC,UAAIA,OAAO,CAACX,IAAR,CAAaD,MAAb,KAAwB,QAA5B,EAAsC;AACpC,YAAIY,OAAO,CAACX,IAAR,CAAaF,IAAb,KAAsB,OAA1B,EAAmC;AAAA,8BACNa,OAAO,CAACX,IADF;AAAA,cACzBpB,KADyB,iBACzBA,KADyB;AAAA,cAClBC,OADkB,iBAClBA,OADkB;;AAEjC,gBAAK+B,eAAL,CAAqBhC,KAArB,EAA4BC,OAA5B;AACD,SAHD,MAGO,IAAI8B,OAAO,CAACX,IAAR,CAAaF,IAAb,KAAsB,WAA1B,EAAuC;AAC5C,cAAMe,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAO,CAACX,IAAR,CAAaW,OAAxB,CAAlB;;AACA,gBAAKK,eAAL,CAAqBH,SAArB;AACD;AACF;AACF,KA1JkB;;AAEjB,UAAKI,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAEC,SADE;AAEX7B,MAAAA,sBAAsB,EAAE,KAFb;AAGXf,MAAAA,gBAAgB,EAAE,CAHP;AAIXC,MAAAA,iBAAiB,EAAE;AAJR,KAAb;AAMA,UAAKkB,UAAL,GAAkBxC,KAAK,CAACkE,SAAN,EAAlB;AACA,UAAKC,SAAL,GAAiB,KAAjB;AATiB;AAUlB;;;;WACD,6BAAoB;AAClBlD,MAAAA,MAAM,CAACmD,gBAAP,CAAwB,SAAxB,EAAmC,KAAKZ,uBAAxC,EAAiE,KAAjE;AACAvC,MAAAA,MAAM,CAACmD,gBAAP,CAAwB,QAAxB,EAAkC,KAAKrD,UAAvC;AACA,WAAKA,UAAL;AACD;;;WACD,4BAAmBsD,SAAnB,EAA8B;AAAA,wBACE,KAAKvD,KADP;AAAA,UACpBqD,SADoB,eACpBA,SADoB;AAAA,UACT5B,MADS,eACTA,MADS;;AAE5B,UAAI4B,SAAS,KAAKE,SAAS,CAACF,SAA5B,EAAuC;AACrC,YAAIA,SAAJ,EAAe;AACb,eAAKG,QAAL;AACD,SAFD,MAEO;AACL,eAAK9C,QAAL,CAAc;AAAEwC,YAAAA,OAAO,EAAEC,SAAX;AAAsB7B,YAAAA,sBAAsB,EAAE;AAA9C,WAAd;AACD;AACF;;AACD,UAAIG,MAAM,KAAK8B,SAAS,CAAC9B,MAArB,IAA+B4B,SAAnC,EAA8C;AAC5C,aAAK7B,oBAAL;AACD;;AAED,UAAI+B,SAAS,CAAC9C,UAAV,KAAyB,KAAKT,KAAL,CAAWS,UAAxC,EAAoD;AAClD,aAAKR,UAAL;AACD;AACF;;;WACD,gCAAuB;AACrBE,MAAAA,MAAM,CAACsD,mBAAP,CAA2B,SAA3B,EAAsC,KAAKf,uBAA3C;AACAvC,MAAAA,MAAM,CAACsD,mBAAP,CAA2B,QAA3B,EAAqC,KAAKxD,UAA1C;AACD;;;;+EA+BD;AAAA;AAAA;AAAA;AAAA;AAAA;AACQgD,gBAAAA,KADR,GACgB;AACZS,kBAAAA,UAAU,EAAE,KAAK1D,KAAL,CAAW0D,UADX;AAEZC,kBAAAA,KAAK,EAAE;AACLC,oBAAAA,MAAM,EAAE,KAAK5D,KAAL,CAAW4D,MADd;AAELC,oBAAAA,QAAQ,EAAE,KAAK7D,KAAL,CAAW6D,QAFhB;AAGLC,oBAAAA,QAAQ,EAAE,KAAK9D,KAAL,CAAW8D;AAHhB,mBAFK;AAOZC,kBAAAA,OAAO,EAAE;AACPtD,oBAAAA,UAAU,EAAE,KAAKT,KAAL,CAAWS;AADhB;AAPG,iBADhB;AAYQuD,gBAAAA,QAZR,GAYmB;AACfC,kBAAAA,GAAG,EAAE,KAAKjE,KAAL,CAAWkE,OAAX,CAAmBD,GADT;AAEfE,kBAAAA,YAAY,EAAE,IAFC;AAGfC,kBAAAA,YAAY,EAAE,KAAKpE,KAAL,CAAWyB;AAHV,iBAZnB;AAAA;AAAA,uBAiBqB5B,kBAAkB,CACnCoD,KADmC,EAEnCe,QAFmC,EAGnC,KAAKrD,gBAH8B,CAjBvC;;AAAA;AAiBQ0D,gBAAAA,IAjBR;AAsBE,qBAAK3D,QAAL,CAAc;AAAEwC,kBAAAA,OAAO,EAAEmB;AAAX,iBAAd;;AAtBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAkCA,sBAAatD,QAAb,EAAuB;AAAA,UACbuD,aADa,GACK,KAAKtE,KAAL,CAAWiB,IADhB,CACbqD,aADa;AAErB9E,MAAAA,SAAS,eACP,oBAAC,KAAD,CAAO,SAAP;AACE,QAAA,KAAK,EAAEuB,QAAQ,CAACwD,QAAT,EADT;AAEE,QAAA,QAAQ,EAAExD,QAAQ,CAACyD,UAAT,EAFZ;AAGE,QAAA,UAAU,EAAEF,aAAa,CAAC;AAAEG,UAAAA,EAAE,EAAE;AAAN,SAAD,CAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADO,CAAT;AAOD;;;WA6CD,yBAAgB7D,KAAhB,EAAuBC,OAAvB,EAAgC;AAC9B,WAAKb,KAAL,CAAWc,YAAX,CAAwB,KAAxB;AACA,UAAMC,QAAQ,GAAGtB,QAAQ,CAACuB,MAAT,CAAgB;AAC/BJ,QAAAA,KAAK,EAALA,KAD+B;AAE/BC,QAAAA,OAAO,EAAPA,OAF+B;AAG/BI,QAAAA,IAAI,EAAE,KAAKjB,KAAL,CAAWiB;AAHc,OAAhB,CAAjB;AAKA,WAAKC,YAAL,CAAkBH,QAAlB;AACD;;;WACD,yBAAgB8B,SAAhB,EAA2B;AAAA,UACjBf,IADiB,GACRe,SADQ,CACjBf,IADiB;;AAEzB,UAAI,KAAK4C,wBAAL,GAAgCC,QAAhC,CAAyC7C,IAAzC,CAAJ,EAAoD;AAClD,aAAK8C,sBAAL,CAA4B/B,SAA5B;AACD,OAFD,MAEO,IAAI,KAAKgC,qBAAL,GAA6BF,QAA7B,CAAsC7C,IAAtC,CAAJ,EAAiD;AACtD,aAAKgD,mBAAL,CAAyBjC,SAAzB;AACD;AACF;;;WACD,oCAA2B;AACzB,aAAO,CAAC,WAAD,EAAc,aAAd,EAA6B,sBAA7B,EAAqD,aAArD,CAAP;AACD;;;WACD,gCAAuBkC,gBAAvB,EAAyC;AAAA,UAC/BjD,IAD+B,GACtBiD,gBADsB,CAC/BjD,IAD+B;;AAEvC,UAAIA,IAAI,KAAK,aAAT,IAA0BA,IAAI,KAAK,sBAAvC,EAA+D;AAC7D,aAAKT,gBAAL;AACD;;AACD,UAAM2D,QAAQ,GAAG,KAAKC,4BAAL,CAAkCnD,IAAlC,CAAjB;AACA,WAAKoD,SAAL,CAAeF,QAAf;AACD;;;WACD,iCAAwB;AACtB,aAAO,CAAC,cAAD,EAAiB,cAAjB,EAAiC,eAAjC,CAAP;AACD;;;WACD,6BAAoBG,aAApB,EAAmC;AAAA,UACzBrD,IADyB,GAChBqD,aADgB,CACzBrD,IADyB;AAEjC,UAAMkD,QAAQ,GAAG,KAAKC,4BAAL,CAAkCnD,IAAlC,CAAjB;AACA,WAAKoD,SAAL,CAAeF,QAAf;AACD;;;WACD,sCAA6BI,aAA7B,EAA4C;AAC1C,UAAMC,OAAO,GACX;AACEC,QAAAA,YAAY,EAAE,aADhB;AAEEC,QAAAA,YAAY,EAAE,aAFhB;AAGEC,QAAAA,aAAa,EAAE;AAHjB,QAIEJ,aAJF,KAIoBA,aALtB;AAD0C,UAOlCd,aAPkC,GAOhB,KAAKtE,KAAL,CAAWiB,IAPK,CAOlCqD,aAPkC;AAQ1C,UAAMU,QAAQ,GAAGV,aAAa,CAC5B;AAAEG,QAAAA,EAAE,EAAE;AAAN,OAD4B,EAE5B;AAAEY,QAAAA,OAAO,EAAPA;AAAF,OAF4B,CAA9B;AAIA,aAAOL,QAAP;AACD;;;WACD,mBAAUA,QAAV,EAAoB;AAClB1F,MAAAA,KAAK,CAACmG,IAAN,CAAWT,QAAX,EAAqB;AAAEU,QAAAA,QAAQ,EAAEpG,KAAK,CAACqG,QAAN,CAAeC;AAA3B,OAArB;AACD;;;WAED,kBAAS;AAAA,yBACmD,KAAK5F,KADxD;AAAA,UACCqD,SADD,gBACCA,SADD;AAAA,UACYvC,YADZ,gBACYA,YADZ;AAAA,UAC0BK,MAD1B,gBAC0BA,MAD1B;AAAA,UACkCM,MADlC,gBACkCA,MADlC;AAAA,UAC0CR,IAD1C,gBAC0CA,IAD1C;AAAA,wBAOH,KAAKgC,KAPF;AAAA,UAGLC,OAHK,eAGLA,OAHK;AAAA,UAIL5B,sBAJK,eAILA,sBAJK;AAAA,UAKLf,gBALK,eAKLA,gBALK;AAAA,UAMLC,iBANK,eAMLA,iBANK;AAAA,UASLkB,UATK,GAaH,IAbG,CASLA,UATK;AAAA,UAULH,sBAVK,GAaH,IAbG,CAULA,sBAVK;AAAA,UAWLU,aAXK,GAaH,IAbG,CAWLA,aAXK;AAAA,UAYLK,cAZK,GAaH,IAbG,CAYLA,cAZK;AAcP,0BACE,oBAAC,IAAD;AACE,QAAA,MAAM,EAAEb,MADV;AAEE,QAAA,aAAa,EAAEQ,aAFjB;AAGE,QAAA,cAAc,EAAEK,cAHlB;AAIE,QAAA,SAAS,EAAEe,SAJb;AAKE,QAAA,YAAY,EAAEvC,YALhB;AAME,QAAA,MAAM,EAAEK,MANV;AAOE,QAAA,OAAO,EAAE+B,OAPX;AAQE,QAAA,UAAU,EAAExB,UARd;AASE,QAAA,sBAAsB,EAAEH,sBAT1B;AAUE,QAAA,sBAAsB,EAAED,sBAV1B;AAWE,QAAA,gBAAgB,EAAEf,gBAXpB;AAYE,QAAA,iBAAiB,EAAEC,iBAZrB;AAaE,QAAA,IAAI,EAAES,IAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAiBD;;;;EAjPqB9B,S;;AAoPxB,eAAeE,OAAO,CACpB,UAAA4D,KAAK;AAAA,SAAK;AACRiB,IAAAA,OAAO,EAAEjB,KAAK,CAACiB,OADP;AAERb,IAAAA,SAAS,EAAEJ,KAAK,CAACc,OAAN,CAAcV,SAFjB;AAGRM,IAAAA,KAAK,EAAEV,KAAK,CAACU,KAHL;AAIRC,IAAAA,MAAM,EAAEX,KAAK,CAACU,KAAN,CAAYC,MAJZ;AAKRC,IAAAA,QAAQ,EAAEZ,KAAK,CAACU,KAAN,CAAYE,QALd;AAMRC,IAAAA,QAAQ,EAAEb,KAAK,CAACU,KAAN,CAAYG,QANd;AAORrD,IAAAA,UAAU,EAAEwC,KAAK,CAACc,OAAN,CAActD,UAPlB;AAQRgB,IAAAA,MAAM,EAAEwB,KAAK,CAACc,OAAN,CAActC,MARd;AASRiC,IAAAA,UAAU,EAAET,KAAK,CAACU,KAAN,CAAYD;AAThB,GAAL;AAAA,CADe,EAYpB;AACE5C,EAAAA,YAAY,EAAEnB,cAAc,CAACmB,YAD/B;AAEE+E,EAAAA,SAAS,EAAEnG,cAAc,CAACmG,SAF5B;AAGEzD,EAAAA,aAAa,EAAEzC,cAAc,CAACyC,aAHhC;AAIEjB,EAAAA,MAAM,EAAEvB,aAAa,CAACuB;AAJxB,CAZoB,CAAP,CAkBb/B,UAAU,CAACW,SAAD,CAlBG,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { injectIntl } from \"react-intl\";\nimport { connect } from \"react-redux\";\nimport { toast } from \"react-toastify\";\n\nimport Popup, { showPopUp } from \"../../../../Common/Component/PopUp\";\nimport WizError from \"../../../../Common/Util/WizError\";\nimport * as chatbotActions from \"../../Store/Reducer/chatbot\";\nimport * as previewActions from \"../../Store/Reducer/preview\";\nimport * as webrtcActions from \"../../Store/Reducer/webrtc\";\nimport {\n  generatePhaserPage\n} from \"../../utils/gamePageGenerator\";\nimport View from \"./View\";\n\nclass Container extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameDoc: undefined,\n      isDummyRankingVisiable: false,\n      gameWrapperWidth: 0,\n      gameWrapperHeight: 0\n    };\n    this.gameIframe = React.createRef();\n    this.isPlaying = false;\n  }\n  componentDidMount() {\n    window.addEventListener(\"message\", this.gamePageMessageListener, false);\n    window.addEventListener(\"resize\", this.resizeView);\n    this.resizeView();\n  }\n  componentDidUpdate(prevProps) {\n    const { isPlaying, volume } = this.props;\n    if (isPlaying !== prevProps.isPlaying) {\n      if (isPlaying) {\n        this.showGame();\n      } else {\n        this.setState({ gameDoc: undefined, isDummyRankingVisiable: false });\n      }\n    }\n    if (volume !== prevProps.volume && isPlaying) {\n      this.onUpdateSystemVolume();\n    }\n\n    if (prevProps.screenMode !== this.props.screenMode) {\n      this.resizeView();\n    }\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"message\", this.gamePageMessageListener);\n    window.removeEventListener(\"resize\", this.resizeView);\n  }\n  resizeView = () => {\n    const h = window.innerHeight;\n    const w = window.innerWidth;\n    let gameWrapperWidth, gameWrapperHeight;\n    if (this.props.screenMode === \"HORIZONTAL\") {\n      if (h / w > 9 / 16) {\n        gameWrapperWidth = w;\n        gameWrapperHeight = (w * 9) / 16;\n      } else {\n        gameWrapperWidth = (h * 16) / 9;\n        gameWrapperHeight = h;\n      }\n    } else {\n      if (w / h > 9 / 16) {\n        gameWrapperWidth = (h * 9) / 16;\n        gameWrapperHeight = h;\n      } else {\n        gameWrapperWidth = w;\n        gameWrapperHeight = (w * 16) / 9;\n      }\n    }\n\n    gameWrapperHeight *= 0.8;\n    gameWrapperWidth *= 0.8;\n    this.setState({\n      gameWrapperWidth,\n      gameWrapperHeight\n    });\n  };\n\n  async showGame() {\n    const state = {\n      editorMode: this.props.editorMode,\n      scene: {\n        scenes: this.props.scenes,\n        sceneIds: this.props.sceneIds,\n        soundIds: this.props.soundIds\n      },\n      preview: {\n        screenMode: this.props.screenMode\n      }\n    };\n    const gameMeta = {\n      pId: this.props.project.pId,\n      isFromWizlab: true,\n      systemVolume: this.props.volume\n    };\n    const page = await generatePhaserPage(\n      state,\n      gameMeta,\n      this.handleParseError\n    );\n    this.setState({ gameDoc: page });\n  }\n  handleParseError = (error, payload) => {\n    this.props.setIsPlaying(false);\n    const wizError = WizError.create({\n      error,\n      payload,\n      intl: this.props.intl\n    });\n    this.showWizError(wizError);\n    this.props.setLog({ game: false });\n  };\n  showWizError(wizError) {\n    const { formatMessage } = this.props.intl;\n    showPopUp(\n      <Popup.OneButton\n        title={wizError.getTitle()}\n        subtitle={wizError.getMessage()}\n        buttonName={formatMessage({ id: \"ID_BUILDER_ALERT_CONFIRMBTN\" })}\n      />\n    );\n  }\n\n  showDummyRanking = () => {\n    this.setState({ isDummyRankingVisiable: true });\n  };\n  handleDummyRankingHide = () => {\n    this.setState({ isDummyRankingVisiable: false });\n  };\n\n  onUpdateSystemVolume = volume => {\n    this.gameIframe.current.contentWindow.postMessage(\n      {\n        type: \"onUpdateSystemVolume\",\n        source: \"wizlab\",\n        data: this.props.volume\n      },\n      \"*\"\n    );\n  };\n  onClickVolume = e => {\n    e.stopPropagation(0);\n    if (this.props.volume === 0) {\n      this.props.setGameVolume(this.oldVolume || 0);\n    } else {\n      this.oldVolume = this.props.volume;\n      this.props.setGameVolume(0);\n    }\n  };\n  onChangeVolume = e => {\n    e.stopPropagation(0);\n    const volume = parseInt(e.target.value);\n    this.props.setGameVolume(volume);\n  };\n\n  gamePageMessageListener = message => {\n    if (message.data.source === \"wizlab\") {\n      if (message.data.type === \"error\") {\n        const { error, payload } = message.data;\n        this.handleGameError(error, payload);\n      } else if (message.data.type === \"gameEvent\") {\n        const gameEvent = JSON.parse(message.data.message);\n        this.handleGameEvent(gameEvent);\n      }\n    }\n  };\n  handleGameError(error, payload) {\n    this.props.setIsPlaying(false);\n    const wizError = WizError.create({\n      error,\n      payload,\n      intl: this.props.intl\n    });\n    this.showWizError(wizError);\n  }\n  handleGameEvent(gameEvent) {\n    const { type } = gameEvent;\n    if (this.getRankingGameEventTypes().includes(type)) {\n      this.handleRankingGameEvent(gameEvent);\n    } else if (this.getDataGameEventTypes().includes(type)) {\n      this.handleDataGameEvent(gameEvent);\n    }\n  }\n  getRankingGameEventTypes() {\n    return [\"saveScore\", \"showRanking\", \"showRankingAscending\", \"hideRanking\"];\n  }\n  handleRankingGameEvent(rankingGameEvent) {\n    const { type } = rankingGameEvent;\n    if (type === \"showRanking\" || type === \"showRankingAscending\") {\n      this.showDummyRanking();\n    }\n    const toastMsg = this.getToastMsgWithGameEventType(type);\n    this.showToast(toastMsg);\n  }\n  getDataGameEventTypes() {\n    return [\"saveGameData\", \"loadGameData\", \"resetGameData\"];\n  }\n  handleDataGameEvent(dataGameEvent) {\n    const { type } = dataGameEvent;\n    const toastMsg = this.getToastMsgWithGameEventType(type);\n    this.showToast(toastMsg);\n  }\n  getToastMsgWithGameEventType(gameEventType) {\n    const apiName =\n      {\n        saveGameData: \"server.save\",\n        loadGameData: \"server.load\",\n        resetGameData: \"server.reset\"\n      }[gameEventType] || gameEventType;\n    const { formatMessage } = this.props.intl;\n    const toastMsg = formatMessage(\n      { id: \"ID_TOAST_API_NOT_SUPPORT\" },\n      { apiName }\n    );\n    return toastMsg;\n  }\n  showToast(toastMsg) {\n    toast.info(toastMsg, { position: toast.POSITION.BOTTOM_LEFT });\n  }\n\n  render() {\n    const { isPlaying, setIsPlaying, setLog, volume, intl } = this.props;\n    const {\n      gameDoc,\n      isDummyRankingVisiable,\n      gameWrapperWidth,\n      gameWrapperHeight\n    } = this.state;\n    const {\n      gameIframe,\n      handleDummyRankingHide,\n      onClickVolume,\n      onChangeVolume\n    } = this;\n    return (\n      <View\n        volume={volume}\n        onClickVolume={onClickVolume}\n        onChangeVolume={onChangeVolume}\n        isPlaying={isPlaying}\n        setIsPlaying={setIsPlaying}\n        setLog={setLog}\n        gameDoc={gameDoc}\n        gameIframe={gameIframe}\n        handleDummyRankingHide={handleDummyRankingHide}\n        isDummyRankingVisiable={isDummyRankingVisiable}\n        gameWrapperWidth={gameWrapperWidth}\n        gameWrapperHeight={gameWrapperHeight}\n        intl={intl}\n      />\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    project: state.project,\n    isPlaying: state.preview.isPlaying,\n    scene: state.scene,\n    scenes: state.scene.scenes,\n    sceneIds: state.scene.sceneIds,\n    soundIds: state.scene.soundIds,\n    screenMode: state.preview.screenMode,\n    volume: state.preview.volume,\n    editorMode: state.scene.editorMode\n  }),\n  {\n    setIsPlaying: previewActions.setIsPlaying,\n    addNewMsg: chatbotActions.addNewMsg,\n    setGameVolume: previewActions.setGameVolume,\n    setLog: webrtcActions.setLog\n  }\n)(injectIntl(Container));\n"]},"metadata":{},"sourceType":"module"}