{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport imageCompression from \"browser-image-compression\";\nexport function mergeImages(_x, _x2, _x3) {\n  return _mergeImages.apply(this, arguments);\n}\n\nfunction _mergeImages() {\n  _mergeImages = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(images, frameWidth, frameHeight) {\n    var canvas, context, width, height, i, image, dataURL, blob;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            canvas = document.createElement('canvas');\n            canvas.width = frameWidth * images.length;\n            canvas.height = frameHeight;\n            context = canvas.getContext(\"2d\");\n            width = frameWidth;\n            height = frameHeight;\n\n            for (i = 0; i < images.length; i++) {\n              image = new Image();\n              image.src = images[i];\n              context.drawImage(image, i * width, 0, width, height);\n            } //to blob\n\n\n            dataURL = canvas.toDataURL(\"image/png\");\n            blob = toBlob(dataURL);\n            return _context.abrupt(\"return\", blob);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _mergeImages.apply(this, arguments);\n}\n\nexport function compress(_x4) {\n  return _compress.apply(this, arguments);\n}\n\nfunction _compress() {\n  _compress = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(blob) {\n    var compressOptions, compressedFile;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            compressOptions = {\n              useWebWorker: true\n            };\n            _context2.prev = 1;\n            _context2.next = 4;\n            return imageCompression(blob, compressOptions);\n\n          case 4:\n            compressedFile = _context2.sent;\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](1);\n            console.log(_context2.t0);\n\n          case 10:\n            return _context2.abrupt(\"return\", compressedFile ? compressedFile : blob);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this, [[1, 7]]);\n  }));\n  return _compress.apply(this, arguments);\n}\n\nexport function toBlob(dataURL) {\n  var byteString;\n\n  if (dataURL.split(\",\")[0].indexOf(\"base64\") >= 0) {\n    byteString = atob(dataURL.split(\",\")[1]);\n  } else {\n    byteString = unescape(dataURL.split(\",\")[1]);\n  }\n\n  var mimeString = dataURL.split(\",\")[0].split(\":\")[1].split(\";\")[0];\n  var ia = new Uint8Array(byteString.length);\n\n  for (var i = 0; i < byteString.length; i++) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n\n  var blob = new Blob([ia], {\n    type: mimeString\n  });\n  return blob;\n}","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/SpriteBox/Component/CustomSprite/ImageUtil.js"],"names":["imageCompression","mergeImages","images","frameWidth","frameHeight","canvas","document","createElement","width","length","height","context","getContext","i","image","Image","src","drawImage","dataURL","toDataURL","blob","toBlob","compress","compressOptions","useWebWorker","compressedFile","console","log","byteString","split","indexOf","atob","unescape","mimeString","ia","Uint8Array","charCodeAt","Blob","type"],"mappings":"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","sourcesContent":["import imageCompression from \"browser-image-compression\";\n\nexport async function mergeImages(images, frameWidth, frameHeight) {\n  const canvas = document.createElement('canvas');\n  canvas.width = frameWidth * images.length;\n  canvas.height = frameHeight;\n  const context = canvas.getContext(\"2d\");\n  \n  const width = frameWidth;\n  const height = frameHeight;\n\n  for(let i=0; i<images.length; i++) {\n    const image = new Image();\n    image.src = images[i];\n    context.drawImage(image, i*width, 0, width, height);\n  }\n  \n  //to blob\n  const dataURL = canvas.toDataURL(\"image/png\");\n  const blob = toBlob(dataURL);\n  return blob;\n}\n\nexport async function compress(blob) {\n  const compressOptions = { useWebWorker: true };\n  let compressedFile;\n  try {\n    compressedFile = await imageCompression(blob, compressOptions);\n  } catch (error) {\n    console.log(error);\n  }\n  return compressedFile ? compressedFile : blob;\n}\n\nexport function toBlob(dataURL) {\n  let byteString;\n  if (dataURL.split(\",\")[0].indexOf(\"base64\") >= 0) {\n    byteString = atob(dataURL.split(\",\")[1]);\n  } else {\n    byteString = unescape(dataURL.split(\",\")[1]);\n  }\n  const mimeString = dataURL.split(\",\")[0].split(\":\")[1].split(\";\")[0];\n  let ia = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i++) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n  const blob = new Blob([ia], { type: mimeString });\n  return blob;\n}"]},"metadata":{},"sourceType":"module"}