{"ast":null,"code":"var _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Python/Components/SceneComponents/Result/index.js\";\nimport React from \"react\";\nimport { injectIntl } from \"react-intl\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport \"./index.scss\";\nimport fileIcon from \"../../../../../Image/newPython/ic-file-png@2x.png\";\nimport successText from \"../../../../../Image/newPython/sucess-top@2x.png\";\n\nvar Result = function Result(props) {\n  var currentScriptData = props.currentScriptData,\n      onClickProjectReplay = props.onClickProjectReplay,\n      onClickNextProjectPlay = props.onClickNextProjectPlay,\n      intl = props.intl,\n      projectId = props.projectId;\n\n  var changePointText = function changePointText(text, pointText) {\n    if (text.includes(pointText)) {\n      var data = text.replaceAll(pointText, \"<span class=\\\"pointText\\\">\".concat(pointText, \"</span>\"));\n      return ReactHtmlParser(data);\n    } else {\n      return text;\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"pythonResult\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"successTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: successText,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"resultInfoWrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"resultTextWrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"iconWrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: fileIcon,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"fileNum\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"x\", currentScriptData.list.length)), React.createElement(\"ul\", {\n    className: \"getItemList\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, currentScriptData.list.map(function (list, i) {\n    return React.createElement(\"li\", {\n      key: list + i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, changePointText(list.text, list.pointText)));\n  }))), React.createElement(\"div\", {\n    className: \"buttonWrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"replayBtn\",\n    onClick: onClickProjectReplay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, intl.formatMessage({\n    id: \"ID_PYTHON_RESULT_REPLAY_BTN\"\n  })), projectId < 107 ? React.createElement(\"button\", {\n    className: \"nextQuestBtn\",\n    onClick: function onClick() {\n      onClickNextProjectPlay();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, intl.formatMessage({\n    id: \"ID_PYTHON_RESULT_NEXT_QUEST_BTN\"\n  })) : null)));\n};\n\nexport default injectIntl(Result);","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Python/Components/SceneComponents/Result/index.js"],"names":["React","injectIntl","ReactHtmlParser","fileIcon","successText","Result","props","currentScriptData","onClickProjectReplay","onClickNextProjectPlay","intl","projectId","changePointText","text","pointText","includes","data","replaceAll","list","length","map","i","formatMessage","id"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { injectIntl } from \"react-intl\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport \"./index.scss\";\n\nimport fileIcon from \"../../../../../Image/newPython/ic-file-png@2x.png\";\nimport successText from \"../../../../../Image/newPython/sucess-top@2x.png\";\n\nconst Result = props => {\n  const { currentScriptData, onClickProjectReplay, onClickNextProjectPlay, intl, projectId } = props;\n\n  const changePointText = (text, pointText) => {\n    if(text.includes(pointText)){\n      let data = text.replaceAll(pointText, `<span class=\"pointText\">${pointText}</span>`);\n      return ReactHtmlParser(data)\n    } else {\n      return text\n    }\n  };\n\n  return (\n    <div className=\"pythonResult\">\n      <p className=\"successTitle\">\n        <img src={successText} alt=\"\" />\n      </p>\n      <div className=\"resultInfoWrapper\">\n        <div className=\"resultTextWrapper\">\n          <div className=\"iconWrapper\">\n            <img src={fileIcon} alt=\"\" />\n            <p className=\"fileNum\">x{currentScriptData.list.length}</p>\n          </div>\n          <ul className=\"getItemList\">\n            {currentScriptData.list.map((list, i) => {\n              return (\n                <li key={list + i}>\n                  <span>\n                    {changePointText(list.text, list.pointText)}\n                  </span>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n\n        <div className=\"buttonWrapper\">\n          <button className=\"replayBtn\" onClick={onClickProjectReplay}>\n            {intl.formatMessage({ id: \"ID_PYTHON_RESULT_REPLAY_BTN\" })}\n          </button>\n          {/* <button className=\"nextQuestBtn\" onClick={() => {onClickNextProjectPlay()}}>\n            {intl.formatMessage({ id: \"ID_PYTHON_RESULT_NEXT_QUEST_BTN\" })}\n          </button> */}\n\n          {/* temp dream_cn python Project limit step5, hide next project play button */}\n          {\n            projectId < 107\n            ? (\n              <button className=\"nextQuestBtn\" onClick={() => {onClickNextProjectPlay()}}>\n                {intl.formatMessage({ id: \"ID_PYTHON_RESULT_NEXT_QUEST_BTN\" })}\n              </button>\n            )\n            : null\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default injectIntl(Result);\n"]},"metadata":{},"sourceType":"module"}