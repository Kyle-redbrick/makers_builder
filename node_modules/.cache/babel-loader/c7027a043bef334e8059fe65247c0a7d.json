{"ast":null,"code":"import _inherits from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _objectSpread from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Common/Util/NotificationSocket.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport io from \"socket.io-client\";\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\nimport { ToastContainer } from \"react-toastify\";\nimport store from \"../../Common/Store\";\nimport UserInfo from \"../../Common/Component/UserInfo\";\nimport { URL } from \"./Constant\";\n\nvar NotificationSocket = /*#__PURE__*/function () {\n  function NotificationSocket() {\n    _classCallCheck(this, NotificationSocket);\n\n    this.userId = null;\n    this.socket = null;\n    this.subscribers = [];\n    this.shouldStoreNoti = false;\n  }\n\n  _createClass(NotificationSocket, [{\n    key: \"connect\",\n    value: function connect(userId) {// if (!this.checkUserIdValid(userId)) return;\n      // this.socket = io(URL.NOTIFICATION_SOCKET_SERVER, {});\n      // this.socket.on(\"connect\", () => {\n      //   this.userId = userId;\n      //   this.socket.emit(\"join\", userId);\n      // });\n      // this.socket.on(\"wizlabNoti\", noti => {\n      //   if (this.checkNotiValid(noti)) {\n      //     if (this.shouldStoreNoti) {\n      //       this.storeNoti(noti);\n      //     } else {\n      //       for (let i in this.subscribers) {\n      //         this.subscribers[i](noti);\n      //       }\n      //     }\n      //   }\n      // });\n      // this.socket.on(\"forceDisconnect\", this.disconnect.bind(this));\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.socket) {\n        this.socket.disconnect();\n        this.socket = null;\n      }\n    }\n  }, {\n    key: \"isConnected\",\n    value: function isConnected() {\n      return !!this.socket;\n    }\n  }, {\n    key: \"checkUserIdValid\",\n    value: function checkUserIdValid(id) {\n      return !!id;\n    }\n  }, {\n    key: \"checkNotiValid\",\n    value: function checkNotiValid(noti) {\n      if (this.userId !== noti.userId) {\n        return false;\n      }\n\n      if (noti.storedAt) {\n        if (moment().diff(noti.storedAt, \"hours\") > 1) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(callback) {\n      this.subscribers.push(callback);\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(callback) {\n      var index = this.subscribers.indexOf(callback);\n\n      if (index >= 0) {\n        this.subscribers.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"storeNoti\",\n    value: function storeNoti(noti) {\n      var notis = this.getStoredNotis();\n      notis.push(_objectSpread({}, noti, {\n        storedAt: moment().format()\n      }));\n      this.setStoredNotis(notis);\n    }\n  }, {\n    key: \"getStoredNotis\",\n    value: function getStoredNotis() {\n      var stringifiedNotis = localStorage.getItem(\"notification\");\n\n      if (stringifiedNotis) {\n        try {\n          return JSON.parse(stringifiedNotis);\n        } catch (_unused) {\n          return [];\n        }\n      } else {\n        return [];\n      }\n    }\n  }, {\n    key: \"popStoredNotis\",\n    value: function popStoredNotis() {// const notis = this.getStoredNotis();\n      // this.deleteStoredNoti();\n      // notis.forEach(noti => {\n      //   if (this.checkNotiValid(noti)) {\n      //     for (let i in this.subscribers) {\n      //       this.subscribers[i](noti);\n      //     }\n      //   }\n      // });\n    }\n  }, {\n    key: \"setStoredNotis\",\n    value: function setStoredNotis(notis) {\n      localStorage.setItem(\"notification\", JSON.stringify(notis));\n    }\n  }, {\n    key: \"deleteStoredNoti\",\n    value: function deleteStoredNoti() {\n      localStorage.removeItem(\"notification\");\n    }\n  }]);\n\n  return NotificationSocket;\n}();\n\nvar notificationSocket = new NotificationSocket();\nexport default notificationSocket;\n\nvar Provider = /*#__PURE__*/function (_Component) {\n  _inherits(Provider, _Component);\n\n  var _super = _createSuper(Provider);\n\n  function Provider() {\n    var _this;\n\n    _classCallCheck(this, Provider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.onUserLogin = function () {\n      notificationSocket.connect(_this.props.id);\n    };\n\n    _this.onUserLogout = function () {\n      notificationSocket.disconnect();\n    };\n\n    _this.onBrowserBlur = function () {\n      notificationSocket.shouldStoreNoti = true;\n    };\n\n    _this.onBrowserFocus = function () {// notificationSocket.shouldStoreNoti = false;\n      // notificationSocket.popStoredNotis();\n      // if (!notificationSocket.isConnected()) {\n      //   if (this.props.id) {\n      //     notificationSocket.connect(this.props.id);\n      //   }\n      // }\n    };\n\n    return _this;\n  }\n\n  _createClass(Provider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.id) {//notificationSocket.connect(this.props.id);\n      } // notificationSocket.subscribe(noti => {\n      //   toast.success(noti.message, {\n      //     position: toast.POSITION.BOTTOM_LEFT,\n      //     autoClose: 8000,\n      //     pauseOnHover: true\n      //   });\n      // });\n\n\n      window.addEventListener(\"blur\", this.onBrowserBlur);\n      window.addEventListener(\"focus\", this.onBrowserFocus);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"blur\", this.onBrowserBlur);\n      window.removeEventListener(\"focus\", this.onBrowserFocus);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.id !== prevProps.id) {\n        if (this.props.id) {\n          this.onUserLogin();\n        } else {\n          this.onUserLogout();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(ToastContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Provider;\n}(Component);\n\nvar ConnectedProvider = connect(function (state) {\n  var _state$userinfo = state.userinfo,\n      id = _state$userinfo.id,\n      email = _state$userinfo.email;\n  return {\n    id: id,\n    email: email\n  };\n})(Provider);\nexport var NotificationProvider = function NotificationProvider() {\n  return React.createElement(ReduxProvider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(UserInfo, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(ConnectedProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Common/Util/NotificationSocket.js"],"names":["React","Component","Provider","ReduxProvider","io","moment","connect","ToastContainer","store","UserInfo","URL","NotificationSocket","userId","socket","subscribers","shouldStoreNoti","disconnect","id","noti","storedAt","diff","callback","push","index","indexOf","splice","notis","getStoredNotis","format","setStoredNotis","stringifiedNotis","localStorage","getItem","JSON","parse","setItem","stringify","removeItem","notificationSocket","onUserLogin","props","onUserLogout","onBrowserBlur","onBrowserFocus","window","addEventListener","removeEventListener","prevProps","ConnectedProvider","state","userinfo","email","NotificationProvider"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport io from \"socket.io-client\";\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\nimport { ToastContainer } from \"react-toastify\";\nimport store from \"../../Common/Store\";\nimport UserInfo from \"../../Common/Component/UserInfo\";\nimport { URL } from \"./Constant\";\n\nclass NotificationSocket {\n  constructor() {\n    this.userId = null;\n    this.socket = null;\n    this.subscribers = [];\n    this.shouldStoreNoti = false;\n  }\n\n  connect(userId) {\n    // if (!this.checkUserIdValid(userId)) return;\n    // this.socket = io(URL.NOTIFICATION_SOCKET_SERVER, {});\n    // this.socket.on(\"connect\", () => {\n    //   this.userId = userId;\n    //   this.socket.emit(\"join\", userId);\n    // });\n    // this.socket.on(\"wizlabNoti\", noti => {\n    //   if (this.checkNotiValid(noti)) {\n    //     if (this.shouldStoreNoti) {\n    //       this.storeNoti(noti);\n    //     } else {\n    //       for (let i in this.subscribers) {\n    //         this.subscribers[i](noti);\n    //       }\n    //     }\n    //   }\n    // });\n    // this.socket.on(\"forceDisconnect\", this.disconnect.bind(this));\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n  isConnected() {\n    return !!this.socket;\n  }\n  checkUserIdValid(id) {\n    return !!id;\n  }\n  checkNotiValid(noti) {\n    if (this.userId !== noti.userId) {\n      return false;\n    }\n    if (noti.storedAt) {\n      if (moment().diff(noti.storedAt, \"hours\") > 1) {\n        return false;\n      }\n    }\n    return true;\n  }\n  subscribe(callback) {\n    this.subscribers.push(callback);\n  }\n  unsubscribe(callback) {\n    const index = this.subscribers.indexOf(callback);\n    if (index >= 0) {\n      this.subscribers.splice(index, 1);\n    }\n  }\n  storeNoti(noti) {\n    const notis = this.getStoredNotis();\n    notis.push({ ...noti, storedAt: moment().format() });\n    this.setStoredNotis(notis);\n  }\n  getStoredNotis() {\n    const stringifiedNotis = localStorage.getItem(\"notification\");\n    if (stringifiedNotis) {\n      try {\n        return JSON.parse(stringifiedNotis);\n      } catch {\n        return [];\n      }\n    } else {\n      return [];\n    }\n  }\n  popStoredNotis() {\n    // const notis = this.getStoredNotis();\n    // this.deleteStoredNoti();\n    // notis.forEach(noti => {\n    //   if (this.checkNotiValid(noti)) {\n    //     for (let i in this.subscribers) {\n    //       this.subscribers[i](noti);\n    //     }\n    //   }\n    // });\n  }\n  setStoredNotis(notis) {\n    localStorage.setItem(\"notification\", JSON.stringify(notis));\n  }\n  deleteStoredNoti() {\n    localStorage.removeItem(\"notification\");\n  }\n}\nconst notificationSocket = new NotificationSocket();\nexport default notificationSocket;\n\nclass Provider extends Component {\n  componentDidMount() {\n    if (this.props.id) {\n      //notificationSocket.connect(this.props.id);\n    }\n    // notificationSocket.subscribe(noti => {\n    //   toast.success(noti.message, {\n    //     position: toast.POSITION.BOTTOM_LEFT,\n    //     autoClose: 8000,\n    //     pauseOnHover: true\n    //   });\n    // });\n    window.addEventListener(\"blur\", this.onBrowserBlur);\n    window.addEventListener(\"focus\", this.onBrowserFocus);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"blur\", this.onBrowserBlur);\n    window.removeEventListener(\"focus\", this.onBrowserFocus);\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.id !== prevProps.id) {\n      if (this.props.id) {\n        this.onUserLogin();\n      } else {\n        this.onUserLogout();\n      }\n    }\n  }\n  onUserLogin = () => {\n    notificationSocket.connect(this.props.id);\n  };\n  onUserLogout = () => {\n    notificationSocket.disconnect();\n  };\n  onBrowserBlur = () => {\n    notificationSocket.shouldStoreNoti = true;\n  };\n  onBrowserFocus = () => {\n    // notificationSocket.shouldStoreNoti = false;\n    // notificationSocket.popStoredNotis();\n    // if (!notificationSocket.isConnected()) {\n    //   if (this.props.id) {\n    //     notificationSocket.connect(this.props.id);\n    //   }\n    // }\n  };\n\n  render() {\n    return (\n      <>\n        <ToastContainer />\n      </>\n    );\n  }\n}\n\nconst ConnectedProvider = connect(state => {\n  const { id, email } = state.userinfo;\n  return { id, email };\n})(Provider);\n\nexport const NotificationProvider = () => {\n  return (\n    <ReduxProvider store={store}>\n      <UserInfo>\n        <ConnectedProvider />\n      </UserInfo>\n    </ReduxProvider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}