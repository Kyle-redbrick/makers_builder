{"ast":null,"code":"import _toConsumableArray from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ActionType, WORLD } from \"../../../../Common/Util/Constant\";\nvar SET_PROJECT = ActionType.SET_PROJECT,\n    SET_TEMPLATE = ActionType.SET_TEMPLATE,\n    RESET_PROJECT = ActionType.RESET_PROJECT,\n    ADD_SCENE = ActionType.ADD_SCENE,\n    COPY_SCENE = ActionType.COPY_SCENE,\n    SET_WORLD_SIZE = ActionType.SET_WORLD_SIZE,\n    ADD_SPRITES = ActionType.ADD_SPRITES,\n    ADD_SOUNDS = ActionType.ADD_SOUNDS,\n    REMOVE_SOUND = ActionType.REMOVE_SOUND,\n    REORDER_SPRITE = ActionType.REORDER_SPRITE,\n    REMOVE_SPRITE = ActionType.REMOVE_SPRITE,\n    REMOVE_ALL_SPRITE = ActionType.REMOVE_ALL_SPRITE,\n    REMOVE_SCENE = ActionType.REMOVE_SCENE,\n    REORDER_SCENE = ActionType.REORDER_SCENE,\n    SET_SPRITE_PREVIEW = ActionType.SET_SPRITE_PREVIEW,\n    SET_EDITOR_MODE = ActionType.SET_EDITOR_MODE,\n    SET_SPRITE_CODE = ActionType.SET_SPRITE_CODE,\n    SET_GLOBAL_VARIABLE = ActionType.SET_GLOBAL_VARIABLE,\n    SET_SPRITE_BLOCKXML = ActionType.SET_SPRITE_BLOCKXML,\n    LOCK_SPRITE = ActionType.LOCK_SPRITE,\n    REMOVE_ALL_SOUND = ActionType.REMOVE_ALL_SOUND,\n    SET_SCENE_PREVIEW = ActionType.SET_SCENE_PREVIEW,\n    HIDE_LOCK_SPRITE = ActionType.HIDE_LOCK_SPRITE,\n    ADD_GLOBAL_VARIABLE = ActionType.ADD_GLOBAL_VARIABLE,\n    REMOVE_GLOBAL_VARIABLE = ActionType.REMOVE_GLOBAL_VARIABLE;\nexport var addSounds = function addSounds(soundInfos) {\n  return {\n    type: ADD_SOUNDS,\n    soundInfos: soundInfos\n  };\n};\nexport var removeSound = function removeSound(soundId) {\n  return {\n    type: REMOVE_SOUND,\n    soundId: soundId\n  };\n};\nexport var addSprites = function addSprites(sceneId, spriteInfos) {\n  return {\n    type: ADD_SPRITES,\n    sceneId: sceneId,\n    spriteInfos: spriteInfos\n  };\n};\nexport var reorderSprite = function reorderSprite(sceneId, fromIndex, toIndex) {\n  return {\n    type: REORDER_SPRITE,\n    sceneId: sceneId,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  };\n};\nexport var removeSprite = function removeSprite(sceneId, spriteName) {\n  return {\n    type: REMOVE_SPRITE,\n    sceneId: sceneId,\n    spriteName: spriteName\n  };\n};\nexport var removeAllSprite = function removeAllSprite(sceneId) {\n  return {\n    type: REMOVE_ALL_SPRITE,\n    sceneId: sceneId\n  };\n};\nexport var setEditorMode = function setEditorMode(editorMode, scenes) {\n  return {\n    type: SET_EDITOR_MODE,\n    editorMode: editorMode,\n    scenes: scenes\n  };\n};\nexport var setSpriteCode = function setSpriteCode(sceneId, spriteName, code) {\n  return {\n    type: SET_SPRITE_CODE,\n    sceneId: sceneId,\n    spriteName: spriteName,\n    code: code\n  };\n};\nexport var setGlobalVariable = function setGlobalVariable(sceneId, spriteName, global) {\n  return {\n    type: SET_GLOBAL_VARIABLE,\n    sceneId: sceneId,\n    spriteName: spriteName,\n    global: global\n  };\n};\nexport var setSpriteBlockXml = function setSpriteBlockXml(sceneId, spriteName, blockXml) {\n  return {\n    type: SET_SPRITE_BLOCKXML,\n    sceneId: sceneId,\n    spriteName: spriteName,\n    blockXml: blockXml\n  };\n};\nexport var setSpritePreview = function setSpritePreview(sceneId, spriteName, preview) {\n  return {\n    type: SET_SPRITE_PREVIEW,\n    sceneId: sceneId,\n    spriteName: spriteName,\n    preview: preview\n  };\n}; // create actions\n\nexport var addScene = function addScene(sceneId, sceneName) {\n  return {\n    type: ADD_SCENE,\n    sceneId: sceneId,\n    sceneName: sceneName\n  };\n};\nexport var copyScene = function copyScene(sceneId, sceneName, selectedSceneId) {\n  return {\n    type: COPY_SCENE,\n    sceneId: sceneId,\n    sceneName: sceneName,\n    selectedSceneId: selectedSceneId\n  };\n};\nexport var removeScene = function removeScene(sceneId) {\n  return {\n    type: REMOVE_SCENE,\n    sceneId: sceneId\n  };\n};\nexport var reorderScene = function reorderScene(fromIndex, toIndex) {\n  return {\n    type: REORDER_SCENE,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  };\n};\nexport var lockSprite = function lockSprite(sceneId, spriteName) {\n  return {\n    type: LOCK_SPRITE,\n    sceneId: sceneId,\n    spriteName: spriteName\n  };\n};\nexport var hideLockSprite = function hideLockSprite(sceneId, isHide) {\n  return {\n    type: HIDE_LOCK_SPRITE,\n    sceneId: sceneId,\n    isHide: isHide\n  };\n};\nexport var removeAllSound = function removeAllSound() {\n  return {\n    type: REMOVE_ALL_SOUND\n  };\n};\nexport var setScenePreview = function setScenePreview(sceneId, preview) {\n  return {\n    type: SET_SCENE_PREVIEW,\n    sceneId: sceneId,\n    preview: preview\n  };\n};\nexport var addGlobalVariable = function addGlobalVariable(name) {\n  return {\n    type: ADD_GLOBAL_VARIABLE,\n    name: name\n  };\n};\nexport var removeGlobalVariable = function removeGlobalVariable(name) {\n  return {\n    type: REMOVE_GLOBAL_VARIABLE,\n    name: name\n  };\n};\nexport var setWorldSize = function setWorldSize(sceneId, width, height) {\n  return {\n    type: SET_WORLD_SIZE,\n    sceneId: sceneId,\n    width: width,\n    height: height\n  };\n}; // initialize states\n// {\n//   scenes: {\n//     [sceneId]: {\n//       sceneName: ...,\n//       sprites: {\n//         [spriteName]: {\n//           type: ...,\n//           assetId: ...,\n//           code: ...,\n//           preview: {...}\n//         }\n//       },\n//       spriteIds: [...]\n//     }\n//   },\n//   sceneIds: [...],\n//   soundIds: [...],\n// };\n\nvar initialState = {\n  scenes: {},\n  sceneIds: [],\n  soundIds: [],\n  soundNames: {}\n};\n\nvar deleteByKey = function deleteByKey(obj, deleteKey) {\n  return Object.keys(obj).reduce(function (acc, key) {\n    if (key !== deleteKey) {\n      return _objectSpread({}, acc, _defineProperty({}, key, obj[key]));\n    }\n\n    return acc;\n  }, {});\n};\n\nvar changeOrder = function changeOrder(array, from, to) {\n  var movedItem = array.find(function (item, index) {\n    return index === from;\n  });\n  var remainingItems = array.filter(function (item, index) {\n    return index !== from;\n  });\n  return [].concat(_toConsumableArray(remainingItems.slice(0, to)), [movedItem], _toConsumableArray(remainingItems.slice(to)));\n};\n\nvar scene = function scene() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var nextState = {};\n\n  switch (action.type) {\n    case RESET_PROJECT:\n      return initialState;\n\n    case SET_PROJECT:\n    case SET_TEMPLATE:\n      var _scene = action.project.state && action.project.state.scene;\n\n      if (_scene) {\n        if (!_scene.editorMode) _scene.editorMode = \"javascript\";\n        return _objectSpread({}, _scene, {\n          timeStamp: new Date().getTime()\n        });\n      } else {\n        return state;\n      }\n\n    case ADD_SOUNDS:\n      var newSoundIds = [];\n      var newSoundNames = {};\n      action.soundInfos.forEach(function (info) {\n        var assetId = info.assetId,\n            name = info.name;\n\n        if (!state.soundIds.includes(assetId)) {\n          newSoundIds.push(assetId);\n          newSoundNames[assetId] = name;\n        }\n      });\n      var soundNames = state.soundNames ? state.soundNames : {};\n      return _objectSpread({}, state, {\n        soundIds: [].concat(_toConsumableArray(state.soundIds), newSoundIds),\n        soundNames: _objectSpread({}, soundNames, newSoundNames)\n      });\n\n    case REMOVE_SOUND:\n      return _objectSpread({}, state, {\n        soundIds: state.soundIds.filter(function (item) {\n          return item !== action.soundId;\n        }),\n        soundNames: state.soundNames ? deleteByKey(state.soundNames, action.soundId) : {}\n      });\n\n    case ADD_SPRITES:\n      var newSprites = {};\n      var newSpriteIds = [];\n      action.spriteInfos.forEach(function (info) {\n        var name = info.name,\n            type = info.type,\n            assetId = info.assetId;\n        var code = info.code ? info.code : \"\";\n        var preview = info.preview ? info.preview : {};\n        newSprites[name] = {\n          type: type,\n          assetId: assetId,\n          code: code,\n          preview: preview\n        };\n        newSpriteIds.push(name);\n      });\n      nextState = _objectSpread({}, state, {\n        scenes: _objectSpread({}, state.scenes, _defineProperty({}, action.sceneId, _objectSpread({}, state.scenes[action.sceneId], {\n          sprites: _objectSpread({}, state.scenes[action.sceneId].sprites, newSprites),\n          spriteIds: [].concat(_toConsumableArray(state.scenes[action.sceneId].spriteIds), newSpriteIds)\n        })))\n      });\n      return nextState;\n\n    case REORDER_SPRITE:\n      nextState = _objectSpread({}, state, {\n        scenes: _objectSpread({}, state.scenes, _defineProperty({}, action.sceneId, _objectSpread({}, state.scenes[action.sceneId], {\n          spriteIds: changeOrder(state.scenes[action.sceneId].spriteIds, action.fromIndex, action.toIndex)\n        })))\n      });\n      return nextState;\n\n    case REORDER_SCENE:\n      nextState = _objectSpread({}, state, {\n        sceneIds: changeOrder(state.sceneIds, action.fromIndex, action.toIndex)\n      });\n      return nextState;\n\n    case REMOVE_SPRITE:\n      nextState = _objectSpread({}, state, {\n        scenes: _objectSpread({}, state.scenes, _defineProperty({}, action.sceneId, _objectSpread({}, state.scenes[action.sceneId], {\n          sprites: deleteByKey(state.scenes[action.sceneId].sprites, action.spriteName),\n          spriteIds: state.scenes[action.sceneId].spriteIds.filter(function (item) {\n            return item !== action.spriteName;\n          })\n        })))\n      });\n      return nextState;\n\n    case REMOVE_ALL_SPRITE:\n      nextState = _objectSpread({}, state, {\n        scenes: _objectSpread({}, state.scenes, _defineProperty({}, action.sceneId, _objectSpread({}, state.scenes[action.sceneId], {\n          sprites: {},\n          spriteIds: []\n        })))\n      });\n      return nextState;\n\n    case SET_EDITOR_MODE:\n      if (action.scenes) {\n        return _objectSpread({}, state, {\n          scenes: action.scenes,\n          editorMode: action.editorMode\n        });\n      } else {\n        return _objectSpread({}, state, {\n          editorMode: action.editorMode\n        });\n      }\n\n    case SET_SPRITE_CODE:\n      return _objectSpread({}, state, {\n        scenes: _objectSpread({}, state.scenes, _defineProperty({}, action.sceneId, _objectSpread({}, state.scenes[action.sceneId], {\n          spriteIds: _toConsumableArray(state.scenes[action.sceneId].spriteIds),\n          sprites: _objectSpread({}, state.scenes[action.sceneId].sprites, _defineProperty({}, action.spriteName, _objectSpread({}, state.scenes[action.sceneId].sprites[action.spriteName], {\n            code: action.code\n          })))\n        })))\n      });\n\n    case SET_GLOBAL_VARIABLE:\n      return _objectSpread({}, state, {\n        scenes: _objectSpread({}, state.scenes, _defineProperty({}, action.sceneId, _objectSpread({}, state.scenes[action.sceneId], {\n          global: action.global\n        })))\n      });\n\n    case SET_SPRITE_BLOCKXML:\n      return _objectSpread({}, state, {\n        scenes: _objectSpread({}, state.scenes, _defineProperty({}, action.sceneId, _objectSpread({}, state.scenes[action.sceneId], {\n          spriteIds: _toConsumableArray(state.scenes[action.sceneId].spriteIds),\n          sprites: _objectSpread({}, state.scenes[action.sceneId].sprites, _defineProperty({}, action.spriteName, _objectSpread({}, state.scenes[action.sceneId].sprites[action.spriteName], {\n            blockXml: action.blockXml\n          })))\n        })))\n      });\n\n    case SET_SPRITE_PREVIEW:\n      if (!state.scenes[action.sceneId].sprites[action.spriteName]) {\n        return state;\n      }\n\n      return _objectSpread({}, state, {\n        scenes: _objectSpread({}, state.scenes, _defineProperty({}, action.sceneId, _objectSpread({}, state.scenes[action.sceneId], {\n          spriteIds: _toConsumableArray(state.scenes[action.sceneId].spriteIds),\n          sprites: _objectSpread({}, state.scenes[action.sceneId].sprites, _defineProperty({}, action.spriteName, _objectSpread({}, state.scenes[action.sceneId].sprites[action.spriteName], {\n            preview: _objectSpread({}, state.scenes[action.sceneId].sprites[action.spriteName].preview, action.preview)\n          })))\n        })))\n      });\n\n    case REMOVE_SCENE:\n      nextState = _objectSpread({}, state, {\n        scenes: deleteByKey(state.scenes, action.sceneId),\n        sceneIds: state.sceneIds.filter(function (item) {\n          return item !== action.sceneId;\n        })\n      });\n      return nextState;\n\n    case ADD_SCENE:\n      return _objectSpread({}, state, {\n        scenes: _objectSpread({}, state.scenes, _defineProperty({}, action.sceneId, {\n          sceneName: action.sceneName,\n          worldWidth: WORLD.DEFAULT_WIDTH,\n          worldHeight: WORLD.DEFAULT_HEIGHT,\n          sprites: {},\n          spriteIds: []\n        })),\n        sceneIds: [].concat(_toConsumableArray(state.sceneIds), [action.sceneId])\n      });\n\n    case COPY_SCENE:\n      var sceneToCopy = state.scenes[action.selectedSceneId];\n      var newScene = JSON.parse(JSON.stringify(sceneToCopy));\n      newScene.sceneName = [action.sceneId];\n      return _objectSpread({}, state, {\n        scenes: _objectSpread({}, state.scenes, _defineProperty({}, action.sceneId, newScene)),\n        sceneIds: [].concat(_toConsumableArray(state.sceneIds), [action.sceneId])\n      });\n\n    case SET_WORLD_SIZE:\n      var worldWidth = parseInt(action.width);\n      var worldHeight = parseInt(action.height);\n      return _objectSpread({}, state, {\n        scenes: _objectSpread({}, state.scenes, _defineProperty({}, action.sceneId, _objectSpread({}, state.scenes[action.sceneId], {\n          worldWidth: worldWidth,\n          worldHeight: worldHeight\n        })))\n      });\n\n    case LOCK_SPRITE:\n      nextState = _objectSpread({}, state, {\n        scenes: _objectSpread({}, state.scenes, _defineProperty({}, action.sceneId, _objectSpread({}, state.scenes[action.sceneId], {\n          sprites: _objectSpread({}, state.scenes[action.sceneId].sprites, _defineProperty({}, action.spriteName, _objectSpread({}, state.scenes[action.sceneId].sprites[action.spriteName], {\n            locked: state.scenes[action.sceneId].sprites[action.spriteName].locked ? !state.scenes[action.sceneId].sprites[action.spriteName].locked : true\n          })))\n        })))\n      });\n      return nextState;\n\n    case REMOVE_ALL_SOUND:\n      nextState = _objectSpread({}, state, {\n        soundIds: [],\n        soundNames: {}\n      });\n      return nextState;\n\n    case SET_SCENE_PREVIEW:\n      return _objectSpread({}, state, {\n        scenes: _objectSpread({}, state.scenes, _defineProperty({}, action.sceneId, _objectSpread({}, state.scenes[action.sceneId], {\n          preview: action.preview\n        })))\n      });\n\n    case HIDE_LOCK_SPRITE:\n      if (action.sceneId) {\n        return _objectSpread({}, state, {\n          scenes: _objectSpread({}, state.scenes, _defineProperty({}, action.sceneId, _objectSpread({}, state.scenes[action.sceneId], {\n            isHiddenLockSprites: action.isHide\n          })))\n        });\n      } else {\n        Object.keys(state.scenes).forEach(function (key) {\n          var scene = state.scenes[key];\n          scene.isHiddenLockSprites = action.isHide;\n        });\n        return _objectSpread({}, state);\n      }\n\n    case ADD_GLOBAL_VARIABLE:\n      var globalVariables = state.globalVariables ? _toConsumableArray(state.globalVariables) : [];\n\n      if (globalVariables.indexOf(action.name) < 0) {\n        globalVariables.push(action.name);\n      }\n\n      return _objectSpread({}, state, {\n        globalVariables: globalVariables\n      });\n\n    case REMOVE_GLOBAL_VARIABLE:\n      if (state.globalVariables) {\n        var _globalVariables = _toConsumableArray(state.globalVariables);\n\n        var index = _globalVariables.indexOf(action.name);\n\n        _globalVariables.splice(index, 1);\n\n        return _objectSpread({}, state, {\n          globalVariables: _globalVariables\n        });\n      } else {\n        return _objectSpread({}, state);\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default scene;","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Store/Reducer/scene.js"],"names":["ActionType","WORLD","SET_PROJECT","SET_TEMPLATE","RESET_PROJECT","ADD_SCENE","COPY_SCENE","SET_WORLD_SIZE","ADD_SPRITES","ADD_SOUNDS","REMOVE_SOUND","REORDER_SPRITE","REMOVE_SPRITE","REMOVE_ALL_SPRITE","REMOVE_SCENE","REORDER_SCENE","SET_SPRITE_PREVIEW","SET_EDITOR_MODE","SET_SPRITE_CODE","SET_GLOBAL_VARIABLE","SET_SPRITE_BLOCKXML","LOCK_SPRITE","REMOVE_ALL_SOUND","SET_SCENE_PREVIEW","HIDE_LOCK_SPRITE","ADD_GLOBAL_VARIABLE","REMOVE_GLOBAL_VARIABLE","addSounds","soundInfos","type","removeSound","soundId","addSprites","sceneId","spriteInfos","reorderSprite","fromIndex","toIndex","removeSprite","spriteName","removeAllSprite","setEditorMode","editorMode","scenes","setSpriteCode","code","setGlobalVariable","global","setSpriteBlockXml","blockXml","setSpritePreview","preview","addScene","sceneName","copyScene","selectedSceneId","removeScene","reorderScene","lockSprite","hideLockSprite","isHide","removeAllSound","setScenePreview","addGlobalVariable","name","removeGlobalVariable","setWorldSize","width","height","initialState","sceneIds","soundIds","soundNames","deleteByKey","obj","deleteKey","Object","keys","reduce","acc","key","changeOrder","array","from","to","movedItem","find","item","index","remainingItems","filter","slice","scene","state","action","nextState","project","timeStamp","Date","getTime","newSoundIds","newSoundNames","forEach","info","assetId","includes","push","newSprites","newSpriteIds","sprites","spriteIds","worldWidth","DEFAULT_WIDTH","worldHeight","DEFAULT_HEIGHT","sceneToCopy","newScene","JSON","parse","stringify","parseInt","locked","isHiddenLockSprites","globalVariables","indexOf","splice"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,KAArB,QAAkC,kCAAlC;IAGEC,W,GAyBEF,U,CAzBFE,W;IACAC,Y,GAwBEH,U,CAxBFG,Y;IACAC,a,GAuBEJ,U,CAvBFI,a;IACAC,S,GAsBEL,U,CAtBFK,S;IACAC,U,GAqBEN,U,CArBFM,U;IACAC,c,GAoBEP,U,CApBFO,c;IACAC,W,GAmBER,U,CAnBFQ,W;IACAC,U,GAkBET,U,CAlBFS,U;IACAC,Y,GAiBEV,U,CAjBFU,Y;IACAC,c,GAgBEX,U,CAhBFW,c;IACAC,a,GAeEZ,U,CAfFY,a;IACAC,iB,GAcEb,U,CAdFa,iB;IACAC,Y,GAaEd,U,CAbFc,Y;IACAC,a,GAYEf,U,CAZFe,a;IACAC,kB,GAWEhB,U,CAXFgB,kB;IACAC,e,GAUEjB,U,CAVFiB,e;IACAC,e,GASElB,U,CATFkB,e;IACAC,mB,GAQEnB,U,CARFmB,mB;IACAC,mB,GAOEpB,U,CAPFoB,mB;IACAC,W,GAMErB,U,CANFqB,W;IACAC,gB,GAKEtB,U,CALFsB,gB;IACAC,iB,GAIEvB,U,CAJFuB,iB;IACAC,gB,GAGExB,U,CAHFwB,gB;IACAC,mB,GAEEzB,U,CAFFyB,mB;IACAC,sB,GACE1B,U,CADF0B,sB;AAGF,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,UAAU;AAAA,SAAK;AACtCC,IAAAA,IAAI,EAAEpB,UADgC;AAEtCmB,IAAAA,UAAU,EAAEA;AAF0B,GAAL;AAAA,CAA5B;AAKP,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,CAAAC,OAAO;AAAA,SAAK;AACrCF,IAAAA,IAAI,EAAEnB,YAD+B;AAErCqB,IAAAA,OAAO,EAAEA;AAF4B,GAAL;AAAA,CAA3B;AAKP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD,EAAUC,WAAV;AAAA,SAA2B;AACnDL,IAAAA,IAAI,EAAErB,WAD6C;AAEnDyB,IAAAA,OAAO,EAAEA,OAF0C;AAGnDC,IAAAA,WAAW,EAAEA;AAHsC,GAA3B;AAAA,CAAnB;AAMP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACF,OAAD,EAAUG,SAAV,EAAqBC,OAArB;AAAA,SAAkC;AAC7DR,IAAAA,IAAI,EAAElB,cADuD;AAE7DsB,IAAAA,OAAO,EAAEA,OAFoD;AAG7DG,IAAAA,SAAS,EAAEA,SAHkD;AAI7DC,IAAAA,OAAO,EAAEA;AAJoD,GAAlC;AAAA,CAAtB;AAOP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACL,OAAD,EAAUM,UAAV;AAAA,SAA0B;AACpDV,IAAAA,IAAI,EAAEjB,aAD8C;AAEpDqB,IAAAA,OAAO,EAAEA,OAF2C;AAGpDM,IAAAA,UAAU,EAAEA;AAHwC,GAA1B;AAAA,CAArB;AAMP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAP,OAAO;AAAA,SAAK;AACzCJ,IAAAA,IAAI,EAAEhB,iBADmC;AAEzCoB,IAAAA,OAAO,EAAEA;AAFgC,GAAL;AAAA,CAA/B;AAKP,OAAO,IAAMQ,aAAa,GAAG,SAAhBA,aAAgB,CAACC,UAAD,EAAaC,MAAb;AAAA,SAAyB;AACpDd,IAAAA,IAAI,EAAEZ,eAD8C;AAEpDyB,IAAAA,UAAU,EAAEA,UAFwC;AAGpDC,IAAAA,MAAM,EAAEA;AAH4C,GAAzB;AAAA,CAAtB;AAMP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACX,OAAD,EAAUM,UAAV,EAAsBM,IAAtB;AAAA,SAAgC;AAC3DhB,IAAAA,IAAI,EAAEX,eADqD;AAE3De,IAAAA,OAAO,EAAEA,OAFkD;AAG3DM,IAAAA,UAAU,EAAEA,UAH+C;AAI3DM,IAAAA,IAAI,EAAEA;AAJqD,GAAhC;AAAA,CAAtB;AAOP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACb,OAAD,EAAUM,UAAV,EAAsBQ,MAAtB;AAAA,SAAkC;AACjElB,IAAAA,IAAI,EAAEV,mBAD2D;AAEjEc,IAAAA,OAAO,EAAEA,OAFwD;AAGjEM,IAAAA,UAAU,EAAEA,UAHqD;AAIjEQ,IAAAA,MAAM,EAAEA;AAJyD,GAAlC;AAAA,CAA1B;AAOP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACf,OAAD,EAAUM,UAAV,EAAsBU,QAAtB;AAAA,SAAoC;AACnEpB,IAAAA,IAAI,EAAET,mBAD6D;AAEnEa,IAAAA,OAAO,EAAEA,OAF0D;AAGnEM,IAAAA,UAAU,EAAEA,UAHuD;AAInEU,IAAAA,QAAQ,EAAEA;AAJyD,GAApC;AAAA,CAA1B;AAOP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACjB,OAAD,EAAUM,UAAV,EAAsBY,OAAtB;AAAA,SAAmC;AACjEtB,IAAAA,IAAI,EAAEb,kBAD2D;AAEjEiB,IAAAA,OAAO,EAAEA,OAFwD;AAGjEM,IAAAA,UAAU,EAAEA,UAHqD;AAIjEY,IAAAA,OAAO,EAAEA;AAJwD,GAAnC;AAAA,CAAzB,C,CAOP;;AACA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACnB,OAAD,EAAUoB,SAAV;AAAA,SAAyB;AAC/CxB,IAAAA,IAAI,EAAExB,SADyC;AAE/C4B,IAAAA,OAAO,EAAEA,OAFsC;AAG/CoB,IAAAA,SAAS,EAAEA;AAHoC,GAAzB;AAAA,CAAjB;AAMP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACrB,OAAD,EAAUoB,SAAV,EAAqBE,eAArB;AAAA,SAA0C;AACjE1B,IAAAA,IAAI,EAAEvB,UAD2D;AAEjE2B,IAAAA,OAAO,EAAEA,OAFwD;AAGjEoB,IAAAA,SAAS,EAAEA,SAHsD;AAIjEE,IAAAA,eAAe,EAAEA;AAJgD,GAA1C;AAAA,CAAlB;AAOP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAvB,OAAO;AAAA,SAAK;AACrCJ,IAAAA,IAAI,EAAEf,YAD+B;AAErCmB,IAAAA,OAAO,EAAEA;AAF4B,GAAL;AAAA,CAA3B;AAKP,OAAO,IAAMwB,YAAY,GAAG,SAAfA,YAAe,CAACrB,SAAD,EAAYC,OAAZ;AAAA,SAAyB;AACnDR,IAAAA,IAAI,EAAEd,aAD6C;AAEnDqB,IAAAA,SAAS,EAAEA,SAFwC;AAGnDC,IAAAA,OAAO,EAAEA;AAH0C,GAAzB;AAAA,CAArB;AAMP,OAAO,IAAMqB,UAAU,GAAG,SAAbA,UAAa,CAACzB,OAAD,EAAUM,UAAV;AAAA,SAA0B;AAClDV,IAAAA,IAAI,EAAER,WAD4C;AAElDY,IAAAA,OAAO,EAAEA,OAFyC;AAGlDM,IAAAA,UAAU,EAAEA;AAHsC,GAA1B;AAAA,CAAnB;AAMP,OAAO,IAAMoB,cAAc,GAAG,SAAjBA,cAAiB,CAAC1B,OAAD,EAAU2B,MAAV;AAAA,SAAsB;AAClD/B,IAAAA,IAAI,EAAEL,gBAD4C;AAElDS,IAAAA,OAAO,EAAEA,OAFyC;AAGlD2B,IAAAA,MAAM,EAAEA;AAH0C,GAAtB;AAAA,CAAvB;AAKP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAO;AACnChC,IAAAA,IAAI,EAAEP;AAD6B,GAAP;AAAA,CAAvB;AAIP,OAAO,IAAMwC,eAAe,GAAG,SAAlBA,eAAkB,CAAC7B,OAAD,EAAUkB,OAAV;AAAA,SAAuB;AACpDtB,IAAAA,IAAI,EAAEN,iBAD8C;AAEpDU,IAAAA,OAAO,EAAPA,OAFoD;AAGpDkB,IAAAA,OAAO,EAAPA;AAHoD,GAAvB;AAAA,CAAxB;AAMP,OAAO,IAAMY,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,IAAI;AAAA,SAAK;AACxCnC,IAAAA,IAAI,EAAEJ,mBADkC;AAExCuC,IAAAA,IAAI,EAAJA;AAFwC,GAAL;AAAA,CAA9B;AAKP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAD,IAAI;AAAA,SAAK;AAC3CnC,IAAAA,IAAI,EAAEH,sBADqC;AAE3CsC,IAAAA,IAAI,EAAJA;AAF2C,GAAL;AAAA,CAAjC;AAKP,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe,CAACjC,OAAD,EAAUkC,KAAV,EAAiBC,MAAjB;AAAA,SAA6B;AACvDvC,IAAAA,IAAI,EAAEtB,cADiD;AAEvD0B,IAAAA,OAAO,EAAPA,OAFuD;AAGvDkC,IAAAA,KAAK,EAALA,KAHuD;AAIvDC,IAAAA,MAAM,EAANA;AAJuD,GAA7B;AAAA,CAArB,C,CAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,YAAY,GAAG;AACnB1B,EAAAA,MAAM,EAAE,EADW;AAEnB2B,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,QAAQ,EAAE,EAHS;AAInBC,EAAAA,UAAU,EAAE;AAJO,CAArB;;AAOA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAMC,SAAN,EAAoB;AACtC,SAAOC,MAAM,CAACC,IAAP,CAAYH,GAAZ,EAAiBI,MAAjB,CAAwB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC3C,QAAIA,GAAG,KAAKL,SAAZ,EAAuB;AACrB,+BAAYI,GAAZ,sBAAkBC,GAAlB,EAAwBN,GAAG,CAACM,GAAD,CAA3B;AACD;;AACD,WAAOD,GAAP;AACD,GALM,EAKJ,EALI,CAAP;AAMD,CAPD;;AASA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,IAAR,EAAcC,EAAd,EAAqB;AACvC,MAAMC,SAAS,GAAGH,KAAK,CAACI,IAAN,CAAW,UAACC,IAAD,EAAOC,KAAP;AAAA,WAAiBA,KAAK,KAAKL,IAA3B;AAAA,GAAX,CAAlB;AACA,MAAMM,cAAc,GAAGP,KAAK,CAACQ,MAAN,CAAa,UAACH,IAAD,EAAOC,KAAP;AAAA,WAAiBA,KAAK,KAAKL,IAA3B;AAAA,GAAb,CAAvB;AACA,sCACKM,cAAc,CAACE,KAAf,CAAqB,CAArB,EAAwBP,EAAxB,CADL,IAEEC,SAFF,sBAGKI,cAAc,CAACE,KAAf,CAAqBP,EAArB,CAHL;AAKD,CARD;;AAUA,IAAMQ,KAAK,GAAG,SAARA,KAAQ,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBxB,YAAyB;AAAA,MAAXyB,MAAW;AAC9C,MAAIC,SAAS,GAAG,EAAhB;;AAEA,UAAQD,MAAM,CAACjE,IAAf;AACE,SAAKzB,aAAL;AACE,aAAOiE,YAAP;;AACF,SAAKnE,WAAL;AACA,SAAKC,YAAL;AACE,UAAIyF,MAAK,GAAGE,MAAM,CAACE,OAAP,CAAeH,KAAf,IAAwBC,MAAM,CAACE,OAAP,CAAeH,KAAf,CAAqBD,KAAzD;;AACA,UAAIA,MAAJ,EAAW;AACT,YAAI,CAACA,MAAK,CAAClD,UAAX,EAAuBkD,MAAK,CAAClD,UAAN,GAAmB,YAAnB;AACvB,iCACKkD,MADL;AAEEK,UAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,OAAX;AAFb;AAID,OAND,MAMO;AACL,eAAON,KAAP;AACD;;AACH,SAAKpF,UAAL;AACE,UAAI2F,WAAW,GAAG,EAAlB;AACA,UAAIC,aAAa,GAAG,EAApB;AACAP,MAAAA,MAAM,CAAClE,UAAP,CAAkB0E,OAAlB,CAA0B,UAAAC,IAAI,EAAI;AAAA,YACxBC,OADwB,GACND,IADM,CACxBC,OADwB;AAAA,YACfxC,IADe,GACNuC,IADM,CACfvC,IADe;;AAEhC,YAAI,CAAC6B,KAAK,CAACtB,QAAN,CAAekC,QAAf,CAAwBD,OAAxB,CAAL,EAAuC;AACrCJ,UAAAA,WAAW,CAACM,IAAZ,CAAiBF,OAAjB;AACAH,UAAAA,aAAa,CAACG,OAAD,CAAb,GAAyBxC,IAAzB;AACD;AACF,OAND;AAOA,UAAMQ,UAAU,GAAGqB,KAAK,CAACrB,UAAN,GAAmBqB,KAAK,CAACrB,UAAzB,GAAsC,EAAzD;AACA,+BACKqB,KADL;AAEEtB,QAAAA,QAAQ,+BAAMsB,KAAK,CAACtB,QAAZ,GAAyB6B,WAAzB,CAFV;AAGE5B,QAAAA,UAAU,oBAAMA,UAAN,EAAqB6B,aAArB;AAHZ;;AAKF,SAAK3F,YAAL;AACE,+BACKmF,KADL;AAEEtB,QAAAA,QAAQ,EAAEsB,KAAK,CAACtB,QAAN,CAAemB,MAAf,CAAsB,UAAAH,IAAI;AAAA,iBAAIA,IAAI,KAAKO,MAAM,CAAC/D,OAApB;AAAA,SAA1B,CAFZ;AAGEyC,QAAAA,UAAU,EAAEqB,KAAK,CAACrB,UAAN,GAAmBC,WAAW,CACxCoB,KAAK,CAACrB,UADkC,EAExCsB,MAAM,CAAC/D,OAFiC,CAA9B,GAGR;AANN;;AAQF,SAAKvB,WAAL;AACE,UAAMmG,UAAU,GAAG,EAAnB;AACA,UAAMC,YAAY,GAAG,EAArB;AAEAd,MAAAA,MAAM,CAAC5D,WAAP,CAAmBoE,OAAnB,CAA2B,UAAAC,IAAI,EAAI;AAAA,YACzBvC,IADyB,GACDuC,IADC,CACzBvC,IADyB;AAAA,YACnBnC,IADmB,GACD0E,IADC,CACnB1E,IADmB;AAAA,YACb2E,OADa,GACDD,IADC,CACbC,OADa;AAEjC,YAAM3D,IAAI,GAAG0D,IAAI,CAAC1D,IAAL,GAAY0D,IAAI,CAAC1D,IAAjB,GAAwB,EAArC;AACA,YAAMM,OAAO,GAAGoD,IAAI,CAACpD,OAAL,GAAeoD,IAAI,CAACpD,OAApB,GAA8B,EAA9C;AACAwD,QAAAA,UAAU,CAAC3C,IAAD,CAAV,GAAmB;AAAEnC,UAAAA,IAAI,EAAJA,IAAF;AAAQ2E,UAAAA,OAAO,EAAPA,OAAR;AAAiB3D,UAAAA,IAAI,EAAJA,IAAjB;AAAuBM,UAAAA,OAAO,EAAPA;AAAvB,SAAnB;AACAyD,QAAAA,YAAY,CAACF,IAAb,CAAkB1C,IAAlB;AACD,OAND;AAQA+B,MAAAA,SAAS,qBACJF,KADI;AAEPlD,QAAAA,MAAM,oBACDkD,KAAK,CAAClD,MADL,sBAEHmD,MAAM,CAAC7D,OAFJ,oBAGC4D,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,CAHD;AAIF4E,UAAAA,OAAO,oBACFhB,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B4E,OAD3B,EAEFF,UAFE,CAJL;AAQFG,UAAAA,SAAS,+BACJjB,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B6E,SADzB,GAEJF,YAFI;AARP;AAFC,QAAT;AAiBA,aAAOb,SAAP;;AACF,SAAKpF,cAAL;AACEoF,MAAAA,SAAS,qBACJF,KADI;AAEPlD,QAAAA,MAAM,oBACDkD,KAAK,CAAClD,MADL,sBAEHmD,MAAM,CAAC7D,OAFJ,oBAGC4D,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,CAHD;AAIF6E,UAAAA,SAAS,EAAE7B,WAAW,CACpBY,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B6E,SADT,EAEpBhB,MAAM,CAAC1D,SAFa,EAGpB0D,MAAM,CAACzD,OAHa;AAJpB;AAFC,QAAT;AAcA,aAAO0D,SAAP;;AACF,SAAKhF,aAAL;AACEgF,MAAAA,SAAS,qBACJF,KADI;AAEPvB,QAAAA,QAAQ,EAAEW,WAAW,CAACY,KAAK,CAACvB,QAAP,EAAiBwB,MAAM,CAAC1D,SAAxB,EAAmC0D,MAAM,CAACzD,OAA1C;AAFd,QAAT;AAIA,aAAO0D,SAAP;;AACF,SAAKnF,aAAL;AACEmF,MAAAA,SAAS,qBACJF,KADI;AAEPlD,QAAAA,MAAM,oBACDkD,KAAK,CAAClD,MADL,sBAEHmD,MAAM,CAAC7D,OAFJ,oBAGC4D,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,CAHD;AAIF4E,UAAAA,OAAO,EAAEpC,WAAW,CAClBoB,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B4E,OADX,EAElBf,MAAM,CAACvD,UAFW,CAJlB;AAQFuE,UAAAA,SAAS,EAAEjB,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B6E,SAA7B,CAAuCpB,MAAvC,CACT,UAAAH,IAAI;AAAA,mBAAIA,IAAI,KAAKO,MAAM,CAACvD,UAApB;AAAA,WADK;AART;AAFC,QAAT;AAgBA,aAAOwD,SAAP;;AAEF,SAAKlF,iBAAL;AACEkF,MAAAA,SAAS,qBACJF,KADI;AAEPlD,QAAAA,MAAM,oBACDkD,KAAK,CAAClD,MADL,sBAEHmD,MAAM,CAAC7D,OAFJ,oBAGC4D,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,CAHD;AAIF4E,UAAAA,OAAO,EAAE,EAJP;AAKFC,UAAAA,SAAS,EAAE;AALT;AAFC,QAAT;AAWA,aAAOf,SAAP;;AACF,SAAK9E,eAAL;AACE,UAAI6E,MAAM,CAACnD,MAAX,EAAmB;AACjB,iCACKkD,KADL;AAEElD,UAAAA,MAAM,EAAEmD,MAAM,CAACnD,MAFjB;AAGED,UAAAA,UAAU,EAAEoD,MAAM,CAACpD;AAHrB;AAKD,OAND,MAMO;AACL,iCACKmD,KADL;AAEEnD,UAAAA,UAAU,EAAEoD,MAAM,CAACpD;AAFrB;AAID;;AACH,SAAKxB,eAAL;AACE,+BACK2E,KADL;AAEElD,QAAAA,MAAM,oBACDkD,KAAK,CAAClD,MADL,sBAEHmD,MAAM,CAAC7D,OAFJ,oBAGC4D,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,CAHD;AAIF6E,UAAAA,SAAS,qBAAMjB,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B6E,SAAnC,CAJP;AAKFD,UAAAA,OAAO,oBACFhB,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B4E,OAD3B,sBAEJf,MAAM,CAACvD,UAFH,oBAGAsD,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B4E,OAA7B,CAAqCf,MAAM,CAACvD,UAA5C,CAHA;AAIHM,YAAAA,IAAI,EAAEiD,MAAM,CAACjD;AAJV;AALL;AAFR;;AAiBF,SAAK1B,mBAAL;AACE,+BACK0E,KADL;AAEElD,QAAAA,MAAM,oBACDkD,KAAK,CAAClD,MADL,sBAEHmD,MAAM,CAAC7D,OAFJ,oBAGC4D,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,CAHD;AAIFc,UAAAA,MAAM,EAAE+C,MAAM,CAAC/C;AAJb;AAFR;;AAUF,SAAK3B,mBAAL;AACE,+BACKyE,KADL;AAEElD,QAAAA,MAAM,oBACDkD,KAAK,CAAClD,MADL,sBAEHmD,MAAM,CAAC7D,OAFJ,oBAGC4D,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,CAHD;AAIF6E,UAAAA,SAAS,qBAAMjB,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B6E,SAAnC,CAJP;AAKFD,UAAAA,OAAO,oBACFhB,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B4E,OAD3B,sBAEJf,MAAM,CAACvD,UAFH,oBAGAsD,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B4E,OAA7B,CAAqCf,MAAM,CAACvD,UAA5C,CAHA;AAIHU,YAAAA,QAAQ,EAAE6C,MAAM,CAAC7C;AAJd;AALL;AAFR;;AAiBF,SAAKjC,kBAAL;AACE,UAAI,CAAC6E,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B4E,OAA7B,CAAqCf,MAAM,CAACvD,UAA5C,CAAL,EAA8D;AAC5D,eAAOsD,KAAP;AACD;;AACD,+BACKA,KADL;AAEElD,QAAAA,MAAM,oBACDkD,KAAK,CAAClD,MADL,sBAEHmD,MAAM,CAAC7D,OAFJ,oBAGC4D,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,CAHD;AAIF6E,UAAAA,SAAS,qBAAMjB,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B6E,SAAnC,CAJP;AAKFD,UAAAA,OAAO,oBACFhB,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B4E,OAD3B,sBAEJf,MAAM,CAACvD,UAFH,oBAGAsD,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B4E,OAA7B,CAAqCf,MAAM,CAACvD,UAA5C,CAHA;AAIHY,YAAAA,OAAO,oBACF0C,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B4E,OAA7B,CAAqCf,MAAM,CAACvD,UAA5C,EACAY,OAFE,EAGF2C,MAAM,CAAC3C,OAHL;AAJJ;AALL;AAFR;;AAqBF,SAAKrC,YAAL;AACEiF,MAAAA,SAAS,qBACJF,KADI;AAEPlD,QAAAA,MAAM,EAAE8B,WAAW,CAACoB,KAAK,CAAClD,MAAP,EAAemD,MAAM,CAAC7D,OAAtB,CAFZ;AAGPqC,QAAAA,QAAQ,EAAEuB,KAAK,CAACvB,QAAN,CAAeoB,MAAf,CAAsB,UAAAH,IAAI;AAAA,iBAAIA,IAAI,KAAKO,MAAM,CAAC7D,OAApB;AAAA,SAA1B;AAHH,QAAT;AAKA,aAAO8D,SAAP;;AACF,SAAK1F,SAAL;AACE,+BACKwF,KADL;AAEElD,QAAAA,MAAM,oBACDkD,KAAK,CAAClD,MADL,sBAEHmD,MAAM,CAAC7D,OAFJ,EAEc;AAChBoB,UAAAA,SAAS,EAAEyC,MAAM,CAACzC,SADF;AAEhB0D,UAAAA,UAAU,EAAE9G,KAAK,CAAC+G,aAFF;AAGhBC,UAAAA,WAAW,EAAEhH,KAAK,CAACiH,cAHH;AAIhBL,UAAAA,OAAO,EAAE,EAJO;AAKhBC,UAAAA,SAAS,EAAE;AALK,SAFd,EAFR;AAYExC,QAAAA,QAAQ,+BAAMuB,KAAK,CAACvB,QAAZ,IAAsBwB,MAAM,CAAC7D,OAA7B;AAZV;;AAcF,SAAK3B,UAAL;AACE,UAAM6G,WAAW,GAAGtB,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAACvC,eAApB,CAApB;AACA,UAAM6D,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,WAAf,CAAX,CAAjB;AACAC,MAAAA,QAAQ,CAAC/D,SAAT,GAAqB,CAACyC,MAAM,CAAC7D,OAAR,CAArB;AACA,+BACK4D,KADL;AAEElD,QAAAA,MAAM,oBACDkD,KAAK,CAAClD,MADL,sBAEHmD,MAAM,CAAC7D,OAFJ,EAEcmF,QAFd,EAFR;AAME9C,QAAAA,QAAQ,+BAAMuB,KAAK,CAACvB,QAAZ,IAAsBwB,MAAM,CAAC7D,OAA7B;AANV;;AAQF,SAAK1B,cAAL;AACE,UAAIwG,UAAU,GAAGS,QAAQ,CAAC1B,MAAM,CAAC3B,KAAR,CAAzB;AACA,UAAI8C,WAAW,GAAGO,QAAQ,CAAC1B,MAAM,CAAC1B,MAAR,CAA1B;AACA,+BACKyB,KADL;AAEElD,QAAAA,MAAM,oBACDkD,KAAK,CAAClD,MADL,sBAEHmD,MAAM,CAAC7D,OAFJ,oBAGC4D,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,CAHD;AAIF8E,UAAAA,UAAU,EAAVA,UAJE;AAKFE,UAAAA,WAAW,EAAXA;AALE;AAFR;;AAYF,SAAK5F,WAAL;AACE0E,MAAAA,SAAS,qBACJF,KADI;AAEPlD,QAAAA,MAAM,oBACDkD,KAAK,CAAClD,MADL,sBAEHmD,MAAM,CAAC7D,OAFJ,oBAGC4D,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,CAHD;AAIF4E,UAAAA,OAAO,oBACFhB,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B4E,OAD3B,sBAEJf,MAAM,CAACvD,UAFH,oBAGAsD,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B4E,OAA7B,CAAqCf,MAAM,CAACvD,UAA5C,CAHA;AAIHkF,YAAAA,MAAM,EAAE5B,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B4E,OAA7B,CAAqCf,MAAM,CAACvD,UAA5C,EACLkF,MADK,GAEJ,CAAC5B,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,EAA6B4E,OAA7B,CAAqCf,MAAM,CAACvD,UAA5C,EACEkF,MAHC,GAIJ;AARD;AAJL;AAFC,QAAT;AAoBA,aAAO1B,SAAP;;AAEF,SAAKzE,gBAAL;AACEyE,MAAAA,SAAS,qBACJF,KADI;AAEPtB,QAAAA,QAAQ,EAAE,EAFH;AAGPC,QAAAA,UAAU,EAAE;AAHL,QAAT;AAKA,aAAOuB,SAAP;;AACF,SAAKxE,iBAAL;AACE,+BACKsE,KADL;AAEElD,QAAAA,MAAM,oBACDkD,KAAK,CAAClD,MADL,sBAEHmD,MAAM,CAAC7D,OAFJ,oBAGC4D,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,CAHD;AAIFkB,UAAAA,OAAO,EAAE2C,MAAM,CAAC3C;AAJd;AAFR;;AAUF,SAAK3B,gBAAL;AACE,UAAIsE,MAAM,CAAC7D,OAAX,EAAoB;AAClB,iCACK4D,KADL;AAEElD,UAAAA,MAAM,oBACDkD,KAAK,CAAClD,MADL,sBAEHmD,MAAM,CAAC7D,OAFJ,oBAGC4D,KAAK,CAAClD,MAAN,CAAamD,MAAM,CAAC7D,OAApB,CAHD;AAIFyF,YAAAA,mBAAmB,EAAE5B,MAAM,CAAClC;AAJ1B;AAFR;AAUD,OAXD,MAWO;AACLgB,QAAAA,MAAM,CAACC,IAAP,CAAYgB,KAAK,CAAClD,MAAlB,EAA0B2D,OAA1B,CAAkC,UAAAtB,GAAG,EAAI;AACvC,cAAMY,KAAK,GAAGC,KAAK,CAAClD,MAAN,CAAaqC,GAAb,CAAd;AACAY,UAAAA,KAAK,CAAC8B,mBAAN,GAA4B5B,MAAM,CAAClC,MAAnC;AACD,SAHD;AAIA,iCAAYiC,KAAZ;AACD;;AACH,SAAKpE,mBAAL;AACE,UAAMkG,eAAe,GAAG9B,KAAK,CAAC8B,eAAN,sBAChB9B,KAAK,CAAC8B,eADU,IAEpB,EAFJ;;AAGA,UAAIA,eAAe,CAACC,OAAhB,CAAwB9B,MAAM,CAAC9B,IAA/B,IAAuC,CAA3C,EAA8C;AAC5C2D,QAAAA,eAAe,CAACjB,IAAhB,CAAqBZ,MAAM,CAAC9B,IAA5B;AACD;;AACD,+BAAY6B,KAAZ;AAAmB8B,QAAAA,eAAe,EAAfA;AAAnB;;AACF,SAAKjG,sBAAL;AACE,UAAImE,KAAK,CAAC8B,eAAV,EAA2B;AACzB,YAAMA,gBAAe,sBAAO9B,KAAK,CAAC8B,eAAb,CAArB;;AACA,YAAMnC,KAAK,GAAGmC,gBAAe,CAACC,OAAhB,CAAwB9B,MAAM,CAAC9B,IAA/B,CAAd;;AACA2D,QAAAA,gBAAe,CAACE,MAAhB,CAAuBrC,KAAvB,EAA8B,CAA9B;;AACA,iCAAYK,KAAZ;AAAmB8B,UAAAA,eAAe,EAAfA;AAAnB;AACD,OALD,MAKO;AACL,iCAAY9B,KAAZ;AACD;;AACH;AACE,aAAOA,KAAP;AAhVJ;AAkVD,CArVD;;AAuVA,eAAeD,KAAf","sourcesContent":["import { ActionType, WORLD } from \"../../../../Common/Util/Constant\";\n\nconst {\n  SET_PROJECT,\n  SET_TEMPLATE,\n  RESET_PROJECT,\n  ADD_SCENE,\n  COPY_SCENE,\n  SET_WORLD_SIZE,\n  ADD_SPRITES,\n  ADD_SOUNDS,\n  REMOVE_SOUND,\n  REORDER_SPRITE,\n  REMOVE_SPRITE,\n  REMOVE_ALL_SPRITE,\n  REMOVE_SCENE,\n  REORDER_SCENE,\n  SET_SPRITE_PREVIEW,\n  SET_EDITOR_MODE,\n  SET_SPRITE_CODE,\n  SET_GLOBAL_VARIABLE,\n  SET_SPRITE_BLOCKXML,\n  LOCK_SPRITE,\n  REMOVE_ALL_SOUND,\n  SET_SCENE_PREVIEW,\n  HIDE_LOCK_SPRITE,\n  ADD_GLOBAL_VARIABLE,\n  REMOVE_GLOBAL_VARIABLE\n} = ActionType;\n\nexport const addSounds = soundInfos => ({\n  type: ADD_SOUNDS,\n  soundInfos: soundInfos\n});\n\nexport const removeSound = soundId => ({\n  type: REMOVE_SOUND,\n  soundId: soundId\n});\n\nexport const addSprites = (sceneId, spriteInfos) => ({\n  type: ADD_SPRITES,\n  sceneId: sceneId,\n  spriteInfos: spriteInfos\n});\n\nexport const reorderSprite = (sceneId, fromIndex, toIndex) => ({\n  type: REORDER_SPRITE,\n  sceneId: sceneId,\n  fromIndex: fromIndex,\n  toIndex: toIndex\n});\n\nexport const removeSprite = (sceneId, spriteName) => ({\n  type: REMOVE_SPRITE,\n  sceneId: sceneId,\n  spriteName: spriteName\n});\n\nexport const removeAllSprite = sceneId => ({\n  type: REMOVE_ALL_SPRITE,\n  sceneId: sceneId\n});\n\nexport const setEditorMode = (editorMode, scenes) => ({\n  type: SET_EDITOR_MODE,\n  editorMode: editorMode,\n  scenes: scenes\n});\n\nexport const setSpriteCode = (sceneId, spriteName, code) => ({\n  type: SET_SPRITE_CODE,\n  sceneId: sceneId,\n  spriteName: spriteName,\n  code: code\n});\n\nexport const setGlobalVariable = (sceneId, spriteName, global) => ({\n  type: SET_GLOBAL_VARIABLE,\n  sceneId: sceneId,\n  spriteName: spriteName,\n  global: global\n});\n\nexport const setSpriteBlockXml = (sceneId, spriteName, blockXml) => ({\n  type: SET_SPRITE_BLOCKXML,\n  sceneId: sceneId,\n  spriteName: spriteName,\n  blockXml: blockXml\n});\n\nexport const setSpritePreview = (sceneId, spriteName, preview) => ({\n  type: SET_SPRITE_PREVIEW,\n  sceneId: sceneId,\n  spriteName: spriteName,\n  preview: preview\n});\n\n// create actions\nexport const addScene = (sceneId, sceneName) => ({\n  type: ADD_SCENE,\n  sceneId: sceneId,\n  sceneName: sceneName\n});\n\nexport const copyScene = (sceneId, sceneName, selectedSceneId) => ({\n  type: COPY_SCENE,\n  sceneId: sceneId,\n  sceneName: sceneName,\n  selectedSceneId: selectedSceneId\n});\n\nexport const removeScene = sceneId => ({\n  type: REMOVE_SCENE,\n  sceneId: sceneId\n});\n\nexport const reorderScene = (fromIndex, toIndex) => ({\n  type: REORDER_SCENE,\n  fromIndex: fromIndex,\n  toIndex: toIndex\n});\n\nexport const lockSprite = (sceneId, spriteName) => ({\n  type: LOCK_SPRITE,\n  sceneId: sceneId,\n  spriteName: spriteName\n});\n\nexport const hideLockSprite = (sceneId, isHide) => ({\n  type: HIDE_LOCK_SPRITE,\n  sceneId: sceneId,\n  isHide: isHide\n});\nexport const removeAllSound = () => ({\n  type: REMOVE_ALL_SOUND\n});\n\nexport const setScenePreview = (sceneId, preview) => ({\n  type: SET_SCENE_PREVIEW,\n  sceneId,\n  preview\n});\n\nexport const addGlobalVariable = name => ({\n  type: ADD_GLOBAL_VARIABLE,\n  name\n});\n\nexport const removeGlobalVariable = name => ({\n  type: REMOVE_GLOBAL_VARIABLE,\n  name\n});\n\nexport const setWorldSize = (sceneId, width, height) => ({\n  type: SET_WORLD_SIZE,\n  sceneId,\n  width,\n  height\n});\n\n// initialize states\n// {\n//   scenes: {\n//     [sceneId]: {\n//       sceneName: ...,\n//       sprites: {\n//         [spriteName]: {\n//           type: ...,\n//           assetId: ...,\n//           code: ...,\n//           preview: {...}\n//         }\n//       },\n//       spriteIds: [...]\n//     }\n//   },\n//   sceneIds: [...],\n//   soundIds: [...],\n// };\n\nconst initialState = {\n  scenes: {},\n  sceneIds: [],\n  soundIds: [],\n  soundNames: {}\n};\n\nconst deleteByKey = (obj, deleteKey) => {\n  return Object.keys(obj).reduce((acc, key) => {\n    if (key !== deleteKey) {\n      return { ...acc, [key]: obj[key] };\n    }\n    return acc;\n  }, {});\n};\n\nconst changeOrder = (array, from, to) => {\n  const movedItem = array.find((item, index) => index === from);\n  const remainingItems = array.filter((item, index) => index !== from);\n  return [\n    ...remainingItems.slice(0, to),\n    movedItem,\n    ...remainingItems.slice(to)\n  ];\n};\n\nconst scene = (state = initialState, action) => {\n  let nextState = {};\n\n  switch (action.type) {\n    case RESET_PROJECT:\n      return initialState;\n    case SET_PROJECT:\n    case SET_TEMPLATE:\n      let scene = action.project.state && action.project.state.scene;\n      if (scene) {\n        if (!scene.editorMode) scene.editorMode = \"javascript\";\n        return {\n          ...scene,\n          timeStamp: new Date().getTime()\n        };\n      } else {\n        return state;\n      }\n    case ADD_SOUNDS:\n      let newSoundIds = [];\n      let newSoundNames = {};\n      action.soundInfos.forEach(info => {\n        const { assetId, name } = info;\n        if (!state.soundIds.includes(assetId)) {\n          newSoundIds.push(assetId);\n          newSoundNames[assetId] = name;\n        }\n      });\n      const soundNames = state.soundNames ? state.soundNames : {};\n      return {\n        ...state,\n        soundIds: [...state.soundIds, ...newSoundIds],\n        soundNames: {...soundNames, ...newSoundNames}\n      };\n    case REMOVE_SOUND:\n      return {\n        ...state,\n        soundIds: state.soundIds.filter(item => item !== action.soundId),\n        soundNames: state.soundNames ? deleteByKey(\n          state.soundNames,\n          action.soundId\n        ) : {}\n      };\n    case ADD_SPRITES:\n      const newSprites = {};\n      const newSpriteIds = [];\n\n      action.spriteInfos.forEach(info => {\n        const { name, type, assetId } = info;\n        const code = info.code ? info.code : \"\";\n        const preview = info.preview ? info.preview : {};\n        newSprites[name] = { type, assetId, code, preview };\n        newSpriteIds.push(name);\n      });\n\n      nextState = {\n        ...state,\n        scenes: {\n          ...state.scenes,\n          [action.sceneId]: {\n            ...state.scenes[action.sceneId],\n            sprites: {\n              ...state.scenes[action.sceneId].sprites,\n              ...newSprites\n            },\n            spriteIds: [\n              ...state.scenes[action.sceneId].spriteIds,\n              ...newSpriteIds\n            ]\n          }\n        }\n      };\n      return nextState;\n    case REORDER_SPRITE:\n      nextState = {\n        ...state,\n        scenes: {\n          ...state.scenes,\n          [action.sceneId]: {\n            ...state.scenes[action.sceneId],\n            spriteIds: changeOrder(\n              state.scenes[action.sceneId].spriteIds,\n              action.fromIndex,\n              action.toIndex\n            )\n          }\n        }\n      };\n      return nextState;\n    case REORDER_SCENE:\n      nextState = {\n        ...state,\n        sceneIds: changeOrder(state.sceneIds, action.fromIndex, action.toIndex)\n      };\n      return nextState;\n    case REMOVE_SPRITE:\n      nextState = {\n        ...state,\n        scenes: {\n          ...state.scenes,\n          [action.sceneId]: {\n            ...state.scenes[action.sceneId],\n            sprites: deleteByKey(\n              state.scenes[action.sceneId].sprites,\n              action.spriteName\n            ),\n            spriteIds: state.scenes[action.sceneId].spriteIds.filter(\n              item => item !== action.spriteName\n            )\n          }\n        }\n      };\n      return nextState;\n\n    case REMOVE_ALL_SPRITE:\n      nextState = {\n        ...state,\n        scenes: {\n          ...state.scenes,\n          [action.sceneId]: {\n            ...state.scenes[action.sceneId],\n            sprites: {},\n            spriteIds: []\n          }\n        }\n      };\n      return nextState;\n    case SET_EDITOR_MODE:\n      if (action.scenes) {\n        return {\n          ...state,\n          scenes: action.scenes,\n          editorMode: action.editorMode\n        };\n      } else {\n        return {\n          ...state,\n          editorMode: action.editorMode\n        };\n      }\n    case SET_SPRITE_CODE:\n      return {\n        ...state,\n        scenes: {\n          ...state.scenes,\n          [action.sceneId]: {\n            ...state.scenes[action.sceneId],\n            spriteIds: [...state.scenes[action.sceneId].spriteIds],\n            sprites: {\n              ...state.scenes[action.sceneId].sprites,\n              [action.spriteName]: {\n                ...state.scenes[action.sceneId].sprites[action.spriteName],\n                code: action.code\n              }\n            }\n          }\n        }\n      };\n    case SET_GLOBAL_VARIABLE:\n      return {\n        ...state,\n        scenes: {\n          ...state.scenes,\n          [action.sceneId]: {\n            ...state.scenes[action.sceneId],\n            global: action.global\n          }\n        }\n      };\n    case SET_SPRITE_BLOCKXML:\n      return {\n        ...state,\n        scenes: {\n          ...state.scenes,\n          [action.sceneId]: {\n            ...state.scenes[action.sceneId],\n            spriteIds: [...state.scenes[action.sceneId].spriteIds],\n            sprites: {\n              ...state.scenes[action.sceneId].sprites,\n              [action.spriteName]: {\n                ...state.scenes[action.sceneId].sprites[action.spriteName],\n                blockXml: action.blockXml\n              }\n            }\n          }\n        }\n      };\n    case SET_SPRITE_PREVIEW:\n      if (!state.scenes[action.sceneId].sprites[action.spriteName]) {\n        return state;\n      }\n      return {\n        ...state,\n        scenes: {\n          ...state.scenes,\n          [action.sceneId]: {\n            ...state.scenes[action.sceneId],\n            spriteIds: [...state.scenes[action.sceneId].spriteIds],\n            sprites: {\n              ...state.scenes[action.sceneId].sprites,\n              [action.spriteName]: {\n                ...state.scenes[action.sceneId].sprites[action.spriteName],\n                preview: {\n                  ...state.scenes[action.sceneId].sprites[action.spriteName]\n                    .preview,\n                  ...action.preview\n                }\n              }\n            }\n          }\n        }\n      };\n    case REMOVE_SCENE:\n      nextState = {\n        ...state,\n        scenes: deleteByKey(state.scenes, action.sceneId),\n        sceneIds: state.sceneIds.filter(item => item !== action.sceneId)\n      };\n      return nextState;\n    case ADD_SCENE:\n      return {\n        ...state,\n        scenes: {\n          ...state.scenes,\n          [action.sceneId]: {\n            sceneName: action.sceneName,\n            worldWidth: WORLD.DEFAULT_WIDTH,\n            worldHeight: WORLD.DEFAULT_HEIGHT,\n            sprites: {},\n            spriteIds: []\n          }\n        },\n        sceneIds: [...state.sceneIds, action.sceneId]\n      };\n    case COPY_SCENE:\n      const sceneToCopy = state.scenes[action.selectedSceneId];\n      const newScene = JSON.parse(JSON.stringify(sceneToCopy));\n      newScene.sceneName = [action.sceneId];\n      return {\n        ...state,\n        scenes: {\n          ...state.scenes,\n          [action.sceneId]: newScene\n        },\n        sceneIds: [...state.sceneIds, action.sceneId]\n      };\n    case SET_WORLD_SIZE:\n      let worldWidth = parseInt(action.width);\n      let worldHeight = parseInt(action.height);\n      return {\n        ...state,\n        scenes: {\n          ...state.scenes,\n          [action.sceneId]: {\n            ...state.scenes[action.sceneId],\n            worldWidth,\n            worldHeight\n          }\n        }\n      };\n\n    case LOCK_SPRITE:\n      nextState = {\n        ...state,\n        scenes: {\n          ...state.scenes,\n          [action.sceneId]: {\n            ...state.scenes[action.sceneId],\n            sprites: {\n              ...state.scenes[action.sceneId].sprites,\n              [action.spriteName]: {\n                ...state.scenes[action.sceneId].sprites[action.spriteName],\n                locked: state.scenes[action.sceneId].sprites[action.spriteName]\n                  .locked\n                  ? !state.scenes[action.sceneId].sprites[action.spriteName]\n                      .locked\n                  : true\n              }\n            }\n          }\n        }\n      };\n      return nextState;\n\n    case REMOVE_ALL_SOUND:\n      nextState = {\n        ...state,\n        soundIds: [],\n        soundNames: {}\n      };\n      return nextState;\n    case SET_SCENE_PREVIEW:\n      return {\n        ...state,\n        scenes: {\n          ...state.scenes,\n          [action.sceneId]: {\n            ...state.scenes[action.sceneId],\n            preview: action.preview\n          }\n        }\n      };\n    case HIDE_LOCK_SPRITE:\n      if (action.sceneId) {\n        return {\n          ...state,\n          scenes: {\n            ...state.scenes,\n            [action.sceneId]: {\n              ...state.scenes[action.sceneId],\n              isHiddenLockSprites: action.isHide\n            }\n          }\n        };\n      } else {\n        Object.keys(state.scenes).forEach(key => {\n          const scene = state.scenes[key];\n          scene.isHiddenLockSprites = action.isHide;\n        });\n        return { ...state };\n      }\n    case ADD_GLOBAL_VARIABLE:\n      const globalVariables = state.globalVariables\n        ? [...state.globalVariables]\n        : [];\n      if (globalVariables.indexOf(action.name) < 0) {\n        globalVariables.push(action.name);\n      }\n      return { ...state, globalVariables };\n    case REMOVE_GLOBAL_VARIABLE:\n      if (state.globalVariables) {\n        const globalVariables = [...state.globalVariables];\n        const index = globalVariables.indexOf(action.name);\n        globalVariables.splice(index, 1);\n        return { ...state, globalVariables };\n      } else {\n        return { ...state };\n      }\n    default:\n      return state;\n  }\n};\n\nexport default scene;\n"]},"metadata":{},"sourceType":"module"}