{"ast":null,"code":"import _defineProperty from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Property/Component/DrawerTextEditor/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { injectIntl } from \"react-intl\";\nimport FontDropDown from \"../../../../../../Common/Component/FontDropDown\";\nimport AssetLibrary from \"../../../../utils/assetLibrary\";\nimport { SketchPicker } from \"react-color\";\nimport * as sceneActions from \"../../../../Store/Reducer/scene\";\nimport \"./index.scss\";\n\nvar DrawerTextEditor = /*#__PURE__*/function (_Component) {\n  _inherits(DrawerTextEditor, _Component);\n\n  var _super = _createSuper(DrawerTextEditor);\n\n  function DrawerTextEditor() {\n    var _this;\n\n    _classCallCheck(this, DrawerTextEditor);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.presetColors = [\"#20a1ec\", \"#ffd185\", \"#77d354\", \"#ffba5c\", \"#23d8af\", \"#f96063\", \"#916cc5\", \"#3e4852\", \"#ffffff\"];\n    _this.fontFamilies = AssetLibrary.fonts;\n\n    _this.setINTL = function (item) {\n      return _this.props.intl.formatMessage({\n        id: item.name\n      });\n    };\n\n    _this.handleFontChange = function (value) {\n      var _this$props = _this.props,\n          setSpritePreview = _this$props.setSpritePreview,\n          selectedSceneId = _this$props.selectedSceneId;\n      var spriteName = _this.props.textPreviewData.name;\n      setSpritePreview(selectedSceneId, spriteName, {\n        fontFamily: value\n      });\n    };\n\n    _this.handleSizeChange = function (event) {\n      var _this$props2 = _this.props,\n          setSpritePreview = _this$props2.setSpritePreview,\n          selectedSceneId = _this$props2.selectedSceneId;\n      var spriteName = _this.props.textPreviewData.name;\n      var value = event.target.value;\n      setSpritePreview(selectedSceneId, spriteName, {\n        fontSize: value\n      });\n    };\n\n    _this.handleOnToggle = function (event) {\n      event.preventDefault();\n      var _this$props3 = _this.props,\n          setSpritePreview = _this$props3.setSpritePreview,\n          selectedSceneId = _this$props3.selectedSceneId;\n      var spriteName = _this.props.textPreviewData.name;\n      var name = event.target.name;\n      var _this$props$textPrevi = _this.props.textPreviewData,\n          fontWeight = _this$props$textPrevi.fontWeight,\n          fontStyle = _this$props$textPrevi.fontStyle;\n      var value;\n\n      switch (name) {\n        case \"fontWeight\":\n          value = fontWeight === \"normal\" ? \"bold\" : \"normal\";\n          setSpritePreview(selectedSceneId, spriteName, _defineProperty({}, name, value));\n          break;\n\n        case \"fontStyle\":\n          value = fontStyle === \"normal\" ? \"italic\" : \"normal\";\n          setSpritePreview(selectedSceneId, spriteName, _defineProperty({}, name, value));\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this.handleColorPick = function (color) {\n      var fontColor = \"rgba(\".concat(color.rgb.r, \", \").concat(color.rgb.g, \", \").concat(color.rgb.b, \", \").concat(color.rgb.a, \")\");\n      var _this$props4 = _this.props,\n          setSpritePreview = _this$props4.setSpritePreview,\n          selectedSceneId = _this$props4.selectedSceneId;\n      var spriteName = _this.props.textPreviewData.name;\n      setSpritePreview(selectedSceneId, spriteName, {\n        fontColor: fontColor\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(DrawerTextEditor, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // forcibly inject some inline style values to picker element\n      var picker = document.getElementsByClassName(\"sketch-picker\")[0]; // set specific style while leaving other inline style values untouched\n\n      picker.style.width = \"100%\";\n      picker.style.boxSizing = \"border-box\";\n      picker.style.padding = \"14px 17px\";\n      picker.style.boxShadow = \"\";\n      picker.style.borderRadius = \"0\";\n      picker.style.backgroundColor = \"transparent\";\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$textPrevi2 = this.props.textPreviewData,\n          fontColor = _this$props$textPrevi2.fontColor,\n          fontFamily = _this$props$textPrevi2.fontFamily,\n          fontSize = _this$props$textPrevi2.fontSize,\n          fontStyle = _this$props$textPrevi2.fontStyle,\n          fontWeight = _this$props$textPrevi2.fontWeight;\n      var fontWeightToggle = fontWeight === \"bold\" ? \"on\" : \"off\";\n      var fontStyleToggle = fontStyle === \"italic\" ? \"on\" : \"off\";\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"DrawerTextEditor\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"DrawerTextEditor__top\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"top__row1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FontDropDown, {\n        defaultValue: fontFamily,\n        list: this.fontFamilies,\n        handleSelectItem: this.handleFontChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        className: \"TextEditorInput__fontsize\",\n        type: \"number\",\n        value: fontSize,\n        name: \"fontSize\",\n        onChange: this.handleSizeChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"DrawerTextEditor__sizeStyleRow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"TextEditorBar__styleGroup\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"TextEditorButton TextEditorButton__fontweight--\".concat(fontWeightToggle),\n        name: \"fontWeight\",\n        onClick: this.handleOnToggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"TextEditorButton TextEditorButton__fontstyle--\".concat(fontStyleToggle),\n        name: \"fontStyle\",\n        onClick: this.handleOnToggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"TextEditorButton TextEditorButton__color\",\n        onClick: this.handlePaletteBtn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"TextEditorButton__color__A\",\n        style: {\n          color: fontColor\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }\n      }, \"U\"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"TextEditorButton__color__line\",\n        style: {\n          backgroundColor: fontColor\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }\n      }))))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"DrawerTextEditor__bottom\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(SketchPicker, {\n        color: fontColor,\n        presetColors: this.presetColors,\n        onChangeComplete: this.handleColorPick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return DrawerTextEditor;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    selectedSceneId: state.interaction.selected.scene\n  };\n}, {\n  setSpritePreview: sceneActions.setSpritePreview\n})(injectIntl(DrawerTextEditor));","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Property/Component/DrawerTextEditor/index.js"],"names":["React","Component","connect","injectIntl","FontDropDown","AssetLibrary","SketchPicker","sceneActions","DrawerTextEditor","presetColors","fontFamilies","fonts","setINTL","item","props","intl","formatMessage","id","name","handleFontChange","value","setSpritePreview","selectedSceneId","spriteName","textPreviewData","fontFamily","handleSizeChange","event","target","fontSize","handleOnToggle","preventDefault","fontWeight","fontStyle","handleColorPick","color","fontColor","rgb","r","g","b","a","picker","document","getElementsByClassName","style","width","boxSizing","padding","boxShadow","borderRadius","backgroundColor","fontWeightToggle","fontStyleToggle","handlePaletteBtn","state","interaction","selected","scene"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { injectIntl } from \"react-intl\";\nimport FontDropDown from \"../../../../../../Common/Component/FontDropDown\";\nimport AssetLibrary from \"../../../../utils/assetLibrary\";\nimport { SketchPicker } from \"react-color\";\nimport * as sceneActions from \"../../../../Store/Reducer/scene\";\nimport \"./index.scss\";\n\nclass DrawerTextEditor extends Component {\n  presetColors = [\n    \"#20a1ec\",\n    \"#ffd185\",\n    \"#77d354\",\n    \"#ffba5c\",\n    \"#23d8af\",\n    \"#f96063\",\n    \"#916cc5\",\n    \"#3e4852\",\n    \"#ffffff\"\n  ];\n  fontFamilies = AssetLibrary.fonts;\n\n  setINTL = item => {\n    return this.props.intl.formatMessage({ id: item.name });\n  };\n\n  // fontFamily\n  handleFontChange = value => {\n    const { setSpritePreview, selectedSceneId } = this.props;\n    const spriteName = this.props.textPreviewData.name;\n    setSpritePreview(selectedSceneId, spriteName, { fontFamily: value });\n  };\n  // fontSize\n  handleSizeChange = event => {\n    const { setSpritePreview, selectedSceneId } = this.props;\n    const spriteName = this.props.textPreviewData.name;\n    const { value } = event.target;\n    setSpritePreview(selectedSceneId, spriteName, { fontSize: value });\n  };\n  // fontWeight, fontStyle\n  handleOnToggle = event => {\n    event.preventDefault();\n    const { setSpritePreview, selectedSceneId } = this.props;\n    const spriteName = this.props.textPreviewData.name;\n    const { name } = event.target;\n    const { fontWeight, fontStyle } = this.props.textPreviewData;\n    let value;\n    switch (name) {\n      case \"fontWeight\":\n        value = fontWeight === \"normal\" ? \"bold\" : \"normal\";\n        setSpritePreview(selectedSceneId, spriteName, { [name]: value });\n        break;\n      case \"fontStyle\":\n        value = fontStyle === \"normal\" ? \"italic\" : \"normal\";\n        setSpritePreview(selectedSceneId, spriteName, { [name]: value });\n        break;\n      default:\n        break;\n    }\n  };\n  // fontColor\n  handleColorPick = color => {\n    const fontColor = `rgba(${color.rgb.r}, ${color.rgb.g}, ${color.rgb.b}, ${color.rgb.a})`;\n    const { setSpritePreview, selectedSceneId } = this.props;\n    const spriteName = this.props.textPreviewData.name;\n    setSpritePreview(selectedSceneId, spriteName, { fontColor });\n  };\n\n  componentDidMount() {\n    // forcibly inject some inline style values to picker element\n    const picker = document.getElementsByClassName(\"sketch-picker\")[0];\n    // set specific style while leaving other inline style values untouched\n    picker.style.width = \"100%\";\n    picker.style.boxSizing = \"border-box\";\n    picker.style.padding = \"14px 17px\";\n    picker.style.boxShadow = \"\";\n    picker.style.borderRadius = \"0\";\n    picker.style.backgroundColor = \"transparent\";\n  }\n\n  render() {\n    const {\n      fontColor,\n      fontFamily,\n      fontSize,\n      fontStyle,\n      fontWeight\n    } = this.props.textPreviewData;\n    const fontWeightToggle = fontWeight === \"bold\" ? \"on\" : \"off\";\n    const fontStyleToggle = fontStyle === \"italic\" ? \"on\" : \"off\";\n    return (\n      <div className=\"DrawerTextEditor\">\n        <div className=\"DrawerTextEditor__top\">\n          <div className=\"top__row1\">\n            <FontDropDown\n              defaultValue={fontFamily}\n              list={this.fontFamilies}\n              handleSelectItem={this.handleFontChange}\n            />\n            <input\n              className=\"TextEditorInput__fontsize\"\n              type=\"number\"\n              value={fontSize}\n              name=\"fontSize\"\n              onChange={this.handleSizeChange}\n            />\n          </div>\n          <div className=\"DrawerTextEditor__sizeStyleRow\">\n            <div className=\"TextEditorBar__styleGroup\">\n              <button\n                className={`TextEditorButton TextEditorButton__fontweight--${fontWeightToggle}`}\n                name=\"fontWeight\"\n                onClick={this.handleOnToggle}\n              />\n              <button\n                className={`TextEditorButton TextEditorButton__fontstyle--${fontStyleToggle}`}\n                name=\"fontStyle\"\n                onClick={this.handleOnToggle}\n              />\n              <div\n                className={`TextEditorButton TextEditorButton__color`}\n                onClick={this.handlePaletteBtn}\n              >\n                <span\n                  className=\"TextEditorButton__color__A\"\n                  style={{ color: fontColor }}\n                >\n                  U\n                </span>\n                <span\n                  className=\"TextEditorButton__color__line\"\n                  style={{ backgroundColor: fontColor }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"DrawerTextEditor__bottom\">\n          <SketchPicker\n            color={fontColor}\n            presetColors={this.presetColors}\n            onChangeComplete={this.handleColorPick}\n          />\n        </div>\n      </div>\n    );\n  }\n}\nexport default connect(\n  state => ({ selectedSceneId: state.interaction.selected.scene }),\n  {\n    setSpritePreview: sceneActions.setSpritePreview\n  }\n)(injectIntl(DrawerTextEditor));\n"]},"metadata":{},"sourceType":"module"}