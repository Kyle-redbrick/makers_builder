{"ast":null,"code":"import _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Chat/Container.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { injectIntl } from \"react-intl\";\nimport RndWrapper from \"../../utils/RndWrapper\";\nimport * as chatActions from \"../../Store/Reducer/chat\";\nimport { CHAT_MSG_TYPE } from \"../../../../Common/Util/Constant\";\nimport * as request from \"../../../../Common/Util/HTTPRequest\";\nimport View from \"./View\";\nimport * as TrackingUtil from \"../../../../Common/Util/TrackingUtil\";\nimport checkBlockedUser from \"../../../../Common/Util/CheckBlockedUser\";\nimport { getGuestId } from \"../../../../Common/Util/GuestIdUtil\";\n\nvar Container = /*#__PURE__*/function (_Component) {\n  _inherits(Container, _Component);\n\n  var _super = _createSuper(Container);\n\n  function Container(props) {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _super.call(this, props);\n\n    _this.scrollToBottom = function () {\n      setTimeout(function () {\n        var element = document.getElementsByClassName(\"ChatContentMainMessages\")[0];\n\n        if (element) {\n          element.scrollTo(0, element.scrollHeight - element.clientHeight);\n        }\n      }, 100);\n    };\n\n    _this.handleSelectRoom = function (name) {\n      _this.props.setSelectedRoom(name);\n\n      _this.handleChatbotClose();\n    };\n\n    _this.handleOnChange = function (e) {\n      _this.setState({\n        inputMessage: e.target.value\n      });\n    };\n\n    _this.handleOnSubmit = function () {\n      var userinfo = _this.props.userinfo;\n      var isBlocked = checkBlockedUser(userinfo);\n\n      if (isBlocked) {\n        return;\n      }\n\n      TrackingUtil.sendGAEvent({\n        category: \"Builder\",\n        action: \"SendChat\"\n      });\n      var content = _this.state.inputMessage;\n\n      if (content.length < 1) {\n        return;\n      }\n\n      var roomId = _this.props.selectedRoomId;\n      var type = CHAT_MSG_TYPE.TEXT;\n      var user = {\n        name: userinfo.name ? userinfo.name : _this.guestId,\n        icon: userinfo.icon,\n        email: userinfo.email\n      };\n\n      _this.props.addMsgToQueue({\n        roomId: roomId,\n        content: content,\n        user: user,\n        type: type\n      });\n\n      _this.setState({\n        inputMessage: \"\"\n      });\n    };\n\n    _this.handleChatbotOpen = function () {\n      _this.setState({\n        isChatbotMode: true\n      });\n\n      _this.props.setSelectedRoom(false);\n    };\n\n    _this.handleChatbotClose = function () {\n      _this.setState({\n        isChatbotMode: false\n      });\n    };\n\n    _this.handleMenu = function (id) {\n      _this.setState({\n        showMenu: id\n      }); // showPopUp(<ContextMenu menus={menus} />, {\n      //   dismissOverlay: false,\n      //   dismissButton: false,\n      //   defaultPadding: false,\n      //   darkmode: true\n      // });\n\n    };\n\n    _this.state = {\n      inputMessage: \"\",\n      isChatbotMode: false,\n      showMenu: undefined\n    };\n    _this.inputRef = React.createRef();\n    _this.guestId = _this.props.name ? undefined : getGuestId();\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      request.getChatMessages({\n        roomId: \"all\"\n      }).then(function (res) {\n        return res.json();\n      }).then(function (json) {\n        json.reverse().forEach(function (msg) {\n          if (!msg.user) msg.user = {\n            name: msg.guestId\n          };\n\n          _this2.props.addMsg(msg);\n\n          _this2.scrollToBottom();\n        });\n      }).catch(function (e) {\n        return console.error(e);\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (!prevProps.isOn && this.props.isOn) {\n        this.scrollToBottom();\n      }\n\n      if (this.props.isOn) {\n        var _this$props = this.props,\n            selectedRoomId = _this$props.selectedRoomId,\n            resetUnreadMsgCount = _this$props.resetUnreadMsgCount,\n            rooms = _this$props.rooms;\n\n        if (selectedRoomId) {\n          var selectedRoom = rooms[selectedRoomId];\n\n          if (prevProps.selectedRoomId !== selectedRoomId || !prevProps.isOn && this.props.isOn) {\n            resetUnreadMsgCount(selectedRoomId);\n            this.scrollToBottom();\n          }\n\n          if (selectedRoom.unReadMsgCount > 0) {\n            resetUnreadMsgCount(selectedRoomId);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          isOn = _this$props2.isOn,\n          rooms = _this$props2.rooms,\n          handleSelectTab = _this$props2.handleSelectTab,\n          handleChangeZIndex = _this$props2.handleChangeZIndex,\n          zIndex = _this$props2.zIndex,\n          selectedRoomId = _this$props2.selectedRoomId,\n          intl = _this$props2.intl,\n          userinfo = _this$props2.userinfo;\n      var _this$state = this.state,\n          inputMessage = _this$state.inputMessage,\n          isChatbotMode = _this$state.isChatbotMode,\n          showMenu = _this$state.showMenu;\n      var handleSelectRoom = this.handleSelectRoom,\n          handleOnChange = this.handleOnChange,\n          handleOnSubmit = this.handleOnSubmit,\n          inputRef = this.inputRef,\n          handleChatbotOpen = this.handleChatbotOpen,\n          guestId = this.guestId,\n          handleMenu = this.handleMenu;\n\n      if (!isOn) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 14\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(RndWrapper, {\n        id: \"chat\",\n        style: {\n          zIndex: zIndex\n        },\n        defaultWidth: 384,\n        defaultHeight: 400,\n        defaultX: document.body.clientWidth - 460,\n        defaultY: 16,\n        minHeight: 300,\n        minWidth: 300,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(View, {\n        handleSelectTab: handleSelectTab,\n        handleChangeZIndex: handleChangeZIndex,\n        rooms: rooms,\n        selectedRoomId: selectedRoomId,\n        handleSelectRoom: handleSelectRoom,\n        handleOnChange: handleOnChange,\n        handleOnSubmit: handleOnSubmit,\n        inputMessage: inputMessage,\n        inputRef: inputRef,\n        isChatbotMode: isChatbotMode,\n        handleChatbotOpen: handleChatbotOpen,\n        intl: intl,\n        email: userinfo.email,\n        guestId: guestId,\n        showMenu: showMenu,\n        handleMenu: handleMenu,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    rooms: state.chat.rooms,\n    selectedRoomId: state.chat.selectedRoomId,\n    userinfo: state.userinfo\n  };\n}, {\n  addMsgToQueue: chatActions.addMsgToQueue,\n  addMsg: chatActions.addMsg,\n  setSelectedRoom: chatActions.setSelectedRoom,\n  resetUnreadMsgCount: chatActions.resetUnreadMsgCount\n})(injectIntl(Container));","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Chat/Container.js"],"names":["React","Component","connect","injectIntl","RndWrapper","chatActions","CHAT_MSG_TYPE","request","View","TrackingUtil","checkBlockedUser","getGuestId","Container","props","scrollToBottom","setTimeout","element","document","getElementsByClassName","scrollTo","scrollHeight","clientHeight","handleSelectRoom","name","setSelectedRoom","handleChatbotClose","handleOnChange","e","setState","inputMessage","target","value","handleOnSubmit","userinfo","isBlocked","sendGAEvent","category","action","content","state","length","roomId","selectedRoomId","type","TEXT","user","guestId","icon","email","addMsgToQueue","handleChatbotOpen","isChatbotMode","handleMenu","id","showMenu","undefined","inputRef","createRef","getChatMessages","then","res","json","reverse","forEach","msg","addMsg","catch","console","error","prevProps","isOn","resetUnreadMsgCount","rooms","selectedRoom","unReadMsgCount","handleSelectTab","handleChangeZIndex","zIndex","intl","body","clientWidth","chat"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { injectIntl } from \"react-intl\";\nimport RndWrapper from \"../../utils/RndWrapper\";\nimport * as chatActions from \"../../Store/Reducer/chat\";\nimport { CHAT_MSG_TYPE } from \"../../../../Common/Util/Constant\";\nimport * as request from \"../../../../Common/Util/HTTPRequest\";\nimport View from \"./View\";\nimport * as TrackingUtil from \"../../../../Common/Util/TrackingUtil\";\nimport checkBlockedUser from \"../../../../Common/Util/CheckBlockedUser\";\nimport { getGuestId } from \"../../../../Common/Util/GuestIdUtil\";\n\nclass Container extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputMessage: \"\",\n      isChatbotMode: false,\n      showMenu: undefined\n    };\n\n    this.inputRef = React.createRef();\n    this.guestId = this.props.name ? undefined : getGuestId();\n  }\n\n  componentDidMount() {\n    request\n      .getChatMessages({ roomId: \"all\" })\n      .then(res => res.json())\n      .then(json => {\n        json.reverse().forEach(msg => {\n          if (!msg.user) msg.user = { name: msg.guestId };\n          this.props.addMsg(msg);\n          this.scrollToBottom();\n        });\n      })\n      .catch(e => console.error(e));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!prevProps.isOn && this.props.isOn) {\n      this.scrollToBottom();\n    }\n\n    if (this.props.isOn) {\n      const { selectedRoomId, resetUnreadMsgCount, rooms } = this.props;\n      if (selectedRoomId) {\n        const selectedRoom = rooms[selectedRoomId];\n        if (\n          prevProps.selectedRoomId !== selectedRoomId ||\n          (!prevProps.isOn && this.props.isOn)\n        ) {\n          resetUnreadMsgCount(selectedRoomId);\n          this.scrollToBottom();\n        }\n        if (selectedRoom.unReadMsgCount > 0) {\n          resetUnreadMsgCount(selectedRoomId);\n        }\n      }\n    }\n  }\n\n  scrollToBottom = () => {\n    setTimeout(() => {\n      const element = document.getElementsByClassName(\n        \"ChatContentMainMessages\"\n      )[0];\n      if (element) {\n        element.scrollTo(0, element.scrollHeight - element.clientHeight);\n      }\n    }, 100);\n  };\n\n  handleSelectRoom = name => {\n    this.props.setSelectedRoom(name);\n    this.handleChatbotClose();\n  };\n\n  handleOnChange = e => {\n    this.setState({ inputMessage: e.target.value });\n  };\n\n  handleOnSubmit = () => {\n    let { userinfo } = this.props;\n\n    const isBlocked = checkBlockedUser(userinfo);\n    if (isBlocked) {\n      return;\n    }\n    TrackingUtil.sendGAEvent({\n      category: \"Builder\",\n      action: `SendChat`\n    });\n\n    const content = this.state.inputMessage;\n\n    if (content.length < 1) {\n      return;\n    }\n    const roomId = this.props.selectedRoomId;\n    const type = CHAT_MSG_TYPE.TEXT;\n    const user = {\n      name: userinfo.name ? userinfo.name : this.guestId,\n      icon: userinfo.icon,\n      email: userinfo.email\n    };\n    this.props.addMsgToQueue({ roomId, content, user, type });\n    this.setState({ inputMessage: \"\" });\n  };\n\n  handleChatbotOpen = () => {\n    this.setState({ isChatbotMode: true });\n    this.props.setSelectedRoom(false);\n  };\n\n  handleChatbotClose = () => {\n    this.setState({ isChatbotMode: false });\n  };\n  handleMenu = id => {\n    this.setState({ showMenu: id });\n    // showPopUp(<ContextMenu menus={menus} />, {\n    //   dismissOverlay: false,\n    //   dismissButton: false,\n    //   defaultPadding: false,\n    //   darkmode: true\n    // });\n  };\n\n  render() {\n    const {\n      isOn,\n      rooms,\n      handleSelectTab,\n      handleChangeZIndex,\n      zIndex,\n      selectedRoomId,\n      intl,\n      userinfo\n    } = this.props;\n    const { inputMessage, isChatbotMode, showMenu } = this.state;\n    const {\n      handleSelectRoom,\n      handleOnChange,\n      handleOnSubmit,\n      inputRef,\n      handleChatbotOpen,\n      guestId,\n      handleMenu\n    } = this;\n\n    if (!isOn) {\n      return <div />;\n    }\n    return (\n      <RndWrapper\n        id=\"chat\"\n        style={{ zIndex }}\n        defaultWidth={384}\n        defaultHeight={400}\n        defaultX={document.body.clientWidth - 460}\n        defaultY={16}\n        minHeight={300}\n        minWidth={300}\n      >\n        <View\n          handleSelectTab={handleSelectTab}\n          handleChangeZIndex={handleChangeZIndex}\n          rooms={rooms}\n          selectedRoomId={selectedRoomId}\n          handleSelectRoom={handleSelectRoom}\n          handleOnChange={handleOnChange}\n          handleOnSubmit={handleOnSubmit}\n          inputMessage={inputMessage}\n          inputRef={inputRef}\n          isChatbotMode={isChatbotMode}\n          handleChatbotOpen={handleChatbotOpen}\n          intl={intl}\n          email={userinfo.email}\n          guestId={guestId}\n          showMenu={showMenu}\n          handleMenu={handleMenu}\n        />\n      </RndWrapper>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    rooms: state.chat.rooms,\n    selectedRoomId: state.chat.selectedRoomId,\n    userinfo: state.userinfo\n  }),\n  {\n    addMsgToQueue: chatActions.addMsgToQueue,\n    addMsg: chatActions.addMsg,\n    setSelectedRoom: chatActions.setSelectedRoom,\n    resetUnreadMsgCount: chatActions.resetUnreadMsgCount\n  }\n)(injectIntl(Container));\n"]},"metadata":{},"sourceType":"module"}