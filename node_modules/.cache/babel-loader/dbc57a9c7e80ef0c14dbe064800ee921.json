{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var ImageCompressor = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n    var maxWidth,\n        imgType,\n        encoderOptions,\n        fileURL,\n        defaultBGColor,\n        image,\n        newWidth,\n        newHeight,\n        canvas,\n        ctx,\n        newDataURL,\n        response,\n        blob,\n        newFile,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            maxWidth = _args.length > 1 && _args[1] !== undefined ? _args[1] : 1280;\n            imgType = _args.length > 2 ? _args[2] : undefined;\n            encoderOptions = _args.length > 3 ? _args[3] : undefined;\n            _context.next = 5;\n            return URL.createObjectURL(file);\n\n          case 5:\n            fileURL = _context.sent;\n            imgType = imgType || \"image/jpeg\";\n            encoderOptions = encoderOptions || 0.7;\n            defaultBGColor = \"#ffffff\"; // create img tag to calculate the size of image\n\n            _context.next = 11;\n            return makeImageTag(fileURL);\n\n          case 11:\n            image = _context.sent;\n            newWidth = Math.min(image.width, maxWidth);\n            newHeight = Math.floor(image.height / image.width * newWidth); // create a temporary canvas tag to draw the downscaled image on.\n\n            canvas = document.createElement(\"canvas\");\n            canvas.width = newWidth;\n            canvas.height = newHeight; // draw the downscaled image on the canvas and get the new data url\n\n            ctx = canvas.getContext(\"2d\");\n            ctx.fillStyle = defaultBGColor;\n            ctx.fillRect(0, 0, newWidth, newHeight);\n            ctx.drawImage(image, 0, 0, newWidth, newHeight);\n            newDataURL = canvas.toDataURL(imgType, encoderOptions); // build file with url\n\n            _context.next = 24;\n            return fetch(newDataURL);\n\n          case 24:\n            response = _context.sent;\n            _context.next = 27;\n            return response.blob();\n\n          case 27:\n            blob = _context.sent;\n            newFile = new File([blob], file.name.replace(/\\.\\w+$/, \".jpg\"));\n            return _context.abrupt(\"return\", newFile);\n\n          case 30:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function ImageCompressor(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar makeImageTag = function makeImageTag(src) {\n  return new Promise(function (resolve, reject) {\n    var img = new Image();\n\n    img.onload = function () {\n      return resolve(img);\n    };\n\n    img.onerror = function (e) {\n      return reject(e);\n    };\n\n    img.src = src;\n  });\n};","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/astroboy/src/Common/Util/FileCompressor.js"],"names":["ImageCompressor","file","maxWidth","imgType","encoderOptions","URL","createObjectURL","fileURL","defaultBGColor","makeImageTag","image","newWidth","Math","min","width","newHeight","floor","height","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","drawImage","newDataURL","toDataURL","fetch","response","blob","newFile","File","name","replace","src","Promise","resolve","reject","img","Image","onload","onerror","e"],"mappings":";;AAAA,OAAO,IAAMA,eAAe;AAAA,sEAAG,iBAC7BC,IAD6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE7BC,YAAAA,QAF6B,2DAElB,IAFkB;AAG7BC,YAAAA,OAH6B;AAI7BC,YAAAA,cAJ6B;AAAA;AAAA,mBAMTC,GAAG,CAACC,eAAJ,CAAoBL,IAApB,CANS;;AAAA;AAMzBM,YAAAA,OANyB;AAO7BJ,YAAAA,OAAO,GAAGA,OAAO,IAAI,YAArB;AACAC,YAAAA,cAAc,GAAGA,cAAc,IAAI,GAAnC;AACII,YAAAA,cATyB,GASR,SATQ,EAW7B;;AAX6B;AAAA,mBAYXC,YAAY,CAACF,OAAD,CAZD;;AAAA;AAYzBG,YAAAA,KAZyB;AAazBC,YAAAA,QAbyB,GAadC,IAAI,CAACC,GAAL,CAASH,KAAK,CAACI,KAAf,EAAsBZ,QAAtB,CAbc;AAczBa,YAAAA,SAdyB,GAcbH,IAAI,CAACI,KAAL,CAAYN,KAAK,CAACO,MAAN,GAAeP,KAAK,CAACI,KAAtB,GAA+BH,QAA1C,CAda,EAgB7B;;AACIO,YAAAA,MAjByB,GAiBhBC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAjBgB;AAkB7BF,YAAAA,MAAM,CAACJ,KAAP,GAAeH,QAAf;AACAO,YAAAA,MAAM,CAACD,MAAP,GAAgBF,SAAhB,CAnB6B,CAqB7B;;AACIM,YAAAA,GAtByB,GAsBnBH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAtBmB;AAuB7BD,YAAAA,GAAG,CAACE,SAAJ,GAAgBf,cAAhB;AACAa,YAAAA,GAAG,CAACG,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBb,QAAnB,EAA6BI,SAA7B;AACAM,YAAAA,GAAG,CAACI,SAAJ,CAAcf,KAAd,EAAqB,CAArB,EAAwB,CAAxB,EAA2BC,QAA3B,EAAqCI,SAArC;AACIW,YAAAA,UA1ByB,GA0BZR,MAAM,CAACS,SAAP,CAAiBxB,OAAjB,EAA0BC,cAA1B,CA1BY,EA4B7B;;AA5B6B;AAAA,mBA6BRwB,KAAK,CAACF,UAAD,CA7BG;;AAAA;AA6BzBG,YAAAA,QA7ByB;AAAA;AAAA,mBA8BZA,QAAQ,CAACC,IAAT,EA9BY;;AAAA;AA8BzBA,YAAAA,IA9ByB;AA+BzBC,YAAAA,OA/ByB,GA+Bf,IAAIC,IAAJ,CAAS,CAACF,IAAD,CAAT,EAAiB7B,IAAI,CAACgC,IAAL,CAAUC,OAAV,CAAkB,QAAlB,EAA4B,MAA5B,CAAjB,CA/Be;AAAA,6CAgCtBH,OAhCsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAf/B,eAAe;AAAA;AAAA;AAAA,GAArB;;AAmCP,IAAMS,YAAY,GAAG,SAAfA,YAAe,CAAA0B,GAAG,EAAI;AAC1B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAIC,GAAG,GAAG,IAAIC,KAAJ,EAAV;;AACAD,IAAAA,GAAG,CAACE,MAAJ,GAAa;AAAA,aAAMJ,OAAO,CAACE,GAAD,CAAb;AAAA,KAAb;;AACAA,IAAAA,GAAG,CAACG,OAAJ,GAAc,UAAAC,CAAC;AAAA,aAAIL,MAAM,CAACK,CAAD,CAAV;AAAA,KAAf;;AACAJ,IAAAA,GAAG,CAACJ,GAAJ,GAAUA,GAAV;AACD,GALM,CAAP;AAMD,CAPD","sourcesContent":["export const ImageCompressor = async (\n  file,\n  maxWidth = 1280,\n  imgType,\n  encoderOptions\n) => {\n  let fileURL = await URL.createObjectURL(file);\n  imgType = imgType || \"image/jpeg\";\n  encoderOptions = encoderOptions || 0.7;\n  let defaultBGColor = \"#ffffff\";\n\n  // create img tag to calculate the size of image\n  let image = await makeImageTag(fileURL);\n  let newWidth = Math.min(image.width, maxWidth);\n  let newHeight = Math.floor((image.height / image.width) * newWidth);\n\n  // create a temporary canvas tag to draw the downscaled image on.\n  let canvas = document.createElement(\"canvas\");\n  canvas.width = newWidth;\n  canvas.height = newHeight;\n\n  // draw the downscaled image on the canvas and get the new data url\n  let ctx = canvas.getContext(\"2d\");\n  ctx.fillStyle = defaultBGColor;\n  ctx.fillRect(0, 0, newWidth, newHeight);\n  ctx.drawImage(image, 0, 0, newWidth, newHeight);\n  let newDataURL = canvas.toDataURL(imgType, encoderOptions);\n\n  // build file with url\n  let response = await fetch(newDataURL);\n  let blob = await response.blob();\n  let newFile = new File([blob], file.name.replace(/\\.\\w+$/, \".jpg\"));\n  return newFile;\n};\n\nconst makeImageTag = src => {\n  return new Promise((resolve, reject) => {\n    let img = new Image();\n    img.onload = () => resolve(img);\n    img.onerror = e => reject(e);\n    img.src = src;\n  });\n};\n"]},"metadata":{},"sourceType":"module"}