{"ast":null,"code":"import _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// import motionImage from \"../../../Image/motion-icon.svg\";\n// import looksImage from \"../../../Image/looks-icon.svg\";\n// import eventImage from \"../../../Image/event-icon.svg\";\n// import controlImage from \"../../../Image/control-icon.svg\";\n// import sensingImage from \"../../../Image/sensing-icon.svg\";\n// import operatorImage from \"../../../Image/operator-icon.svg\";\n// import physicsImage from \"../../../Image/physics-icon.svg\";\n// import soundImage from \"../../../Image/sound-icon.svg\";\n// import timeImage from \"../../../Image/time-icon.svg\";\n// import parameterImage from \"../../../Image/data-icon.svg\";\n// import penImage from \"../../../Image/pen-icon.svg\";\n// import mobileImage from \"../../../Image/phone-icon.svg\";\nimport { EDITORMODE } from \"../../../Common/Util/Constant\"; // todo: name legacy\n// parameter >> data\n\nvar ApiLibrary = /*#__PURE__*/function () {\n  function ApiLibrary() {\n    _classCallCheck(this, ApiLibrary);\n\n    this.apiList = [{\n      name: \"ID_MOTION\",\n      api: [{\n        name: \"moveForward(steps)\",\n        snippet: \"moveForward(100)\",\n        selection: \"100\",\n        tip: {\n          description: {\n            ko: \"steps만큼 움직이며 바라보는 방향으로 이동하기\",\n            \"en\": \"Moves the sprite forward a specified number of steps in the direction\"\n          },\n          \"params\": [{\n            name: \"steps\",\n            description: {\n              ko: \"숫자 steps만큼 바라보는 방향으로 이동한다\",\n              \"en\": \"Moves the sprite a specified number of steps\"\n            }\n          }],\n          \"description2\": {\n            ko: \"움직임이 멈출 때까지 다음 코드는 실행되지 않는다\"\n          }\n        },\n        id: \"moveForward\",\n        chatbotDescription: \"moveForward(steps)는 스프라이트가 바라보고 있는 방향으로 steps만큼 움직이며 이동하는 API야. steps에 원하는 숫자 값을 입력해볼래? 참고로, 움직임이 멈출 때까지 다음 코드는 실행되지 않아!\"\n      }, {\n        name: \"moveX(steps)\",\n        snippet: \"moveX(100)\",\n        selection: \"100\",\n        tip: {\n          description: {\n            ko: \"x좌표를 steps만큼 움직이며 이동하기\"\n          },\n          \"params\": [{\n            name: \"steps\",\n            description: {\n              ko: \"숫자\"\n            }\n          }],\n          \"description2\": {\n            ko: \"steps만큼 x좌표를 이동한다\"\n          }\n        },\n        id: \"moveX\",\n        chatbotDescription: \"moveX(steps)는 steps만큼 x좌표를 움직이며 이동하는 API야. 0보다 큰 숫자를 넣으면 오른쪽으로, 0보다 작은 숫자를 넣으면 왼쪽으로 이동해. steps에 원하는 숫자를 입력해볼래?\"\n      }, {\n        name: \"moveY(steps)\",\n        snippet: \"moveY(100)\",\n        selection: \"100\",\n        tip: {\n          description: {\n            ko: \"y좌표를 steps만큼 움직이며 이동하기\"\n          },\n          \"params\": [{\n            name: \"steps\",\n            description: {\n              ko: \"숫자\"\n            }\n          }],\n          \"description2\": {\n            ko: \"steps만큼 y좌표를 이동한다\"\n          }\n        },\n        id: \"moveY\",\n        chatbotDescription: \"moveY(steps)는 steps만큼 y좌표를 움직이며 이동하는 API야. 0보다 큰 숫자를 넣으면 아래로, 0보다 작은 숫자를 넣으면 위로 이동해. steps에 원하는 숫자를 입력해볼래?\"\n      }, {\n        name: \"moveTo(x,y)\",\n        snippet: \"moveTo(100,100)\",\n        selection: \"100\",\n        tip: {\n          description: {\n            ko: \"x,y 좌표로 움직이며 이동하기\"\n          },\n          \"params\": [{\n            name: \"x\",\n            description: {\n              ko: \"숫자\"\n            }\n          }, {\n            name: \"y\",\n            description: {\n              ko: \"숫자\"\n            }\n          }],\n          \"description2\": {\n            ko: \"x만큼 x좌표로 y만큼 y좌표로 이동한다\"\n          }\n        },\n        id: \"moveTo\",\n        chatbotDescription: \"moveTo(x, y)는 스프라이트를 x, y 좌표로 움직이며 이동시키는 API야. x, y에 원하는 숫자 값을 입력해봐.\"\n      }, {\n        name: \"moveToSprite(name)\",\n        snippet: \"moveToSprite(\\\"name\\\")\",\n        selection: \"name\",\n        \"selectionType\": \"sprite\",\n        tip: {\n          description: {\n            ko: \"특정 스프라이트로 움직이며 이동하기\"\n          },\n          \"params\": [{\n            name: \"name\",\n            description: {\n              ko: \"문자열\"\n            }\n          }],\n          \"description2\": {\n            ko: \"특정 스프라이트를 name 스프라이트의 좌표로 이동한다\"\n          }\n        },\n        id: \"moveToSprite\",\n        chatbotDescription: \"moveToSprite(name)는 스프라이트를 특정 스프라이트의 위치로 움직이며 이동시키는 API야. name에 원하는 스프라이트의 이름을 적어봐.\"\n      }, {\n        name: \"moveToMousePointer()\",\n        snippet: \"moveToMousePointer()\",\n        tip: {\n          description: {\n            ko: \"마우스포인터로 움직이며 이동하기\"\n          },\n          \"description2\": {\n            ko: \"scene안에 마우스 포인터를 따라 스프라이트가 이동한다\"\n          }\n        },\n        id: \"moveToMousePointer\",\n        chatbotDescription: \"moveToMousePointer()는 스프라이트를 마우스 포인터의 위치로 움직이며 이동시키는 API야.\"\n      }, {\n        name: \"moveToRandom()\",\n        snippet: \"moveToRandom()\",\n        tip: {\n          description: {\n            ko: \"임의의 좌표로 위치를 움직이며 이동하기\"\n          },\n          \"description2\": {\n            ko: \"스프라이트의 위치를 임의의 좌표로 움직이며 이동한다\"\n          }\n        },\n        id: \"moveToRandom\",\n        chatbotDescription: \"moveToRandom()은 스프라이트를 임의의 위치로 움직이며 이동시키는 API야. 스프라이트가 어디로 이동할지 모른다 이거지~\"\n      }, {\n        name: \"setMoveSpeed(speed)\",\n        snippet: \"setMoveSpeed(100)\",\n        selection: \"100\",\n        tip: {\n          description: {\n            ko: \"움직이는 속도를 speed만큼 정하기\"\n          },\n          \"params\": [{\n            name: \"speed\",\n            description: {\n              ko: \"숫자\"\n            }\n          }],\n          \"description2\": {\n            ko: \"move..() 관련 함수들의 이동속도를 설정한다\\n\"\n          }\n        },\n        id: \"setMoveSpeed\",\n        chatbotDescription: \"setMoveSpeed(speed)는 움직이는 속도를 설정하는 API야. speed에 원하는 숫자 값을 입력하면 move와 관련된 API들을 사용할 때 이동 속도를 설정할 수 있어.\"\n      }, {\n        name: \"goForward(steps)\",\n        snippet: \"goForward(100)\",\n        selection: \"100\",\n        tip: {\n          description: {\n            ko: \"steps만큼 바라보는 방향으로 위치를 설정하기\"\n          },\n          \"params\": [{\n            name: \"steps\",\n            description: {\n              ko: \"숫자\"\n            }\n          }],\n          \"description2\": {\n            ko: \"steps만큼 바라보는 방향으로 좌표를 변경한다\"\n          }\n        },\n        id: \"goForward\",\n        chatbotDescription: \"goForward(steps)는 스프라이트가 바라보고 있는 방향으로 steps만큼 이동시키는 API야. steps에 원하는 숫자 값을 입력해볼래? 아, 참고로 스프라이트들은 기본적으로 오른쪽을 바라보고 있어!\"\n      }, {\n        name: \"goX(steps)\",\n        snippet: \"goX(100)\",\n        selection: \"100\",\n        tip: {\n          description: {\n            ko: \"x좌표를 steps만큼 바꾸기\"\n          },\n          \"params\": [{\n            name: \"steps\",\n            description: {\n              ko: \"숫자\"\n            }\n          }],\n          \"description2\": {\n            ko: \"steps만큼 x좌표를 변경한다\"\n          }\n        },\n        id: \"goX\",\n        chatbotDescription: \"goX(steps)는 steps만큼 x좌표를 변경하는 API야. 0보다 큰 숫자를 넣으면 오른쪽으로, 0보다 작은 숫자를 넣으면 왼쪽으로 이동해. steps에 원하는 숫자를 입력해볼래?\"\n      }, {\n        name: \"goY(steps)\",\n        snippet: \"goY(100)\",\n        selection: \"100\",\n        tip: {\n          description: {\n            ko: \"y좌표를 steps만큼 바꾸기\"\n          },\n          \"params\": [{\n            name: \"steps\",\n            description: {\n              ko: \"숫자\"\n            }\n          }],\n          \"description2\": {\n            ko: \"steps만큼 y좌표를 변경한다\"\n          }\n        },\n        id: \"goY\",\n        chatbotDescription: \"goY(steps)는 steps만큼 y좌표를 변경하는 API야. 0보다 큰 숫자를 넣으면 아래로, 0보다 작은 숫자를 넣으면 위로 이동해. steps에 원하는 숫자를 입력해볼래?\"\n      }, {\n        name: \"goTo(x,y)\",\n        snippet: \"goTo(100,100)\",\n        selection: \"100\",\n        tip: {\n          description: {\n            ko: \"위치 변경하기\"\n          },\n          \"params\": [{\n            name: \"x\",\n            description: {\n              ko: \"숫자\"\n            }\n          }, {\n            name: \"y\",\n            description: {\n              ko: \"숫자\"\n            }\n          }],\n          \"description2\": {\n            ko: \"스프라이트의 x, y 좌표를 변경한다\"\n          }\n        },\n        id: \"goTo\",\n        chatbotDescription: \"goTo(x, y)는 스프라이트를 x, y 좌표로 이동시키는 API야. x, y에 원하는 숫자 값을 입력해봐.\"\n      }, {\n        name: \"goToSprite(name)\",\n        snippet: \"goToSprite(\\\"name\\\")\",\n        selection: \"name\",\n        \"selectionType\": \"sprite\",\n        tip: {\n          description: {\n            ko: \"특정 스프라이트로 위치를 변경하기\"\n          },\n          \"params\": [{\n            name: \"name\",\n            description: {\n              ko: \"문자열\"\n            }\n          }],\n          \"description2\": {\n            ko: \"스프라이트의 좌표를 name 스프라이트로 변경한다\"\n          }\n        },\n        id: \"goToSprite\",\n        chatbotDescription: \"goToSprite(name)는 스프라이트를 특정 스프라이트의 위치로 이동시키는 API야. name에 원하는 스프라이트의 이름을 적어봐.\"\n      }, {\n        name: \"goToMousePointer()\",\n        snippet: \"goToMousePointer()\",\n        tip: {\n          description: {\n            ko: \"마우스포인터로 위치를 변경하기\"\n          },\n          \"description2\": {\n            ko: \"스프라이트의 좌표를 마우스 포인터의 좌표로 변경한다\"\n          }\n        },\n        id: \"goToMousePointer\",\n        chatbotDescription: \"goToMousePointer()는 스프라이트를 마우스 포인터의 위치로 이동시키는 API야.\"\n      }, {\n        name: \"goToRandom()\",\n        snippet: \"goToRandom()\",\n        tip: {\n          description: {\n            ko: \"임의의 좌표로 위치를 변경하기\"\n          },\n          \"description2\": {\n            ko: \"스프라이트의 위치를 임의의 좌표로 변경한다\"\n          }\n        },\n        id: \"goToRandom\",\n        chatbotDescription: \"goToRandom()은 스프라이트를 임의의 위치로 이동시키는 API야. 스프라이트가 어디로 이동할지 모른다 이거지~\"\n      }, {\n        name: \"setDegree(degree)\",\n        snippet: \"setDegree(90)\",\n        selection: \"90\",\n        tip: {\n          description: {\n            ko: \"스프라이트의 각도 설정하기\"\n          },\n          \"params\": [{\n            name: \"degree\",\n            description: {\n              ko: \"숫자\"\n            }\n          }],\n          \"description2\": {\n            ko: \"스프라이트의 각도를 degree로 설정한다\"\n          }\n        },\n        id: \"setDegree\",\n        chatbotDescription: \"setDegree(degree)는 스프라이트의 각도를 설정하는 API야. 각도는 시계방향으로 변경되니까 참고해!\"\n      }, {\n        name: \"turn(degree)\",\n        snippet: \"turn(90)\",\n        selection: \"90\",\n        tip: {\n          description: {\n            ko: \"시계방향으로 돌기\"\n          },\n          \"params\": [{\n            name: \"degree\",\n            description: {\n              ko: \"숫자\"\n            }\n          }],\n          \"description2\": {\n            ko: \"degree만큼 시계방향으로 스프라이트의 각도를 회전한다\"\n          }\n        },\n        id: \"turn\",\n        chatbotDescription: \"turn(degree)는 스프라이트를 시계방향으로 원하는 각도만큼 돌리는 API야. degree에 숫자 값을 입력해볼래?\"\n      }, {\n        name: \"turnToSprite(name)\",\n        snippet: \"turnToSprite(\\\"name\\\")\",\n        selection: \"name\",\n        \"selectionType\": \"sprite\",\n        tip: {\n          description: {\n            ko: \"특정 스프라이트로 방향 보기\"\n          },\n          \"params\": [{\n            name: \"name\",\n            description: {\n              ko: \"문자열\"\n            }\n          }],\n          \"description2\": {\n            ko: \"특정 스프라이트를 바라보도록 각도를 회전한다\"\n          }\n        },\n        id: \"turnToSprite\",\n        chatbotDescription: \"turnToSprite(name)는 스프라이트가 특정 스프라이트가 있는 방향을 바라보도록 하는 API야. 원하는 스프라이트의 이름을 name에 입력해봐!\"\n      }, {\n        name: \"turnToMousePointer()\",\n        snippet: \"turnToMousePointer()\",\n        tip: {\n          description: {\n            ko: \"마우스 방향 보기\"\n          },\n          \"description2\": {\n            ko: \"마우스 포인터를 따라 스프라이트가 이동한다\"\n          }\n        },\n        id: \"turnToMousePointer\",\n        chatbotDescription: \"turnToMousePointer()는 스프라이트가 마우스 포인터가 있는 방향을 바라보도록 하는 API야. \"\n      }, {\n        name: \"setFlipX(isFlipped)\",\n        snippet: \"setFlipX(true)\",\n        selection: \"true\",\n        tip: {\n          description: {\n            ko: \"좌우를 반전\"\n          },\n          \"params\": [{\n            name: \"isFlipped\",\n            description: {\n              ko: \"true 또는 false\"\n            }\n          }],\n          \"description2\": {\n            ko: \"스프라이트의 좌우를 반전한다\"\n          }\n        },\n        id: \"setFlipX\",\n        chatbotDescription: \"setFlipX(isFlipped)는 스프라이트를 좌우 반전시키는 API야. isFlipped에 true를 입력하면 좌우 반전할 수 있어.\"\n      }, {\n        name: \"setFlipY(isFlipped)\",\n        snippet: \"setFlipY(true)\",\n        selection: \"true\",\n        tip: {\n          description: {\n            ko: \"위아래로 뒤집기\"\n          },\n          \"params\": [{\n            name: \"isFlipped\",\n            description: {\n              ko: \"true or false\"\n            }\n          }],\n          \"description2\": {\n            ko: \"스프라이트의 상하를 뒤집는다\"\n          }\n        },\n        id: \"setFlipY\",\n        chatbotDescription: \"setFlipY(isFlipped)는 스프라이트를 상하 반전시키는 API야. isFlipped에 true를 입력하면 상하 반전할 수 있어.\"\n      }, {\n        name: \"getX()\",\n        snippet: \"getX()\",\n        tip: {\n          description: {\n            ko: \"x좌표\"\n          },\n          \"description2\": {\n            ko: \"스프라이트의 x좌표 값을 반환한다\"\n          }\n        },\n        id: \"getX\",\n        chatbotDescription: \"getX()는 스프라이트의 X좌표 값을 반환하는 API야. X좌표는 왼쪽에서 시작해서 오른쪽으로 갈수록 숫자가 커져!\"\n      }, {\n        name: \"getY()\",\n        snippet: \"getY()\",\n        tip: {\n          description: {\n            ko: \"y좌표\"\n          },\n          \"description2\": {\n            ko: \"스프라이트의 y좌표 값을 반환한다\"\n          }\n        },\n        id: \"getY\",\n        chatbotDescription: \"getY()는 스프라이트의 Y좌표 값을 반환하는 API야. Y좌표는 위에서 시작해서 아래로 갈수록 숫자가 커져!\"\n      }, {\n        name: \"getMousePointerX()\",\n        snippet: \"getMousePointerX()\",\n        tip: {\n          description: {\n            ko: \"마우스 x좌표\"\n          },\n          \"description2\": {\n            ko: \"마우스 포인터의 x좌표 값을 반환한다\"\n          }\n        },\n        id: \"getMousePointerX\",\n        chatbotDescription: \"getMousePointerX()는 마우스의 x값을 반환하는 API야.\"\n      }, {\n        name: \"getMousePointerY()\",\n        snippet: \"getMousePointerY()\",\n        tip: {\n          description: {\n            ko: \"마우스 y좌표\"\n          },\n          \"description2\": {\n            ko: \"마우스 포인터의 y좌표 값을 반환한다\"\n          }\n        },\n        id: \"getMousePointerY\",\n        chatbotDescription: \"getMousePointerY()는 마우스의 y값을 반환하는 API야.\"\n      }, {\n        name: \"getDegree()\",\n        snippet: \"getDegree()\",\n        tip: {\n          description: {\n            ko: \"각도값\"\n          },\n          \"description2\": {\n            ko: \"스프라이트의 각도값을 숫자로 반환한다\"\n          }\n        },\n        id: \"getDegree\",\n        chatbotDescription: \"getDegree()는 스프라이트의 각도를 반환하는 API야.\"\n      }]\n    }, {\n      name: \"ID_LOOKS\",\n      api: [{\n        name: \"say(message,sec)\",\n        snippet: \"say(\\\"Hello, WizLab\\\",1)\",\n        selection: \"Hello, WizLab\",\n        \"requiredParamCount\": 1,\n        tip: {\n          description: {\n            ko: \"sec초간 말하기\"\n          },\n          \"params\": [{\n            name: \"message\",\n            description: {\n              ko: \"문자열\"\n            }\n          }, {\n            name: \"sec\",\n            description: {\n              ko: \"숫자\"\n            }\n          }],\n          \"description2\": {\n            ko: \"스프라이트에 message를 sec초 만큼 출력한다\\n만약 sec가 없다면 말풍선이 사라지지 않는다\"\n          }\n        },\n        id: \"say\",\n        chatbotDescription: \"say(message, sec)는 말풍선에 원하는 말을 출력하는 API야. message에 원하는 문장을 입력하고, sec에 말하는 시간을 초 단위로 입력해봐!\"\n      }, {\n        name: \"stopSay()\",\n        snippet: \"stopSay()\",\n        tip: {\n          description: {\n            ko: \"말하기를 멈춘다\"\n          },\n          \"description2\": {\n            ko: \"say를 통해 하던 말을 멈추고 말풍선을 없앤다\"\n          }\n        },\n        id: \"stopSay\",\n        chatbotDescription: \"stopSay()는 말하기를 멈추는 API야. say를 통해서 하던 말을 멈출 수 있어. say에서 설정한 시간이 남았더라도 말하는 걸 멈출 수 있지.\"\n      }, {\n        name: \"playAnimation(name,isLoop)\",\n        snippet: \"playAnimation(\\\"name\\\",true)\",\n        selection: \"name\",\n        \"selectionType\": \"animation\",\n        tip: {\n          description: {\n            ko: \"애니메이션 실행하기\"\n          },\n          \"params\": [{\n            name: \"name\",\n            description: {\n              ko: \"문자열\"\n            }\n          }, {\n            name: \"isLoop\",\n            description: {\n              ko: \"true 또는 false\"\n            }\n          }],\n          \"description2\": {\n            ko: \"name 애니메이션을 isLoop에 따라 무한 혹은 1회 동작한다\"\n          }\n        },\n        id: \"playAnimation\",\n        chatbotDescription: \"playAnimation(name, isLoop)은 애니메이션을 실행하는 API야. name에 스프라이트 속성창에 있는 애니메이션 중에서 원하는 것을 입력해봐! 아, isLoop 자리에 false를 넣으면 애니메이션을 1번만 실행할 수 있어.\"\n      }, {\n        name: \"stopAnimation()\",\n        snippet: \"stopAnimation()\",\n        tip: {\n          description: {\n            ko: \"애니메이션 멈추기\"\n          },\n          \"description2\": {\n            ko: \"동작중인 애니메이션을 멈춘다\"\n          }\n        },\n        id: \"stopAnimation\",\n        chatbotDescription: \"stopAnimation()은 애니메이션을 멈추는 API야. 동작 중인 애니메이션을 멈출 수 있지.\"\n      }, {\n        name: \"getCurrentAnimation()\",\n        snippet: \"getCurrentAnimation()\",\n        tip: {\n          description: {\n            ko: \"현재 동작중인 애니메이션 이름 가져오기\"\n          },\n          \"description2\": {\n            ko: \"스프라이트에 동작중인 애니메이션이 있다면 그 이름을 가져온다\"\n          }\n        },\n        id: \"getCurrentAnimation\",\n        chatbotDescription: \"getCurrentAnimation()은 현재 재생되고 있는 애니메이션의 이름을 반환하는 API야.\"\n      }, {\n        name: \"show()\",\n        snippet: \"show()\",\n        tip: {\n          description: {\n            ko: \"보이기\"\n          },\n          \"description2\": {\n            ko: \"scene에 스프라이트가 보이며, 초기값이 show이기\\n때문에 hide()와 함께 사용해야 동작을 확인할 수 있다\"\n          }\n        },\n        id: \"show\",\n        chatbotDescription: \"show()는 숨겨놨던 스프라이트를 다시 보이게 할 수 있는 API야.\"\n      }, {\n        name: \"hide()\",\n        snippet: \"hide()\",\n        tip: {\n          description: {\n            ko: \"숨기기\"\n          },\n          \"description2\": {\n            ko: \"scene에서 스프라이트가 사라지며, show()와 함께 사용한다\"\n          }\n        },\n        id: \"hide\",\n        chatbotDescription: \"hide()는 스프라이트를 눈에 보이지 않게 숨기는 API야. 한 가지 더 알려주자면, 스프라이트 속성창의 눈 모양 아이콘을 클릭해도 스프라이트를 숨길 수 있지.\"\n      }, {\n        name: \"bringToTop()\",\n        snippet: \"bringToTop()\",\n        tip: {\n          description: {\n            ko: \"맨 앞으로 가져오기\"\n          },\n          \"description2\": {\n            ko: \"scene안에 여러 스프라이트가 중첩되었을 때\\n이 함수를 호출한 스프라이트가 맨앞에 보이게 된다\"\n          }\n        },\n        id: \"bringToTop\",\n        chatbotDescription: \"bringToTop()은 스프라이트를 맨 앞으로 가져오는 API야. 여러 스프라이트가 겹쳐있을 때 이 API를 사용하면 맨 앞으로 가져올 수 있어.\"\n      }, {\n        name: \"setSize(percent)\",\n        snippet: \"setSize(100)\",\n        selection: \"100\",\n        tip: {\n          description: {\n            ko: \"크기를 value비율로 정하기\"\n          },\n          \"params\": [{\n            name: \"value\",\n            description: {\n              ko: \"문자열\"\n            }\n          }],\n          \"description2\": {\n            ko: \"비율로 스프라이트의 사이즈가 변경한다\"\n          }\n        },\n        id: \"setSize\",\n        chatbotDescription: \"setSize(percent)는 스프라이트의 크기를 비율로 변경할 수 있는 API야. percent에 200을 입력하면 스프라이트의 크기가 두 배가 되지. percent에 원하는 숫자 값을 입력해봐!\"\n      }, {\n        name: \"addSize(percent)\",\n        snippet: \"addSize(10)\",\n        selection: \"10\",\n        tip: {\n          description: {\n            ko: \"크기를 value비율로 정하기\"\n          },\n          \"params\": [{\n            name: \"value\",\n            description: {\n              ko: \"문자열\"\n            }\n          }],\n          \"description2\": {\n            ko: \"비율로 스프라이트의 사이즈가 변경한다\"\n          }\n        },\n        id: \"addSize\",\n        chatbotDescription: \"addSize(percent)는 스프라이트 크기를 비율로 설정하는 API야. percent에 원하는 비율을 넣어서 사용해봐.\"\n      }, {\n        name: \"getSize()\",\n        snippet: \"getSize()\",\n        tip: {\n          description: {\n            ko: \"크기값\"\n          },\n          \"description2\": {\n            ko: \"스프라이트의 크기를 반환한다\"\n          }\n        },\n        id: \"getSize\",\n        chatbotDescription: \"getSize()는 스프라이트의 크기를 비율로 반환하는 API야. 스프라이트의 크기를 변경하지 않았다면 100%니깐 100이 반환되지.\"\n      }, {\n        name: \"getWidth()\",\n        snippet: \"getWidth()\",\n        tip: {\n          description: {\n            ko: \"너비값\"\n          },\n          \"description2\": {\n            ko: \"스프라이트의 너비값을 반환한다\"\n          }\n        },\n        id: \"getWidth\",\n        chatbotDescription: \"getWidth()는 스프라이트의 너비를 반환하는 API야.\"\n      }, {\n        name: \"getHeight()\",\n        snippet: \"getHeight()\",\n        tip: {\n          description: {\n            ko: \"높이값\"\n          },\n          \"description2\": {\n            ko: \"스프라이트의 높이값을 반환한다\"\n          }\n        },\n        id: \"getHeight\",\n        chatbotDescription: \"getHeight()는 스프라이트의 높이를 반환하는 API야.\"\n      }, {\n        name: \"setText(text)\",\n        snippet: \"setText(\\\"text\\\")\",\n        selection: \"text\",\n        tip: {\n          description: {\n            ko: \"문구 설정하기\"\n          },\n          \"params\": [{\n            name: \"text\",\n            description: {\n              ko: \"문자열\"\n            }\n          }],\n          \"description2\": {\n            ko: \"텍스트상자 스프라이트의 메시지를 수정한다\"\n          }\n        },\n        id: \"setText\",\n        chatbotDescription: \"setText(text)는 텍스트 상자 스프라이트의 메시지를 수정할 수 있는 API야. text에 수정하고 싶은 문구를 입력해봐!\"\n      }, {\n        name: \"appendText(text)\",\n        snippet: \"appendText(\\\"text\\\")\",\n        selection: \"text\",\n        tip: {\n          description: {\n            ko: \"문구 추가하기\"\n          },\n          \"params\": [{\n            name: \"text\",\n            description: {\n              ko: \"문자열\"\n            }\n          }],\n          \"description2\": {\n            ko: \"텍스트상자 스프라이트의 기존 메시지에\\ntext를 추가한다\"\n          }\n        },\n        id: \"appendText\",\n        chatbotDescription: \"appendText(text)는 텍스트 상자 스프라이트의 기존 메시지의 뒤에 새로운 메시지를 추가할 때 사용하는 API야.  text에 원하는 메시지를 넣고 사용해봐.\"\n      }, {\n        name: \"clearText()\",\n        snippet: \"clearText()\",\n        tip: {\n          description: {\n            ko: \"문구 모두 지우기\"\n          },\n          \"description2\": {\n            ko: \"텍스트상자 스프라이트의 메시지를\\n모두 지운다\"\n          }\n        },\n        id: \"clearText\",\n        chatbotDescription: \"clearText()는 텍스트 상자 스프라이트의 메시지를 모두 지우는 API야.\"\n      }, {\n        name: \"getText()\",\n        snippet: \"getText()\",\n        tip: {\n          description: {\n            ko: \"문구값\"\n          },\n          \"description2\": {\n            ko: \"텍스트상자 스프라이트의 메시지를 반환한다\"\n          }\n        },\n        id: \"getText\",\n        chatbotDescription: \"getText()는 텍스트 상자의 메시지를 반환하는 API야.\"\n      }, {\n        name: \"setTextColor(color)\",\n        snippet: \"setTextColor(\\\"black\\\")\",\n        selection: \"black\",\n        \"selectionType\": \"color\",\n        tip: {\n          description: {\n            ko: \"문구값\"\n          },\n          \"params\": [{\n            name: \"color\",\n            description: {\n              ko: \"문자열\"\n            }\n          }],\n          \"description2\": {\n            ko: \"텍스트상자 스프라이트의 문구 색상을 변경한다\"\n          }\n        },\n        id: \"setTextColor\",\n        chatbotDescription: \"setTextColor(color)는 텍스트 상자에 적은 메시지의 색깔을 설정하는 API야. 원하는 색을 color에 입력하고 사용해봐!\"\n      }, {\n        name: \"setRandomTextColor()\",\n        snippet: \"setRandomTextColor()\",\n        tip: {\n          description: {\n            ko: \"문구 색상 무작위로 변경하기\"\n          },\n          \"description2\": {\n            ko: \"텍스트상자 스프라이트의 문구 색상을 무작위로 변경한다\"\n          }\n        },\n        id: \"setRandomTextColor\",\n        chatbotDescription: \"setRandomTextColor()는 텍스트 상자에 적은 메시지의 색깔을 랜덤으로 설정하는 API야. 어떤 색이 나올지 모르니까 기대할 만해.\"\n      }, {\n        name: \"getTextColor()\",\n        snippet: \"getTextColor()\",\n        tip: {\n          description: {\n            ko: \"문구 색상 가져오기\"\n          },\n          \"description2\": {\n            ko: \"텍스트상자 스프라이트의 문구 색상값을 반환하다\"\n          }\n        },\n        id: \"getTextColor\",\n        chatbotDescription: \"getTextColor()는 텍스트 상자에 적은 메시지가 어떤 색인지 알려주는 API야.\"\n      }, {\n        name: \"shake()\",\n        snippet: \"shake()\",\n        tip: {\n          description: {\n            ko: \"흔들기\"\n          },\n          \"description2\": {\n            ko: \"scene에 흔들리는 효과를 적용한다\"\n          }\n        },\n        id: \"shake\",\n        chatbotDescription: \"shake()는 화면을 흔들리게 하는 API야.\"\n      }, {\n        name: \"flash()\",\n        snippet: \"flash()\",\n        tip: {\n          description: {\n            ko: \"반짝임\"\n          },\n          \"description2\": {\n            ko: \"scene에 반짝이는 효과를 적용한다\"\n          }\n        },\n        id: \"flash\",\n        chatbotDescription: \"flash()는 scene에 반짝이는 효과를 적용할 때 사용하는 API야.\"\n      }, {\n        name: \"getWorldWidth()\",\n        snippet: \"getWorldWidth()\",\n        tip: {\n          description: {\n            ko: \"배경의 너비값\"\n          },\n          \"description2\": {\n            ko: \"scene의 너비값을 반환한다\"\n          }\n        },\n        id: \"getWorldWidth\",\n        chatbotDescription: \"getWorldWidth()는 배경의 너비를 반환하는 API야. \"\n      }, {\n        name: \"getWorldHeight()\",\n        snippet: \"getWorldHeight()\",\n        tip: {\n          description: {\n            ko: \"배경의 높이값\"\n          },\n          \"description2\": {\n            ko: \"scene의 높이값을 반환한다\"\n          }\n        },\n        id: \"getWorldHeight\",\n        chatbotDescription: \"getWorldHeight()는 배경의 높이를 반환하는 API야. \"\n      }]\n    }, {\n      name: \"ID_EVENT\",\n      api: [{\n        name: \"onFrame(function())\",\n        snippet: \"onFrame(function(){})\",\n        tip: {\n          description: {\n            ko: \"매 프레임마다 입력된 함수를 반복하여 호출하기\"\n          },\n          \"params\": [{\n            name: \"function\",\n            description: {\n              ko: \"호출되는 함수\"\n            }\n          }],\n          \"description2\": {\n            ko: \"보통 1초에 60번 호출된다.\"\n          }\n        },\n        newLine: \"onFrame(function(){\",\n        id: \"onFrame\",\n        chatbotDescription: \"onFrame(function())은 프레임마다 {}괄호 안에 입력된 코드를 실행하는 API야. 참고로 알려주자면, 1 프레임은 0.1초 정도니까 보통 1초에 60번 호출한다고 생각하면 돼.\"\n      }, {\n        name: \"onSignal(name,function())\",\n        snippet: \"onSignal(\\\"name\\\",function(){})\",\n        tip: {\n          description: {\n            ko: \"특정한 신호를 받았을 때 입력된 함수 호출하기\"\n          },\n          \"params\": [{\n            name: \"name\",\n            description: {\n              ko: \"신호의 이름\"\n            }\n          }, {\n            name: \"function\",\n            description: {\n              ko: \"호출되는 함수\"\n            }\n          }]\n        },\n        newLine: \"onSignal(\\\"name\\\",function(){\",\n        selection: \"name\",\n        \"selectionType\": \"signal\",\n        id: \"onSignal\",\n        chatbotDescription: \"onSignal(name, function())은 특정 신호를 받았을 때 {} 괄호 안에 입력된 코드를 실행하는 API야. name에 sendSignal에서 만든 신호의 이름을 입력해봐!\"\n      }, {\n        name: \"sendSignal(name)\",\n        snippet: \"sendSignal(\\\"name\\\")\",\n        tip: {\n          description: {\n            ko: \"입력된 이름의 신호 보내기\"\n          },\n          \"params\": [{\n            name: \"name\",\n            description: {\n              ko: \"신호의 이름\"\n            }\n          }]\n        },\n        selection: \"name\",\n        \"selectionType\": \"signal\",\n        id: \"sendSignal\",\n        chatbotDescription: \"sendSignal(name)은 신호를 보내는 API야. name에 원하는 신호의 이름을 입력해볼래? 참, 보낸 신호는 onSignal로 받을 수 있어.\"\n      }, {\n        name: \"changeScene(name)\",\n        snippet: \"changeScene(\\\"name\\\")\",\n        tip: {\n          description: {\n            ko: \"입력된 이름의 scene으로 변경하기\"\n          },\n          \"params\": [{\n            name: \"name\",\n            description: {\n              ko: \"scene의 이름\"\n            }\n          }]\n        },\n        selection: \"name\",\n        \"selectionType\": \"scene\",\n        id: \"changeScene\",\n        chatbotDescription: \"changeScene(name)은 현재 scene을 변경하는 API야. name에 변경하고 싶은 scene의 이름을 넣고 사용해봐.\"\n      }, {\n        name: \"onClick(function())\",\n        snippet: \"onClick(function(){})\",\n        tip: {\n          description: {\n            ko: \"스프라이트를 클릭했을 때 입력된 함수 호출하기\"\n          },\n          \"params\": [{\n            name: \"function\",\n            description: {\n              ko: \"호출되는 함수\"\n            }\n          }]\n        },\n        newLine: \"onClick(function(){\",\n        id: \"onClick\",\n        chatbotDescription: \"onClick(function())은 스프라이트를 클릭했을 때 {} 괄호 안의 코드를 실행하는 API야. 클릭했을 때 입력된 함수를 호출하는 거지.\"\n      }, {\n        name: \"onClickUp(function())\",\n        snippet: \"onClickUp(function(){})\",\n        tip: {\n          description: {\n            ko: \"스프라이트를 클릭했다가 뗐을 때 입력된 함수 호출하기\"\n          },\n          \"params\": [{\n            name: \"function\",\n            description: {\n              ko: \"호출되는 함수\"\n            }\n          }]\n        },\n        newLine: \"onClickUp(function(){\",\n        id: \"onClickUp\",\n        chatbotDescription: \"onClickUp(function())은 스프라이트를 클릭했다가 땠을 때 {} 괄호 안의 코드를 실행하는 API야. 클릭을 멈췄을 때 입력된 함수를 호출하는 거지.\"\n      }, {\n        name: \"onScreenClick(function())\",\n        snippet: \"onScreenClick(function(){})\",\n        tip: {\n          description: {\n            ko: \"화면을 클릭했을 때 입력된 함수 호출하기\"\n          },\n          \"params\": [{\n            name: \"function\",\n            description: {\n              ko: \"호출되는 함수\"\n            }\n          }]\n        },\n        newLine: \"onScreenClick(function(){\",\n        id: \"onScreenClick\",\n        chatbotDescription: \"onScreenClickfunction())은 화면을 클릭했을 때 {} 괄호 안에 입력된 코드를 실행하는 API야.  화면을 클릭하면 함수를 호출하는 거지.\"\n      }, {\n        name: \"onScreenClickUp(function())\",\n        snippet: \"onScreenClickUp(function(){})\",\n        tip: {\n          description: {\n            ko: \"화면을 클릭했다가 뗐을 때 입력된 함수 호출하기\"\n          },\n          \"params\": [{\n            name: \"function\",\n            description: {\n              ko: \"호출되는 함수\"\n            }\n          }]\n        },\n        newLine: \"onScreenClickUp(function(){\",\n        id: \"onScreenClickUp\",\n        chatbotDescription: \"onScreenClickfunction())은 화면을 클릭하다가 땠을 때 {} 괄호 안에 입력된 코드를 실행하는 API야. 화면 클릭을 멈추면 함수를 호출하는 거지.\"\n      }, {\n        name: \"onKey(key,function())\",\n        snippet: \"onKey(\\\"key\\\",function(){})\",\n        tip: {\n          description: {\n            ko: \"특정 키를 눌렀을 때 호출되는 함수\"\n          },\n          \"params\": [{\n            name: \"key\",\n            description: {\n              ko: \"키보드의 값\"\n            }\n          }, {\n            name: \"function\",\n            description: {\n              ko: \"호출되는 함수\"\n            }\n          }]\n        },\n        newLine: \"onKey(\\\"key\\\",function(){\",\n        selection: \"key\",\n        \"selectionType\": \"key\",\n        id: \"onKey\",\n        chatbotDescription: \"onKey(key, function())는 특정 키를 눌렀을 때 {} 괄호 안에 입력된 코드를 실행하는 API야. key에 키의 종류를 입력해볼래? 입력한 key를 눌렀을 때 [}괄호로 묶인 함수를 실행할 거야.\"\n      }, {\n        name: \"onKeyUp(key,function())\",\n        snippet: \"onKeyUp(\\\"key\\\",function(){})\",\n        tip: {\n          description: {\n            ko: \"특정 키를 눌렀다가 뗐을 때 호출되는 함수\"\n          },\n          \"params\": [{\n            name: \"key\",\n            description: {\n              ko: \"키보드의 값\"\n            }\n          }, {\n            name: \"function\",\n            description: {\n              ko: \"호출되는 함수\"\n            }\n          }]\n        },\n        newLine: \"onKeyUp(\\\"key\\\",function(){\",\n        selection: \"key\",\n        \"selectionType\": \"key\",\n        id: \"onKeyUp\",\n        chatbotDescription: \"onKeyUp(key, function())은 특정 키를 눌렀다가 땠을 때 {} 괄호 안에 입력된 코드를 실행하는 API야. key에 키의 종류를 입력해볼래? 입력한 key를 눌렀을 때 [}괄호로 묶인 함수를 실행할 거야.\"\n      }, {\n        name: \"onOverlap(name,function())\",\n        snippet: \"onOverlap(\\\"name\\\",function(){})\",\n        tip: {\n          description: {\n            ko: \"특정 스프라이트와 만났을 때 입력된 함수 호출하기\"\n          },\n          \"params\": [{\n            name: \"name\",\n            description: {\n              ko: \"스프라이트의 이름\"\n            }\n          }, {\n            name: \"function\",\n            description: {\n              ko: \"호출되는 함수\"\n            }\n          }]\n        },\n        newLine: \"onOverlap(\\\"name\\\",function(){\",\n        selection: \"name\",\n        \"selectionType\": \"sprite\",\n        id: \"onOverlap\",\n        chatbotDescription: \"onOverlap(name, function())은 특정 스프라이트와 만났을 때 {} 괄호 안에 입력된 코드를 실행하는 API야. name에 원하는 스프라이트의 이름을 입력해봐!\"\n      }, {\n        name: \"onOverlap([names...],function())\",\n        snippet: \"onOverlap([\\\"name1\\\",\\\"name2\\\"],function(){})\",\n        tip: {\n          description: {\n            ko: \"배열 속 스프라이트들과 만났을 때 입력된 함수 호출하기\"\n          },\n          \"params\": [{\n            name: \"Array\",\n            description: {\n              ko: \"스프라이트 이름들의 배열\"\n            }\n          }, {\n            name: \"function\",\n            description: {\n              ko: \"호출되는 함수\"\n            }\n          }]\n        },\n        newLine: \"onOverlap([\\\"name1\\\",\\\"name2\\\"],function(){\",\n        selection: \"name1\",\n        \"selectionType\": \"sprite\",\n        id: \"onOverlap\",\n        chatbotDescription: \"onOverlap(name, function())은 특정 스프라이트와 만났을 때 {} 괄호 안에 입력된 코드를 실행하는 API야. name에 원하는 스프라이트의 이름을 입력해봐!\"\n      }, {\n        name: \"onOverlapOnce(name,function())\",\n        snippet: \"onOverlapOnce(\\\"name\\\",function(){})\",\n        tip: {\n          description: {\n            ko: \"특정 스프라이트와 만났을 때 입력된 함수를 한번만 호출하기\"\n          },\n          \"params\": [{\n            name: \"name\",\n            description: {\n              ko: \"스프라이트의 이름\"\n            }\n          }, {\n            name: \"function\",\n            description: {\n              ko: \"호출되는 함수\"\n            }\n          }]\n        },\n        newLine: \"onOverlapOnce(\\\"name\\\",function(){\",\n        selection: \"name\",\n        \"selectionType\": \"sprite\",\n        id: \"onOverlapOnce\",\n        chatbotDescription: \"onOverlapOnce(name,function())는 특정 스프라이트와 만났을 때 {} 괄호 안에 입력된 코드를 한 번만 실행하는 API야. name에 원하는 스프라이트의 이름을 입력해봐!\"\n      }, {\n        name: \"onOutStage(function())\",\n        snippet: \"onOutStage(function(){})\",\n        tip: {\n          description: {\n            ko: \"화면 밖으로 나갔을 때 입력된 함수 호출하기\"\n          },\n          \"params\": [{\n            name: \"function\",\n            description: {\n              ko: \"호출되는 함수\"\n            }\n          }]\n        },\n        newLine: \"onOutStage(function(){\",\n        id: \"onOutStage\",\n        chatbotDescription: \"onOutStage(function())는 스프라이트가 화면 밖으로 나갔을 때 {} 괄호 안에 입력된 코드를 실행하는 API야.  화면 밖으로 나가면 함수를 호출하는 거지.\"\n      }, {\n        name: \"onSwipe(direction,function())\",\n        snippet: \"onSwipe(\\\"left\\\",function(){})\",\n        tip: {\n          description: {\n            ko: \"화면을 특정한 방향으로 스와이프했을 때 입력된 함수 호출하기\"\n          },\n          \"params\": [{\n            name: \"direction\",\n            description: {\n              ko: \"방향\"\n            }\n          }, {\n            name: \"function\",\n            description: {\n              ko: \"호출되는 함수\"\n            }\n          }],\n          \"description2\": {\n            ko: \"방향 값으로는 left, right, top, down 이 있다.\"\n          }\n        },\n        newLine: \"onSwipe(\\\"left\\\",function(){\",\n        selection: \"left\",\n        \"selectionType\": \"direction\",\n        id: \"onSwipe\",\n        chatbotDescription: \"onSwipe(direction, function())는 화면을 특정 방향으로 밀었을 때 {} 괄호 안에 입력된 코드를 실행하는 API야. direction에 left, right, top, down 중 한 가지를 입력해볼래?\"\n      }]\n    }, {\n      name: \"ID_CONTROL\",\n      api: [{\n        name: \"if / else / else if\",\n        snippet: \"if(true){}\",\n        id: \"if\",\n        chatbotDescription: \"if / else / else if는 조건문을 만드는 API야.  if의 ()괄호 안에 원하는 조건을 입력하면, 그 조건을 만족했을 때 {} 괄호 안의 코드가 실행되지!\"\n      }, {\n        name: \"switch~case\",\n        snippet: \"switch(value){case \\\"\\\" :break;default :break;}\",\n        newLine: \"switch(value){\",\n        selection: \"value\",\n        id: \"switch\",\n        chatbotDescription: \"switch~case는 조건문이랑 비슷한데, value 값에 따라 코드를 실행하고 멈추지.\"\n      }, {\n        name: \"while()\",\n        snippet: \"while(true){}\",\n        newLine: \"while(true){\",\n        selection: \"true\",\n        id: \"while\",\n        chatbotDescription: \"while()은 반복문을 만드는 API야. () 괄호 안에 조건을 입력하면 해당 조건을 만족하는 동안 {} 괄호 안의 코드를 실행하지.\"\n      }, {\n        name: \"for()\",\n        snippet: \"for(var i=0;i<10;i++){}\",\n        newLine: \"for(var i=0;i<10;i++){\",\n        selection: \"10\",\n        id: \"for\",\n        chatbotDescription: \"for()는 반복문이고, 일정 횟수만큼 특정 명령어들을 반복하고 싶을 때 사용할 수 있어.\"\n      }, {\n        name: \"wait(secs)\",\n        snippet: \"wait(1)\",\n        selection: \"1\",\n        tip: {\n          description: {\n            ko: \"특정 시간 기다리기\"\n          },\n          \"params\": [{\n            name: \"secs\",\n            description: {\n              ko: \"숫자, 기다릴 초\"\n            }\n          }],\n          \"description2\": {\n            ko: \"secs초만큼 다음코드를 실행하지 않고 기다린다\"\n          }\n        },\n        id: \"wait\",\n        chatbotDescription: \"wait(secs)는 특정 시간을 기다릴 수 있게 하는 API야. secs에 입력된 초만큼 다음 코드를 실행하지 않고 기다리게 할 수 있어.\"\n      }, {\n        name: \"setDraggable(enabled)\",\n        snippet: \"setDraggable(true)\",\n        selection: \"true\",\n        tip: {\n          description: {\n            ko: \"드래그 가능여부 설정하기\"\n          },\n          \"params\": [{\n            name: \"enabled\",\n            description: {\n              ko: \"true 또는 false\"\n            }\n          }],\n          \"description2\": {\n            ko: \"enabled가 true이면 스프라이트를 마우스나 터치로 드래그할 수 있다\"\n          }\n        },\n        id: \"setDraggable\",\n        chatbotDescription: \"setDraggable(enabled)은 스프라이트를 드래그하여 움직일 수 있는지를 설정하는 API야. enabled에 true를 입력하면 드래그할 수 있어!\"\n      }, {\n        name: \"kill()\",\n        snippet: \"kill()\",\n        tip: {\n          description: {\n            ko: \"없애기\"\n          },\n          \"description2\": {\n            ko: \"scene에서 스프라이트가 제거된다\"\n          }\n        },\n        id: \"kill\",\n        chatbotDescription: \"kill()은 스프라이트를 없애는 API야. 스프라이트를 숨기는 hide와 달리 kill은 스프라이트를 사라지게 하지. 하지만 걱정하지 마. revive가 있다면 스프라이트를 다시 살릴 수 있어!\"\n      }, {\n        name: \"revive()\",\n        snippet: \"revive()\",\n        tip: {\n          description: {\n            ko: \"되살리기\"\n          },\n          \"description2\": {\n            ko: \"secen에서 제거된(kill) 스프라이트를 되살린다\"\n          }\n        },\n        id: \"revive\",\n        chatbotDescription: \"revive()는 kill로 제거된 스프라이트를 되살릴 수 있는 API야.\"\n      }, {\n        name: \"clone()\",\n        snippet: \"clone()\",\n        tip: {\n          description: {\n            ko: \"복제하기\"\n          },\n          \"description2\": {\n            ko: \"해당 스프라이트가 복제되고 복제된 스프라이트를 반환한다\"\n          }\n        },\n        id: \"clone\",\n        chatbotDescription: \"clone()은 해당 스프라이트가 복제되고 복제된 스프라이트를 반환하는 API야.\"\n      }, {\n        name: \"print(message)\",\n        snippet: \"print(\\\"message\\\")\",\n        selection: \"message\",\n        tip: {\n          description: {\n            ko: \"디버그 메시지 출력\"\n          },\n          \"params\": [{\n            name: \"message\",\n            description: {\n              ko: \"출력할 문자열\"\n            }\n          }],\n          \"description2\": {\n            ko: \"chatbot의 대화창에 message를 출력할 수 있다\"\n          }\n        },\n        id: \"print\",\n        chatbotDescription: \"print(message)는 챗봇 대화창에 메시지를 출력할 수 있는 API야. message에 원하는 메시지를 입력해봐! 에러가 난 부분을 찾을 때 사용하면 좋을 거야.\"\n      }, {\n        name: \"input(message)\",\n        snippet: \"input(\\\"message\\\")\",\n        selection: \"message\",\n        tip: {\n          description: {\n            ko: \"텍스트 입력받기\"\n          },\n          \"params\": [{\n            name: \"message\",\n            description: {\n              ko: \"입력받을 때 힌트\"\n            }\n          }],\n          \"description2\": {\n            ko: \"입력박스가 나타나고 문자열 또는 숫자를 입력할 수 있다.\\n[확인]을 누르면 입력된 값을 반환한다\"\n          }\n        },\n        id: \"input\",\n        chatbotDescription: \"input(message)는 텍스트를 입력받는 API야. 사용자가 입력한 값을 가져올 수 있지. message에 원하는 문구를 입력하면 입력을 받을 때 힌트처럼 나타나.\"\n      }, {\n        name: \"showRanking()\",\n        snippet: \"showRanking()\",\n        tip: {\n          description: {\n            ko: \"랭킹 보여주기(내림차순)\"\n          }\n        },\n        id: \"showRanking\",\n        chatbotDescription: \"showRanking()은 저장된 랭킹을 내림차순으로 보여주는 API야. 그러니까, 점수가 높은 사람부터 보여준다 이 말이지.\"\n      }, {\n        name: \"showRankingAscending()\",\n        snippet: \"showRankingAscending()\",\n        tip: {\n          description: {\n            ko: \"랭킹 보여주기(오름차순)\"\n          }\n        },\n        id: \"showRankingAscending\",\n        chatbotDescription: \"showRankingAscending()은 저장된 랭킹을 내림차순으로 보여주는 API야. 그러니까, 점수가 낮은 사람부터 보여준다 이 말이지.\"\n      }, {\n        name: \"hideRanking()\",\n        snippet: \"hideRanking()\",\n        tip: {\n          description: {\n            ko: \"랭킹 숨기기\"\n          }\n        },\n        id: \"hideRanking\",\n        chatbotDescription: \"hideRanking() 랭킹을 숨기는 API야.\"\n      }, {\n        name: \"saveScore(score)\",\n        snippet: \"saveScore(100)\",\n        selection: \"100\",\n        tip: {\n          description: {\n            ko: \"랭킹에 점수 저장하기\"\n          },\n          \"params\": [{\n            name: \"score\",\n            description: {\n              ko: \"저장할 점수\"\n            }\n          }],\n          \"description2\": {\n            ko: \"유저별로 가장 높은 점수 하나가 저장된다.\"\n          }\n        },\n        id: \"saveScore\",\n        chatbotDescription: \"saveScore(score)는 랭킹에 점수를 저장하는 API야. score에 저장할 점수를 입력해봐!\"\n      }]\n    }, {\n      name: \"ID_SENSING\",\n      api: [{\n        name: \"isClickedSprite()\",\n        snippet: \"isClickedSprite()\",\n        tip: {\n          description: {\n            ko: \"스프라이트를 클릭하고 있는지 여부\"\n          },\n          \"description2\": {\n            ko: \"스프라이트를 클릭하고 있는 중이면 true, 그렇지 않으면 false를 반환한다\"\n          }\n        },\n        id: \"isClickedSprite\",\n        chatbotDescription: \"isClickedSprite는 스프라이트를 클릭하고 있는지를 알려주는 API야. 클릭하고 있다면 true를, 그렇지 않다면 false를 반환하지.\"\n      }, {\n        name: \"isPressedKey(key)\",\n        snippet: \"isPressedKey(\\\"key\\\")\",\n        selection: \"key\",\n        \"selectionType\": \"key\",\n        tip: {\n          description: {\n            ko: \"특정키를 누르고 있는지 여부\"\n          },\n          \"params\": [{\n            name: \"key\",\n            description: \"판단할 키보드의 키\"\n          }],\n          \"description2\": {\n            ko: \"key를 누르고 있는 중이면 true, 그렇지 않으면 false를 반환한다\"\n          }\n        },\n        id: \"isPressedKey\",\n        chatbotDescription: \"isPressedKey(key)는 특정키를 누르고 있는지를 알려주는 API야. 특정 키를 누르고 있다면 true를, 그렇지 않다면 false를 반환하지.\"\n      }, {\n        name: \"isClickedMouse()\",\n        snippet: \"isClickedMouse()\",\n        tip: {\n          description: {\n            ko: \"마우스를 클릭하고 있는지 여부\"\n          },\n          \"description2\": {\n            ko: \"마우스를 클릭하고 있는 중이면 true, 그렇지 않으면 false를 반환한다\"\n          }\n        },\n        id: \"isClickedMouse\",\n        chatbotDescription: \"isClickedMouse는 마우스를 클릭하고 있는지를 알려주는 API야. 클릭하고 있다면 true를, 그렇지 않다면 false를 반환하지.\"\n      }, {\n        name: \"isOverlapped(name)\",\n        snippet: \"isOverlapped(\\\"name\\\")\",\n        tip: {\n          description: {\n            ko: \"특정 스프라이트와 닿아있는지 여부\"\n          },\n          \"params\": [{\n            name: \"name\",\n            description: {\n              ko: \"스프라이트의 이름\"\n            }\n          }]\n        },\n        selection: \"name\",\n        \"selectionType\": \"sprite\",\n        id: \"isOverlapped\",\n        chatbotDescription: \"isOverlapped(name)은 특정 스프라이트와 닿아있는지를 알려주는 API야. 닿아있다면 true를, 그렇지 않다면 false를 반환하지.\"\n      }]\n    }, {\n      name: \"ID_OPERATOR\",\n      api: [{\n        name: \"+,-,*,/,%\",\n        tip: {\n          description: {\n            ko: \"사칙연산\"\n          },\n          \"params\": [{\n            name: \"+\",\n            description: {\n              ko: \"더하기\"\n            }\n          }, {\n            name: \"-\",\n            description: {\n              ko: \"빼기\"\n            }\n          }, {\n            name: \"*\",\n            description: {\n              ko: \"곱하기\"\n            }\n          }, {\n            name: \"/\",\n            description: {\n              ko: \"나누기\"\n            }\n          }, {\n            name: \"%\",\n            description: {\n              ko: \"나머지\"\n            }\n          }]\n        },\n        id: \"+,-,*,/,%\"\n      }, {\n        name: \"<, >, ==, !=\",\n        tip: {\n          description: {\n            ko: \"비교연산자\"\n          },\n          \"params\": [{\n            name: \"<\",\n            description: {\n              ko: \"~보다 작음\\n좌변보다 우변이 작으면 참을 반환한다\"\n            }\n          }, {\n            name: \">\",\n            description: {\n              ko: \"~보다 큰\\n좌변보다 우변이 크면 참을 반환한다\"\n            }\n          }, {\n            name: \"==\",\n            description: {\n              ko: \"일치\\n좌변과 우변이 서로 같으면 참을 반환한다\"\n            }\n          }, {\n            name: \"!=\",\n            description: {\n              ko: \"불일치\\n좌변과 우변이 서로 다르면 참을 반환한다\"\n            }\n          }]\n        },\n        id: \"<, >, ==, !=\"\n      }, {\n        name: \"!, ||, &&\",\n        tip: {\n          description: {\n            ko: \"논리연산자\"\n          },\n          \"params\": [{\n            name: \"!expr\",\n            description: {\n              ko: \"단일 피연산자를 true로 변환할 수 있으면 false를 반환하고, 그렇지 않으면 true를 반환한다\"\n            }\n          }, {\n            name: \"expr1 || expr2\",\n            description: {\n              ko: \"expr1을 true로 변환할 수 있으면 expr1을 반환하고, 그렇지 않으면 expr2를 반환한다\"\n            }\n          }, {\n            name: \"expr1 && expr2\",\n            description: {\n              ko: \"expr1을 true로 변환할 수 있는 경우 expr2을 반환하고, 그렇지 않으면 expr1을 반환한다\"\n            }\n          }]\n        },\n        id: \"!, ||, &&\"\n      }, {\n        name: \"abs(num)\",\n        snippet: \"abs(number)\",\n        selection: \"number\",\n        tip: {\n          description: {\n            ko: \"절대값\"\n          },\n          \"params\": [{\n            name: \"num\",\n            description: {\n              ko: \"절대값을 구할 숫자\"\n            }\n          }],\n          \"description2\": {\n            ko: \"num의 절대값을 반환한다\"\n          }\n        },\n        id: \"abs\",\n        chatbotDescription: \"abs(num)은 API는 절댓값을 구하는 API야. num에 원하는 수를 넣으면 num의 절댓값이 반환되지.\"\n      }, {\n        name: \"round(num)\",\n        snippet: \"round(number)\",\n        selection: \"number\",\n        tip: {\n          description: {\n            ko: \"반올림\"\n          },\n          \"params\": [{\n            name: \"num\",\n            description: {\n              ko: \"반올림할 숫자\"\n            }\n          }],\n          \"description2\": {\n            ko: \"num의 소수점 이하 첫째자리에서 반올림한 값을 반환한다\"\n          }\n        },\n        id: \"round\",\n        chatbotDescription: \"round(num)는 소수점 첫째 자리에서 반올림한 값을 반환하는 API야. name에 소수점이 있는 숫자를 넣어볼래? 소수점이 사라지고 정수 숫자만 남을걸!\"\n      }, {\n        name: \"ceil(num)\",\n        snippet: \"ceil(number)\",\n        selection: \"number\",\n        tip: {\n          description: {\n            ko: \"올림\"\n          },\n          \"params\": [{\n            name: \"num\",\n            description: {\n              ko: \"올림할 숫자\"\n            }\n          }],\n          \"description2\": {\n            ko: \"num의 소수점 이하 첫째자리에서 올림한 값을 반환한다\"\n          }\n        },\n        id: \"ceil\",\n        chatbotDescription: \"ceil(num)은 특정 숫자의 소수점을 올림하는 API야. num의 소수점 이하 첫째 자리에서 올림한 값을 반환하지.\"\n      }, {\n        name: \"floor(num)\",\n        snippet: \"floor(number)\",\n        selection: \"number\",\n        tip: {\n          description: {\n            ko: \"버림\"\n          },\n          \"params\": [{\n            name: \"num\",\n            description: {\n              ko: \"버림할 숫자\"\n            }\n          }],\n          \"description2\": {\n            ko: \"num의 소수점 이하 첫째자리에서 버림한 값을 반환한다\"\n          }\n        },\n        id: \"floor\",\n        chatbotDescription: \"floor(num)은 특정 숫자의 소수점 이하 첫째 자리에서 버림을 할 때 사용하는 API야.\"\n      }, {\n        name: \"getRandom(min,max)\",\n        snippet: \"getRandom(1,10)\",\n        selection: \"1\",\n        tip: {\n          description: {\n            ko: \"난수 생성하기\"\n          },\n          \"params\": [{\n            name: \"min\",\n            description: {\n              ko: \"난수를 생성할 최소 숫자\"\n            }\n          }, {\n            name: \"max\",\n            description: {\n              ko: \"난수를 생성할 최대 숫자\"\n            }\n          }],\n          \"description2\": {\n            ko: \"min과 max 사이의 값중에 하나를 무작위로 반환한다\"\n          }\n        },\n        id: \"getRandom\",\n        chatbotDescription: \"getRandom(min, max)는 min~max사이의 난수를 반환하는 API야.\"\n      }, {\n        name: \"pow(num,exponent)\",\n        snippet: \"pow(number,exponent)\",\n        selection: \"number\",\n        tip: {\n          description: {\n            ko: \"숫자의 제곱 구하기\"\n          },\n          \"params\": [{\n            name: \"num\",\n            description: {\n              ko: \"밑, 여러 번 곱할 수\"\n            }\n          }, {\n            name: \"exponent\",\n            description: {\n              ko: \"지수, 곱하는 횟수\"\n            }\n          }],\n          \"description2\": {\n            ko: \"base를 exponent번 곱한 결과, 즉 baseexponent를 반환한다\"\n          }\n        },\n        id: \"pow\",\n        chatbotDescription: \"pow(num, exponent)는 숫자의 제곱을 구하는 API야. num에 여러번 곱할 수를 입력하고 exponent에 곱하는 횟수를 입력하면 사용할 수 있지.\"\n      }, {\n        name: \"sqrt(num)\",\n        snippet: \"sqrt(number)\",\n        selection: \"number\",\n        tip: {\n          description: {\n            ko: \"숫자의 제곱근 구하기\"\n          },\n          \"params\": [{\n            name: \"num\",\n            description: {\n              ko: \"제곱근을 구할 숫자\"\n            }\n          }],\n          \"description2\": {\n            ko: \"주어진 숫자에 루트(√ )를 씌운다. 만약 숫자가 음수이면 NaN를 반환한다\"\n          }\n        },\n        id: \"sqrt\",\n        chatbotDescription: \"sqrt(num)는 숫자의 제곱근을 구하는 API야. 제곱근을 구할 숫자를 num에 입력해볼래? 참, 만약 숫자 값이 음수이면 NaN을 반환하니 조심해!\"\n      }, {\n        name: \"log(num)\",\n        snippet: \"log(number)\",\n        selection: \"number\",\n        tip: {\n          description: {\n            ko: \"숫자의 자연로그 구하기\"\n          },\n          \"params\": [{\n            name: \"num\",\n            description: {\n              ko: \"자연로그를 구할 숫자\"\n            }\n          }]\n        },\n        id: \"log\",\n        chatbotDescription: \"log(num)은 숫자의 자연로그를 구하는 API야. num에 자연로그를 구할 숫자를 넣어봐.\"\n      }]\n    }, {\n      name: \"ID_PHYSICS\",\n      api: [{\n        name: \"setCollideScene(enabled)\",\n        snippet: \"setCollideScene(true)\",\n        selection: \"true\",\n        tip: {\n          description: {\n            ko: \"벽과 충돌하게 설정하기\"\n          },\n          \"params\": [{\n            name: \"enabled\",\n            description: {\n              ko: \"true 또는 false\"\n            }\n          }],\n          \"description2\": {\n            ko: \"enabled가 true이고 물리효과가 적용된 스프라이트가 움직이는 중에\\n스크린의 끝에 닿으면 충돌하게 된다\"\n          }\n        },\n        id: \"setCollideScene\",\n        chatbotDescription: \"setCollideScene(enabled)는 스프라이트가 벽과 충돌할 수 있게 설정하는 API야. enabled에 true를 입력하면 스프라이트가 화면 밖으로 나가지 않고 충돌하지.\"\n      }, {\n        name: \"setCollision(targetName)\",\n        snippet: \"setCollision(\\\"targetName\\\")\",\n        selection: \"targetName\",\n        \"selectionType\": \"sprite\",\n        tip: {\n          description: {\n            ko: \"특정 스프라이트와 충돌하게 설정하기\"\n          },\n          \"params\": [{\n            name: \"targetName\",\n            description: {\n              ko: \"충돌을 설정할 스프라이트 이름\"\n            }\n          }],\n          \"description2\": {\n            ko: \"targetName의 스프라이트와 닿았을 때 충돌하게 된다\"\n          }\n        },\n        id: \"setCollision\",\n        chatbotDescription: \"setCollision(targetName)은 특정 스프라이트와 충돌할 수 있게 설정하는 API야. targetName에 원하는 스프라이트의 이름을 넣으면 해당 스프라이트와 충돌하게 되지.\"\n      }, {\n        name: \"setCollision([targetNames...])\",\n        snippet: \"setCollision([\\\"targetName1\\\",\\\"targetName2\\\"])\",\n        selection: \"targetName1\",\n        \"selectionType\": \"sprite\",\n        tip: {\n          description: {\n            ko: \"특정 스프라이트와 충돌하게 설정하기\"\n          },\n          \"params\": [{\n            name: \"[targetName]\",\n            description: {\n              ko: \"충돌을 설정할 스프라이트 이름 배열\"\n            }\n          }],\n          \"description2\": {\n            ko: \"targetNames의 스프라이트들과 닿았을 때 충돌하게 된다\"\n          }\n        },\n        id: \"setCollision\",\n        chatbotDescription: \"setCollision(targetName)은 특정 스프라이트와 충돌할 수 있게 설정하는 API야. targetName에 원하는 스프라이트의 이름을 넣으면 해당 스프라이트와 충돌하게 되지.\"\n      }, {\n        name: \"setCollideSide(direction, enabled)\",\n        snippet: \"setCollideSide(\\\"down\\\",false)\",\n        selection: \"down\",\n        \"selectionType\": \"direction\",\n        tip: {\n          description: {\n            ko: \"충돌 방향값 설정하기\"\n          },\n          \"params\": [{\n            name: \"direction\",\n            description: {\n              ko: \"up, down, left, right 중 하나\"\n            }\n          }, {\n            name: \"enabled\",\n            description: \"true 또는 false\"\n          }],\n          \"description2\": {\n            ko: \"direction방향에 대한 충돌설정을 적용한다.\\n예를 들어 특정 스프라이트에 down, false로 설정되면 \\n그 스프라이트는 다른스프라이트와 충돌을 할 때 아래방향에 대한\\n충돌은 하지 않게 된다\"\n          }\n        },\n        id: \"setCollideSide\",\n        chatbotDescription: \"setCollideSide(direction, enabled)는 충돌 방향을 설정하는 API야. direction에 up, down, left, right 중 한 가지의 방향을 넣고 enabled에 true나 false를 넣어서 해당 방향으로 충돌할 수 있는지를 결정할 수 있어.\"\n      }, {\n        name: \"setMovable(enabled)\",\n        snippet: \"setMovable(false)\",\n        selection: \"false\",\n        tip: {\n          description: {\n            ko: \"충돌했을 때의 움직임 설정\"\n          },\n          \"params\": [{\n            name: \"enabled\",\n            description: {\n              ko: \"true 또는 false\"\n            }\n          }],\n          \"description2\": {\n            ko: \"false일 경우 setCollision을 통해 충돌설정이 되었을 때\\n충돌은 하지만 충돌 후 튕겨나가지 않게 된다\"\n          }\n        },\n        id: \"setMovable\",\n        chatbotDescription: \"setMovable(enabled)은 충돌한 스프라이트가 튕겨 나가는지를 설정하는 API야. enabled에 false를 입력하면 스프라이트가 충돌하더라도 그 힘으로 튕겨 나가는 일은 없을 거야.\"\n      }, {\n        name: \"setMass(value)\",\n        snippet: \"setMass(10)\",\n        selection: \"10\",\n        tip: {\n          description: {\n            ko: \"질량 설정하기\"\n          },\n          \"params\": [{\n            name: \"value\",\n            description: {\n              ko: \"숫자(설정할 질량값)\"\n            }\n          }],\n          \"description2\": {\n            ko: \"질량을 설정한다.\\n다른 물리효과와 상호작용한다\"\n          }\n        },\n        id: \"setMass\",\n        chatbotDescription: \"setMass(value)는 스프라이트의 질량을 설정하는 API야. value에 원하는 숫자 값을 입력해봐! \"\n      }, {\n        name: \"setGravityX(value)\",\n        snippet: \"setGravityX(100)\",\n        selection: \"100\",\n        tip: {\n          description: {\n            ko: \"x축 중력 설정하기\"\n          },\n          \"params\": [{\n            name: \"value\",\n            description: {\n              ko: \"숫자(설정할 중력값)\"\n            }\n          }],\n          \"description2\": {\n            ko: \"x축에 대한 중력을 설정한다.\\n다른 물리효과와 상호작용한다\"\n          }\n        },\n        id: \"setGravityX\",\n        chatbotDescription: \"setGravityX(value)는 x축 중력을 설정하는 API야. value에 원하는 숫자 값을 입력해봐! value가 0보다 크면 오른쪽으로 중력이 작용해. 참, 물리 명령어들은 상호 작용하는 걸 잊지 마~ \"\n      }, {\n        name: \"setGravityY(value)\",\n        snippet: \"setGravityY(100)\",\n        selection: \"100\",\n        tip: {\n          description: {\n            ko: \"y축 중력 설정하기\"\n          },\n          \"params\": [{\n            name: \"value\",\n            description: {\n              ko: \"숫자(설정할 중력값)\"\n            }\n          }],\n          \"description2\": {\n            ko: \"y축에 대한 중력을 설정한다.\\n다른 물리효과와 상호작용한다\"\n          }\n        },\n        id: \"setGravityY\",\n        chatbotDescription: \"setGravityX(value)는 y축 중력을 설정하는 API야. value에 원하는 숫자 값을 입력해봐! value가 0보다 크면 아래로 중력이 작용해. 참, 물리 명령어들은 상호 작용하는 걸 잊지 마~ \"\n      }, {\n        name: \"setVelocityX(value)\",\n        snippet: \"setVelocityX(100)\",\n        selection: \"100\",\n        tip: {\n          description: {\n            ko: \"x축 속도 설정하기\"\n          },\n          \"params\": [{\n            name: \"value\",\n            description: {\n              ko: \"숫자(설정할 속도값)\"\n            }\n          }],\n          \"description2\": {\n            ko: \"x축에 대한 속도를 설정한다.\\n다른 물리효과와 상호작용한다\"\n          }\n        },\n        id: \"setVelocityX\",\n        chatbotDescription: \"setVelocityX(value)는 스프라이트의 x축 속도를 설정하는 API야. value가 0보다 크면 오른쪽 속도가 생겨.\"\n      }, {\n        name: \"setVelocityY(value)\",\n        snippet: \"setVelocityY(100)\",\n        selection: \"100\",\n        tip: {\n          description: {\n            ko: \"y축 속도 설정하기\"\n          },\n          \"params\": [{\n            name: \"value\",\n            description: {\n              ko: \"숫자(설정할 속도값)\"\n            }\n          }],\n          \"description2\": {\n            ko: \"y축에 대한 속도를 설정한다.\\n다른 물리효과와 상호작용한다\"\n          }\n        },\n        id: \"setVelocityY\",\n        chatbotDescription: \"setVelocityY(value)는 스프라이트의 y축 속도를 설정하는 API야. value가 0보다 크면 아래로 속도가 생겨.\"\n      }, {\n        name: \"getVelocityX()\",\n        snippet: \"getVelocityX()\",\n        tip: {\n          description: {\n            ko: \"x축 속도 가져오기\"\n          }\n        },\n        id: \"getVelocityX\",\n        chatbotDescription: \"getVelocityX()는 스프라이트의 X축 속도를 반환하는 API야. X축은 가로를 의미해! 오른쪽으로 가고 있다면 X축 속도는 0보다 큰 숫자가 되지.\"\n      }, {\n        name: \"getVelocityY()\",\n        snippet: \"getVelocityY()\",\n        tip: {\n          description: {\n            ko: \"y축 속도 가져오기\"\n          }\n        },\n        id: \"getVelocityY\",\n        chatbotDescription: \"getVelocityY()는 스프라이트의 Y축 속도를 반환하는 API야. Y축은 세로를 의미해! 아래로 가고 있다면 Y축 속도는 0보다 큰 숫자가 되지.\"\n      }, {\n        name: \"setBounceX(value)\",\n        snippet: \"setBounceX(1)\",\n        selection: \"1\",\n        tip: {\n          description: {\n            ko: \"충돌했을 때 x축 튕기는 정도 설정하기\"\n          },\n          \"params\": [{\n            name: \"value\",\n            description: {\n              ko: \"숫자(설정할 튕기는 정도의 값)\"\n            }\n          }],\n          \"description2\": {\n            ko: \"다른 스프라이트와 충돌했을 때, 설정한 값만큼 반작용이 일어난다.\\n값이 1일 경우 작용하는 힘을 그대로 전달받게 된다\"\n          }\n        },\n        id: \"setBounceX\",\n        chatbotDescription: \"setBounceX(value)는 스프라이트가 충돌했을 때 X축, 그러니까 가로 방향으로 튕기는 정도를 설정하는 API야. value에 원하는 숫자 값을 입력해봐! 참고로 1을 입력하면 충돌할 때의 힘 그대로 튕겨.\"\n      }, {\n        name: \"setBounceY(value)\",\n        snippet: \"setBounceY(1)\",\n        selection: \"1\",\n        tip: {\n          description: {\n            ko: \"충돌했을 때 y축 튕기는 정도 설정하기\"\n          },\n          \"params\": [{\n            name: \"value\",\n            description: {\n              ko: \"숫자(설정할 튕기는 정도의 값)\"\n            }\n          }],\n          \"description2\": {\n            ko: \"다른 스프라이트와 충돌했을 때, 설정한 값만큼 반작용이 일어난다.\\n값이 1일 경우 작용하는 힘을 그대로 전달받게 된다\"\n          }\n        },\n        id: \"setBounceY\",\n        chatbotDescription: \"setBounceY(value)는 스프라이트가 충돌했을 때 Y축, 그러니까 세로 방향으로 튕기는 정도를 설정하는 API야. value에 원하는 숫자 값을 입력해봐! 참고로 1을 입력하면 충돌할 때의 힘 그대로 튕겨.\"\n      }, {\n        name: \"setAccelerationX(value)\",\n        snippet: \"setAccelerationX(100)\",\n        selection: \"100\",\n        tip: {\n          description: {\n            ko: \"x축 가속도 설정하기\"\n          },\n          \"params\": [{\n            name: \"value\",\n            description: {\n              ko: \"숫자(설정할 가속도값)\"\n            }\n          }],\n          \"description2\": {\n            ko: \"x축에 대한 가속도를 설정한다.\\n다른 물리효과와 상호작용한다\"\n          }\n        },\n        id: \"setAccelerationX\",\n        chatbotDescription: \"setAccelerationX(value)는 x축 가속도를 설정하는 API야. value에 가속도 값을 입력해봐! 다른 물리효과와 상호작용해서 가속도가 적용될 거야.\"\n      }, {\n        name: \"setAccelerationY(value)\",\n        snippet: \"setAccelerationY(1)\",\n        selection: \"1\",\n        tip: {\n          description: {\n            ko: \"y축 가속도 설정하기\"\n          },\n          \"params\": [{\n            name: \"value\",\n            description: {\n              ko: \"숫자(설정할 가속도값)\"\n            }\n          }],\n          \"description2\": {\n            ko: \"y축에 대한 가속도를 설정한다.\\n다른 물리효과와 상호작용한다\"\n          }\n        },\n        id: \"setAccelerationY\",\n        chatbotDescription: \"setAccelerationY(value)는 y축 가속도를 설정하는 API야. value에 가속도 값을 입력해봐! 다른 물리효과와 상호작용해서 가속도가 적용될 거야.\"\n      }, {\n        name: \"setVelocityFromDegree(degree,force,maxSpeed)\",\n        snippet: \"setVelocityFromDegree(90,1,300)\",\n        tip: {\n          description: {\n            ko: \"방향으로 속도 설정하기\"\n          },\n          \"params\": [{\n            name: \"degree\",\n            description: {\n              ko: \"숫자(설정할 방향값)\"\n            }\n          }, {\n            name: \"force\",\n            description: {\n              ko: \"숫자(0~1), maxSpeed의 비율\"\n            }\n          }, {\n            name: \"maxSpeed\",\n            description: {\n              ko: \"숫자(최고 속도)\"\n            }\n          }],\n          \"description2\": {\n            ko: \"velocity x,y값을 방향에따라 설정한다.\\nforce가 0.5이고 maxSpeed가 100이면 적용되는 속도는 50이 된다.\"\n          }\n        },\n        id: \"setVelocityFromDegree\",\n        chatbotDescription: \"setVelocityFromDegree(degree, force, maxSpeed)는 방향으로 속도를 설정하는 API야. degree에 설정할 방향 값, force에 최고 가속도의 비율, maxSpeed에 최고 가속도를 입력해봐. 참, force는 비율이니까 0~1 사이의 값을 입력해야 돼!\"\n      }, {\n        name: \"setAccelerationFromDegree(degree,force,maxSpeed)\",\n        snippet: \"setAccelerationFromDegree(90,1,300)\",\n        tip: {\n          description: {\n            ko: \"방향으로 가속도 설정하기\"\n          },\n          \"params\": [{\n            name: \"degree\",\n            description: {\n              ko: \"숫자(설정할 방향값)\"\n            }\n          }, {\n            name: \"force\",\n            description: {\n              ko: \"숫자(0~1), maxSpeed의 비율\"\n            }\n          }, {\n            name: \"maxSpeed\",\n            description: {\n              ko: \"숫자(최고 가속도)\"\n            }\n          }],\n          \"description2\": {\n            ko: \"velocity x,y값을 방향에따라 설정한다.\\nforce가 0.5이고 maxSpeed가 100이면 적용되는 가속도는 50이 된다.\"\n          }\n        },\n        id: \"setAccelerationFromDegree\",\n        chatbotDescription: \"setAccelerationFromDegree(degree, force, maxSpeed)는 방향으로 가속도를 설정하는 API야. degree에 설정할 방향 값, force에 최고 가속도의 비율, maxSpeed에 최고 가속도를 입력해봐. 참, force는 비율이니까 0~1 사이의 값을 입력해야돼!\"\n      }]\n    }, {\n      name: \"ID_SOUND\",\n      api: [{\n        name: \"playSound(name, isLoop)\",\n        snippet: \"playSound(\\\"name\\\", false)\",\n        tip: {\n          description: {\n            ko: \"사운드 스프라이트 재생하기\"\n          },\n          \"params\": [{\n            name: \"name\",\n            description: {\n              ko: \"사운드 스프라이트의 이름\"\n            }\n          }, {\n            name: \"isLoop\",\n            description: {\n              ko: \"반복 재생 여부\"\n            }\n          }],\n          \"description2\": {\n            ko: \"입력된 사운드 스프라이트를\\n1회 혹은 반복하여 재생한다.\"\n          }\n        },\n        selection: \"name\",\n        \"selectionType\": \"sound\",\n        id: \"playSound\",\n        chatbotDescription: \"playSound(name, isLoop)는 사운드 스프라이트를 재생하는 API야. name에 재생하고 싶은 사운드 스프라이트의 이름을 입력해볼래?\"\n      }, {\n        name: \"restartSound(name)\",\n        snippet: \"restartSound(\\\"name\\\")\",\n        tip: {\n          description: {\n            ko: \"사운드 스프라이트 처음부터 다시 재생하기\"\n          },\n          \"params\": [{\n            name: \"name\",\n            description: {\n              ko: \"사운드 스프라이트의 이름\"\n            }\n          }],\n          \"description2\": {\n            ko: \"입력된 사운드 스프라이트를 처음부터 다시 재생한다.\\n(반복 여부는 playSound 함수에서 설정된 값을 따른다.)\"\n          }\n        },\n        selection: \"name\",\n        \"selectionType\": \"sound\",\n        id: \"restartSound\",\n        chatbotDescription: \"restartTimer(name)는 사운드 스프라이트를 처음부터 다시 재생하는 API야. name에 처음부터 다시 재생하고 싶은 사운드 스프라이트의 이름을 입력해봐!\"\n      }, {\n        name: \"resumeSound(name)\",\n        snippet: \"resumeSound(\\\"name\\\")\",\n        tip: {\n          description: {\n            ko: \"사운드 스프라이트 이어서 재생하기\"\n          },\n          \"params\": [{\n            name: \"name\",\n            description: {\n              ko: \"사운드 스프라이트의 이름\"\n            }\n          }],\n          \"description2\": {\n            ko: \"입력된 사운드 스프라이트를 일시정지된 위치부터 다시 재생한다.\\n(반복 여부는 playSound 함수에서 설정된 값을 따른다.)\"\n          }\n        },\n        selection: \"name\",\n        \"selectionType\": \"sound\",\n        id: \"resumeSound\",\n        chatbotDescription: \"resumeSound(name)는 멈췄던 사운드 스프라이트를 이어서 재생하는 API야. name에 이어서 재생하고 싶은 사운드 스프라이트의 이름을 입력해봐!\"\n      }, {\n        name: \"stopAllSounds()\",\n        snippet: \"stopAllSounds()\",\n        tip: {\n          description: {\n            ko: \"재생중인 모든 사운드 스프라이트 정지하기\"\n          }\n        },\n        id: \"stopAllSounds\",\n        chatbotDescription: \"stopAllSounds()는 재생 중인 모든 사운드 스프라이트를 정지하는 API야. 모든 소리를 끄고 싶으면 사용해봐!\"\n      }, {\n        name: \"stopSound(name)\",\n        snippet: \"stopSound(\\\"name\\\")\",\n        tip: {\n          description: {\n            ko: \"사운드 스프라이트 정지하기\"\n          },\n          \"params\": [{\n            name: \"name\",\n            description: {\n              ko: \"사운드 스프라이트의 이름\"\n            }\n          }]\n        },\n        selection: \"name\",\n        \"selectionType\": \"sound\",\n        id: \"stopSound\",\n        chatbotDescription: \"stopSound(name)은 사운드 스프라이트를 정지하는 API야. 일시 정지가 아니라 완전히 정지해서 이어서 재생하기가 불가능하니까 참고해!\"\n      }, {\n        name: \"pauseSound(name)\",\n        snippet: \"pauseSound(\\\"name\\\")\",\n        tip: {\n          description: {\n            ko: \"사운드 스프라이트 일시정지하기\"\n          },\n          \"params\": [{\n            name: \"name\",\n            description: {\n              ko: \"사운드 스프라이트의 이름\"\n            }\n          }]\n        },\n        selection: \"name\",\n        \"selectionType\": \"sound\",\n        id: \"pauseSound\",\n        chatbotDescription: \"pauseSound(name)은 사운드 스프라이트를 일시정지하는 API야. name에 재생되고 있는 사운드 스프라이트의 이름을 입력해볼래?\"\n      }, {\n        name: \"setSoundVolume(value)\",\n        snippet: \"setSoundVolume(1)\",\n        tip: {\n          description: {\n            ko: \"앱의 음량 설정하기\"\n          },\n          \"params\": [{\n            name: \"value\",\n            description: {\n              ko: \"음량(0~1 사이의 값)\"\n            }\n          }]\n        },\n        selection: \"1\",\n        id: \"setSoundVolume\",\n        chatbotDescription: \"setSoundVolume(value)은 앱의 음량을 설정하는 API야. value에 0~1 사이의 값을 입력해볼래?\"\n      }, {\n        name: \"addSoundVolume(value)\",\n        snippet: \"addSoundVolume(0.1)\",\n        tip: {\n          description: {\n            ko: \"앱의 음량을 value만큼 키우기\"\n          },\n          \"params\": [{\n            name: \"value\",\n            description: {\n              ko: \"음량의 변화 크기(0~1 사이의 값)\"\n            }\n          }]\n        },\n        selection: \"0.1\",\n        id: \"addSoundVolume\",\n        chatbotDescription: \"addSoundVolume(value)은 앱의 음량을 value만큼 추가하는 API야. 음량은 0~1 사이니까 원하는 만큼 value에 값을 적고 사용해봐.\"\n      }, {\n        name: \"getSoundVolume()\",\n        snippet: \"getSoundVolume()\",\n        tip: {\n          description: {\n            ko: \"현재 앱의 음량 가져오기\"\n          }\n        },\n        id: \"getSoundVolume\",\n        chatbotDescription: \"getSoundVolume()은 앱의 음량을 반환하는 API야. 음량은 0~1사이니깐 참고해.\"\n      }]\n    }, {\n      name: \"ID_TIME\",\n      api: [{\n        name: \"startTimer()\",\n        snippet: \"startTimer()\",\n        tip: {\n          description: {\n            ko: \"타이머 시작하기\"\n          }\n        },\n        id: \"startTimer\",\n        chatbotDescription: \"startTimer()는 타이머를 시작하는 API야.\"\n      }, {\n        name: \"pauseTimer()\",\n        snippet: \"pauseTimer()\",\n        tip: {\n          description: {\n            ko: \"타이머 멈추기\"\n          }\n        },\n        id: \"pauseTimer\",\n        chatbotDescription: \"pauseTimer()는 타이머를 멈추는 API야. 타이머가 일시정지 상태가 되는 거지.\"\n      }, {\n        name: \"resumeTimer()\",\n        snippet: \"resumeTimer()\",\n        tip: {\n          description: {\n            ko: \"타이머 이어서 시작하기\"\n          }\n        },\n        id: \"resumeTimer\",\n        chatbotDescription: \"resumeTimer()는 멈췄던 타이머를 이어서 재생하는 API야.\"\n      }, {\n        name: \"resetTimer()\",\n        snippet: \"resetTimer()\",\n        tip: {\n          description: {\n            ko: \"타이머 0초로 되돌리기\"\n          }\n        },\n        id: \"resetTimer\",\n        chatbotDescription: \"resetTimer()는 타이머를 0초로 되돌리는 API야.\"\n      }, {\n        name: \"getTimer()\",\n        snippet: \"getTimer()\",\n        tip: {\n          description: {\n            ko: \"현재 타이머의 값 가져오기\"\n          }\n        },\n        id: \"getTimer\",\n        chatbotDescription: \"getTimer()는 현재 타이머의 값을 가져올 수 있는 API야. starTimer()와 함께 사용하면 시간을 잴 수 있어!\"\n      }, {\n        name: \"getYear()\",\n        snippet: \"getYear()\",\n        tip: {\n          description: {\n            ko: \"현재 연도를 가져오기\"\n          }\n        },\n        id: \"getYear\",\n        chatbotDescription: \"getDay()는 현재 년도를 반환하는 API야.\"\n      }, {\n        name: \"getMonth()\",\n        snippet: \"getMonth()\",\n        tip: {\n          description: {\n            ko: \"현재 월을 가져오기\"\n          }\n        },\n        id: \"getMonth\",\n        chatbotDescription: \"getMonth()는 현재 몇 월인지를 반환하는 API야.\"\n      }, {\n        name: \"getDay()\",\n        snippet: \"getDay()\",\n        tip: {\n          description: {\n            ko: \"현재 일을 가져오기\"\n          }\n        },\n        id: \"getDay\",\n        chatbotDescription: \"getDay()는 현재 며칠인지를 반환하는 API야.\"\n      }, {\n        name: \"getHour()\",\n        snippet: \"getHour()\",\n        tip: {\n          description: {\n            ko: \"현재 시간을 가져오기\"\n          }\n        },\n        id: \"getHour\",\n        chatbotDescription: \"getHour()는 현재 몇 시인지를 반환하는 API야.\"\n      }, {\n        name: \"getMin()\",\n        snippet: \"getMin()\",\n        tip: {\n          description: {\n            ko: \"현재 분을 가져오기\"\n          }\n        },\n        id: \"getMin\",\n        chatbotDescription: \"getMin()은 현재 몇 분인지를 반환하는 API야.\"\n      }, {\n        name: \"getSec()\",\n        snippet: \"getSec()\",\n        tip: {\n          description: {\n            ko: \"현재 초를 가져오기\"\n          }\n        },\n        id: \"getSec\",\n        chatbotDescription: \"getSec()는 현재 몇 초인지를 반환하는 API야.\"\n      }]\n    }, {\n      name: \"ID_PEN\",\n      api: [{\n        name: \"startPen()\",\n        snippet: \"startPen()\",\n        tip: {\n          description: {\n            ko: \"펜 사용 시작하기\"\n          }\n        },\n        id: \"startPen\",\n        chatbotDescription: \"startPen()은 펜 사용을 시작하는 API야.\"\n      }, {\n        name: \"endPen()\",\n        snippet: \"endPen()\",\n        tip: {\n          description: {\n            ko: \"펜 사용 끝내기\"\n          }\n        },\n        id: \"endPen\",\n        chatbotDescription: \"endPen()은 스프라이트에서 펜 사용을 끝낼 때 사용하는 API야.\"\n      }, {\n        name: \"setPenColor(color)\",\n        snippet: \"setPenColor(\\\"red\\\")\",\n        tip: {\n          description: {\n            ko: \"펜 색깔 설정하기\"\n          },\n          \"params\": [{\n            name: \"color\",\n            description: {\n              ko: \"색깔\"\n            }\n          }]\n        },\n        selection: \"red\",\n        \"selectionType\": \"color\",\n        id: \"setPenColor\",\n        chatbotDescription: \"setPenColor(color)는 펜의 색깔을 설정하는 API야. 원하는 색을 color에 입력하고 사용해봐!\"\n      }, {\n        name: \"setRandomPenColor()\",\n        snippet: \"setRandomPenColor()\",\n        tip: {\n          description: {\n            ko: \"펜의 색깔을 랜덤으로 설정하기\"\n          }\n        },\n        id: \"setRandomPenColor\",\n        chatbotDescription: \"setRandomPenColor()는 펜의 색깔을 랜덤으로 설정하는 API야. 어떤 색이 나올지 모르니까 기대할 만해.\"\n      }, {\n        name: \"getPenColor()\",\n        snippet: \"getPenColor()\",\n        tip: {\n          description: {\n            ko: \"사용중인 펜의 색깔 가져오기\"\n          }\n        },\n        id: \"getPenColor\",\n        chatbotDescription: \"getPenColor()는 스프라이트의 펜 색상을 반환하는 API야.\"\n      }, {\n        name: \"setPenSize(size)\",\n        snippet: \"setPenSize(1)\",\n        tip: {\n          description: {\n            ko: \"펜 두께를 size로 설정하기\"\n          },\n          \"params\": [{\n            name: \"size\",\n            description: {\n              ko: \"펜의 두께\"\n            }\n          }]\n        },\n        selection: \"1\",\n        id: \"setPenSize\",\n        chatbotDescription: \"setPenSize(size)는 펜의 두께를 설정하는 API야. 원하는 두께를 size에 입력하고 사용해봐!\"\n      }, {\n        name: \"addPenSize(size)\",\n        snippet: \"addPenSize(1)\",\n        tip: {\n          description: {\n            ko: \"펜 두께를 size만큼 두껍게 만들기\"\n          },\n          \"params\": [{\n            name: \"size\",\n            description: {\n              ko: \"펜 두께의 변화 크기\"\n            }\n          }]\n        },\n        selection: \"1\",\n        id: \"addPenSize\",\n        chatbotDescription: \"addPenSize(size)는 펜의 두께를 변경하는 API야. size에 원하는 숫자를 넣어서 사용해봐.\"\n      }, {\n        name: \"getPenSize()\",\n        snippet: \"getPenSize()\",\n        tip: {\n          description: {\n            ko: \"사용중인 펜의 두께 가져오기\"\n          }\n        },\n        id: \"getPenSize\",\n        chatbotDescription: \"getPenSize()는 스프라이트의 펜 두께를 반환하는 API야.\"\n      }, {\n        name: \"erasePen()\",\n        snippet: \"erasePen()\",\n        tip: {\n          description: {\n            ko: \"사용했던 펜 내용 지우기\"\n          }\n        },\n        id: \"erasePen\",\n        chatbotDescription: \"erasePen()은 스프라이트로 그려진 펜을 지울 때 사용하는 API야.\"\n      }]\n    }, {\n      name: \"ID_MOBILE\",\n      api: [{\n        name: \"vibrate()\",\n        snippet: \"vibrate()\",\n        tip: {\n          description: {\n            ko: \"진동 설정하기\"\n          },\n          \"description2\": {\n            ko: \"(모바일 전용)\\n모바일 기기에서 진동이 울린다.\"\n          }\n        },\n        id: \"vibrate\",\n        chatbotDescription: \"vibrate()는 모바일 전용이고 진동을 설정하는 API야.\"\n      }, {\n        name: \"onShake(function())\",\n        snippet: \"onShake(function(){})\",\n        newLine: \"onShake(function(){\",\n        tip: {\n          description: {\n            ko: \"기기를 흔들었을 때\"\n          },\n          \"description2\": {\n            ko: \"(모바일 전용)\\n모바일 기기를 빠르게 흔들었을 때 호출된다.\"\n          }\n        },\n        id: \"onShake\",\n        chatbotDescription: \"onShake(function())는 모바일 전용이고 기기를 흔들었을 때 {} 괄호 안에 입력된 코드를 실행하는 API야.\"\n      }, {\n        name: \"onGyro(function(x,y))\",\n        snippet: \"onGyro(function(x,y){})\",\n        newLine: \"onGyro(function(x,y){\",\n        tip: {\n          description: {\n            ko: \"기기를 기울일 때\"\n          },\n          \"params\": [{\n            name: \"x\",\n            description: {\n              ko: \"기기가 기울어진 x축의 값\"\n            }\n          }, {\n            name: \"y\",\n            description: {\n              ko: \"기기가 기울어진 y축의 값\"\n            }\n          }],\n          \"description2\": {\n            ko: \"(모바일 전용)\\n모바일 기기를 기울였을 때 호출된다.\"\n          }\n        },\n        id: \"onGyro\",\n        chatbotDescription: \"onGyro(function(x, y))는 모바일 전용이고 기기를 기울일 때 {} 괄호 안에 입력된 코드를 실행하는 API야.\"\n      }, {\n        name: \"startListening()\",\n        snippet: \"startListening()\",\n        tip: {\n          description: {\n            ko: \"음성 입력을 받는다\"\n          },\n          \"description2\": {\n            ko: \"(모바일 전용)\\n모바일 기기를 통해 음성 입력을 대기한다.\\n입력이 되면 onListening을 통해 입력된 음성값을 받는다.\"\n          }\n        },\n        id: \"startListening\",\n        chatbotDescription: \"startListening()은 모바일 전용이고 음성 입력을 받을 준비를 하는 API야. onListening과 함께 사용해서 음성 입력을 받을 수 있어.\"\n      }, {\n        name: \"onListening(function(msg))\",\n        snippet: \"onListening(function(msg){})\",\n        newLine: \"onListening(function(msg){\",\n        tip: {\n          description: {\n            ko: \"음성을 입력받았을 때\"\n          },\n          \"params\": [{\n            name: \"msg\",\n            description: {\n              ko: \"모바일 기기를 통해 입력되어진 음성 값\"\n            }\n          }],\n          \"description2\": {\n            ko: \"(모바일 전용)\\nstartListening을 통해 입력된 음성 값을 받는다.\"\n          }\n        },\n        id: \"onListening\",\n        chatbotDescription: \"onListening(function(msg))는 모바일 기기를 통해 음성을 입력받았을 때 {} 괄호 안에 입력된 코드를 실행하는 API야. startListening과 함께 사용하지.\"\n      }, {\n        name: \"speak(msg)\",\n        snippet: \"speak(\\\"Hello, WizLab\\\")\",\n        tip: {\n          description: {\n            ko: \"음성을 출력한다.\"\n          },\n          \"params\": [{\n            name: \"msg\",\n            description: {\n              ko: \"음성으로 출력 할 내용\"\n            }\n          }],\n          \"description2\": {\n            ko: \"(모바일 전용)\\nmsg값을 모바일 기기를 통해 음성으로 출력한다.\"\n          }\n        },\n        id: \"speak\",\n        chatbotDescription: \"speak(msg)는 모바일 전용이고 메시지를 음성으로 출력해주는 API야. msg에 음성으로 출력되길 원하는 메시지를 입력해봐!\"\n      }, {\n        name: \"openCamera(facing)\",\n        snippet: \"openCamera(\\\"front\\\")\",\n        tip: {\n          description: {\n            ko: \"모바일에서 카메라를 연다\"\n          },\n          \"params\": [{\n            name: \"facing\",\n            description: {\n              ko: \"오픈할 카메라 방향을 선택\"\n            }\n          }],\n          \"description2\": {\n            ko: \"(모바일 전용)\\nfacing값을 통해 카메라 방향을 선택한 후 모바일 기기에서 카메라를 연다.\"\n          }\n        },\n        id: \"openCamera\",\n        chatbotDescription: \"openCamera(facing)는 모바일 전용 API고 모바일 기기에서 카메라를 여는 API야.\"\n      }, {\n        name: \"closeCamera()\",\n        snippet: \"closeCamera()\",\n        tip: {\n          description: {\n            ko: \"모바일에서 카메라를 닫는다\"\n          },\n          \"description2\": {\n            ko: \"(모바일 전용)\\n모바일 기기에서 카메라를 닫는다.\"\n          }\n        },\n        id: \"closeCamera\",\n        chatbotDescription: \"closeCamera()는 모바일 전용 API고 모바일 기기에서 카메라를 닫는 API야.\"\n      }, {\n        name: \"switchCamera()\",\n        snippet: \"switchCamera()\",\n        tip: {\n          description: {\n            ko: \"카메라 방향을 전환한다\"\n          },\n          \"description2\": {\n            ko: \"(모바일 전용)모바일 기기에서 카메라 방향을 전환한다.\"\n          }\n        },\n        id: \"switchCamera\",\n        chatbotDescription: \"switchCamera()는 모바일 전용이고 카메라의 방향을 전환하는 API야. \"\n      }, {\n        name: \"onFaceDetect(function(face))\",\n        snippet: \"onFaceDetect(function(face){})\",\n        newLine: \"{\",\n        tip: {\n          description: {\n            ko: \"카메라를 통해 얼굴을 인식한다.\"\n          },\n          \"params\": [{\n            name: \"face\",\n            description: {\n              ko: \"모바일 기기를 통해 인식된 얼굴 정보\"\n            }\n          }],\n          \"description2\": {\n            ko: \"(모바일 전용)\\n모바일 기기에서 카메라로 얼굴을 인식한후 인식한 얼굴에 대한 정보를 가져온다.\"\n          }\n        },\n        id: \"onFaceDetect\",\n        chatbotDescription: \"onFaceDetect(function(face))는 모바일 전용이고 카메라로 얼굴 인식을 하는 API야.\"\n      }]\n    }, {\n      name: \"ID_PARAMETER\",\n      api: [{\n        name: \"function\",\n        snippet: \"function name(){}\",\n        newLine: \"{\",\n        selection: \"name\",\n        tip: {\n          description: {\n            ko: \"함수를 선언한다.\"\n          },\n          \"description2\": {\n            ko: \"name이라는 이름의 함수를 선언한다.\\n\"\n          }\n        },\n        id: \"function\",\n        chatbotDescription: \"function()은 함수를 선언할 때 사용할 수 있어. 만들고 싶은 함수의 이름과 함께 입력해볼래?\"\n      }, {\n        name: \"var\",\n        snippet: \"var name\",\n        selection: \"name\",\n        tip: {\n          description: {\n            ko: \"변수를 선언한다.\"\n          },\n          \"description2\": {\n            ko: \"name이라는 이름의 변수를 선언한다.\\n\"\n          }\n        },\n        id: \"var\",\n        chatbotDescription: \"var은 변수를 선언할 때 사용할 수 있어. var을 입력하고 오른쪽에 원하는 변수 이름을 입력한 다음 = 기호를 사용해서 값을 저장하지. 값을 저장하는 상자라고 생각하면 돼!\"\n      }, {\n        name: \"let\",\n        snippet: \"let name\",\n        selection: \"name\",\n        tip: {\n          description: {\n            ko: \"변수를 선언한다.\"\n          },\n          \"description2\": {\n            ko: \"name이라는 이름의 변수를 선언한다.\\n\"\n          }\n        },\n        id: \"let\",\n        chatbotDescription: \"let은 변수를 선언할 때 사용해. 하지만 var보다는 접근할 수 있는 범위가 작아!\"\n      }, {\n        name: \"const\",\n        snippet: \"const name\",\n        selection: \"name\",\n        tip: {\n          description: {\n            ko: \"상수를 선언한다.\"\n          },\n          \"description2\": {\n            ko: \"name이라는 이름의 상수를 선언한다.\\n\"\n          }\n        },\n        id: \"const\",\n        chatbotDescription: \"const는 상수를 선언할 때 사용해.\"\n      }, {\n        name: \"global\",\n        snippet: \"global.name\",\n        selection: \"name\",\n        \"selectionType\": \"global\",\n        tip: {\n          description: {\n            ko: \"전역 오브젝트\"\n          },\n          \"description2\": {\n            ko: \"앱 전체에서 사용 가능한 전역 오브젝트이다.\\nscene이 달라도 같이 사용된다\"\n          }\n        },\n        id: \"global\",\n        chatbotDescription: \"global은 전역 오브젝트라고 하는데 변수 앞에 global.을 붙이면 다른 스프라이트와 장면에서도 사용할 수 있는 변수가 되지!\"\n      }, {\n        name: \"server.data\",\n        snippet: \"server.data.value\",\n        selection: \"value\",\n        tip: {\n          description: {\n            ko: \"서버에 저장할 수 있는 오브젝트\"\n          },\n          \"description2\": {\n            ko: \"(퍼블리싱 앱 전용 기능)\"\n          }\n        },\n        id: \"server.data\",\n        chatbotDescription: \"sever.data는 서버에 저장할 수 있는 오브젝트야. 오브젝트는 서버에 저장할 수 있게 만든 상자라고 생각하면 돼. 상자에 데이터를 넣은 다음, 상자를 서버에 보관하거나 꺼낼 수 있어!\"\n      }, {\n        name: \"server.save(function())\",\n        snippet: \"server.save(function(){})\",\n        newLine: \"server.save(function(){\",\n        tip: {\n          description: {\n            ko: \"server.data 오브젝트를 서버에 저장한다\"\n          },\n          \"description2\": {\n            ko: \"(퍼블리싱 앱 전용 기능)\"\n          }\n        },\n        id: \"server.save\",\n        chatbotDescription: \"server.save(function())는 server.data 오브젝트를 서버에 저장하는 API야. 상자를 서버에 보관하는 거지.\"\n      }, {\n        name: \"server.load(function())\",\n        snippet: \"server.load(function(){})\",\n        newLine: \"server.load(function(){\",\n        tip: {\n          description: {\n            ko: \"서버에 저장된 데이터를 불러와서 server.data에 저장한다\"\n          },\n          \"description2\": {\n            ko: \"(퍼블리싱 앱 전용 기능)\"\n          }\n        },\n        id: \"server.load\",\n        chatbotDescription: \"server.load(function())는 서버에 저장된 데이터를 불러와서 server.data에 저장하는 API야. 서버에 저장된 상자를 꺼내는 거지.\"\n      }, {\n        name: \"server.reset(function())\",\n        snippet: \"server.reset(function(){})\",\n        newLine: \"server.reset(function(){\",\n        tip: {\n          description: {\n            ko: \"server.data 오브젝트를 서버에서 초기화한다\"\n          },\n          \"description2\": {\n            ko: \"(퍼블리싱 앱 전용 기능)\"\n          }\n        },\n        id: \"server.reset\",\n        chatbotDescription: \"sever.reset(function())은 server.data 오브젝트를 서버에서 초기화하는 API야. 상자를 비우는 거지.\"\n      }, {\n        name: \"socket.connect(function())\",\n        snippet: \"socket.connect(function(){})\",\n        newLine: \"socket.connect(function(){\",\n        tip: {\n          description: {\n            ko: \"소켓 서버에 접속한다.\"\n          }\n        },\n        id: \"socket.connect\",\n        chatbotDescription: \"socket.connect(function())는 소켓 서버에 접속하는 API야. 소켓을 사용하면 실시간으로 정보를 주고받을 수 있지.\"\n      }, {\n        name: \"socket.disconnect()\",\n        snippet: \"socket.disconnect()\",\n        tip: {\n          description: {\n            ko: \"소켓 서버 연결을 해제한다.\"\n          }\n        },\n        id: \"socket.disconnect\",\n        chatbotDescription: \"socket.disconnect()는 소켓 서버와의 연결을 해제하는 API야.\"\n      }, {\n        name: \"socket.isConnected()\",\n        snippet: \"socket.isConnected()\",\n        tip: {\n          description: {\n            ko: \"소켓 서버와 연결 상태를 확인한다.\"\n          }\n        },\n        id: \"socket.isConnected\",\n        chatbotDescription: \"socket.isConnected()는 소켓 서버와 연결이 잘 됐는지를 확인하는 API야. 잘 연결됐다면 true가 반환될 거야.\"\n      }, {\n        name: \"socket.emit(data)\",\n        snippet: \"socket.emit(data)\",\n        tip: {\n          description: {\n            ko: \"소켓서버에 데이터를 전송한다.\"\n          }\n        },\n        id: \"socket.emit\",\n        chatbotDescription: \"socket.emit(data)는 소켓 서버에 데이터를 전송하는 API야. data에 전송을 원하는 데이터를 입력해봐!\"\n      }, {\n        name: \"socket.onReceive(function())\",\n        snippet: \"socket.onReceive(function(data){})\",\n        newLine: \"socket.onReceive(function(data){\",\n        tip: {\n          description: {\n            ko: \"소켓 서버로부터 메세지를 받는다.\"\n          }\n        },\n        id: \"socket.onReceive\",\n        chatbotDescription: \"socket.onReceive(function())는 소켓 서버로부터 메시지를 받는 API야.\"\n      }, {\n        name: \"socket.joinRoom(roomId)\",\n        snippet: \"socket.joinRoom(roomId)\",\n        tip: {\n          description: {\n            ko: \"소켓 서버의 특정한 룸에 입장한다.\"\n          }\n        },\n        id: \"socket.joinRoom\",\n        chatbotDescription: \"socket.joinRoom(roomId)는 소켓 서버의 특정한 룸에 입장하는 API야. roomId에 입장을 원하는 룸의 ID를 입력해봐!\"\n      }, {\n        name: \"socket.leaveRoom(roomId)\",\n        snippet: \"socket.leaveRoom(roomId)\",\n        tip: {\n          description: {\n            ko: \"소켓 서버의 룸에서 퇴장한다.\"\n          }\n        },\n        id: \"socket.leaveRoom\",\n        chatbotDescription: \"socket.joinRoom(roomId)는 소켓 서버의 특정한 룸에서 퇴장하는 API야. roomId에 퇴장을 원하는 룸의 ID를 입력해봐!\"\n      }, {\n        name: \"socket.emitRoom(roomId,data)\",\n        snippet: \"socket.emitRoom(roomId,data)\",\n        tip: {\n          description: {\n            ko: \"소켓 서버의 룸에 메세지를 전송한다.\"\n          }\n        },\n        id: \"socket.emitRoom\",\n        chatbotDescription: \"socket.emitRoom(roomId, data)는 소켓 서버의 룸에 메시지를 전송하는 API야. roomId에 전송을 원하는 룸의 ID를 입력하고, data에 전송을 원하는 데이터를 입력해봐!\"\n      }, {\n        name: \"translate(text,lang,fn)\",\n        snippet: \"translate(\\\"안녕하세요!\\\",\\\"en\\\",function(text){})\",\n        selection: \"안녕하세요!\",\n        newLine: \"translate(\\\"안녕하세요!\\\",\\\"en\\\",function(text){\",\n        tip: {\n          description: {\n            ko: \"입력된 텍스트를 특정 언어로 번역한다.\"\n          },\n          \"params\": [{\n            name: \"text\",\n            description: {\n              ko: \"번역할 텍스트\"\n            }\n          }, {\n            name: \"lang\",\n            description: {\n              ko: \"번역할 언어\"\n            }\n          }, {\n            name: \"fn\",\n            description: {\n              ko: \"번역이 완료된 후 실행되는 함수\"\n            }\n          }]\n        },\n        id: \"translate\",\n        chatbotDescription: \"translate(text, lang, fn)는 입력된 텍스트를 특정 언어로 번역하는 API야. text에 번역할 텍스트를 입력하고, lang에 번역하고 싶은 언어를, fn에 번역이 완료되면 실행할 함수를 입력해봐!\"\n      }, {\n        name: \"getName()\",\n        snippet: \"getName()\",\n        tip: {\n          description: {\n            ko: \"스프라이트의 이름 가져오기\"\n          }\n        },\n        id: \"getName\",\n        chatbotDescription: \"getName()은 스프라이트의 이름을 반환하는 API야.\"\n      }, {\n        name: \"getSprite(name)\",\n        snippet: \"getSprite(\\\"name\\\")\",\n        selection: \"name\",\n        \"selectionType\": \"sprite\",\n        tip: {\n          description: {\n            ko: \"스프라이트 가져오기\"\n          },\n          \"params\": [{\n            name: \"name\",\n            description: {\n              ko: \"가져올 스프라이트의 이름 문자열\"\n            }\n          }],\n          \"description2\": {\n            ko: \"name이 이름인 스프라이트를 반환한다\"\n          }\n        },\n        id: \"getSprite\",\n        chatbotDescription: \"getSprite(name)은 특정 스프라이트를 가져오는 함수야. name에 원하는 스프라이트의 이름을 적어봐.\"\n      }, {\n        name: \"getX()\",\n        snippet: \"getX()\",\n        tip: {\n          description: {\n            ko: \"x좌표\"\n          },\n          \"description2\": {\n            ko: \"스프라이트의 x좌표 값을 반환한다\"\n          }\n        },\n        id: \"getX\",\n        chatbotDescription: \"getX()는 스프라이트의 X좌표 값을 반환하는 API야. X좌표는 왼쪽에서 시작해서 오른쪽으로 갈수록 숫자가 커져!\"\n      }, {\n        name: \"getY()\",\n        snippet: \"getY()\",\n        tip: {\n          description: {\n            ko: \"y좌표\"\n          },\n          \"description2\": {\n            ko: \"스프라이트의 y좌표 값을 반환한다\"\n          }\n        },\n        id: \"getY\",\n        chatbotDescription: \"getY()는 스프라이트의 Y좌표 값을 반환하는 API야. Y좌표는 위에서 시작해서 아래로 갈수록 숫자가 커져!\"\n      }, {\n        name: \"getDegree()\",\n        snippet: \"getDegree()\",\n        tip: {\n          description: {\n            ko: \"각도값\"\n          },\n          \"description2\": {\n            ko: \"스프라이트의 각도값을 숫자로 반환한다\"\n          }\n        },\n        id: \"getDegree\",\n        chatbotDescription: \"getDegree()는 스프라이트의 각도를 반환하는 API야.\"\n      }, {\n        name: \"getSize()\",\n        snippet: \"getSize()\",\n        tip: {\n          description: {\n            ko: \"크기값\"\n          },\n          \"description2\": {\n            ko: \"스프라이트의 크기를 반환한다\"\n          }\n        },\n        id: \"getSize\",\n        chatbotDescription: \"getSize()는 스프라이트의 크기를 비율로 반환하는 API야. 스프라이트의 크기를 변경하지 않았다면 100%니깐 100이 반환되지.\"\n      }, {\n        name: \"getWidth()\",\n        snippet: \"getWidth()\",\n        tip: {\n          description: {\n            ko: \"너비값\"\n          },\n          \"description2\": {\n            ko: \"스프라이트의 너비값을 반환한다\"\n          }\n        },\n        id: \"getWidth\",\n        chatbotDescription: \"getWidth()는 스프라이트의 너비를 반환하는 API야.\"\n      }, {\n        name: \"getHeight()\",\n        snippet: \"getHeight()\",\n        tip: {\n          description: {\n            ko: \"높이값\"\n          },\n          \"description2\": {\n            ko: \"스프라이트의 높이값을 반환한다\"\n          }\n        },\n        id: \"getHeight\",\n        chatbotDescription: \"getHeight()는 스프라이트의 높이를 반환하는 API야.\"\n      }, {\n        name: \"getWorldWidth()\",\n        snippet: \"getWorldWidth()\",\n        tip: {\n          description: {\n            ko: \"배경의 너비값\"\n          },\n          \"description2\": {\n            ko: \"scene의 너비값을 반환한다\"\n          }\n        },\n        id: \"getWorldWidth\",\n        chatbotDescription: \"getWorldWidth()는 배경의 너비를 반환하는 API야. \"\n      }, {\n        name: \"getWorldHeight()\",\n        snippet: \"getWorldHeight()\",\n        tip: {\n          description: {\n            ko: \"배경의 높이값\"\n          },\n          \"description2\": {\n            ko: \"scene의 높이값을 반환한다\"\n          }\n        },\n        id: \"getWorldHeight\",\n        chatbotDescription: \"getWorldHeight()는 배경의 높이를 반환하는 API야. \"\n      }, {\n        name: \"getCurrentAnimation()\",\n        snippet: \"getCurrentAnimation()\",\n        tip: {\n          description: {\n            ko: \"현재 동작중인 애니메이션 이름 가져오기\"\n          },\n          \"description2\": {\n            ko: \"스프라이트에 동작중인 애니메이션이 있다면 그 이름을 가져온다\"\n          }\n        },\n        id: \"getCurrentAnimation\",\n        chatbotDescription: \"getCurrentAnimation()은 현재 재생되고 있는 애니메이션의 이름을 반환하는 API야.\"\n      }, {\n        name: \"getMousePointerX()\",\n        snippet: \"getMousePointerX()\",\n        tip: {\n          description: {\n            ko: \"마우스 x좌표\"\n          },\n          \"description2\": {\n            ko: \"마우스 포인터의 x좌표 값을 반환한다\"\n          }\n        },\n        id: \"getMousePointerX\",\n        chatbotDescription: \"getMousePointerX()는 마우스의 x값을 반환하는 API야.\"\n      }, {\n        name: \"getMousePointerY()\",\n        snippet: \"getMousePointerY()\",\n        tip: {\n          description: {\n            ko: \"마우스 y좌표\"\n          },\n          \"description2\": {\n            ko: \"마우스 포인터의 y좌표 값을 반환한다\"\n          }\n        },\n        id: \"getMousePointerY\",\n        chatbotDescription: \"getMousePointerY()는 마우스의 y값을 반환하는 API야.\"\n      }, {\n        name: \"getText()\",\n        snippet: \"getText()\",\n        tip: {\n          description: {\n            ko: \"문구값\"\n          },\n          \"description2\": {\n            ko: \"텍스트상자 스프라이트의 메시지를 반환한다\"\n          }\n        },\n        id: \"getText\",\n        chatbotDescription: \"getText()는 텍스트 상자의 메시지를 반환하는 API야.\"\n      }, {\n        name: \"getTextColor()\",\n        snippet: \"getTextColor()\",\n        tip: {\n          description: {\n            ko: \"문구 색상 가져오기\"\n          },\n          \"description2\": {\n            ko: \"텍스트상자 스프라이트의 문구 색상값을 반환하다\"\n          }\n        },\n        id: \"getTextColor\",\n        chatbotDescription: \"getTextColor()는 텍스트 상자에 적은 메시지가 어떤 색인지 알려주는 API야.\"\n      }, {\n        name: \"getVelocityX()\",\n        snippet: \"getVelocityX()\",\n        tip: {\n          description: {\n            ko: \"x축 속도 가져오기\"\n          }\n        },\n        id: \"getVelocityX\",\n        chatbotDescription: \"getVelocityX()는 스프라이트의 X축 속도를 반환하는 API야. X축은 가로를 의미해! 오른쪽으로 가고 있다면 X축 속도는 0보다 큰 숫자가 되지.\"\n      }, {\n        name: \"getVelocityY()\",\n        snippet: \"getVelocityY()\",\n        tip: {\n          description: {\n            ko: \"y축 속도 가져오기\"\n          }\n        },\n        id: \"getVelocityY\",\n        chatbotDescription: \"getVelocityY()는 스프라이트의 Y축 속도를 반환하는 API야. Y축은 세로를 의미해! 아래로 가고 있다면 Y축 속도는 0보다 큰 숫자가 되지.\"\n      }, {\n        name: \"getSoundVolume()\",\n        snippet: \"getSoundVolume()\",\n        tip: {\n          description: {\n            ko: \"현재 앱의 음량 가져오기\"\n          }\n        },\n        id: \"getSoundVolume\",\n        chatbotDescription: \"getSoundVolume()은 앱의 음량을 반환하는 API야. 음량은 0~1사이니깐 참고해.\"\n      }, {\n        name: \"getTimer()\",\n        snippet: \"getTimer()\",\n        tip: {\n          description: {\n            ko: \"현재 타이머의 값 가져오기\"\n          }\n        },\n        id: \"getTimer\",\n        chatbotDescription: \"getTimer()는 현재 타이머의 값을 가져올 수 있는 API야. starTimer()와 함께 사용하면 시간을 잴 수 있어!\"\n      }, {\n        name: \"getYear()\",\n        snippet: \"getYear()\",\n        tip: {\n          description: {\n            ko: \"현재 연도를 가져오기\"\n          }\n        },\n        id: \"getYear\",\n        chatbotDescription: \"getDay()는 현재 년도를 반환하는 API야.\"\n      }, {\n        name: \"getMonth()\",\n        snippet: \"getMonth()\",\n        tip: {\n          description: {\n            ko: \"현재 월을 가져오기\"\n          }\n        },\n        id: \"getMonth\",\n        chatbotDescription: \"getMonth()는 현재 몇 월인지를 반환하는 API야.\"\n      }, {\n        name: \"getDay()\",\n        snippet: \"getDay()\",\n        tip: {\n          description: {\n            ko: \"현재 일을 가져오기\"\n          }\n        },\n        id: \"getDay\",\n        chatbotDescription: \"getDay()는 현재 며칠인지를 반환하는 API야.\"\n      }, {\n        name: \"getHour()\",\n        snippet: \"getHour()\",\n        tip: {\n          description: {\n            ko: \"현재 시간을 가져오기\"\n          }\n        },\n        id: \"getHour\",\n        chatbotDescription: \"getHour()는 현재 몇 시인지를 반환하는 API야.\"\n      }, {\n        name: \"getMin()\",\n        snippet: \"getMin()\",\n        tip: {\n          description: {\n            ko: \"현재 분을 가져오기\"\n          }\n        },\n        id: \"getMin\",\n        chatbotDescription: \"getMin()은 현재 몇 분인지를 반환하는 API야.\"\n      }, {\n        name: \"getSec()\",\n        snippet: \"getSec()\",\n        tip: {\n          description: {\n            ko: \"현재 초를 가져오기\"\n          }\n        },\n        id: \"getSec\",\n        chatbotDescription: \"getSec()는 현재 몇 초인지를 반환하는 API야.\"\n      }, {\n        name: \"getPenColor()\",\n        snippet: \"getPenColor()\",\n        tip: {\n          description: {\n            ko: \"사용중인 펜의 색깔 가져오기\"\n          }\n        },\n        id: \"getPenColor\",\n        chatbotDescription: \"getPenColor()는 스프라이트의 펜 색상을 반환하는 API야.\"\n      }, {\n        name: \"getPenSize()\",\n        snippet: \"getPenSize()\",\n        tip: {\n          description: {\n            ko: \"사용중인 펜의 두께 가져오기\"\n          }\n        },\n        id: \"getPenSize\",\n        chatbotDescription: \"getPenSize()는 스프라이트의 펜 두께를 반환하는 API야.\"\n      }]\n    }];\n  }\n\n  _createClass(ApiLibrary, [{\n    key: \"getAllFunctions\",\n    value: //for auto completer\n    function getAllFunctions(editorMode) {\n      var functions = [];\n\n      switch (editorMode) {\n        case EDITORMODE.PYTHON:\n          // this.pythonApiList.forEach(category => {\n          //   const categoryName = category.name;\n          //   category.api.forEach(api => {\n          //     if (api.snippet) {\n          //       if (api.name === \"if / else / else if\") {\n          //         return;\n          //       }\n          //       const meta = categoryName;\n          //       const caption = api.name;\n          //       const value = api.snippet;\n          //       const newLine = api.newLine;\n          //       const selection = api.selection;\n          //       const selectionType = api.selectionType;\n          //       const requiredParamCount = api.requiredParamCount;\n          //       const tip = api.tip;\n          //       const funcRegex = /([a-zA-Z_{1}][a-zA-Z0-9_]+)(?=\\()/gim;\n          //       const funcMatch = funcRegex.exec(api.name);\n          //       let name;\n          //       if (funcMatch) name = funcMatch[0];\n          //       functions.push({\n          //         name,\n          //         tip,\n          //         caption,\n          //         value,\n          //         meta,\n          //         newLine,\n          //         selection,\n          //         selectionType,\n          //         requiredParamCount\n          //       });\n          //     }\n          //   });\n          // });\n          break;\n\n        default:\n          this.apiList.forEach(function (category) {\n            var categoryName = category.name;\n            category.api.forEach(function (api) {\n              if (api.snippet) {\n                if (api.name === \"if / else / else if\") {\n                  return;\n                }\n\n                var meta = categoryName;\n                var caption = api.name;\n                var value = api.snippet;\n                var newLine = api.newLine;\n                var selection = api.selection;\n                var selectionType = api.selectionType;\n                var requiredParamCount = api.requiredParamCount;\n                var tip = api.tip;\n                var funcRegex = /([a-zA-Z_{1}][a-zA-Z0-9_]+)(?=\\()/gim;\n                var funcMatch = funcRegex.exec(api.name);\n                var name;\n                if (funcMatch) name = funcMatch[0];\n                functions.push({\n                  name: name,\n                  tip: tip,\n                  caption: caption,\n                  value: value,\n                  meta: meta,\n                  newLine: newLine,\n                  selection: selection,\n                  selectionType: selectionType,\n                  requiredParamCount: requiredParamCount\n                });\n              }\n            });\n          });\n          break;\n      }\n\n      functions.push({\n        caption: \"if\",\n        value: \"if(true){}\",\n        meta: \"meta\",\n        newLine: \"if(true){\",\n        selection: \"true\"\n      });\n      functions.push({\n        caption: \"else if\",\n        value: \"else if(true){}\",\n        meta: \"meta\",\n        newLine: \"else if(true){\",\n        selection: \"true\"\n      });\n      functions.push({\n        caption: \"else\",\n        value: \"else{}\",\n        meta: \"meta\",\n        newLine: \"else{\"\n      });\n      functions.push({\n        caption: \"true\",\n        value: \"true\",\n        meta: \"boolean\"\n      });\n      functions.push({\n        caption: \"false\",\n        value: \"false\",\n        meta: \"boolean\"\n      });\n      functions.push({\n        name: \"setCollideWorldBounds\",\n        equal: \"setCollideScene\",\n        caption: \"setCollideWorldBounds(enabled)\",\n        value: \"setCollideWorldBounds(true)\",\n        meta: \"function\"\n      });\n      functions.push({\n        name: \"setCheckCollision\",\n        equal: \"setCollideSide\",\n        caption: \"setCheckCollision(direction, enabled)\",\n        value: \"setCheckCollision(\\\"down\\\",false)\",\n        meta: \"function\"\n      });\n      functions.push({\n        name: \"setHorizontalFlip\",\n        equal: \"setFlipX\",\n        caption: \"setHorizontalFlip(isFlipped)\",\n        value: \"setHorizontalFlip(true)\",\n        meta: \"function\"\n      });\n      functions.push({\n        name: \"setVerticalFlip\",\n        equal: \"setFlipY\",\n        caption: \"setVerticalFlip(isFlipped)\",\n        value: \"setVerticalFlip(true)\",\n        meta: \"function\"\n      });\n      functions.push({\n        name: \"setImmovable\",\n        equal: \"setMovable\",\n        caption: \"setImmovable(enabled)\",\n        value: \"setImmovable(true)\",\n        meta: \"function\"\n      }); //insert at 0\n      // functions = [\n      //   {\n      //     caption: \"function\",\n      //     value: `function name(){}`,\n      //     meta: \"declaration\",\n      //     newLine: `function name(){`,\n      //     selection: \"name\"\n      //   }\n      // ].concat(functions);\n      // functions = [\n      //   {\n      //     caption: \"var\",\n      //     value: `var name`,\n      //     meta: \"declaration\",\n      //     selection: \"name\"\n      //   }\n      // ].concat(functions);\n      // functions = [\n      //   {\n      //     caption: \"let\",\n      //     value: `let name`,\n      //     meta: \"declaration\",\n      //     selection: \"name\"\n      //   }\n      // ].concat(functions);\n      // functions = [\n      //   {\n      //     caption: \"const\",\n      //     value: `const name`,\n      //     meta: \"declaration\",\n      //     selection: \"name\"\n      //   }\n      // ].concat(functions);\n\n      return functions;\n    }\n  }, {\n    key: \"getAPIbyId\",\n    value: function getAPIbyId(_id) {\n      for (var i in this.apiList) {\n        for (var j in this.apiList[i].api) {\n          var id = this.apiList[i].api[j].id;\n\n          if (id.toLowerCase() === _id.toLowerCase()) {\n            return this.apiList[i].api[j];\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getAPI\",\n    value: function getAPI(name, editorMode) {\n      switch (editorMode) {\n        // case EDITORMODE.PYTHON:\n        //   for (let i in this.pythonApiList) {\n        //     for (let j in this.pythonApiList[i].api) {\n        //       if (this.pythonApiList[i].api[j].name === name) {\n        //         return this.pythonApiList[i].api[j];\n        //       }\n        //     }\n        //   }\n        //   break;\n        default:\n          for (var i in this.apiList) {\n            for (var j in this.apiList[i].api) {\n              if (this.apiList[i].api[j].name === name) {\n                return this.apiList[i].api[j];\n              }\n            }\n          }\n\n          break;\n      }\n    } // programmingDict = {\n    //   \"변수\":\"\",\n    //   \"함수\":\"\",\n    //   \"반복문\":\"\",\n    //   \"조건문\":\"\",\n    //   \"제어문\":\"\",\n    //   \"파라미터\":\"\",\n    //   \"재귀\":\"\",\n    //   \"무한루프\":\"\",\n    //   \"상수\":\"\",\n    //   \"알고리즘\":\"\",\n    //   \"자료구조\":\"\",\n    //   \"버그\":\"\",\n    //   \"리스트\":\"\",\n    //   \"오브젝트\":\"\",\n    //   \"소켓\":\"\"\n    // }\n\n  }]);\n\n  return ApiLibrary;\n}();\n\nexport default new ApiLibrary();","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/utils/apiLibrary.js"],"names":["EDITORMODE","ApiLibrary","apiList","name","api","snippet","selection","tip","description","ko","id","chatbotDescription","newLine","editorMode","functions","PYTHON","forEach","category","categoryName","meta","caption","value","selectionType","requiredParamCount","funcRegex","funcMatch","exec","push","equal","_id","i","j","toLowerCase"],"mappings":"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","sourcesContent":["// import motionImage from \"../../../Image/motion-icon.svg\";\n// import looksImage from \"../../../Image/looks-icon.svg\";\n// import eventImage from \"../../../Image/event-icon.svg\";\n// import controlImage from \"../../../Image/control-icon.svg\";\n// import sensingImage from \"../../../Image/sensing-icon.svg\";\n// import operatorImage from \"../../../Image/operator-icon.svg\";\n// import physicsImage from \"../../../Image/physics-icon.svg\";\n// import soundImage from \"../../../Image/sound-icon.svg\";\n// import timeImage from \"../../../Image/time-icon.svg\";\n// import parameterImage from \"../../../Image/data-icon.svg\";\n// import penImage from \"../../../Image/pen-icon.svg\";\n// import mobileImage from \"../../../Image/phone-icon.svg\";\nimport { EDITORMODE } from \"../../../Common/Util/Constant\";\n\n// todo: name legacy\n// parameter >> data\n\nclass ApiLibrary {\n  apiList = [{\n    name: \"ID_MOTION\",\n    api: [{\n      name: \"moveForward(steps)\",\n      snippet: \"moveForward(100)\",\n      selection: \"100\",\n      tip: {\n        description: {\n          ko: \"steps만큼 움직이며 바라보는 방향으로 이동하기\",\n          \"en\": \"Moves the sprite forward a specified number of steps in the direction\"\n        },\n        \"params\": [{\n          name: \"steps\",\n          description: {\n            ko: \"숫자 steps만큼 바라보는 방향으로 이동한다\",\n            \"en\": \"Moves the sprite a specified number of steps\"\n          }\n        }],\n        \"description2\": {\n          ko: \"움직임이 멈출 때까지 다음 코드는 실행되지 않는다\"\n        }\n      },\n      id: \"moveForward\",\n      chatbotDescription: \"moveForward(steps)는 스프라이트가 바라보고 있는 방향으로 steps만큼 움직이며 이동하는 API야. steps에 원하는 숫자 값을 입력해볼래? 참고로, 움직임이 멈출 때까지 다음 코드는 실행되지 않아!\"\n    }, {\n      name: \"moveX(steps)\",\n      snippet: \"moveX(100)\",\n      selection: \"100\",\n      tip: {\n        description: {\n          ko: \"x좌표를 steps만큼 움직이며 이동하기\"\n        },\n        \"params\": [{\n          name: \"steps\",\n          description: {\n            ko: \"숫자\"\n          }\n        }],\n        \"description2\": {\n          ko: \"steps만큼 x좌표를 이동한다\"\n        }\n      },\n      id: \"moveX\",\n      chatbotDescription: \"moveX(steps)는 steps만큼 x좌표를 움직이며 이동하는 API야. 0보다 큰 숫자를 넣으면 오른쪽으로, 0보다 작은 숫자를 넣으면 왼쪽으로 이동해. steps에 원하는 숫자를 입력해볼래?\"\n    }, {\n      name: \"moveY(steps)\",\n      snippet: \"moveY(100)\",\n      selection: \"100\",\n      tip: {\n        description: {\n          ko: \"y좌표를 steps만큼 움직이며 이동하기\"\n        },\n        \"params\": [{\n          name: \"steps\",\n          description: {\n            ko: \"숫자\"\n          }\n        }],\n        \"description2\": {\n          ko: \"steps만큼 y좌표를 이동한다\"\n        }\n      },\n      id: \"moveY\",\n      chatbotDescription: \"moveY(steps)는 steps만큼 y좌표를 움직이며 이동하는 API야. 0보다 큰 숫자를 넣으면 아래로, 0보다 작은 숫자를 넣으면 위로 이동해. steps에 원하는 숫자를 입력해볼래?\"\n    }, {\n      name: \"moveTo(x,y)\",\n      snippet: \"moveTo(100,100)\",\n      selection: \"100\",\n      tip: {\n        description: {\n          ko: \"x,y 좌표로 움직이며 이동하기\"\n        },\n        \"params\": [{\n          name: \"x\",\n          description: {\n            ko: \"숫자\"\n          }\n        }, {\n          name: \"y\",\n          description: {\n            ko: \"숫자\"\n          }\n        }],\n        \"description2\": {\n          ko: \"x만큼 x좌표로 y만큼 y좌표로 이동한다\"\n        }\n      },\n      id: \"moveTo\",\n      chatbotDescription: \"moveTo(x, y)는 스프라이트를 x, y 좌표로 움직이며 이동시키는 API야. x, y에 원하는 숫자 값을 입력해봐.\"\n    }, {\n      name: \"moveToSprite(name)\",\n      snippet: \"moveToSprite(\\\"name\\\")\",\n      selection: \"name\",\n      \"selectionType\": \"sprite\",\n      tip: {\n        description: {\n          ko: \"특정 스프라이트로 움직이며 이동하기\"\n        },\n        \"params\": [{\n          name: \"name\",\n          description: {\n            ko: \"문자열\"\n          }\n        }],\n        \"description2\": {\n          ko: \"특정 스프라이트를 name 스프라이트의 좌표로 이동한다\"\n        }\n      },\n      id: \"moveToSprite\",\n      chatbotDescription: \"moveToSprite(name)는 스프라이트를 특정 스프라이트의 위치로 움직이며 이동시키는 API야. name에 원하는 스프라이트의 이름을 적어봐.\"\n    }, {\n      name: \"moveToMousePointer()\",\n      snippet: \"moveToMousePointer()\",\n      tip: {\n        description: {\n          ko: \"마우스포인터로 움직이며 이동하기\"\n        },\n        \"description2\": {\n          ko: \"scene안에 마우스 포인터를 따라 스프라이트가 이동한다\"\n        }\n      },\n      id: \"moveToMousePointer\",\n      chatbotDescription: \"moveToMousePointer()는 스프라이트를 마우스 포인터의 위치로 움직이며 이동시키는 API야.\"\n    }, {\n      name: \"moveToRandom()\",\n      snippet: \"moveToRandom()\",\n      tip: {\n        description: {\n          ko: \"임의의 좌표로 위치를 움직이며 이동하기\"\n        },\n        \"description2\": {\n          ko: \"스프라이트의 위치를 임의의 좌표로 움직이며 이동한다\"\n        }\n      },\n      id: \"moveToRandom\",\n      chatbotDescription: \"moveToRandom()은 스프라이트를 임의의 위치로 움직이며 이동시키는 API야. 스프라이트가 어디로 이동할지 모른다 이거지~\"\n    }, {\n      name: \"setMoveSpeed(speed)\",\n      snippet: \"setMoveSpeed(100)\",\n      selection: \"100\",\n      tip: {\n        description: {\n          ko: \"움직이는 속도를 speed만큼 정하기\"\n        },\n        \"params\": [{\n          name: \"speed\",\n          description: {\n            ko: \"숫자\"\n          }\n        }],\n        \"description2\": {\n          ko: \"move..() 관련 함수들의 이동속도를 설정한다\\n\"\n        }\n      },\n      id: \"setMoveSpeed\",\n      chatbotDescription: \"setMoveSpeed(speed)는 움직이는 속도를 설정하는 API야. speed에 원하는 숫자 값을 입력하면 move와 관련된 API들을 사용할 때 이동 속도를 설정할 수 있어.\"\n    }, {\n      name: \"goForward(steps)\",\n      snippet: \"goForward(100)\",\n      selection: \"100\",\n      tip: {\n        description: {\n          ko: \"steps만큼 바라보는 방향으로 위치를 설정하기\"\n        },\n        \"params\": [{\n          name: \"steps\",\n          description: {\n            ko: \"숫자\"\n          }\n        }],\n        \"description2\": {\n          ko: \"steps만큼 바라보는 방향으로 좌표를 변경한다\"\n        }\n      },\n      id: \"goForward\",\n      chatbotDescription: \"goForward(steps)는 스프라이트가 바라보고 있는 방향으로 steps만큼 이동시키는 API야. steps에 원하는 숫자 값을 입력해볼래? 아, 참고로 스프라이트들은 기본적으로 오른쪽을 바라보고 있어!\"\n    }, {\n      name: \"goX(steps)\",\n      snippet: \"goX(100)\",\n      selection: \"100\",\n      tip: {\n        description: {\n          ko: \"x좌표를 steps만큼 바꾸기\"\n        },\n        \"params\": [{\n          name: \"steps\",\n          description: {\n            ko: \"숫자\"\n          }\n        }],\n        \"description2\": {\n          ko: \"steps만큼 x좌표를 변경한다\"\n        }\n      },\n      id: \"goX\",\n      chatbotDescription: \"goX(steps)는 steps만큼 x좌표를 변경하는 API야. 0보다 큰 숫자를 넣으면 오른쪽으로, 0보다 작은 숫자를 넣으면 왼쪽으로 이동해. steps에 원하는 숫자를 입력해볼래?\"\n    }, {\n      name: \"goY(steps)\",\n      snippet: \"goY(100)\",\n      selection: \"100\",\n      tip: {\n        description: {\n          ko: \"y좌표를 steps만큼 바꾸기\"\n        },\n        \"params\": [{\n          name: \"steps\",\n          description: {\n            ko: \"숫자\"\n          }\n        }],\n        \"description2\": {\n          ko: \"steps만큼 y좌표를 변경한다\"\n        }\n      },\n      id: \"goY\",\n      chatbotDescription: \"goY(steps)는 steps만큼 y좌표를 변경하는 API야. 0보다 큰 숫자를 넣으면 아래로, 0보다 작은 숫자를 넣으면 위로 이동해. steps에 원하는 숫자를 입력해볼래?\"\n    }, {\n      name: \"goTo(x,y)\",\n      snippet: \"goTo(100,100)\",\n      selection: \"100\",\n      tip: {\n        description: {\n          ko: \"위치 변경하기\"\n        },\n        \"params\": [{\n          name: \"x\",\n          description: {\n            ko: \"숫자\"\n          }\n        }, {\n          name: \"y\",\n          description: {\n            ko: \"숫자\"\n          }\n        }],\n        \"description2\": {\n          ko: \"스프라이트의 x, y 좌표를 변경한다\"\n        }\n      },\n      id: \"goTo\",\n      chatbotDescription: \"goTo(x, y)는 스프라이트를 x, y 좌표로 이동시키는 API야. x, y에 원하는 숫자 값을 입력해봐.\"\n    }, {\n      name: \"goToSprite(name)\",\n      snippet: \"goToSprite(\\\"name\\\")\",\n      selection: \"name\",\n      \"selectionType\": \"sprite\",\n      tip: {\n        description: {\n          ko: \"특정 스프라이트로 위치를 변경하기\"\n        },\n        \"params\": [{\n          name: \"name\",\n          description: {\n            ko: \"문자열\"\n          }\n        }],\n        \"description2\": {\n          ko: \"스프라이트의 좌표를 name 스프라이트로 변경한다\"\n        }\n      },\n      id: \"goToSprite\",\n      chatbotDescription: \"goToSprite(name)는 스프라이트를 특정 스프라이트의 위치로 이동시키는 API야. name에 원하는 스프라이트의 이름을 적어봐.\"\n    }, {\n      name: \"goToMousePointer()\",\n      snippet: \"goToMousePointer()\",\n      tip: {\n        description: {\n          ko: \"마우스포인터로 위치를 변경하기\"\n        },\n        \"description2\": {\n          ko: \"스프라이트의 좌표를 마우스 포인터의 좌표로 변경한다\"\n        }\n      },\n      id: \"goToMousePointer\",\n      chatbotDescription: \"goToMousePointer()는 스프라이트를 마우스 포인터의 위치로 이동시키는 API야.\"\n    }, {\n      name: \"goToRandom()\",\n      snippet: \"goToRandom()\",\n      tip: {\n        description: {\n          ko: \"임의의 좌표로 위치를 변경하기\"\n        },\n        \"description2\": {\n          ko: \"스프라이트의 위치를 임의의 좌표로 변경한다\"\n        }\n      },\n      id: \"goToRandom\",\n      chatbotDescription: \"goToRandom()은 스프라이트를 임의의 위치로 이동시키는 API야. 스프라이트가 어디로 이동할지 모른다 이거지~\"\n    }, {\n      name: \"setDegree(degree)\",\n      snippet: \"setDegree(90)\",\n      selection: \"90\",\n      tip: {\n        description: {\n          ko: \"스프라이트의 각도 설정하기\"\n        },\n        \"params\": [{\n          name: \"degree\",\n          description: {\n            ko: \"숫자\"\n          }\n        }],\n        \"description2\": {\n          ko: \"스프라이트의 각도를 degree로 설정한다\"\n        }\n      },\n      id: \"setDegree\",\n      chatbotDescription: \"setDegree(degree)는 스프라이트의 각도를 설정하는 API야. 각도는 시계방향으로 변경되니까 참고해!\"\n    }, {\n      name: \"turn(degree)\",\n      snippet: \"turn(90)\",\n      selection: \"90\",\n      tip: {\n        description: {\n          ko: \"시계방향으로 돌기\"\n        },\n        \"params\": [{\n          name: \"degree\",\n          description: {\n            ko: \"숫자\"\n          }\n        }],\n        \"description2\": {\n          ko: \"degree만큼 시계방향으로 스프라이트의 각도를 회전한다\"\n        }\n      },\n      id: \"turn\",\n      chatbotDescription: \"turn(degree)는 스프라이트를 시계방향으로 원하는 각도만큼 돌리는 API야. degree에 숫자 값을 입력해볼래?\"\n    }, {\n      name: \"turnToSprite(name)\",\n      snippet: \"turnToSprite(\\\"name\\\")\",\n      selection: \"name\",\n      \"selectionType\": \"sprite\",\n      tip: {\n        description: {\n          ko: \"특정 스프라이트로 방향 보기\"\n        },\n        \"params\": [{\n          name: \"name\",\n          description: {\n            ko: \"문자열\"\n          }\n        }],\n        \"description2\": {\n          ko: \"특정 스프라이트를 바라보도록 각도를 회전한다\"\n        }\n      },\n      id: \"turnToSprite\",\n      chatbotDescription: \"turnToSprite(name)는 스프라이트가 특정 스프라이트가 있는 방향을 바라보도록 하는 API야. 원하는 스프라이트의 이름을 name에 입력해봐!\"\n    }, {\n      name: \"turnToMousePointer()\",\n      snippet: \"turnToMousePointer()\",\n      tip: {\n        description: {\n          ko: \"마우스 방향 보기\"\n        },\n        \"description2\": {\n          ko: \"마우스 포인터를 따라 스프라이트가 이동한다\"\n        }\n      },\n      id: \"turnToMousePointer\",\n      chatbotDescription: \"turnToMousePointer()는 스프라이트가 마우스 포인터가 있는 방향을 바라보도록 하는 API야. \"\n    }, {\n      name: \"setFlipX(isFlipped)\",\n      snippet: \"setFlipX(true)\",\n      selection: \"true\",\n      tip: {\n        description: {\n          ko: \"좌우를 반전\"\n        },\n        \"params\": [{\n          name: \"isFlipped\",\n          description: {\n            ko: \"true 또는 false\"\n          }\n        }],\n        \"description2\": {\n          ko: \"스프라이트의 좌우를 반전한다\"\n        }\n      },\n      id: \"setFlipX\",\n      chatbotDescription: \"setFlipX(isFlipped)는 스프라이트를 좌우 반전시키는 API야. isFlipped에 true를 입력하면 좌우 반전할 수 있어.\"\n    }, {\n      name: \"setFlipY(isFlipped)\",\n      snippet: \"setFlipY(true)\",\n      selection: \"true\",\n      tip: {\n        description: {\n          ko: \"위아래로 뒤집기\"\n        },\n        \"params\": [{\n          name: \"isFlipped\",\n          description: {\n            ko: \"true or false\"\n          }\n        }],\n        \"description2\": {\n          ko: \"스프라이트의 상하를 뒤집는다\"\n        }\n      },\n      id: \"setFlipY\",\n      chatbotDescription: \"setFlipY(isFlipped)는 스프라이트를 상하 반전시키는 API야. isFlipped에 true를 입력하면 상하 반전할 수 있어.\"\n    }, {\n      name: \"getX()\",\n      snippet: \"getX()\",\n      tip: {\n        description: {\n          ko: \"x좌표\"\n        },\n        \"description2\": {\n          ko: \"스프라이트의 x좌표 값을 반환한다\"\n        }\n      },\n      id: \"getX\",\n      chatbotDescription: \"getX()는 스프라이트의 X좌표 값을 반환하는 API야. X좌표는 왼쪽에서 시작해서 오른쪽으로 갈수록 숫자가 커져!\"\n    }, {\n      name: \"getY()\",\n      snippet: \"getY()\",\n      tip: {\n        description: {\n          ko: \"y좌표\"\n        },\n        \"description2\": {\n          ko: \"스프라이트의 y좌표 값을 반환한다\"\n        }\n      },\n      id: \"getY\",\n      chatbotDescription: \"getY()는 스프라이트의 Y좌표 값을 반환하는 API야. Y좌표는 위에서 시작해서 아래로 갈수록 숫자가 커져!\"\n    }, {\n      name: \"getMousePointerX()\",\n      snippet: \"getMousePointerX()\",\n      tip: {\n        description: {\n          ko: \"마우스 x좌표\"\n        },\n        \"description2\": {\n          ko: \"마우스 포인터의 x좌표 값을 반환한다\"\n        }\n      },\n      id: \"getMousePointerX\",\n      chatbotDescription: \"getMousePointerX()는 마우스의 x값을 반환하는 API야.\"\n    }, {\n      name: \"getMousePointerY()\",\n      snippet: \"getMousePointerY()\",\n      tip: {\n        description: {\n          ko: \"마우스 y좌표\"\n        },\n        \"description2\": {\n          ko: \"마우스 포인터의 y좌표 값을 반환한다\"\n        }\n      },\n      id: \"getMousePointerY\",\n      chatbotDescription: \"getMousePointerY()는 마우스의 y값을 반환하는 API야.\"\n    }, {\n      name: \"getDegree()\",\n      snippet: \"getDegree()\",\n      tip: {\n        description: {\n          ko: \"각도값\"\n        },\n        \"description2\": {\n          ko: \"스프라이트의 각도값을 숫자로 반환한다\"\n        }\n      },\n      id: \"getDegree\",\n      chatbotDescription: \"getDegree()는 스프라이트의 각도를 반환하는 API야.\"\n    }]\n  }, {\n    name: \"ID_LOOKS\",\n    api: [{\n      name: \"say(message,sec)\",\n      snippet: \"say(\\\"Hello, WizLab\\\",1)\",\n      selection: \"Hello, WizLab\",\n      \"requiredParamCount\": 1,\n      tip: {\n        description: {\n          ko: \"sec초간 말하기\"\n        },\n        \"params\": [{\n          name: \"message\",\n          description: {\n            ko: \"문자열\"\n          }\n        }, {\n          name: \"sec\",\n          description: {\n            ko: \"숫자\"\n          }\n        }],\n        \"description2\": {\n          ko: \"스프라이트에 message를 sec초 만큼 출력한다\\n만약 sec가 없다면 말풍선이 사라지지 않는다\"\n        }\n      },\n      id: \"say\",\n      chatbotDescription: \"say(message, sec)는 말풍선에 원하는 말을 출력하는 API야. message에 원하는 문장을 입력하고, sec에 말하는 시간을 초 단위로 입력해봐!\"\n    }, {\n      name: \"stopSay()\",\n      snippet: \"stopSay()\",\n      tip: {\n        description: {\n          ko: \"말하기를 멈춘다\"\n        },\n        \"description2\": {\n          ko: \"say를 통해 하던 말을 멈추고 말풍선을 없앤다\"\n        }\n      },\n      id: \"stopSay\",\n      chatbotDescription: \"stopSay()는 말하기를 멈추는 API야. say를 통해서 하던 말을 멈출 수 있어. say에서 설정한 시간이 남았더라도 말하는 걸 멈출 수 있지.\"\n    }, {\n      name: \"playAnimation(name,isLoop)\",\n      snippet: \"playAnimation(\\\"name\\\",true)\",\n      selection: \"name\",\n      \"selectionType\": \"animation\",\n      tip: {\n        description: {\n          ko: \"애니메이션 실행하기\"\n        },\n        \"params\": [{\n          name: \"name\",\n          description: {\n            ko: \"문자열\"\n          }\n        }, {\n          name: \"isLoop\",\n          description: {\n            ko: \"true 또는 false\"\n          }\n        }],\n        \"description2\": {\n          ko: \"name 애니메이션을 isLoop에 따라 무한 혹은 1회 동작한다\"\n        }\n      },\n      id: \"playAnimation\",\n      chatbotDescription: \"playAnimation(name, isLoop)은 애니메이션을 실행하는 API야. name에 스프라이트 속성창에 있는 애니메이션 중에서 원하는 것을 입력해봐! 아, isLoop 자리에 false를 넣으면 애니메이션을 1번만 실행할 수 있어.\"\n    }, {\n      name: \"stopAnimation()\",\n      snippet: \"stopAnimation()\",\n      tip: {\n        description: {\n          ko: \"애니메이션 멈추기\"\n        },\n        \"description2\": {\n          ko: \"동작중인 애니메이션을 멈춘다\"\n        }\n      },\n      id: \"stopAnimation\",\n      chatbotDescription: \"stopAnimation()은 애니메이션을 멈추는 API야. 동작 중인 애니메이션을 멈출 수 있지.\"\n    }, {\n      name: \"getCurrentAnimation()\",\n      snippet: \"getCurrentAnimation()\",\n      tip: {\n        description: {\n          ko: \"현재 동작중인 애니메이션 이름 가져오기\"\n        },\n        \"description2\": {\n          ko: \"스프라이트에 동작중인 애니메이션이 있다면 그 이름을 가져온다\"\n        }\n      },\n      id: \"getCurrentAnimation\",\n      chatbotDescription: \"getCurrentAnimation()은 현재 재생되고 있는 애니메이션의 이름을 반환하는 API야.\"\n    }, {\n      name: \"show()\",\n      snippet: \"show()\",\n      tip: {\n        description: {\n          ko: \"보이기\"\n        },\n        \"description2\": {\n          ko: \"scene에 스프라이트가 보이며, 초기값이 show이기\\n때문에 hide()와 함께 사용해야 동작을 확인할 수 있다\"\n        }\n      },\n      id: \"show\",\n      chatbotDescription: \"show()는 숨겨놨던 스프라이트를 다시 보이게 할 수 있는 API야.\"\n    }, {\n      name: \"hide()\",\n      snippet: \"hide()\",\n      tip: {\n        description: {\n          ko: \"숨기기\"\n        },\n        \"description2\": {\n          ko: \"scene에서 스프라이트가 사라지며, show()와 함께 사용한다\"\n        }\n      },\n      id: \"hide\",\n      chatbotDescription: \"hide()는 스프라이트를 눈에 보이지 않게 숨기는 API야. 한 가지 더 알려주자면, 스프라이트 속성창의 눈 모양 아이콘을 클릭해도 스프라이트를 숨길 수 있지.\"\n    }, {\n      name: \"bringToTop()\",\n      snippet: \"bringToTop()\",\n      tip: {\n        description: {\n          ko: \"맨 앞으로 가져오기\"\n        },\n        \"description2\": {\n          ko: \"scene안에 여러 스프라이트가 중첩되었을 때\\n이 함수를 호출한 스프라이트가 맨앞에 보이게 된다\"\n        }\n      },\n      id: \"bringToTop\",\n      chatbotDescription: \"bringToTop()은 스프라이트를 맨 앞으로 가져오는 API야. 여러 스프라이트가 겹쳐있을 때 이 API를 사용하면 맨 앞으로 가져올 수 있어.\"\n    }, {\n      name: \"setSize(percent)\",\n      snippet: \"setSize(100)\",\n      selection: \"100\",\n      tip: {\n        description: {\n          ko: \"크기를 value비율로 정하기\"\n        },\n        \"params\": [{\n          name: \"value\",\n          description: {\n            ko: \"문자열\"\n          }\n        }],\n        \"description2\": {\n          ko: \"비율로 스프라이트의 사이즈가 변경한다\"\n        }\n      },\n      id: \"setSize\",\n      chatbotDescription: \"setSize(percent)는 스프라이트의 크기를 비율로 변경할 수 있는 API야. percent에 200을 입력하면 스프라이트의 크기가 두 배가 되지. percent에 원하는 숫자 값을 입력해봐!\"\n    }, {\n      name: \"addSize(percent)\",\n      snippet: \"addSize(10)\",\n      selection: \"10\",\n      tip: {\n        description: {\n          ko: \"크기를 value비율로 정하기\"\n        },\n        \"params\": [{\n          name: \"value\",\n          description: {\n            ko: \"문자열\"\n          }\n        }],\n        \"description2\": {\n          ko: \"비율로 스프라이트의 사이즈가 변경한다\"\n        }\n      },\n      id: \"addSize\",\n      chatbotDescription: \"addSize(percent)는 스프라이트 크기를 비율로 설정하는 API야. percent에 원하는 비율을 넣어서 사용해봐.\"\n    }, {\n      name: \"getSize()\",\n      snippet: \"getSize()\",\n      tip: {\n        description: {\n          ko: \"크기값\"\n        },\n        \"description2\": {\n          ko: \"스프라이트의 크기를 반환한다\"\n        }\n      },\n      id: \"getSize\",\n      chatbotDescription: \"getSize()는 스프라이트의 크기를 비율로 반환하는 API야. 스프라이트의 크기를 변경하지 않았다면 100%니깐 100이 반환되지.\"\n    }, {\n      name: \"getWidth()\",\n      snippet: \"getWidth()\",\n      tip: {\n        description: {\n          ko: \"너비값\"\n        },\n        \"description2\": {\n          ko: \"스프라이트의 너비값을 반환한다\"\n        }\n      },\n      id: \"getWidth\",\n      chatbotDescription: \"getWidth()는 스프라이트의 너비를 반환하는 API야.\"\n    }, {\n      name: \"getHeight()\",\n      snippet: \"getHeight()\",\n      tip: {\n        description: {\n          ko: \"높이값\"\n        },\n        \"description2\": {\n          ko: \"스프라이트의 높이값을 반환한다\"\n        }\n      },\n      id: \"getHeight\",\n      chatbotDescription: \"getHeight()는 스프라이트의 높이를 반환하는 API야.\"\n    }, {\n      name: \"setText(text)\",\n      snippet: \"setText(\\\"text\\\")\",\n      selection: \"text\",\n      tip: {\n        description: {\n          ko: \"문구 설정하기\"\n        },\n        \"params\": [{\n          name: \"text\",\n          description: {\n            ko: \"문자열\"\n          }\n        }],\n        \"description2\": {\n          ko: \"텍스트상자 스프라이트의 메시지를 수정한다\"\n        }\n      },\n      id: \"setText\",\n      chatbotDescription: \"setText(text)는 텍스트 상자 스프라이트의 메시지를 수정할 수 있는 API야. text에 수정하고 싶은 문구를 입력해봐!\"\n    }, {\n      name: \"appendText(text)\",\n      snippet: \"appendText(\\\"text\\\")\",\n      selection: \"text\",\n      tip: {\n        description: {\n          ko: \"문구 추가하기\"\n        },\n        \"params\": [{\n          name: \"text\",\n          description: {\n            ko: \"문자열\"\n          }\n        }],\n        \"description2\": {\n          ko: \"텍스트상자 스프라이트의 기존 메시지에\\ntext를 추가한다\"\n        }\n      },\n      id: \"appendText\",\n      chatbotDescription: \"appendText(text)는 텍스트 상자 스프라이트의 기존 메시지의 뒤에 새로운 메시지를 추가할 때 사용하는 API야.  text에 원하는 메시지를 넣고 사용해봐.\"\n    }, {\n      name: \"clearText()\",\n      snippet: \"clearText()\",\n      tip: {\n        description: {\n          ko: \"문구 모두 지우기\"\n        },\n        \"description2\": {\n          ko: \"텍스트상자 스프라이트의 메시지를\\n모두 지운다\"\n        }\n      },\n      id: \"clearText\",\n      chatbotDescription: \"clearText()는 텍스트 상자 스프라이트의 메시지를 모두 지우는 API야.\"\n    }, {\n      name: \"getText()\",\n      snippet: \"getText()\",\n      tip: {\n        description: {\n          ko: \"문구값\"\n        },\n        \"description2\": {\n          ko: \"텍스트상자 스프라이트의 메시지를 반환한다\"\n        }\n      },\n      id: \"getText\",\n      chatbotDescription: \"getText()는 텍스트 상자의 메시지를 반환하는 API야.\"\n    }, {\n      name: \"setTextColor(color)\",\n      snippet: \"setTextColor(\\\"black\\\")\",\n      selection: \"black\",\n      \"selectionType\": \"color\",\n      tip: {\n        description: {\n          ko: \"문구값\"\n        },\n        \"params\": [{\n          name: \"color\",\n          description: {\n            ko: \"문자열\"\n          }\n        }],\n        \"description2\": {\n          ko: \"텍스트상자 스프라이트의 문구 색상을 변경한다\"\n        }\n      },\n      id: \"setTextColor\",\n      chatbotDescription: \"setTextColor(color)는 텍스트 상자에 적은 메시지의 색깔을 설정하는 API야. 원하는 색을 color에 입력하고 사용해봐!\"\n    }, {\n      name: \"setRandomTextColor()\",\n      snippet: \"setRandomTextColor()\",\n      tip: {\n        description: {\n          ko: \"문구 색상 무작위로 변경하기\"\n        },\n        \"description2\": {\n          ko: \"텍스트상자 스프라이트의 문구 색상을 무작위로 변경한다\"\n        }\n      },\n      id: \"setRandomTextColor\",\n      chatbotDescription: \"setRandomTextColor()는 텍스트 상자에 적은 메시지의 색깔을 랜덤으로 설정하는 API야. 어떤 색이 나올지 모르니까 기대할 만해.\"\n    }, {\n      name: \"getTextColor()\",\n      snippet: \"getTextColor()\",\n      tip: {\n        description: {\n          ko: \"문구 색상 가져오기\"\n        },\n        \"description2\": {\n          ko: \"텍스트상자 스프라이트의 문구 색상값을 반환하다\"\n        }\n      },\n      id: \"getTextColor\",\n      chatbotDescription: \"getTextColor()는 텍스트 상자에 적은 메시지가 어떤 색인지 알려주는 API야.\"\n    }, {\n      name: \"shake()\",\n      snippet: \"shake()\",\n      tip: {\n        description: {\n          ko: \"흔들기\"\n        },\n        \"description2\": {\n          ko: \"scene에 흔들리는 효과를 적용한다\"\n        }\n      },\n      id: \"shake\",\n      chatbotDescription: \"shake()는 화면을 흔들리게 하는 API야.\"\n    }, {\n      name: \"flash()\",\n      snippet: \"flash()\",\n      tip: {\n        description: {\n          ko: \"반짝임\"\n        },\n        \"description2\": {\n          ko: \"scene에 반짝이는 효과를 적용한다\"\n        }\n      },\n      id: \"flash\",\n      chatbotDescription: \"flash()는 scene에 반짝이는 효과를 적용할 때 사용하는 API야.\"\n    }, {\n      name: \"getWorldWidth()\",\n      snippet: \"getWorldWidth()\",\n      tip: {\n        description: {\n          ko: \"배경의 너비값\"\n        },\n        \"description2\": {\n          ko: \"scene의 너비값을 반환한다\"\n        }\n      },\n      id: \"getWorldWidth\",\n      chatbotDescription: \"getWorldWidth()는 배경의 너비를 반환하는 API야. \"\n    }, {\n      name: \"getWorldHeight()\",\n      snippet: \"getWorldHeight()\",\n      tip: {\n        description: {\n          ko: \"배경의 높이값\"\n        },\n        \"description2\": {\n          ko: \"scene의 높이값을 반환한다\"\n        }\n      },\n      id: \"getWorldHeight\",\n      chatbotDescription: \"getWorldHeight()는 배경의 높이를 반환하는 API야. \"\n    }]\n  }, {\n    name: \"ID_EVENT\",\n    api: [{\n      name: \"onFrame(function())\",\n      snippet: \"onFrame(function(){})\",\n      tip: {\n        description: {\n          ko: \"매 프레임마다 입력된 함수를 반복하여 호출하기\"\n        },\n        \"params\": [{\n          name: \"function\",\n          description: {\n            ko: \"호출되는 함수\"\n          }\n        }],\n        \"description2\": {\n          ko: \"보통 1초에 60번 호출된다.\"\n        }\n      },\n      newLine: \"onFrame(function(){\",\n      id: \"onFrame\",\n      chatbotDescription: \"onFrame(function())은 프레임마다 {}괄호 안에 입력된 코드를 실행하는 API야. 참고로 알려주자면, 1 프레임은 0.1초 정도니까 보통 1초에 60번 호출한다고 생각하면 돼.\"\n    }, {\n      name: \"onSignal(name,function())\",\n      snippet: \"onSignal(\\\"name\\\",function(){})\",\n      tip: {\n        description: {\n          ko: \"특정한 신호를 받았을 때 입력된 함수 호출하기\"\n        },\n        \"params\": [{\n          name: \"name\",\n          description: {\n            ko: \"신호의 이름\"\n          }\n        }, {\n          name: \"function\",\n          description: {\n            ko: \"호출되는 함수\"\n          }\n        }]\n      },\n      newLine: \"onSignal(\\\"name\\\",function(){\",\n      selection: \"name\",\n      \"selectionType\": \"signal\",\n      id: \"onSignal\",\n      chatbotDescription: \"onSignal(name, function())은 특정 신호를 받았을 때 {} 괄호 안에 입력된 코드를 실행하는 API야. name에 sendSignal에서 만든 신호의 이름을 입력해봐!\"\n    }, {\n      name: \"sendSignal(name)\",\n      snippet: \"sendSignal(\\\"name\\\")\",\n      tip: {\n        description: {\n          ko: \"입력된 이름의 신호 보내기\"\n        },\n        \"params\": [{\n          name: \"name\",\n          description: {\n            ko: \"신호의 이름\"\n          }\n        }]\n      },\n      selection: \"name\",\n      \"selectionType\": \"signal\",\n      id: \"sendSignal\",\n      chatbotDescription: \"sendSignal(name)은 신호를 보내는 API야. name에 원하는 신호의 이름을 입력해볼래? 참, 보낸 신호는 onSignal로 받을 수 있어.\"\n    }, {\n      name: \"changeScene(name)\",\n      snippet: \"changeScene(\\\"name\\\")\",\n      tip: {\n        description: {\n          ko: \"입력된 이름의 scene으로 변경하기\"\n        },\n        \"params\": [{\n          name: \"name\",\n          description: {\n            ko: \"scene의 이름\"\n          }\n        }]\n      },\n      selection: \"name\",\n      \"selectionType\": \"scene\",\n      id: \"changeScene\",\n      chatbotDescription: \"changeScene(name)은 현재 scene을 변경하는 API야. name에 변경하고 싶은 scene의 이름을 넣고 사용해봐.\"\n    }, {\n      name: \"onClick(function())\",\n      snippet: \"onClick(function(){})\",\n      tip: {\n        description: {\n          ko: \"스프라이트를 클릭했을 때 입력된 함수 호출하기\"\n        },\n        \"params\": [{\n          name: \"function\",\n          description: {\n            ko: \"호출되는 함수\"\n          }\n        }]\n      },\n      newLine: \"onClick(function(){\",\n      id: \"onClick\",\n      chatbotDescription: \"onClick(function())은 스프라이트를 클릭했을 때 {} 괄호 안의 코드를 실행하는 API야. 클릭했을 때 입력된 함수를 호출하는 거지.\"\n    }, {\n      name: \"onClickUp(function())\",\n      snippet: \"onClickUp(function(){})\",\n      tip: {\n        description: {\n          ko: \"스프라이트를 클릭했다가 뗐을 때 입력된 함수 호출하기\"\n        },\n        \"params\": [{\n          name: \"function\",\n          description: {\n            ko: \"호출되는 함수\"\n          }\n        }]\n      },\n      newLine: \"onClickUp(function(){\",\n      id: \"onClickUp\",\n      chatbotDescription: \"onClickUp(function())은 스프라이트를 클릭했다가 땠을 때 {} 괄호 안의 코드를 실행하는 API야. 클릭을 멈췄을 때 입력된 함수를 호출하는 거지.\"\n    }, {\n      name: \"onScreenClick(function())\",\n      snippet: \"onScreenClick(function(){})\",\n      tip: {\n        description: {\n          ko: \"화면을 클릭했을 때 입력된 함수 호출하기\"\n        },\n        \"params\": [{\n          name: \"function\",\n          description: {\n            ko: \"호출되는 함수\"\n          }\n        }]\n      },\n      newLine: \"onScreenClick(function(){\",\n      id: \"onScreenClick\",\n      chatbotDescription: \"onScreenClickfunction())은 화면을 클릭했을 때 {} 괄호 안에 입력된 코드를 실행하는 API야.  화면을 클릭하면 함수를 호출하는 거지.\"\n    }, {\n      name: \"onScreenClickUp(function())\",\n      snippet: \"onScreenClickUp(function(){})\",\n      tip: {\n        description: {\n          ko: \"화면을 클릭했다가 뗐을 때 입력된 함수 호출하기\"\n        },\n        \"params\": [{\n          name: \"function\",\n          description: {\n            ko: \"호출되는 함수\"\n          }\n        }]\n      },\n      newLine: \"onScreenClickUp(function(){\",\n      id: \"onScreenClickUp\",\n      chatbotDescription: \"onScreenClickfunction())은 화면을 클릭하다가 땠을 때 {} 괄호 안에 입력된 코드를 실행하는 API야. 화면 클릭을 멈추면 함수를 호출하는 거지.\"\n    }, {\n      name: \"onKey(key,function())\",\n      snippet: \"onKey(\\\"key\\\",function(){})\",\n      tip: {\n        description: {\n          ko: \"특정 키를 눌렀을 때 호출되는 함수\"\n        },\n        \"params\": [{\n          name: \"key\",\n          description: {\n            ko: \"키보드의 값\"\n          }\n        }, {\n          name: \"function\",\n          description: {\n            ko: \"호출되는 함수\"\n          }\n        }]\n      },\n      newLine: \"onKey(\\\"key\\\",function(){\",\n      selection: \"key\",\n      \"selectionType\": \"key\",\n      id: \"onKey\",\n      chatbotDescription: \"onKey(key, function())는 특정 키를 눌렀을 때 {} 괄호 안에 입력된 코드를 실행하는 API야. key에 키의 종류를 입력해볼래? 입력한 key를 눌렀을 때 [}괄호로 묶인 함수를 실행할 거야.\"\n    }, {\n      name: \"onKeyUp(key,function())\",\n      snippet: \"onKeyUp(\\\"key\\\",function(){})\",\n      tip: {\n        description: {\n          ko: \"특정 키를 눌렀다가 뗐을 때 호출되는 함수\"\n        },\n        \"params\": [{\n          name: \"key\",\n          description: {\n            ko: \"키보드의 값\"\n          }\n        }, {\n          name: \"function\",\n          description: {\n            ko: \"호출되는 함수\"\n          }\n        }]\n      },\n      newLine: \"onKeyUp(\\\"key\\\",function(){\",\n      selection: \"key\",\n      \"selectionType\": \"key\",\n      id: \"onKeyUp\",\n      chatbotDescription: \"onKeyUp(key, function())은 특정 키를 눌렀다가 땠을 때 {} 괄호 안에 입력된 코드를 실행하는 API야. key에 키의 종류를 입력해볼래? 입력한 key를 눌렀을 때 [}괄호로 묶인 함수를 실행할 거야.\"\n    }, {\n      name: \"onOverlap(name,function())\",\n      snippet: \"onOverlap(\\\"name\\\",function(){})\",\n      tip: {\n        description: {\n          ko: \"특정 스프라이트와 만났을 때 입력된 함수 호출하기\"\n        },\n        \"params\": [{\n          name: \"name\",\n          description: {\n            ko: \"스프라이트의 이름\"\n          }\n        }, {\n          name: \"function\",\n          description: {\n            ko: \"호출되는 함수\"\n          }\n        }]\n      },\n      newLine: \"onOverlap(\\\"name\\\",function(){\",\n      selection: \"name\",\n      \"selectionType\": \"sprite\",\n      id: \"onOverlap\",\n      chatbotDescription: \"onOverlap(name, function())은 특정 스프라이트와 만났을 때 {} 괄호 안에 입력된 코드를 실행하는 API야. name에 원하는 스프라이트의 이름을 입력해봐!\"\n    }, {\n      name: \"onOverlap([names...],function())\",\n      snippet: \"onOverlap([\\\"name1\\\",\\\"name2\\\"],function(){})\",\n      tip: {\n        description: {\n          ko: \"배열 속 스프라이트들과 만났을 때 입력된 함수 호출하기\"\n        },\n        \"params\": [{\n          name: \"Array\",\n          description: {\n            ko: \"스프라이트 이름들의 배열\"\n          }\n        }, {\n          name: \"function\",\n          description: {\n            ko: \"호출되는 함수\"\n          }\n        }]\n      },\n      newLine: \"onOverlap([\\\"name1\\\",\\\"name2\\\"],function(){\",\n      selection: \"name1\",\n      \"selectionType\": \"sprite\",\n      id: \"onOverlap\",\n      chatbotDescription: \"onOverlap(name, function())은 특정 스프라이트와 만났을 때 {} 괄호 안에 입력된 코드를 실행하는 API야. name에 원하는 스프라이트의 이름을 입력해봐!\"\n    }, {\n      name: \"onOverlapOnce(name,function())\",\n      snippet: \"onOverlapOnce(\\\"name\\\",function(){})\",\n      tip: {\n        description: {\n          ko: \"특정 스프라이트와 만났을 때 입력된 함수를 한번만 호출하기\"\n        },\n        \"params\": [{\n          name: \"name\",\n          description: {\n            ko: \"스프라이트의 이름\"\n          }\n        }, {\n          name: \"function\",\n          description: {\n            ko: \"호출되는 함수\"\n          }\n        }]\n      },\n      newLine: \"onOverlapOnce(\\\"name\\\",function(){\",\n      selection: \"name\",\n      \"selectionType\": \"sprite\",\n      id: \"onOverlapOnce\",\n      chatbotDescription: \"onOverlapOnce(name,function())는 특정 스프라이트와 만났을 때 {} 괄호 안에 입력된 코드를 한 번만 실행하는 API야. name에 원하는 스프라이트의 이름을 입력해봐!\"\n    }, {\n      name: \"onOutStage(function())\",\n      snippet: \"onOutStage(function(){})\",\n      tip: {\n        description: {\n          ko: \"화면 밖으로 나갔을 때 입력된 함수 호출하기\"\n        },\n        \"params\": [{\n          name: \"function\",\n          description: {\n            ko: \"호출되는 함수\"\n          }\n        }]\n      },\n      newLine: \"onOutStage(function(){\",\n      id: \"onOutStage\",\n      chatbotDescription: \"onOutStage(function())는 스프라이트가 화면 밖으로 나갔을 때 {} 괄호 안에 입력된 코드를 실행하는 API야.  화면 밖으로 나가면 함수를 호출하는 거지.\"\n    }, {\n      name: \"onSwipe(direction,function())\",\n      snippet: \"onSwipe(\\\"left\\\",function(){})\",\n      tip: {\n        description: {\n          ko: \"화면을 특정한 방향으로 스와이프했을 때 입력된 함수 호출하기\"\n        },\n        \"params\": [{\n          name: \"direction\",\n          description: {\n            ko: \"방향\"\n          }\n        }, {\n          name: \"function\",\n          description: {\n            ko: \"호출되는 함수\"\n          }\n        }],\n        \"description2\": {\n          ko: \"방향 값으로는 left, right, top, down 이 있다.\"\n        }\n      },\n      newLine: \"onSwipe(\\\"left\\\",function(){\",\n      selection: \"left\",\n      \"selectionType\": \"direction\",\n      id: \"onSwipe\",\n      chatbotDescription: \"onSwipe(direction, function())는 화면을 특정 방향으로 밀었을 때 {} 괄호 안에 입력된 코드를 실행하는 API야. direction에 left, right, top, down 중 한 가지를 입력해볼래?\"\n    }]\n  }, {\n    name: \"ID_CONTROL\",\n    api: [{\n      name: \"if / else / else if\",\n      snippet: \"if(true){}\",\n      id: \"if\",\n      chatbotDescription: \"if / else / else if는 조건문을 만드는 API야.  if의 ()괄호 안에 원하는 조건을 입력하면, 그 조건을 만족했을 때 {} 괄호 안의 코드가 실행되지!\"\n    }, {\n      name: \"switch~case\",\n      snippet: \"switch(value){case \\\"\\\" :break;default :break;}\",\n      newLine: \"switch(value){\",\n      selection: \"value\",\n      id: \"switch\",\n      chatbotDescription: \"switch~case는 조건문이랑 비슷한데, value 값에 따라 코드를 실행하고 멈추지.\"\n    }, {\n      name: \"while()\",\n      snippet: \"while(true){}\",\n      newLine: \"while(true){\",\n      selection: \"true\",\n      id: \"while\",\n      chatbotDescription: \"while()은 반복문을 만드는 API야. () 괄호 안에 조건을 입력하면 해당 조건을 만족하는 동안 {} 괄호 안의 코드를 실행하지.\"\n    }, {\n      name: \"for()\",\n      snippet: \"for(var i=0;i<10;i++){}\",\n      newLine: \"for(var i=0;i<10;i++){\",\n      selection: \"10\",\n      id: \"for\",\n      chatbotDescription: \"for()는 반복문이고, 일정 횟수만큼 특정 명령어들을 반복하고 싶을 때 사용할 수 있어.\"\n    }, {\n      name: \"wait(secs)\",\n      snippet: \"wait(1)\",\n      selection: \"1\",\n      tip: {\n        description: {\n          ko: \"특정 시간 기다리기\"\n        },\n        \"params\": [{\n          name: \"secs\",\n          description: {\n            ko: \"숫자, 기다릴 초\"\n          }\n        }],\n        \"description2\": {\n          ko: \"secs초만큼 다음코드를 실행하지 않고 기다린다\"\n        }\n      },\n      id: \"wait\",\n      chatbotDescription: \"wait(secs)는 특정 시간을 기다릴 수 있게 하는 API야. secs에 입력된 초만큼 다음 코드를 실행하지 않고 기다리게 할 수 있어.\"\n    }, {\n      name: \"setDraggable(enabled)\",\n      snippet: \"setDraggable(true)\",\n      selection: \"true\",\n      tip: {\n        description: {\n          ko: \"드래그 가능여부 설정하기\"\n        },\n        \"params\": [{\n          name: \"enabled\",\n          description: {\n            ko: \"true 또는 false\"\n          }\n        }],\n        \"description2\": {\n          ko: \"enabled가 true이면 스프라이트를 마우스나 터치로 드래그할 수 있다\"\n        }\n      },\n      id: \"setDraggable\",\n      chatbotDescription: \"setDraggable(enabled)은 스프라이트를 드래그하여 움직일 수 있는지를 설정하는 API야. enabled에 true를 입력하면 드래그할 수 있어!\"\n    }, {\n      name: \"kill()\",\n      snippet: \"kill()\",\n      tip: {\n        description: {\n          ko: \"없애기\"\n        },\n        \"description2\": {\n          ko: \"scene에서 스프라이트가 제거된다\"\n        }\n      },\n      id: \"kill\",\n      chatbotDescription: \"kill()은 스프라이트를 없애는 API야. 스프라이트를 숨기는 hide와 달리 kill은 스프라이트를 사라지게 하지. 하지만 걱정하지 마. revive가 있다면 스프라이트를 다시 살릴 수 있어!\"\n    }, {\n      name: \"revive()\",\n      snippet: \"revive()\",\n      tip: {\n        description: {\n          ko: \"되살리기\"\n        },\n        \"description2\": {\n          ko: \"secen에서 제거된(kill) 스프라이트를 되살린다\"\n        }\n      },\n      id: \"revive\",\n      chatbotDescription: \"revive()는 kill로 제거된 스프라이트를 되살릴 수 있는 API야.\"\n    }, {\n      name: \"clone()\",\n      snippet: \"clone()\",\n      tip: {\n        description: {\n          ko: \"복제하기\"\n        },\n        \"description2\": {\n          ko: \"해당 스프라이트가 복제되고 복제된 스프라이트를 반환한다\"\n        }\n      },\n      id: \"clone\",\n      chatbotDescription: \"clone()은 해당 스프라이트가 복제되고 복제된 스프라이트를 반환하는 API야.\"\n    }, {\n      name: \"print(message)\",\n      snippet: \"print(\\\"message\\\")\",\n      selection: \"message\",\n      tip: {\n        description: {\n          ko: \"디버그 메시지 출력\"\n        },\n        \"params\": [{\n          name: \"message\",\n          description: {\n            ko: \"출력할 문자열\"\n          }\n        }],\n        \"description2\": {\n          ko: \"chatbot의 대화창에 message를 출력할 수 있다\"\n        }\n      },\n      id: \"print\",\n      chatbotDescription: \"print(message)는 챗봇 대화창에 메시지를 출력할 수 있는 API야. message에 원하는 메시지를 입력해봐! 에러가 난 부분을 찾을 때 사용하면 좋을 거야.\"\n    }, {\n      name: \"input(message)\",\n      snippet: \"input(\\\"message\\\")\",\n      selection: \"message\",\n      tip: {\n        description: {\n          ko: \"텍스트 입력받기\"\n        },\n        \"params\": [{\n          name: \"message\",\n          description: {\n            ko: \"입력받을 때 힌트\"\n          }\n        }],\n        \"description2\": {\n          ko: \"입력박스가 나타나고 문자열 또는 숫자를 입력할 수 있다.\\n[확인]을 누르면 입력된 값을 반환한다\"\n        }\n      },\n      id: \"input\",\n      chatbotDescription: \"input(message)는 텍스트를 입력받는 API야. 사용자가 입력한 값을 가져올 수 있지. message에 원하는 문구를 입력하면 입력을 받을 때 힌트처럼 나타나.\"\n    }, {\n      name: \"showRanking()\",\n      snippet: \"showRanking()\",\n      tip: {\n        description: {\n          ko: \"랭킹 보여주기(내림차순)\"\n        }\n      },\n      id: \"showRanking\",\n      chatbotDescription: \"showRanking()은 저장된 랭킹을 내림차순으로 보여주는 API야. 그러니까, 점수가 높은 사람부터 보여준다 이 말이지.\"\n    }, {\n      name: \"showRankingAscending()\",\n      snippet: \"showRankingAscending()\",\n      tip: {\n        description: {\n          ko: \"랭킹 보여주기(오름차순)\"\n        }\n      },\n      id: \"showRankingAscending\",\n      chatbotDescription: \"showRankingAscending()은 저장된 랭킹을 내림차순으로 보여주는 API야. 그러니까, 점수가 낮은 사람부터 보여준다 이 말이지.\"\n    }, {\n      name: \"hideRanking()\",\n      snippet: \"hideRanking()\",\n      tip: {\n        description: {\n          ko: \"랭킹 숨기기\"\n        }\n      },\n      id: \"hideRanking\",\n      chatbotDescription: \"hideRanking() 랭킹을 숨기는 API야.\"\n    }, {\n      name: \"saveScore(score)\",\n      snippet: \"saveScore(100)\",\n      selection: \"100\",\n      tip: {\n        description: {\n          ko: \"랭킹에 점수 저장하기\"\n        },\n        \"params\": [{\n          name: \"score\",\n          description: {\n            ko: \"저장할 점수\"\n          }\n        }],\n        \"description2\": {\n          ko: \"유저별로 가장 높은 점수 하나가 저장된다.\"\n        }\n      },\n      id: \"saveScore\",\n      chatbotDescription: \"saveScore(score)는 랭킹에 점수를 저장하는 API야. score에 저장할 점수를 입력해봐!\"\n    }]\n  }, {\n    name: \"ID_SENSING\",\n    api: [{\n      name: \"isClickedSprite()\",\n      snippet: \"isClickedSprite()\",\n      tip: {\n        description: {\n          ko: \"스프라이트를 클릭하고 있는지 여부\"\n        },\n        \"description2\": {\n          ko: \"스프라이트를 클릭하고 있는 중이면 true, 그렇지 않으면 false를 반환한다\"\n        }\n      },\n      id: \"isClickedSprite\",\n      chatbotDescription: \"isClickedSprite는 스프라이트를 클릭하고 있는지를 알려주는 API야. 클릭하고 있다면 true를, 그렇지 않다면 false를 반환하지.\"\n    }, {\n      name: \"isPressedKey(key)\",\n      snippet: \"isPressedKey(\\\"key\\\")\",\n      selection: \"key\",\n      \"selectionType\": \"key\",\n      tip: {\n        description: {\n          ko: \"특정키를 누르고 있는지 여부\"\n        },\n        \"params\": [{\n          name: \"key\",\n          description: \"판단할 키보드의 키\"\n        }],\n        \"description2\": {\n          ko: \"key를 누르고 있는 중이면 true, 그렇지 않으면 false를 반환한다\"\n        }\n      },\n      id: \"isPressedKey\",\n      chatbotDescription: \"isPressedKey(key)는 특정키를 누르고 있는지를 알려주는 API야. 특정 키를 누르고 있다면 true를, 그렇지 않다면 false를 반환하지.\"\n    }, {\n      name: \"isClickedMouse()\",\n      snippet: \"isClickedMouse()\",\n      tip: {\n        description: {\n          ko: \"마우스를 클릭하고 있는지 여부\"\n        },\n        \"description2\": {\n          ko: \"마우스를 클릭하고 있는 중이면 true, 그렇지 않으면 false를 반환한다\"\n        }\n      },\n      id: \"isClickedMouse\",\n      chatbotDescription: \"isClickedMouse는 마우스를 클릭하고 있는지를 알려주는 API야. 클릭하고 있다면 true를, 그렇지 않다면 false를 반환하지.\"\n    }, {\n      name: \"isOverlapped(name)\",\n      snippet: \"isOverlapped(\\\"name\\\")\",\n      tip: {\n        description: {\n          ko: \"특정 스프라이트와 닿아있는지 여부\"\n        },\n        \"params\": [{\n          name: \"name\",\n          description: {\n            ko: \"스프라이트의 이름\"\n          }\n        }]\n      },\n      selection: \"name\",\n      \"selectionType\": \"sprite\",\n      id: \"isOverlapped\",\n      chatbotDescription: \"isOverlapped(name)은 특정 스프라이트와 닿아있는지를 알려주는 API야. 닿아있다면 true를, 그렇지 않다면 false를 반환하지.\"\n    }]\n  }, {\n    name: \"ID_OPERATOR\",\n    api: [{\n      name: \"+,-,*,/,%\",\n      tip: {\n        description: {\n          ko: \"사칙연산\"\n        },\n        \"params\": [{\n          name: \"+\",\n          description: {\n            ko: \"더하기\"\n          }\n        }, {\n          name: \"-\",\n          description: {\n            ko: \"빼기\"\n          }\n        }, {\n          name: \"*\",\n          description: {\n            ko: \"곱하기\"\n          }\n        }, {\n          name: \"/\",\n          description: {\n            ko: \"나누기\"\n          }\n        }, {\n          name: \"%\",\n          description: {\n            ko: \"나머지\"\n          }\n        }]\n      },\n      id: \"+,-,*,/,%\"\n    }, {\n      name: \"<, >, ==, !=\",\n      tip: {\n        description: {\n          ko: \"비교연산자\"\n        },\n        \"params\": [{\n          name: \"<\",\n          description: {\n            ko: \"~보다 작음\\n좌변보다 우변이 작으면 참을 반환한다\"\n          }\n        }, {\n          name: \">\",\n          description: {\n            ko: \"~보다 큰\\n좌변보다 우변이 크면 참을 반환한다\"\n          }\n        }, {\n          name: \"==\",\n          description: {\n            ko: \"일치\\n좌변과 우변이 서로 같으면 참을 반환한다\"\n          }\n        }, {\n          name: \"!=\",\n          description: {\n            ko: \"불일치\\n좌변과 우변이 서로 다르면 참을 반환한다\"\n          }\n        }]\n      },\n      id: \"<, >, ==, !=\"\n    }, {\n      name: \"!, ||, &&\",\n      tip: {\n        description: {\n          ko: \"논리연산자\"\n        },\n        \"params\": [{\n          name: \"!expr\",\n          description: {\n            ko: \"단일 피연산자를 true로 변환할 수 있으면 false를 반환하고, 그렇지 않으면 true를 반환한다\"\n          }\n        }, {\n          name: \"expr1 || expr2\",\n          description: {\n            ko: \"expr1을 true로 변환할 수 있으면 expr1을 반환하고, 그렇지 않으면 expr2를 반환한다\"\n          }\n        }, {\n          name: \"expr1 && expr2\",\n          description: {\n            ko: \"expr1을 true로 변환할 수 있는 경우 expr2을 반환하고, 그렇지 않으면 expr1을 반환한다\"\n          }\n        }]\n      },\n      id: \"!, ||, &&\"\n    }, {\n      name: \"abs(num)\",\n      snippet: \"abs(number)\",\n      selection: \"number\",\n      tip: {\n        description: {\n          ko: \"절대값\"\n        },\n        \"params\": [{\n          name: \"num\",\n          description: {\n            ko: \"절대값을 구할 숫자\"\n          }\n        }],\n        \"description2\": {\n          ko: \"num의 절대값을 반환한다\"\n        }\n      },\n      id: \"abs\",\n      chatbotDescription: \"abs(num)은 API는 절댓값을 구하는 API야. num에 원하는 수를 넣으면 num의 절댓값이 반환되지.\"\n    }, {\n      name: \"round(num)\",\n      snippet: \"round(number)\",\n      selection: \"number\",\n      tip: {\n        description: {\n          ko: \"반올림\"\n        },\n        \"params\": [{\n          name: \"num\",\n          description: {\n            ko: \"반올림할 숫자\"\n          }\n        }],\n        \"description2\": {\n          ko: \"num의 소수점 이하 첫째자리에서 반올림한 값을 반환한다\"\n        }\n      },\n      id: \"round\",\n      chatbotDescription: \"round(num)는 소수점 첫째 자리에서 반올림한 값을 반환하는 API야. name에 소수점이 있는 숫자를 넣어볼래? 소수점이 사라지고 정수 숫자만 남을걸!\"\n    }, {\n      name: \"ceil(num)\",\n      snippet: \"ceil(number)\",\n      selection: \"number\",\n      tip: {\n        description: {\n          ko: \"올림\"\n        },\n        \"params\": [{\n          name: \"num\",\n          description: {\n            ko: \"올림할 숫자\"\n          }\n        }],\n        \"description2\": {\n          ko: \"num의 소수점 이하 첫째자리에서 올림한 값을 반환한다\"\n        }\n      },\n      id: \"ceil\",\n      chatbotDescription: \"ceil(num)은 특정 숫자의 소수점을 올림하는 API야. num의 소수점 이하 첫째 자리에서 올림한 값을 반환하지.\"\n    }, {\n      name: \"floor(num)\",\n      snippet: \"floor(number)\",\n      selection: \"number\",\n      tip: {\n        description: {\n          ko: \"버림\"\n        },\n        \"params\": [{\n          name: \"num\",\n          description: {\n            ko: \"버림할 숫자\"\n          }\n        }],\n        \"description2\": {\n          ko: \"num의 소수점 이하 첫째자리에서 버림한 값을 반환한다\"\n        }\n      },\n      id: \"floor\",\n      chatbotDescription: \"floor(num)은 특정 숫자의 소수점 이하 첫째 자리에서 버림을 할 때 사용하는 API야.\"\n    }, {\n      name: \"getRandom(min,max)\",\n      snippet: \"getRandom(1,10)\",\n      selection: \"1\",\n      tip: {\n        description: {\n          ko: \"난수 생성하기\"\n        },\n        \"params\": [{\n          name: \"min\",\n          description: {\n            ko: \"난수를 생성할 최소 숫자\"\n          }\n        }, {\n          name: \"max\",\n          description: {\n            ko: \"난수를 생성할 최대 숫자\"\n          }\n        }],\n        \"description2\": {\n          ko: \"min과 max 사이의 값중에 하나를 무작위로 반환한다\"\n        }\n      },\n      id: \"getRandom\",\n      chatbotDescription: \"getRandom(min, max)는 min~max사이의 난수를 반환하는 API야.\"\n    }, {\n      name: \"pow(num,exponent)\",\n      snippet: \"pow(number,exponent)\",\n      selection: \"number\",\n      tip: {\n        description: {\n          ko: \"숫자의 제곱 구하기\"\n        },\n        \"params\": [{\n          name: \"num\",\n          description: {\n            ko: \"밑, 여러 번 곱할 수\"\n          }\n        }, {\n          name: \"exponent\",\n          description: {\n            ko: \"지수, 곱하는 횟수\"\n          }\n        }],\n        \"description2\": {\n          ko: \"base를 exponent번 곱한 결과, 즉 baseexponent를 반환한다\"\n        }\n      },\n      id: \"pow\",\n      chatbotDescription: \"pow(num, exponent)는 숫자의 제곱을 구하는 API야. num에 여러번 곱할 수를 입력하고 exponent에 곱하는 횟수를 입력하면 사용할 수 있지.\"\n    }, {\n      name: \"sqrt(num)\",\n      snippet: \"sqrt(number)\",\n      selection: \"number\",\n      tip: {\n        description: {\n          ko: \"숫자의 제곱근 구하기\"\n        },\n        \"params\": [{\n          name: \"num\",\n          description: {\n            ko: \"제곱근을 구할 숫자\"\n          }\n        }],\n        \"description2\": {\n          ko: \"주어진 숫자에 루트(√ )를 씌운다. 만약 숫자가 음수이면 NaN를 반환한다\"\n        }\n      },\n      id: \"sqrt\",\n      chatbotDescription: \"sqrt(num)는 숫자의 제곱근을 구하는 API야. 제곱근을 구할 숫자를 num에 입력해볼래? 참, 만약 숫자 값이 음수이면 NaN을 반환하니 조심해!\"\n    }, {\n      name: \"log(num)\",\n      snippet: \"log(number)\",\n      selection: \"number\",\n      tip: {\n        description: {\n          ko: \"숫자의 자연로그 구하기\"\n        },\n        \"params\": [{\n          name: \"num\",\n          description: {\n            ko: \"자연로그를 구할 숫자\"\n          }\n        }]\n      },\n      id: \"log\",\n      chatbotDescription: \"log(num)은 숫자의 자연로그를 구하는 API야. num에 자연로그를 구할 숫자를 넣어봐.\"\n    }]\n  }, {\n    name: \"ID_PHYSICS\",\n    api: [{\n      name: \"setCollideScene(enabled)\",\n      snippet: \"setCollideScene(true)\",\n      selection: \"true\",\n      tip: {\n        description: {\n          ko: \"벽과 충돌하게 설정하기\"\n        },\n        \"params\": [{\n          name: \"enabled\",\n          description: {\n            ko: \"true 또는 false\"\n          }\n        }],\n        \"description2\": {\n          ko: \"enabled가 true이고 물리효과가 적용된 스프라이트가 움직이는 중에\\n스크린의 끝에 닿으면 충돌하게 된다\"\n        }\n      },\n      id: \"setCollideScene\",\n      chatbotDescription: \"setCollideScene(enabled)는 스프라이트가 벽과 충돌할 수 있게 설정하는 API야. enabled에 true를 입력하면 스프라이트가 화면 밖으로 나가지 않고 충돌하지.\"\n    }, {\n      name: \"setCollision(targetName)\",\n      snippet: \"setCollision(\\\"targetName\\\")\",\n      selection: \"targetName\",\n      \"selectionType\": \"sprite\",\n      tip: {\n        description: {\n          ko: \"특정 스프라이트와 충돌하게 설정하기\"\n        },\n        \"params\": [{\n          name: \"targetName\",\n          description: {\n            ko: \"충돌을 설정할 스프라이트 이름\"\n          }\n        }],\n        \"description2\": {\n          ko: \"targetName의 스프라이트와 닿았을 때 충돌하게 된다\"\n        }\n      },\n      id: \"setCollision\",\n      chatbotDescription: \"setCollision(targetName)은 특정 스프라이트와 충돌할 수 있게 설정하는 API야. targetName에 원하는 스프라이트의 이름을 넣으면 해당 스프라이트와 충돌하게 되지.\"\n    }, {\n      name: \"setCollision([targetNames...])\",\n      snippet: \"setCollision([\\\"targetName1\\\",\\\"targetName2\\\"])\",\n      selection: \"targetName1\",\n      \"selectionType\": \"sprite\",\n      tip: {\n        description: {\n          ko: \"특정 스프라이트와 충돌하게 설정하기\"\n        },\n        \"params\": [{\n          name: \"[targetName]\",\n          description: {\n            ko: \"충돌을 설정할 스프라이트 이름 배열\"\n          }\n        }],\n        \"description2\": {\n          ko: \"targetNames의 스프라이트들과 닿았을 때 충돌하게 된다\"\n        }\n      },\n      id: \"setCollision\",\n      chatbotDescription: \"setCollision(targetName)은 특정 스프라이트와 충돌할 수 있게 설정하는 API야. targetName에 원하는 스프라이트의 이름을 넣으면 해당 스프라이트와 충돌하게 되지.\"\n    }, {\n      name: \"setCollideSide(direction, enabled)\",\n      snippet: \"setCollideSide(\\\"down\\\",false)\",\n      selection: \"down\",\n      \"selectionType\": \"direction\",\n      tip: {\n        description: {\n          ko: \"충돌 방향값 설정하기\"\n        },\n        \"params\": [{\n          name: \"direction\",\n          description: {\n            ko: \"up, down, left, right 중 하나\"\n          }\n        }, {\n          name: \"enabled\",\n          description: \"true 또는 false\"\n        }],\n        \"description2\": {\n          ko: \"direction방향에 대한 충돌설정을 적용한다.\\n예를 들어 특정 스프라이트에 down, false로 설정되면 \\n그 스프라이트는 다른스프라이트와 충돌을 할 때 아래방향에 대한\\n충돌은 하지 않게 된다\"\n        }\n      },\n      id: \"setCollideSide\",\n      chatbotDescription: \"setCollideSide(direction, enabled)는 충돌 방향을 설정하는 API야. direction에 up, down, left, right 중 한 가지의 방향을 넣고 enabled에 true나 false를 넣어서 해당 방향으로 충돌할 수 있는지를 결정할 수 있어.\"\n    }, {\n      name: \"setMovable(enabled)\",\n      snippet: \"setMovable(false)\",\n      selection: \"false\",\n      tip: {\n        description: {\n          ko: \"충돌했을 때의 움직임 설정\"\n        },\n        \"params\": [{\n          name: \"enabled\",\n          description: {\n            ko: \"true 또는 false\"\n          }\n        }],\n        \"description2\": {\n          ko: \"false일 경우 setCollision을 통해 충돌설정이 되었을 때\\n충돌은 하지만 충돌 후 튕겨나가지 않게 된다\"\n        }\n      },\n      id: \"setMovable\",\n      chatbotDescription: \"setMovable(enabled)은 충돌한 스프라이트가 튕겨 나가는지를 설정하는 API야. enabled에 false를 입력하면 스프라이트가 충돌하더라도 그 힘으로 튕겨 나가는 일은 없을 거야.\"\n    }, {\n      name: \"setMass(value)\",\n      snippet: \"setMass(10)\",\n      selection: \"10\",\n      tip: {\n        description: {\n          ko: \"질량 설정하기\"\n        },\n        \"params\": [{\n          name: \"value\",\n          description: {\n            ko: \"숫자(설정할 질량값)\"\n          }\n        }],\n        \"description2\": {\n          ko: \"질량을 설정한다.\\n다른 물리효과와 상호작용한다\"\n        }\n      },\n      id: \"setMass\",\n      chatbotDescription: \"setMass(value)는 스프라이트의 질량을 설정하는 API야. value에 원하는 숫자 값을 입력해봐! \"\n    }, {\n      name: \"setGravityX(value)\",\n      snippet: \"setGravityX(100)\",\n      selection: \"100\",\n      tip: {\n        description: {\n          ko: \"x축 중력 설정하기\"\n        },\n        \"params\": [{\n          name: \"value\",\n          description: {\n            ko: \"숫자(설정할 중력값)\"\n          }\n        }],\n        \"description2\": {\n          ko: \"x축에 대한 중력을 설정한다.\\n다른 물리효과와 상호작용한다\"\n        }\n      },\n      id: \"setGravityX\",\n      chatbotDescription: \"setGravityX(value)는 x축 중력을 설정하는 API야. value에 원하는 숫자 값을 입력해봐! value가 0보다 크면 오른쪽으로 중력이 작용해. 참, 물리 명령어들은 상호 작용하는 걸 잊지 마~ \"\n    }, {\n      name: \"setGravityY(value)\",\n      snippet: \"setGravityY(100)\",\n      selection: \"100\",\n      tip: {\n        description: {\n          ko: \"y축 중력 설정하기\"\n        },\n        \"params\": [{\n          name: \"value\",\n          description: {\n            ko: \"숫자(설정할 중력값)\"\n          }\n        }],\n        \"description2\": {\n          ko: \"y축에 대한 중력을 설정한다.\\n다른 물리효과와 상호작용한다\"\n        }\n      },\n      id: \"setGravityY\",\n      chatbotDescription: \"setGravityX(value)는 y축 중력을 설정하는 API야. value에 원하는 숫자 값을 입력해봐! value가 0보다 크면 아래로 중력이 작용해. 참, 물리 명령어들은 상호 작용하는 걸 잊지 마~ \"\n    }, {\n      name: \"setVelocityX(value)\",\n      snippet: \"setVelocityX(100)\",\n      selection: \"100\",\n      tip: {\n        description: {\n          ko: \"x축 속도 설정하기\"\n        },\n        \"params\": [{\n          name: \"value\",\n          description: {\n            ko: \"숫자(설정할 속도값)\"\n          }\n        }],\n        \"description2\": {\n          ko: \"x축에 대한 속도를 설정한다.\\n다른 물리효과와 상호작용한다\"\n        }\n      },\n      id: \"setVelocityX\",\n      chatbotDescription: \"setVelocityX(value)는 스프라이트의 x축 속도를 설정하는 API야. value가 0보다 크면 오른쪽 속도가 생겨.\"\n    }, {\n      name: \"setVelocityY(value)\",\n      snippet: \"setVelocityY(100)\",\n      selection: \"100\",\n      tip: {\n        description: {\n          ko: \"y축 속도 설정하기\"\n        },\n        \"params\": [{\n          name: \"value\",\n          description: {\n            ko: \"숫자(설정할 속도값)\"\n          }\n        }],\n        \"description2\": {\n          ko: \"y축에 대한 속도를 설정한다.\\n다른 물리효과와 상호작용한다\"\n        }\n      },\n      id: \"setVelocityY\",\n      chatbotDescription: \"setVelocityY(value)는 스프라이트의 y축 속도를 설정하는 API야. value가 0보다 크면 아래로 속도가 생겨.\"\n    }, {\n      name: \"getVelocityX()\",\n      snippet: \"getVelocityX()\",\n      tip: {\n        description: {\n          ko: \"x축 속도 가져오기\"\n        }\n      },\n      id: \"getVelocityX\",\n      chatbotDescription: \"getVelocityX()는 스프라이트의 X축 속도를 반환하는 API야. X축은 가로를 의미해! 오른쪽으로 가고 있다면 X축 속도는 0보다 큰 숫자가 되지.\"\n    }, {\n      name: \"getVelocityY()\",\n      snippet: \"getVelocityY()\",\n      tip: {\n        description: {\n          ko: \"y축 속도 가져오기\"\n        }\n      },\n      id: \"getVelocityY\",\n      chatbotDescription: \"getVelocityY()는 스프라이트의 Y축 속도를 반환하는 API야. Y축은 세로를 의미해! 아래로 가고 있다면 Y축 속도는 0보다 큰 숫자가 되지.\"\n    }, {\n      name: \"setBounceX(value)\",\n      snippet: \"setBounceX(1)\",\n      selection: \"1\",\n      tip: {\n        description: {\n          ko: \"충돌했을 때 x축 튕기는 정도 설정하기\"\n        },\n        \"params\": [{\n          name: \"value\",\n          description: {\n            ko: \"숫자(설정할 튕기는 정도의 값)\"\n          }\n        }],\n        \"description2\": {\n          ko: \"다른 스프라이트와 충돌했을 때, 설정한 값만큼 반작용이 일어난다.\\n값이 1일 경우 작용하는 힘을 그대로 전달받게 된다\"\n        }\n      },\n      id: \"setBounceX\",\n      chatbotDescription: \"setBounceX(value)는 스프라이트가 충돌했을 때 X축, 그러니까 가로 방향으로 튕기는 정도를 설정하는 API야. value에 원하는 숫자 값을 입력해봐! 참고로 1을 입력하면 충돌할 때의 힘 그대로 튕겨.\"\n    }, {\n      name: \"setBounceY(value)\",\n      snippet: \"setBounceY(1)\",\n      selection: \"1\",\n      tip: {\n        description: {\n          ko: \"충돌했을 때 y축 튕기는 정도 설정하기\"\n        },\n        \"params\": [{\n          name: \"value\",\n          description: {\n            ko: \"숫자(설정할 튕기는 정도의 값)\"\n          }\n        }],\n        \"description2\": {\n          ko: \"다른 스프라이트와 충돌했을 때, 설정한 값만큼 반작용이 일어난다.\\n값이 1일 경우 작용하는 힘을 그대로 전달받게 된다\"\n        }\n      },\n      id: \"setBounceY\",\n      chatbotDescription: \"setBounceY(value)는 스프라이트가 충돌했을 때 Y축, 그러니까 세로 방향으로 튕기는 정도를 설정하는 API야. value에 원하는 숫자 값을 입력해봐! 참고로 1을 입력하면 충돌할 때의 힘 그대로 튕겨.\"\n    }, {\n      name: \"setAccelerationX(value)\",\n      snippet: \"setAccelerationX(100)\",\n      selection: \"100\",\n      tip: {\n        description: {\n          ko: \"x축 가속도 설정하기\"\n        },\n        \"params\": [{\n          name: \"value\",\n          description: {\n            ko: \"숫자(설정할 가속도값)\"\n          }\n        }],\n        \"description2\": {\n          ko: \"x축에 대한 가속도를 설정한다.\\n다른 물리효과와 상호작용한다\"\n        }\n      },\n      id: \"setAccelerationX\",\n      chatbotDescription: \"setAccelerationX(value)는 x축 가속도를 설정하는 API야. value에 가속도 값을 입력해봐! 다른 물리효과와 상호작용해서 가속도가 적용될 거야.\"\n    }, {\n      name: \"setAccelerationY(value)\",\n      snippet: \"setAccelerationY(1)\",\n      selection: \"1\",\n      tip: {\n        description: {\n          ko: \"y축 가속도 설정하기\"\n        },\n        \"params\": [{\n          name: \"value\",\n          description: {\n            ko: \"숫자(설정할 가속도값)\"\n          }\n        }],\n        \"description2\": {\n          ko: \"y축에 대한 가속도를 설정한다.\\n다른 물리효과와 상호작용한다\"\n        }\n      },\n      id: \"setAccelerationY\",\n      chatbotDescription: \"setAccelerationY(value)는 y축 가속도를 설정하는 API야. value에 가속도 값을 입력해봐! 다른 물리효과와 상호작용해서 가속도가 적용될 거야.\"\n    }, {\n      name: \"setVelocityFromDegree(degree,force,maxSpeed)\",\n      snippet: \"setVelocityFromDegree(90,1,300)\",\n      tip: {\n        description: {\n          ko: \"방향으로 속도 설정하기\"\n        },\n        \"params\": [{\n          name: \"degree\",\n          description: {\n            ko: \"숫자(설정할 방향값)\"\n          }\n        }, {\n          name: \"force\",\n          description: {\n            ko: \"숫자(0~1), maxSpeed의 비율\"\n          }\n        }, {\n          name: \"maxSpeed\",\n          description: {\n            ko: \"숫자(최고 속도)\"\n          }\n        }],\n        \"description2\": {\n          ko: \"velocity x,y값을 방향에따라 설정한다.\\nforce가 0.5이고 maxSpeed가 100이면 적용되는 속도는 50이 된다.\"\n        }\n      },\n      id: \"setVelocityFromDegree\",\n      chatbotDescription: \"setVelocityFromDegree(degree, force, maxSpeed)는 방향으로 속도를 설정하는 API야. degree에 설정할 방향 값, force에 최고 가속도의 비율, maxSpeed에 최고 가속도를 입력해봐. 참, force는 비율이니까 0~1 사이의 값을 입력해야 돼!\"\n    }, {\n      name: \"setAccelerationFromDegree(degree,force,maxSpeed)\",\n      snippet: \"setAccelerationFromDegree(90,1,300)\",\n      tip: {\n        description: {\n          ko: \"방향으로 가속도 설정하기\"\n        },\n        \"params\": [{\n          name: \"degree\",\n          description: {\n            ko: \"숫자(설정할 방향값)\"\n          }\n        }, {\n          name: \"force\",\n          description: {\n            ko: \"숫자(0~1), maxSpeed의 비율\"\n          }\n        }, {\n          name: \"maxSpeed\",\n          description: {\n            ko: \"숫자(최고 가속도)\"\n          }\n        }],\n        \"description2\": {\n          ko: \"velocity x,y값을 방향에따라 설정한다.\\nforce가 0.5이고 maxSpeed가 100이면 적용되는 가속도는 50이 된다.\"\n        }\n      },\n      id: \"setAccelerationFromDegree\",\n      chatbotDescription: \"setAccelerationFromDegree(degree, force, maxSpeed)는 방향으로 가속도를 설정하는 API야. degree에 설정할 방향 값, force에 최고 가속도의 비율, maxSpeed에 최고 가속도를 입력해봐. 참, force는 비율이니까 0~1 사이의 값을 입력해야돼!\"\n    }]\n  }, {\n    name: \"ID_SOUND\",\n    api: [{\n      name: \"playSound(name, isLoop)\",\n      snippet: \"playSound(\\\"name\\\", false)\",\n      tip: {\n        description: {\n          ko: \"사운드 스프라이트 재생하기\"\n        },\n        \"params\": [{\n          name: \"name\",\n          description: {\n            ko: \"사운드 스프라이트의 이름\"\n          }\n        }, {\n          name: \"isLoop\",\n          description: {\n            ko: \"반복 재생 여부\"\n          }\n        }],\n        \"description2\": {\n          ko: \"입력된 사운드 스프라이트를\\n1회 혹은 반복하여 재생한다.\"\n        }\n      },\n      selection: \"name\",\n      \"selectionType\": \"sound\",\n      id: \"playSound\",\n      chatbotDescription: \"playSound(name, isLoop)는 사운드 스프라이트를 재생하는 API야. name에 재생하고 싶은 사운드 스프라이트의 이름을 입력해볼래?\"\n    }, {\n      name: \"restartSound(name)\",\n      snippet: \"restartSound(\\\"name\\\")\",\n      tip: {\n        description: {\n          ko: \"사운드 스프라이트 처음부터 다시 재생하기\"\n        },\n        \"params\": [{\n          name: \"name\",\n          description: {\n            ko: \"사운드 스프라이트의 이름\"\n          }\n        }],\n        \"description2\": {\n          ko: \"입력된 사운드 스프라이트를 처음부터 다시 재생한다.\\n(반복 여부는 playSound 함수에서 설정된 값을 따른다.)\"\n        }\n      },\n      selection: \"name\",\n      \"selectionType\": \"sound\",\n      id: \"restartSound\",\n      chatbotDescription: \"restartTimer(name)는 사운드 스프라이트를 처음부터 다시 재생하는 API야. name에 처음부터 다시 재생하고 싶은 사운드 스프라이트의 이름을 입력해봐!\"\n    }, {\n      name: \"resumeSound(name)\",\n      snippet: \"resumeSound(\\\"name\\\")\",\n      tip: {\n        description: {\n          ko: \"사운드 스프라이트 이어서 재생하기\"\n        },\n        \"params\": [{\n          name: \"name\",\n          description: {\n            ko: \"사운드 스프라이트의 이름\"\n          }\n        }],\n        \"description2\": {\n          ko: \"입력된 사운드 스프라이트를 일시정지된 위치부터 다시 재생한다.\\n(반복 여부는 playSound 함수에서 설정된 값을 따른다.)\"\n        }\n      },\n      selection: \"name\",\n      \"selectionType\": \"sound\",\n      id: \"resumeSound\",\n      chatbotDescription: \"resumeSound(name)는 멈췄던 사운드 스프라이트를 이어서 재생하는 API야. name에 이어서 재생하고 싶은 사운드 스프라이트의 이름을 입력해봐!\"\n    }, {\n      name: \"stopAllSounds()\",\n      snippet: \"stopAllSounds()\",\n      tip: {\n        description: {\n          ko: \"재생중인 모든 사운드 스프라이트 정지하기\"\n        }\n      },\n      id: \"stopAllSounds\",\n      chatbotDescription: \"stopAllSounds()는 재생 중인 모든 사운드 스프라이트를 정지하는 API야. 모든 소리를 끄고 싶으면 사용해봐!\"\n    }, {\n      name: \"stopSound(name)\",\n      snippet: \"stopSound(\\\"name\\\")\",\n      tip: {\n        description: {\n          ko: \"사운드 스프라이트 정지하기\"\n        },\n        \"params\": [{\n          name: \"name\",\n          description: {\n            ko: \"사운드 스프라이트의 이름\"\n          }\n        }]\n      },\n      selection: \"name\",\n      \"selectionType\": \"sound\",\n      id: \"stopSound\",\n      chatbotDescription: \"stopSound(name)은 사운드 스프라이트를 정지하는 API야. 일시 정지가 아니라 완전히 정지해서 이어서 재생하기가 불가능하니까 참고해!\"\n    }, {\n      name: \"pauseSound(name)\",\n      snippet: \"pauseSound(\\\"name\\\")\",\n      tip: {\n        description: {\n          ko: \"사운드 스프라이트 일시정지하기\"\n        },\n        \"params\": [{\n          name: \"name\",\n          description: {\n            ko: \"사운드 스프라이트의 이름\"\n          }\n        }]\n      },\n      selection: \"name\",\n      \"selectionType\": \"sound\",\n      id: \"pauseSound\",\n      chatbotDescription: \"pauseSound(name)은 사운드 스프라이트를 일시정지하는 API야. name에 재생되고 있는 사운드 스프라이트의 이름을 입력해볼래?\"\n    }, {\n      name: \"setSoundVolume(value)\",\n      snippet: \"setSoundVolume(1)\",\n      tip: {\n        description: {\n          ko: \"앱의 음량 설정하기\"\n        },\n        \"params\": [{\n          name: \"value\",\n          description: {\n            ko: \"음량(0~1 사이의 값)\"\n          }\n        }]\n      },\n      selection: \"1\",\n      id: \"setSoundVolume\",\n      chatbotDescription: \"setSoundVolume(value)은 앱의 음량을 설정하는 API야. value에 0~1 사이의 값을 입력해볼래?\"\n    }, {\n      name: \"addSoundVolume(value)\",\n      snippet: \"addSoundVolume(0.1)\",\n      tip: {\n        description: {\n          ko: \"앱의 음량을 value만큼 키우기\"\n        },\n        \"params\": [{\n          name: \"value\",\n          description: {\n            ko: \"음량의 변화 크기(0~1 사이의 값)\"\n          }\n        }]\n      },\n      selection: \"0.1\",\n      id: \"addSoundVolume\",\n      chatbotDescription: \"addSoundVolume(value)은 앱의 음량을 value만큼 추가하는 API야. 음량은 0~1 사이니까 원하는 만큼 value에 값을 적고 사용해봐.\"\n    }, {\n      name: \"getSoundVolume()\",\n      snippet: \"getSoundVolume()\",\n      tip: {\n        description: {\n          ko: \"현재 앱의 음량 가져오기\"\n        }\n      },\n      id: \"getSoundVolume\",\n      chatbotDescription: \"getSoundVolume()은 앱의 음량을 반환하는 API야. 음량은 0~1사이니깐 참고해.\"\n    }]\n  }, {\n    name: \"ID_TIME\",\n    api: [{\n      name: \"startTimer()\",\n      snippet: \"startTimer()\",\n      tip: {\n        description: {\n          ko: \"타이머 시작하기\"\n        }\n      },\n      id: \"startTimer\",\n      chatbotDescription: \"startTimer()는 타이머를 시작하는 API야.\"\n    }, {\n      name: \"pauseTimer()\",\n      snippet: \"pauseTimer()\",\n      tip: {\n        description: {\n          ko: \"타이머 멈추기\"\n        }\n      },\n      id: \"pauseTimer\",\n      chatbotDescription: \"pauseTimer()는 타이머를 멈추는 API야. 타이머가 일시정지 상태가 되는 거지.\"\n    }, {\n      name: \"resumeTimer()\",\n      snippet: \"resumeTimer()\",\n      tip: {\n        description: {\n          ko: \"타이머 이어서 시작하기\"\n        }\n      },\n      id: \"resumeTimer\",\n      chatbotDescription: \"resumeTimer()는 멈췄던 타이머를 이어서 재생하는 API야.\"\n    }, {\n      name: \"resetTimer()\",\n      snippet: \"resetTimer()\",\n      tip: {\n        description: {\n          ko: \"타이머 0초로 되돌리기\"\n        }\n      },\n      id: \"resetTimer\",\n      chatbotDescription: \"resetTimer()는 타이머를 0초로 되돌리는 API야.\"\n    }, {\n      name: \"getTimer()\",\n      snippet: \"getTimer()\",\n      tip: {\n        description: {\n          ko: \"현재 타이머의 값 가져오기\"\n        }\n      },\n      id: \"getTimer\",\n      chatbotDescription: \"getTimer()는 현재 타이머의 값을 가져올 수 있는 API야. starTimer()와 함께 사용하면 시간을 잴 수 있어!\"\n    }, {\n      name: \"getYear()\",\n      snippet: \"getYear()\",\n      tip: {\n        description: {\n          ko: \"현재 연도를 가져오기\"\n        }\n      },\n      id: \"getYear\",\n      chatbotDescription: \"getDay()는 현재 년도를 반환하는 API야.\"\n    }, {\n      name: \"getMonth()\",\n      snippet: \"getMonth()\",\n      tip: {\n        description: {\n          ko: \"현재 월을 가져오기\"\n        }\n      },\n      id: \"getMonth\",\n      chatbotDescription: \"getMonth()는 현재 몇 월인지를 반환하는 API야.\"\n    }, {\n      name: \"getDay()\",\n      snippet: \"getDay()\",\n      tip: {\n        description: {\n          ko: \"현재 일을 가져오기\"\n        }\n      },\n      id: \"getDay\",\n      chatbotDescription: \"getDay()는 현재 며칠인지를 반환하는 API야.\"\n    }, {\n      name: \"getHour()\",\n      snippet: \"getHour()\",\n      tip: {\n        description: {\n          ko: \"현재 시간을 가져오기\"\n        }\n      },\n      id: \"getHour\",\n      chatbotDescription: \"getHour()는 현재 몇 시인지를 반환하는 API야.\"\n    }, {\n      name: \"getMin()\",\n      snippet: \"getMin()\",\n      tip: {\n        description: {\n          ko: \"현재 분을 가져오기\"\n        }\n      },\n      id: \"getMin\",\n      chatbotDescription: \"getMin()은 현재 몇 분인지를 반환하는 API야.\"\n    }, {\n      name: \"getSec()\",\n      snippet: \"getSec()\",\n      tip: {\n        description: {\n          ko: \"현재 초를 가져오기\"\n        }\n      },\n      id: \"getSec\",\n      chatbotDescription: \"getSec()는 현재 몇 초인지를 반환하는 API야.\"\n    }]\n  }, {\n    name: \"ID_PEN\",\n    api: [{\n      name: \"startPen()\",\n      snippet: \"startPen()\",\n      tip: {\n        description: {\n          ko: \"펜 사용 시작하기\"\n        }\n      },\n      id: \"startPen\",\n      chatbotDescription: \"startPen()은 펜 사용을 시작하는 API야.\"\n    }, {\n      name: \"endPen()\",\n      snippet: \"endPen()\",\n      tip: {\n        description: {\n          ko: \"펜 사용 끝내기\"\n        }\n      },\n      id: \"endPen\",\n      chatbotDescription: \"endPen()은 스프라이트에서 펜 사용을 끝낼 때 사용하는 API야.\"\n    }, {\n      name: \"setPenColor(color)\",\n      snippet: \"setPenColor(\\\"red\\\")\",\n      tip: {\n        description: {\n          ko: \"펜 색깔 설정하기\"\n        },\n        \"params\": [{\n          name: \"color\",\n          description: {\n            ko: \"색깔\"\n          }\n        }]\n      },\n      selection: \"red\",\n      \"selectionType\": \"color\",\n      id: \"setPenColor\",\n      chatbotDescription: \"setPenColor(color)는 펜의 색깔을 설정하는 API야. 원하는 색을 color에 입력하고 사용해봐!\"\n    }, {\n      name: \"setRandomPenColor()\",\n      snippet: \"setRandomPenColor()\",\n      tip: {\n        description: {\n          ko: \"펜의 색깔을 랜덤으로 설정하기\"\n        }\n      },\n      id: \"setRandomPenColor\",\n      chatbotDescription: \"setRandomPenColor()는 펜의 색깔을 랜덤으로 설정하는 API야. 어떤 색이 나올지 모르니까 기대할 만해.\"\n    }, {\n      name: \"getPenColor()\",\n      snippet: \"getPenColor()\",\n      tip: {\n        description: {\n          ko: \"사용중인 펜의 색깔 가져오기\"\n        }\n      },\n      id: \"getPenColor\",\n      chatbotDescription: \"getPenColor()는 스프라이트의 펜 색상을 반환하는 API야.\"\n    }, {\n      name: \"setPenSize(size)\",\n      snippet: \"setPenSize(1)\",\n      tip: {\n        description: {\n          ko: \"펜 두께를 size로 설정하기\"\n        },\n        \"params\": [{\n          name: \"size\",\n          description: {\n            ko: \"펜의 두께\"\n          }\n        }]\n      },\n      selection: \"1\",\n      id: \"setPenSize\",\n      chatbotDescription: \"setPenSize(size)는 펜의 두께를 설정하는 API야. 원하는 두께를 size에 입력하고 사용해봐!\"\n    }, {\n      name: \"addPenSize(size)\",\n      snippet: \"addPenSize(1)\",\n      tip: {\n        description: {\n          ko: \"펜 두께를 size만큼 두껍게 만들기\"\n        },\n        \"params\": [{\n          name: \"size\",\n          description: {\n            ko: \"펜 두께의 변화 크기\"\n          }\n        }]\n      },\n      selection: \"1\",\n      id: \"addPenSize\",\n      chatbotDescription: \"addPenSize(size)는 펜의 두께를 변경하는 API야. size에 원하는 숫자를 넣어서 사용해봐.\"\n    }, {\n      name: \"getPenSize()\",\n      snippet: \"getPenSize()\",\n      tip: {\n        description: {\n          ko: \"사용중인 펜의 두께 가져오기\"\n        }\n      },\n      id: \"getPenSize\",\n      chatbotDescription: \"getPenSize()는 스프라이트의 펜 두께를 반환하는 API야.\"\n    }, {\n      name: \"erasePen()\",\n      snippet: \"erasePen()\",\n      tip: {\n        description: {\n          ko: \"사용했던 펜 내용 지우기\"\n        }\n      },\n      id: \"erasePen\",\n      chatbotDescription: \"erasePen()은 스프라이트로 그려진 펜을 지울 때 사용하는 API야.\"\n    }]\n  }, {\n    name: \"ID_MOBILE\",\n    api: [{\n      name: \"vibrate()\",\n      snippet: \"vibrate()\",\n      tip: {\n        description: {\n          ko: \"진동 설정하기\"\n        },\n        \"description2\": {\n          ko: \"(모바일 전용)\\n모바일 기기에서 진동이 울린다.\"\n        }\n      },\n      id: \"vibrate\",\n      chatbotDescription: \"vibrate()는 모바일 전용이고 진동을 설정하는 API야.\"\n    }, {\n      name: \"onShake(function())\",\n      snippet: \"onShake(function(){})\",\n      newLine: \"onShake(function(){\",\n      tip: {\n        description: {\n          ko: \"기기를 흔들었을 때\"\n        },\n        \"description2\": {\n          ko: \"(모바일 전용)\\n모바일 기기를 빠르게 흔들었을 때 호출된다.\"\n        }\n      },\n      id: \"onShake\",\n      chatbotDescription: \"onShake(function())는 모바일 전용이고 기기를 흔들었을 때 {} 괄호 안에 입력된 코드를 실행하는 API야.\"\n    }, {\n      name: \"onGyro(function(x,y))\",\n      snippet: \"onGyro(function(x,y){})\",\n      newLine: \"onGyro(function(x,y){\",\n      tip: {\n        description: {\n          ko: \"기기를 기울일 때\"\n        },\n        \"params\": [{\n          name: \"x\",\n          description: {\n            ko: \"기기가 기울어진 x축의 값\"\n          }\n        }, {\n          name: \"y\",\n          description: {\n            ko: \"기기가 기울어진 y축의 값\"\n          }\n        }],\n        \"description2\": {\n          ko: \"(모바일 전용)\\n모바일 기기를 기울였을 때 호출된다.\"\n        }\n      },\n      id: \"onGyro\",\n      chatbotDescription: \"onGyro(function(x, y))는 모바일 전용이고 기기를 기울일 때 {} 괄호 안에 입력된 코드를 실행하는 API야.\"\n    }, {\n      name: \"startListening()\",\n      snippet: \"startListening()\",\n      tip: {\n        description: {\n          ko: \"음성 입력을 받는다\"\n        },\n        \"description2\": {\n          ko: \"(모바일 전용)\\n모바일 기기를 통해 음성 입력을 대기한다.\\n입력이 되면 onListening을 통해 입력된 음성값을 받는다.\"\n        }\n      },\n      id: \"startListening\",\n      chatbotDescription: \"startListening()은 모바일 전용이고 음성 입력을 받을 준비를 하는 API야. onListening과 함께 사용해서 음성 입력을 받을 수 있어.\"\n    }, {\n      name: \"onListening(function(msg))\",\n      snippet: \"onListening(function(msg){})\",\n      newLine: \"onListening(function(msg){\",\n      tip: {\n        description: {\n          ko: \"음성을 입력받았을 때\"\n        },\n        \"params\": [{\n          name: \"msg\",\n          description: {\n            ko: \"모바일 기기를 통해 입력되어진 음성 값\"\n          }\n        }],\n        \"description2\": {\n          ko: \"(모바일 전용)\\nstartListening을 통해 입력된 음성 값을 받는다.\"\n        }\n      },\n      id: \"onListening\",\n      chatbotDescription: \"onListening(function(msg))는 모바일 기기를 통해 음성을 입력받았을 때 {} 괄호 안에 입력된 코드를 실행하는 API야. startListening과 함께 사용하지.\"\n    }, {\n      name: \"speak(msg)\",\n      snippet: \"speak(\\\"Hello, WizLab\\\")\",\n      tip: {\n        description: {\n          ko: \"음성을 출력한다.\"\n        },\n        \"params\": [{\n          name: \"msg\",\n          description: {\n            ko: \"음성으로 출력 할 내용\"\n          }\n        }],\n        \"description2\": {\n          ko: \"(모바일 전용)\\nmsg값을 모바일 기기를 통해 음성으로 출력한다.\"\n        }\n      },\n      id: \"speak\",\n      chatbotDescription: \"speak(msg)는 모바일 전용이고 메시지를 음성으로 출력해주는 API야. msg에 음성으로 출력되길 원하는 메시지를 입력해봐!\"\n    }, {\n      name: \"openCamera(facing)\",\n      snippet: \"openCamera(\\\"front\\\")\",\n      tip: {\n        description: {\n          ko: \"모바일에서 카메라를 연다\"\n        },\n        \"params\": [{\n          name: \"facing\",\n          description: {\n            ko: \"오픈할 카메라 방향을 선택\"\n          }\n        }],\n        \"description2\": {\n          ko: \"(모바일 전용)\\nfacing값을 통해 카메라 방향을 선택한 후 모바일 기기에서 카메라를 연다.\"\n        }\n      },\n      id: \"openCamera\",\n      chatbotDescription: \"openCamera(facing)는 모바일 전용 API고 모바일 기기에서 카메라를 여는 API야.\"\n    }, {\n      name: \"closeCamera()\",\n      snippet: \"closeCamera()\",\n      tip: {\n        description: {\n          ko: \"모바일에서 카메라를 닫는다\"\n        },\n        \"description2\": {\n          ko: \"(모바일 전용)\\n모바일 기기에서 카메라를 닫는다.\"\n        }\n      },\n      id: \"closeCamera\",\n      chatbotDescription: \"closeCamera()는 모바일 전용 API고 모바일 기기에서 카메라를 닫는 API야.\"\n    }, {\n      name: \"switchCamera()\",\n      snippet: \"switchCamera()\",\n      tip: {\n        description: {\n          ko: \"카메라 방향을 전환한다\"\n        },\n        \"description2\": {\n          ko: \"(모바일 전용)모바일 기기에서 카메라 방향을 전환한다.\"\n        }\n      },\n      id: \"switchCamera\",\n      chatbotDescription: \"switchCamera()는 모바일 전용이고 카메라의 방향을 전환하는 API야. \"\n    }, {\n      name: \"onFaceDetect(function(face))\",\n      snippet: \"onFaceDetect(function(face){})\",\n      newLine: \"{\",\n      tip: {\n        description: {\n          ko: \"카메라를 통해 얼굴을 인식한다.\"\n        },\n        \"params\": [{\n          name: \"face\",\n          description: {\n            ko: \"모바일 기기를 통해 인식된 얼굴 정보\"\n          }\n        }],\n        \"description2\": {\n          ko: \"(모바일 전용)\\n모바일 기기에서 카메라로 얼굴을 인식한후 인식한 얼굴에 대한 정보를 가져온다.\"\n        }\n      },\n      id: \"onFaceDetect\",\n      chatbotDescription: \"onFaceDetect(function(face))는 모바일 전용이고 카메라로 얼굴 인식을 하는 API야.\"\n    }]\n  }, {\n    name: \"ID_PARAMETER\",\n    api: [{\n      name: \"function\",\n      snippet: \"function name(){}\",\n      newLine: \"{\",\n      selection: \"name\",\n      tip: {\n        description: {\n          ko: \"함수를 선언한다.\"\n        },\n        \"description2\": {\n          ko: \"name이라는 이름의 함수를 선언한다.\\n\"\n        }\n      },\n      id: \"function\",\n      chatbotDescription: \"function()은 함수를 선언할 때 사용할 수 있어. 만들고 싶은 함수의 이름과 함께 입력해볼래?\"\n    }, {\n      name: \"var\",\n      snippet: \"var name\",\n      selection: \"name\",\n      tip: {\n        description: {\n          ko: \"변수를 선언한다.\"\n        },\n        \"description2\": {\n          ko: \"name이라는 이름의 변수를 선언한다.\\n\"\n        }\n      },\n      id: \"var\",\n      chatbotDescription: \"var은 변수를 선언할 때 사용할 수 있어. var을 입력하고 오른쪽에 원하는 변수 이름을 입력한 다음 = 기호를 사용해서 값을 저장하지. 값을 저장하는 상자라고 생각하면 돼!\"\n    }, {\n      name: \"let\",\n      snippet: \"let name\",\n      selection: \"name\",\n      tip: {\n        description: {\n          ko: \"변수를 선언한다.\"\n        },\n        \"description2\": {\n          ko: \"name이라는 이름의 변수를 선언한다.\\n\"\n        }\n      },\n      id: \"let\",\n      chatbotDescription: \"let은 변수를 선언할 때 사용해. 하지만 var보다는 접근할 수 있는 범위가 작아!\"\n    }, {\n      name: \"const\",\n      snippet: \"const name\",\n      selection: \"name\",\n      tip: {\n        description: {\n          ko: \"상수를 선언한다.\"\n        },\n        \"description2\": {\n          ko: \"name이라는 이름의 상수를 선언한다.\\n\"\n        }\n      },\n      id: \"const\",\n      chatbotDescription: \"const는 상수를 선언할 때 사용해.\"\n    }, {\n      name: \"global\",\n      snippet: \"global.name\",\n      selection: \"name\",\n      \"selectionType\": \"global\",\n      tip: {\n        description: {\n          ko: \"전역 오브젝트\"\n        },\n        \"description2\": {\n          ko: \"앱 전체에서 사용 가능한 전역 오브젝트이다.\\nscene이 달라도 같이 사용된다\"\n        }\n      },\n      id: \"global\",\n      chatbotDescription: \"global은 전역 오브젝트라고 하는데 변수 앞에 global.을 붙이면 다른 스프라이트와 장면에서도 사용할 수 있는 변수가 되지!\"\n    }, {\n      name: \"server.data\",\n      snippet: \"server.data.value\",\n      selection: \"value\",\n      tip: {\n        description: {\n          ko: \"서버에 저장할 수 있는 오브젝트\"\n        },\n        \"description2\": {\n          ko: \"(퍼블리싱 앱 전용 기능)\"\n        }\n      },\n      id: \"server.data\",\n      chatbotDescription: \"sever.data는 서버에 저장할 수 있는 오브젝트야. 오브젝트는 서버에 저장할 수 있게 만든 상자라고 생각하면 돼. 상자에 데이터를 넣은 다음, 상자를 서버에 보관하거나 꺼낼 수 있어!\"\n    }, {\n      name: \"server.save(function())\",\n      snippet: \"server.save(function(){})\",\n      newLine: \"server.save(function(){\",\n      tip: {\n        description: {\n          ko: \"server.data 오브젝트를 서버에 저장한다\"\n        },\n        \"description2\": {\n          ko: \"(퍼블리싱 앱 전용 기능)\"\n        }\n      },\n      id: \"server.save\",\n      chatbotDescription: \"server.save(function())는 server.data 오브젝트를 서버에 저장하는 API야. 상자를 서버에 보관하는 거지.\"\n    }, {\n      name: \"server.load(function())\",\n      snippet: \"server.load(function(){})\",\n      newLine: \"server.load(function(){\",\n      tip: {\n        description: {\n          ko: \"서버에 저장된 데이터를 불러와서 server.data에 저장한다\"\n        },\n        \"description2\": {\n          ko: \"(퍼블리싱 앱 전용 기능)\"\n        }\n      },\n      id: \"server.load\",\n      chatbotDescription: \"server.load(function())는 서버에 저장된 데이터를 불러와서 server.data에 저장하는 API야. 서버에 저장된 상자를 꺼내는 거지.\"\n    }, {\n      name: \"server.reset(function())\",\n      snippet: \"server.reset(function(){})\",\n      newLine: \"server.reset(function(){\",\n      tip: {\n        description: {\n          ko: \"server.data 오브젝트를 서버에서 초기화한다\"\n        },\n        \"description2\": {\n          ko: \"(퍼블리싱 앱 전용 기능)\"\n        }\n      },\n      id: \"server.reset\",\n      chatbotDescription: \"sever.reset(function())은 server.data 오브젝트를 서버에서 초기화하는 API야. 상자를 비우는 거지.\"\n    }, {\n      name: \"socket.connect(function())\",\n      snippet: \"socket.connect(function(){})\",\n      newLine: \"socket.connect(function(){\",\n      tip: {\n        description: {\n          ko: \"소켓 서버에 접속한다.\"\n        }\n      },\n      id: \"socket.connect\",\n      chatbotDescription: \"socket.connect(function())는 소켓 서버에 접속하는 API야. 소켓을 사용하면 실시간으로 정보를 주고받을 수 있지.\"\n    }, {\n      name: \"socket.disconnect()\",\n      snippet: \"socket.disconnect()\",\n      tip: {\n        description: {\n          ko: \"소켓 서버 연결을 해제한다.\"\n        }\n      },\n      id: \"socket.disconnect\",\n      chatbotDescription: \"socket.disconnect()는 소켓 서버와의 연결을 해제하는 API야.\"\n    }, {\n      name: \"socket.isConnected()\",\n      snippet: \"socket.isConnected()\",\n      tip: {\n        description: {\n          ko: \"소켓 서버와 연결 상태를 확인한다.\"\n        }\n      },\n      id: \"socket.isConnected\",\n      chatbotDescription: \"socket.isConnected()는 소켓 서버와 연결이 잘 됐는지를 확인하는 API야. 잘 연결됐다면 true가 반환될 거야.\"\n    }, {\n      name: \"socket.emit(data)\",\n      snippet: \"socket.emit(data)\",\n      tip: {\n        description: {\n          ko: \"소켓서버에 데이터를 전송한다.\"\n        }\n      },\n      id: \"socket.emit\",\n      chatbotDescription: \"socket.emit(data)는 소켓 서버에 데이터를 전송하는 API야. data에 전송을 원하는 데이터를 입력해봐!\"\n    }, {\n      name: \"socket.onReceive(function())\",\n      snippet: \"socket.onReceive(function(data){})\",\n      newLine: \"socket.onReceive(function(data){\",\n      tip: {\n        description: {\n          ko: \"소켓 서버로부터 메세지를 받는다.\"\n        }\n      },\n      id: \"socket.onReceive\",\n      chatbotDescription: \"socket.onReceive(function())는 소켓 서버로부터 메시지를 받는 API야.\"\n    }, {\n      name: \"socket.joinRoom(roomId)\",\n      snippet: \"socket.joinRoom(roomId)\",\n      tip: {\n        description: {\n          ko: \"소켓 서버의 특정한 룸에 입장한다.\"\n        }\n      },\n      id: \"socket.joinRoom\",\n      chatbotDescription: \"socket.joinRoom(roomId)는 소켓 서버의 특정한 룸에 입장하는 API야. roomId에 입장을 원하는 룸의 ID를 입력해봐!\"\n    }, {\n      name: \"socket.leaveRoom(roomId)\",\n      snippet: \"socket.leaveRoom(roomId)\",\n      tip: {\n        description: {\n          ko: \"소켓 서버의 룸에서 퇴장한다.\"\n        }\n      },\n      id: \"socket.leaveRoom\",\n      chatbotDescription: \"socket.joinRoom(roomId)는 소켓 서버의 특정한 룸에서 퇴장하는 API야. roomId에 퇴장을 원하는 룸의 ID를 입력해봐!\"\n    }, {\n      name: \"socket.emitRoom(roomId,data)\",\n      snippet: \"socket.emitRoom(roomId,data)\",\n      tip: {\n        description: {\n          ko: \"소켓 서버의 룸에 메세지를 전송한다.\"\n        }\n      },\n      id: \"socket.emitRoom\",\n      chatbotDescription: \"socket.emitRoom(roomId, data)는 소켓 서버의 룸에 메시지를 전송하는 API야. roomId에 전송을 원하는 룸의 ID를 입력하고, data에 전송을 원하는 데이터를 입력해봐!\"\n    }, {\n      name: \"translate(text,lang,fn)\",\n      snippet: \"translate(\\\"안녕하세요!\\\",\\\"en\\\",function(text){})\",\n      selection: \"안녕하세요!\",\n      newLine: \"translate(\\\"안녕하세요!\\\",\\\"en\\\",function(text){\",\n      tip: {\n        description: {\n          ko: \"입력된 텍스트를 특정 언어로 번역한다.\"\n        },\n        \"params\": [{\n          name: \"text\",\n          description: {\n            ko: \"번역할 텍스트\"\n          }\n        }, {\n          name: \"lang\",\n          description: {\n            ko: \"번역할 언어\"\n          }\n        }, {\n          name: \"fn\",\n          description: {\n            ko: \"번역이 완료된 후 실행되는 함수\"\n          }\n        }]\n      },\n      id: \"translate\",\n      chatbotDescription: \"translate(text, lang, fn)는 입력된 텍스트를 특정 언어로 번역하는 API야. text에 번역할 텍스트를 입력하고, lang에 번역하고 싶은 언어를, fn에 번역이 완료되면 실행할 함수를 입력해봐!\"\n    }, {\n      name: \"getName()\",\n      snippet: \"getName()\",\n      tip: {\n        description: {\n          ko: \"스프라이트의 이름 가져오기\"\n        }\n      },\n      id: \"getName\",\n      chatbotDescription: \"getName()은 스프라이트의 이름을 반환하는 API야.\"\n    }, {\n      name: \"getSprite(name)\",\n      snippet: \"getSprite(\\\"name\\\")\",\n      selection: \"name\",\n      \"selectionType\": \"sprite\",\n      tip: {\n        description: {\n          ko: \"스프라이트 가져오기\"\n        },\n        \"params\": [{\n          name: \"name\",\n          description: {\n            ko: \"가져올 스프라이트의 이름 문자열\"\n          }\n        }],\n        \"description2\": {\n          ko: \"name이 이름인 스프라이트를 반환한다\"\n        }\n      },\n      id: \"getSprite\",\n      chatbotDescription: \"getSprite(name)은 특정 스프라이트를 가져오는 함수야. name에 원하는 스프라이트의 이름을 적어봐.\"\n    }, {\n      name: \"getX()\",\n      snippet: \"getX()\",\n      tip: {\n        description: {\n          ko: \"x좌표\"\n        },\n        \"description2\": {\n          ko: \"스프라이트의 x좌표 값을 반환한다\"\n        }\n      },\n      id: \"getX\",\n      chatbotDescription: \"getX()는 스프라이트의 X좌표 값을 반환하는 API야. X좌표는 왼쪽에서 시작해서 오른쪽으로 갈수록 숫자가 커져!\"\n    }, {\n      name: \"getY()\",\n      snippet: \"getY()\",\n      tip: {\n        description: {\n          ko: \"y좌표\"\n        },\n        \"description2\": {\n          ko: \"스프라이트의 y좌표 값을 반환한다\"\n        }\n      },\n      id: \"getY\",\n      chatbotDescription: \"getY()는 스프라이트의 Y좌표 값을 반환하는 API야. Y좌표는 위에서 시작해서 아래로 갈수록 숫자가 커져!\"\n    }, {\n      name: \"getDegree()\",\n      snippet: \"getDegree()\",\n      tip: {\n        description: {\n          ko: \"각도값\"\n        },\n        \"description2\": {\n          ko: \"스프라이트의 각도값을 숫자로 반환한다\"\n        }\n      },\n      id: \"getDegree\",\n      chatbotDescription: \"getDegree()는 스프라이트의 각도를 반환하는 API야.\"\n    }, {\n      name: \"getSize()\",\n      snippet: \"getSize()\",\n      tip: {\n        description: {\n          ko: \"크기값\"\n        },\n        \"description2\": {\n          ko: \"스프라이트의 크기를 반환한다\"\n        }\n      },\n      id: \"getSize\",\n      chatbotDescription: \"getSize()는 스프라이트의 크기를 비율로 반환하는 API야. 스프라이트의 크기를 변경하지 않았다면 100%니깐 100이 반환되지.\"\n    }, {\n      name: \"getWidth()\",\n      snippet: \"getWidth()\",\n      tip: {\n        description: {\n          ko: \"너비값\"\n        },\n        \"description2\": {\n          ko: \"스프라이트의 너비값을 반환한다\"\n        }\n      },\n      id: \"getWidth\",\n      chatbotDescription: \"getWidth()는 스프라이트의 너비를 반환하는 API야.\"\n    }, {\n      name: \"getHeight()\",\n      snippet: \"getHeight()\",\n      tip: {\n        description: {\n          ko: \"높이값\"\n        },\n        \"description2\": {\n          ko: \"스프라이트의 높이값을 반환한다\"\n        }\n      },\n      id: \"getHeight\",\n      chatbotDescription: \"getHeight()는 스프라이트의 높이를 반환하는 API야.\"\n    }, {\n      name: \"getWorldWidth()\",\n      snippet: \"getWorldWidth()\",\n      tip: {\n        description: {\n          ko: \"배경의 너비값\"\n        },\n        \"description2\": {\n          ko: \"scene의 너비값을 반환한다\"\n        }\n      },\n      id: \"getWorldWidth\",\n      chatbotDescription: \"getWorldWidth()는 배경의 너비를 반환하는 API야. \"\n    }, {\n      name: \"getWorldHeight()\",\n      snippet: \"getWorldHeight()\",\n      tip: {\n        description: {\n          ko: \"배경의 높이값\"\n        },\n        \"description2\": {\n          ko: \"scene의 높이값을 반환한다\"\n        }\n      },\n      id: \"getWorldHeight\",\n      chatbotDescription: \"getWorldHeight()는 배경의 높이를 반환하는 API야. \"\n    }, {\n      name: \"getCurrentAnimation()\",\n      snippet: \"getCurrentAnimation()\",\n      tip: {\n        description: {\n          ko: \"현재 동작중인 애니메이션 이름 가져오기\"\n        },\n        \"description2\": {\n          ko: \"스프라이트에 동작중인 애니메이션이 있다면 그 이름을 가져온다\"\n        }\n      },\n      id: \"getCurrentAnimation\",\n      chatbotDescription: \"getCurrentAnimation()은 현재 재생되고 있는 애니메이션의 이름을 반환하는 API야.\"\n    }, {\n      name: \"getMousePointerX()\",\n      snippet: \"getMousePointerX()\",\n      tip: {\n        description: {\n          ko: \"마우스 x좌표\"\n        },\n        \"description2\": {\n          ko: \"마우스 포인터의 x좌표 값을 반환한다\"\n        }\n      },\n      id: \"getMousePointerX\",\n      chatbotDescription: \"getMousePointerX()는 마우스의 x값을 반환하는 API야.\"\n    }, {\n      name: \"getMousePointerY()\",\n      snippet: \"getMousePointerY()\",\n      tip: {\n        description: {\n          ko: \"마우스 y좌표\"\n        },\n        \"description2\": {\n          ko: \"마우스 포인터의 y좌표 값을 반환한다\"\n        }\n      },\n      id: \"getMousePointerY\",\n      chatbotDescription: \"getMousePointerY()는 마우스의 y값을 반환하는 API야.\"\n    }, {\n      name: \"getText()\",\n      snippet: \"getText()\",\n      tip: {\n        description: {\n          ko: \"문구값\"\n        },\n        \"description2\": {\n          ko: \"텍스트상자 스프라이트의 메시지를 반환한다\"\n        }\n      },\n      id: \"getText\",\n      chatbotDescription: \"getText()는 텍스트 상자의 메시지를 반환하는 API야.\"\n    }, {\n      name: \"getTextColor()\",\n      snippet: \"getTextColor()\",\n      tip: {\n        description: {\n          ko: \"문구 색상 가져오기\"\n        },\n        \"description2\": {\n          ko: \"텍스트상자 스프라이트의 문구 색상값을 반환하다\"\n        }\n      },\n      id: \"getTextColor\",\n      chatbotDescription: \"getTextColor()는 텍스트 상자에 적은 메시지가 어떤 색인지 알려주는 API야.\"\n    }, {\n      name: \"getVelocityX()\",\n      snippet: \"getVelocityX()\",\n      tip: {\n        description: {\n          ko: \"x축 속도 가져오기\"\n        }\n      },\n      id: \"getVelocityX\",\n      chatbotDescription: \"getVelocityX()는 스프라이트의 X축 속도를 반환하는 API야. X축은 가로를 의미해! 오른쪽으로 가고 있다면 X축 속도는 0보다 큰 숫자가 되지.\"\n    }, {\n      name: \"getVelocityY()\",\n      snippet: \"getVelocityY()\",\n      tip: {\n        description: {\n          ko: \"y축 속도 가져오기\"\n        }\n      },\n      id: \"getVelocityY\",\n      chatbotDescription: \"getVelocityY()는 스프라이트의 Y축 속도를 반환하는 API야. Y축은 세로를 의미해! 아래로 가고 있다면 Y축 속도는 0보다 큰 숫자가 되지.\"\n    }, {\n      name: \"getSoundVolume()\",\n      snippet: \"getSoundVolume()\",\n      tip: {\n        description: {\n          ko: \"현재 앱의 음량 가져오기\"\n        }\n      },\n      id: \"getSoundVolume\",\n      chatbotDescription: \"getSoundVolume()은 앱의 음량을 반환하는 API야. 음량은 0~1사이니깐 참고해.\"\n    }, {\n      name: \"getTimer()\",\n      snippet: \"getTimer()\",\n      tip: {\n        description: {\n          ko: \"현재 타이머의 값 가져오기\"\n        }\n      },\n      id: \"getTimer\",\n      chatbotDescription: \"getTimer()는 현재 타이머의 값을 가져올 수 있는 API야. starTimer()와 함께 사용하면 시간을 잴 수 있어!\"\n    }, {\n      name: \"getYear()\",\n      snippet: \"getYear()\",\n      tip: {\n        description: {\n          ko: \"현재 연도를 가져오기\"\n        }\n      },\n      id: \"getYear\",\n      chatbotDescription: \"getDay()는 현재 년도를 반환하는 API야.\"\n    }, {\n      name: \"getMonth()\",\n      snippet: \"getMonth()\",\n      tip: {\n        description: {\n          ko: \"현재 월을 가져오기\"\n        }\n      },\n      id: \"getMonth\",\n      chatbotDescription: \"getMonth()는 현재 몇 월인지를 반환하는 API야.\"\n    }, {\n      name: \"getDay()\",\n      snippet: \"getDay()\",\n      tip: {\n        description: {\n          ko: \"현재 일을 가져오기\"\n        }\n      },\n      id: \"getDay\",\n      chatbotDescription: \"getDay()는 현재 며칠인지를 반환하는 API야.\"\n    }, {\n      name: \"getHour()\",\n      snippet: \"getHour()\",\n      tip: {\n        description: {\n          ko: \"현재 시간을 가져오기\"\n        }\n      },\n      id: \"getHour\",\n      chatbotDescription: \"getHour()는 현재 몇 시인지를 반환하는 API야.\"\n    }, {\n      name: \"getMin()\",\n      snippet: \"getMin()\",\n      tip: {\n        description: {\n          ko: \"현재 분을 가져오기\"\n        }\n      },\n      id: \"getMin\",\n      chatbotDescription: \"getMin()은 현재 몇 분인지를 반환하는 API야.\"\n    }, {\n      name: \"getSec()\",\n      snippet: \"getSec()\",\n      tip: {\n        description: {\n          ko: \"현재 초를 가져오기\"\n        }\n      },\n      id: \"getSec\",\n      chatbotDescription: \"getSec()는 현재 몇 초인지를 반환하는 API야.\"\n    }, {\n      name: \"getPenColor()\",\n      snippet: \"getPenColor()\",\n      tip: {\n        description: {\n          ko: \"사용중인 펜의 색깔 가져오기\"\n        }\n      },\n      id: \"getPenColor\",\n      chatbotDescription: \"getPenColor()는 스프라이트의 펜 색상을 반환하는 API야.\"\n    }, {\n      name: \"getPenSize()\",\n      snippet: \"getPenSize()\",\n      tip: {\n        description: {\n          ko: \"사용중인 펜의 두께 가져오기\"\n        }\n      },\n      id: \"getPenSize\",\n      chatbotDescription: \"getPenSize()는 스프라이트의 펜 두께를 반환하는 API야.\"\n    }]\n  }]\n  //for auto completer\n  getAllFunctions(editorMode) {\n    let functions = [];\n\n    switch (editorMode) {\n      case EDITORMODE.PYTHON:\n        // this.pythonApiList.forEach(category => {\n        //   const categoryName = category.name;\n        //   category.api.forEach(api => {\n        //     if (api.snippet) {\n        //       if (api.name === \"if / else / else if\") {\n        //         return;\n        //       }\n        //       const meta = categoryName;\n        //       const caption = api.name;\n        //       const value = api.snippet;\n        //       const newLine = api.newLine;\n        //       const selection = api.selection;\n        //       const selectionType = api.selectionType;\n        //       const requiredParamCount = api.requiredParamCount;\n        //       const tip = api.tip;\n        //       const funcRegex = /([a-zA-Z_{1}][a-zA-Z0-9_]+)(?=\\()/gim;\n        //       const funcMatch = funcRegex.exec(api.name);\n        //       let name;\n        //       if (funcMatch) name = funcMatch[0];\n        //       functions.push({\n        //         name,\n        //         tip,\n        //         caption,\n        //         value,\n        //         meta,\n        //         newLine,\n        //         selection,\n        //         selectionType,\n        //         requiredParamCount\n        //       });\n        //     }\n        //   });\n        // });\n        break;\n      default:\n        this.apiList.forEach(category => {\n          const categoryName = category.name;\n          category.api.forEach(api => {\n            if (api.snippet) {\n              if (api.name === \"if / else / else if\") {\n                return;\n              }\n              const meta = categoryName;\n              const caption = api.name;\n              const value = api.snippet;\n              const newLine = api.newLine;\n              const selection = api.selection;\n              const selectionType = api.selectionType;\n              const requiredParamCount = api.requiredParamCount;\n              const tip = api.tip;\n              const funcRegex = /([a-zA-Z_{1}][a-zA-Z0-9_]+)(?=\\()/gim;\n              const funcMatch = funcRegex.exec(api.name);\n              let name;\n              if (funcMatch) name = funcMatch[0];\n              functions.push({\n                name,\n                tip,\n                caption,\n                value,\n                meta,\n                newLine,\n                selection,\n                selectionType,\n                requiredParamCount\n              });\n            }\n          });\n        });\n        break;\n    }\n\n    functions.push({\n      caption: \"if\",\n      value: `if(true){}`,\n      meta: \"meta\",\n      newLine: `if(true){`,\n      selection: \"true\"\n    });\n    functions.push({\n      caption: \"else if\",\n      value: `else if(true){}`,\n      meta: \"meta\",\n      newLine: `else if(true){`,\n      selection: \"true\"\n    });\n    functions.push({\n      caption: \"else\",\n      value: `else{}`,\n      meta: \"meta\",\n      newLine: `else{`\n    });\n    functions.push({\n      caption: \"true\",\n      value: `true`,\n      meta: \"boolean\"\n    });\n    functions.push({\n      caption: \"false\",\n      value: `false`,\n      meta: \"boolean\"\n    });\n    functions.push({\n      name: \"setCollideWorldBounds\",\n      equal: \"setCollideScene\",\n      caption: \"setCollideWorldBounds(enabled)\",\n      value: \"setCollideWorldBounds(true)\",\n      meta: \"function\"\n    });\n    functions.push({\n      name: \"setCheckCollision\",\n      equal: \"setCollideSide\",\n      caption: \"setCheckCollision(direction, enabled)\",\n      value: `setCheckCollision(\"down\",false)`,\n      meta: \"function\"\n    });\n    functions.push({\n      name: \"setHorizontalFlip\",\n      equal: \"setFlipX\",\n      caption: \"setHorizontalFlip(isFlipped)\",\n      value: \"setHorizontalFlip(true)\",\n      meta: \"function\"\n    });\n    functions.push({\n      name: \"setVerticalFlip\",\n      equal: \"setFlipY\",\n      caption: \"setVerticalFlip(isFlipped)\",\n      value: \"setVerticalFlip(true)\",\n      meta: \"function\"\n    });\n    functions.push({\n      name: \"setImmovable\",\n      equal: \"setMovable\",\n      caption: \"setImmovable(enabled)\",\n      value: \"setImmovable(true)\",\n      meta: \"function\"\n    });\n\n    //insert at 0\n    // functions = [\n    //   {\n    //     caption: \"function\",\n    //     value: `function name(){}`,\n    //     meta: \"declaration\",\n    //     newLine: `function name(){`,\n    //     selection: \"name\"\n    //   }\n    // ].concat(functions);\n    // functions = [\n    //   {\n    //     caption: \"var\",\n    //     value: `var name`,\n    //     meta: \"declaration\",\n    //     selection: \"name\"\n    //   }\n    // ].concat(functions);\n    // functions = [\n    //   {\n    //     caption: \"let\",\n    //     value: `let name`,\n    //     meta: \"declaration\",\n    //     selection: \"name\"\n    //   }\n    // ].concat(functions);\n    // functions = [\n    //   {\n    //     caption: \"const\",\n    //     value: `const name`,\n    //     meta: \"declaration\",\n    //     selection: \"name\"\n    //   }\n    // ].concat(functions);\n\n    return functions;\n  }\n\n  getAPIbyId(_id) {\n    for (let i in this.apiList) {\n      for (let j in this.apiList[i].api) {\n        const id = this.apiList[i].api[j].id;\n        if (id.toLowerCase() === _id.toLowerCase()) {\n          return this.apiList[i].api[j];\n        }\n      }\n    }\n    return null;\n  }\n\n  getAPI(name, editorMode) {\n    switch (editorMode) {\n      // case EDITORMODE.PYTHON:\n      //   for (let i in this.pythonApiList) {\n      //     for (let j in this.pythonApiList[i].api) {\n      //       if (this.pythonApiList[i].api[j].name === name) {\n      //         return this.pythonApiList[i].api[j];\n      //       }\n      //     }\n      //   }\n      //   break;\n      default:\n        for (let i in this.apiList) {\n          for (let j in this.apiList[i].api) {\n            if (this.apiList[i].api[j].name === name) {\n              return this.apiList[i].api[j];\n            }\n          }\n        }\n        break;\n    }\n  }\n\n  // programmingDict = {\n  //   \"변수\":\"\",\n  //   \"함수\":\"\",\n  //   \"반복문\":\"\",\n  //   \"조건문\":\"\",\n  //   \"제어문\":\"\",\n  //   \"파라미터\":\"\",\n  //   \"재귀\":\"\",\n  //   \"무한루프\":\"\",\n  //   \"상수\":\"\",\n  //   \"알고리즘\":\"\",\n  //   \"자료구조\":\"\",\n  //   \"버그\":\"\",\n  //   \"리스트\":\"\",\n  //   \"오브젝트\":\"\",\n  //   \"소켓\":\"\"\n  // }\n}\n\nexport default new ApiLibrary();\n"]},"metadata":{},"sourceType":"module"}