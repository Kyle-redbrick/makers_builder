{"ast":null,"code":"import _objectSpread from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport moment from \"moment\";\nimport * as request from \"./HTTPRequest\";\nexport var addOcpUser =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(email, grade, type) {\n    var guest, params, res, json, token;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // (빌더에서, 1 단계 일때만 실행 ,없으면 발급 , 이메일/게스트 아이디 없으면 user table에 추가 , myocp 테이블에 해당 grade 컬럼 생성  )\n            guest = localStorage.getItem(\"ocpId\") && JSON.parse(localStorage.getItem(\"ocpId\"));\n            params = {};\n            if (email) params.email = email;\n            if (guest) params.guestId = guest.id;\n            _context.next = 6;\n            return request.addOcpUser2(params);\n\n          case 6:\n            res = _context.sent;\n            _context.next = 9;\n            return res.json();\n\n          case 9:\n            json = _context.sent;\n\n            if (json && json.guestId) {\n              token = {\n                id: json.guestId,\n                expire: moment().local().add(3, \"hours\").format()\n              };\n              localStorage.setItem(\"ocpId\", JSON.stringify(token));\n            }\n\n            _context.next = 13;\n            return request.addMyOcp2(email ? {\n              email: email,\n              grade: grade,\n              type: type\n            } : {\n              guestId: json.guestId,\n              grade: grade,\n              type: type\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function addOcpUser(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var updateOcpToken = function updateOcpToken() {\n  var guest = localStorage.getItem(\"ocpId\") && JSON.parse(localStorage.getItem(\"ocpId\"));\n\n  if (guest) {\n    if (moment().local() > moment(guest.expire)) {\n      localStorage.removeItem(\"ocpId\");\n    } else {\n      localStorage.setItem(\"ocpId\", JSON.stringify(_objectSpread({}, guest, {\n        expire: moment().local().add(3, \"hours\").format()\n      })));\n    }\n  }\n};\nexport var updateOcpTokenToEmail =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(email) {\n    var guest;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            guest = localStorage.getItem(\"ocpId\") && JSON.parse(localStorage.getItem(\"ocpId\"));\n\n            if (!(email && guest)) {\n              _context2.next = 5;\n              break;\n            }\n\n            _context2.next = 4;\n            return request.updateMyOcpSync2({\n              email: email,\n              guestId: guest.id\n            });\n\n          case 4:\n            localStorage.removeItem(\"ocpId\");\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function updateOcpTokenToEmail(_x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var resetOcpToken = function resetOcpToken() {\n  localStorage.removeItem(\"ocpId\");\n};","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Common/Util/OcpToken.js"],"names":["moment","request","addOcpUser","email","grade","type","guest","localStorage","getItem","JSON","parse","params","guestId","id","addOcpUser2","res","json","token","expire","local","add","format","setItem","stringify","addMyOcp2","updateOcpToken","removeItem","updateOcpTokenToEmail","updateMyOcpSync2","resetOcpToken"],"mappings":"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","sourcesContent":["import moment from \"moment\";\nimport * as request from \"./HTTPRequest\";\n\nexport const addOcpUser = async (email, grade, type) => {\n  // (빌더에서, 1 단계 일때만 실행 ,없으면 발급 , 이메일/게스트 아이디 없으면 user table에 추가 , myocp 테이블에 해당 grade 컬럼 생성  )\n  let guest =\n    localStorage.getItem(\"ocpId\") && JSON.parse(localStorage.getItem(\"ocpId\"));\n  let params = {};\n\n  if (email) params.email = email;\n  if (guest) params.guestId = guest.id;\n\n  let res = await request.addOcpUser2(params);\n  let json = await res.json();\n  if (json && json.guestId) {\n    let token = {\n      id: json.guestId,\n      expire: moment()\n        .local()\n        .add(3, \"hours\")\n        .format()\n    };\n    localStorage.setItem(\"ocpId\", JSON.stringify(token));\n  }\n  await request.addMyOcp2(\n    email ? { email, grade, type } : { guestId: json.guestId, grade, type }\n  );\n};\n\nexport const updateOcpToken = () => {\n  let guest =\n    localStorage.getItem(\"ocpId\") && JSON.parse(localStorage.getItem(\"ocpId\"));\n\n  if (guest) {\n    if (moment().local() > moment(guest.expire)) {\n      localStorage.removeItem(\"ocpId\");\n    } else {\n      localStorage.setItem(\n        \"ocpId\",\n        JSON.stringify({\n          ...guest,\n          expire: moment()\n            .local()\n            .add(3, \"hours\")\n            .format()\n        })\n      );\n    }\n  }\n};\n\nexport const updateOcpTokenToEmail = async email => {\n  let guest =\n    localStorage.getItem(\"ocpId\") && JSON.parse(localStorage.getItem(\"ocpId\"));\n  if (email && guest) {\n    await request.updateMyOcpSync2({\n      email: email,\n      guestId: guest.id\n    });\n    localStorage.removeItem(\"ocpId\");\n  }\n};\n\nexport const resetOcpToken = () => {\n  localStorage.removeItem(\"ocpId\");\n};\n"]},"metadata":{},"sourceType":"module"}