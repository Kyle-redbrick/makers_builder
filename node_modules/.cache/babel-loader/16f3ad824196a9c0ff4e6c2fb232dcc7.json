{"ast":null,"code":"var _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/QnA/Component/QuestionList/index.js\";\nimport React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport moment from \"moment\";\nimport \"./index.scss\";\nexport default function (props) {\n  var qnaItems = props.qnaItems,\n      offset = props.offset,\n      onClickPrev = props.onClickPrev,\n      onClickNext = props.onClickNext,\n      onClickItem = props.onClickItem,\n      onClickToggleViewMode = props.onClickToggleViewMode,\n      onClickWriteQuestion = props.onClickWriteQuestion,\n      onClickRefresh = props.onClickRefresh,\n      listViewMode = props.listViewMode,\n      isLastPage = props.isLastPage;\n  return React.createElement(\"div\", {\n    className: \"QuestionList\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"QuestionTools\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"QuestionTool\",\n    onClick: onClickRefresh,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"ID_QNA_REFRESH\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"QuestionTool\",\n    onClick: onClickToggleViewMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, listViewMode === \"ALL\" ? React.createElement(FormattedMessage, {\n    id: \"ID_QNA_MODE_MY\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }) : React.createElement(FormattedMessage, {\n    id: \"ID_QNA_MODE_ALL\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"QuestionTool\",\n    onClick: onClickWriteQuestion,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"ID_QNA_MODE_NEW_QUESTION\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"QuestionItems\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, qnaItems.map(function (item, i) {\n    return React.createElement(QuestionItem, {\n      item: item,\n      onClickItem: onClickItem,\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    });\n  })), React.createElement(\"div\", {\n    className: \"QuestionNavi\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"QuestionNaviItem QuestionNaviPrev \".concat(offset <= 0 && \"QuestionNaviItemDisabled\"),\n    onClick: onClickPrev,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"ID_QNA_MODE_PREV\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"QuestionNaviItem QuestionNaviNext \".concat(isLastPage && \"QuestionNaviItemDisabled\"),\n    onClick: onClickNext,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"ID_QNA_MODE_NEXT\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }))));\n}\n\nvar QuestionItem = function QuestionItem(props) {\n  var item = props.item,\n      onClickItem = props.onClickItem;\n  return React.createElement(\"div\", {\n    className: \"QuestionItem\",\n    onClick: function onClick() {\n      return onClickItem(item.id);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"QuestionItemId\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, item.id), React.createElement(\"div\", {\n    className: \"QuestionItemTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"QuestionItemTitleText\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, item.title), item.answerCount > 0 && React.createElement(\"div\", {\n    className: \"QuestionItemTitleCount\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"ID_QNA_ANSWERS_COUNT\",\n    values: {\n      count: item.answerCount\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }))), React.createElement(\"img\", {\n    className: \"QuestionItemIcon\",\n    src: item.user.icon,\n    alt: \"user icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"QuestionItemName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, item.user.name), React.createElement(\"div\", {\n    className: \"QuestionItemDate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, moment(item.createdAt).format(\"MM-DD HH:mm\")));\n};","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/QnA/Component/QuestionList/index.js"],"names":["React","FormattedMessage","moment","props","qnaItems","offset","onClickPrev","onClickNext","onClickItem","onClickToggleViewMode","onClickWriteQuestion","onClickRefresh","listViewMode","isLastPage","map","item","i","QuestionItem","id","title","answerCount","count","user","icon","name","createdAt","format"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport moment from \"moment\";\nimport \"./index.scss\";\n\nexport default function(props) {\n  const {\n    qnaItems,\n    offset,\n    onClickPrev,\n    onClickNext,\n    onClickItem,\n    onClickToggleViewMode,\n    onClickWriteQuestion,\n    onClickRefresh,\n    listViewMode,\n    isLastPage\n  } = props;\n  return (\n    <div className=\"QuestionList\">\n      <div className=\"QuestionTools\">\n        <div className=\"QuestionTool\" onClick={onClickRefresh}>\n          <FormattedMessage id=\"ID_QNA_REFRESH\" />\n        </div>\n        <div className=\"QuestionTool\" onClick={onClickToggleViewMode}>\n          {listViewMode === \"ALL\" ? (\n            <FormattedMessage id=\"ID_QNA_MODE_MY\" />\n          ) : (\n            <FormattedMessage id=\"ID_QNA_MODE_ALL\" />\n          )}\n        </div>\n        <div className=\"QuestionTool\" onClick={onClickWriteQuestion}>\n          <FormattedMessage id=\"ID_QNA_MODE_NEW_QUESTION\" />\n        </div>\n      </div>\n      <div className=\"QuestionItems\">\n        {qnaItems.map((item, i) => {\n          return <QuestionItem item={item} onClickItem={onClickItem} key={i} />;\n        })}\n      </div>\n      <div className=\"QuestionNavi\">\n        <div\n          className={`QuestionNaviItem QuestionNaviPrev ${offset <= 0 &&\n            \"QuestionNaviItemDisabled\"}`}\n          onClick={onClickPrev}\n        >\n          <FormattedMessage id=\"ID_QNA_MODE_PREV\" />\n        </div>\n        <div\n          className={`QuestionNaviItem QuestionNaviNext ${isLastPage &&\n            \"QuestionNaviItemDisabled\"}`}\n          onClick={onClickNext}\n        >\n          <FormattedMessage id=\"ID_QNA_MODE_NEXT\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst QuestionItem = props => {\n  const { item, onClickItem } = props;\n  return (\n    <div className=\"QuestionItem\" onClick={() => onClickItem(item.id)}>\n      <div className=\"QuestionItemId\">{item.id}</div>\n      <div className=\"QuestionItemTitle\">\n        <div className=\"QuestionItemTitleText\">{item.title}</div>\n        {item.answerCount > 0 && (\n          <div className=\"QuestionItemTitleCount\">\n            <FormattedMessage\n              id=\"ID_QNA_ANSWERS_COUNT\"\n              values={{ count: item.answerCount }}\n            />\n          </div>\n        )}\n      </div>\n      <img className=\"QuestionItemIcon\" src={item.user.icon} alt=\"user icon\" />\n      <div className=\"QuestionItemName\">{item.user.name}</div>\n      <div className=\"QuestionItemDate\">\n        {moment(item.createdAt).format(\"MM-DD HH:mm\")}\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}