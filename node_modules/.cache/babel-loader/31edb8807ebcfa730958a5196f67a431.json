{"ast":null,"code":"import stringify from \"json-stringify-safe\";\nexport var checkConditions = function checkConditions(videoclass, state, successHandler, failureHandler) {\n  // console.log(\"condition checker: checkConditions\", videoclass, state);\n  // 현재 스테이지의 모든 조건 검사\n  var stage = videoclass.stages[videoclass.currentStageNum];\n  var conditions = stage.conditions;\n\n  if (conditions) {\n    for (var i = 0; i < conditions.length; i++) {\n      if (checkCondition(conditions[i], state, stage)) {\n        continue;\n      } else {\n        failureHandler(conditions[i]);\n        return;\n      }\n    }\n  } else {\n    successHandler();\n    return;\n  } // 이전 스테이지들의 영구 조건 검사\n\n\n  for (var _i = 0; _i < videoclass.currentStageNum; _i++) {\n    var _conditions = videoclass.stages[_i].conditions;\n\n    if (_conditions) {\n      for (var j = 0; j < _conditions.length; j++) {\n        if (!_conditions[j].permanent || checkCondition(_conditions[j], state)) {\n          continue;\n        } else {\n          failureHandler(_conditions[j]);\n          return;\n        }\n      }\n    }\n  }\n\n  successHandler();\n};\n\nfunction checkCondition(condition, state, stage) {\n  // console.log(\"condition checker: checkCondition\", condition);\n  switch (condition.type) {\n    case \"SPRITE_EXIST\":\n      return spriteExist(condition, state);\n\n    case \"CODE_EXIST\":\n      return codeExist(condition, state);\n\n    case \"SCENE_FIRST\":\n      return sceneFirst(condition, state);\n\n    case \"SCENE_SELECTED\":\n      return sceneSelected(condition, state);\n\n    case \"PLAY_ONCE\":\n      return playOnce(condition, stage);\n\n    case \"PUBLISH_PROJECT\":\n      return publishProject(condition, stage);\n\n    case \"SPRITE_SELECTED\":\n      return spriteSelected(condition, state);\n\n    default:\n      // console.log(\"condition checker: unknown type\", condition.type);\n      return false;\n  }\n}\n\nfunction spriteExist(condition, state) {\n  // console.log(\n  //   \"condition checker: spriteExist\",\n  //   condition.sceneId,\n  //   condition.spriteId\n  // );\n  var _scene = state.scene.scenes[condition.sceneId];\n  return _scene.spriteIds.indexOf(condition.spriteId) > -1;\n}\n\nfunction codeExist(condition, state) {\n  var result = checkCodeAdded(state.scene, condition);\n  return result.isValid; // console.log(\n  //   \"condition checker: codeExist\",\n  //   condition.sceneId,\n  //   condition.spriteId,\n  //   condition.code\n  // );\n  // const _scene = state.scene.scenes[condition.sceneId];\n  // const _sprite = _scene.sprites[condition.spriteId];\n  // const _code = _sprite.code;\n  // // make ast of each condition code and sprite code\n  // let ast, _ast;\n  // try {\n  //   let options = { ecmaVersion: 8 };\n  //   ast = acorn.parse(condition.code, options);\n  //   _ast = acorn.parse(_code, options);\n  // } catch (e) {\n  //   console.log(\"condition checker: acore parse error\", e);\n  // }\n  // // make node range to zero to compare\n  // traverse(ast, {\n  //   pre: node => {\n  //     node.start = 0;\n  //     node.end = 0;\n  //   }\n  // });\n  // traverse(_ast, {\n  //   pre: node => {\n  //     node.start = 0;\n  //     node.end = 0;\n  //   }\n  // });\n  // // To log reason why comparing failed\n  // // console.log(compare(_ast.body, ast.body, { verboseWhenMismatches: true }));\n  // return compare(_ast.body, ast.body);\n}\n\nfunction sceneFirst(condition, state) {\n  // console.log(\"condition checker: sceneFirst\", condition.sceneId);\n  return state.scene.sceneIds[0] === condition.sceneId;\n}\n\nfunction sceneSelected(condition, state) {\n  // console.log(\"condition checker: sceneSelected\", condition.sceneId);\n  return state.interaction.selected.scene === condition.sceneId;\n}\n\nfunction spriteSelected(condition, state) {\n  // console.log(\"condition checker: spriteSelected\", condition.spriteId);\n  var sceneId = state.interaction.selected.scene;\n  return state.interaction.selected.objects[sceneId].name === condition.spriteId;\n}\n\nfunction playOnce(condition, stage) {\n  // console.log(\"condition checker: playOnce\");\n  return stage.didPlay;\n}\n\nfunction publishProject(condition, stage) {\n  // console.log(\"condition checker: publishProject\");\n  return stage.didPublish;\n}\n\nvar checkCodeAdded = function checkCodeAdded(state, data) {\n  var spriteId;\n\n  for (var i = 0; i < state.sceneIds.length; i++) {\n    var sceneId = state.sceneIds[i];\n    var scene = state.scenes[sceneId];\n    var spriteIds = scene.spriteIds;\n    var sprites = scene.sprites;\n\n    for (var j = 0; j < spriteIds.length; j++) {\n      spriteId = spriteIds[j];\n      var sprite = sprites[spriteId];\n      var code = sprite.code;\n\n      if (data.spriteId === spriteId) {\n        return checkCode(data.code, code);\n      }\n    }\n  }\n\n  function checkCode(_code, userCode) {\n    var code = JSON.parse(stringify(_code));\n    var originalCode = JSON.parse(stringify(code));\n\n    var acorn = require(\"acorn\");\n\n    var tokens = [];\n    var ast;\n\n    try {\n      ast = acorn.parse(userCode, {\n        onToken: tokens,\n        ecmaVersion: 8\n      });\n    } catch (e) {\n      return {\n        isValid: false,\n        result: {\n          code: [],\n          spriteName: spriteId\n        }\n      };\n    }\n\n    var traverse = require(\"ast-traverse\");\n\n    var indent = 0;\n    var currentCode = undefined;\n    var currentIndent = 0;\n    traverse(ast, {\n      pre: function pre(node) {\n        indent++;\n\n        if (currentCode) {\n          for (var _i2 = currentCode.children.length - 1; _i2 >= 0; _i2--) {\n            var c = currentCode.children[_i2];\n\n            if (c.name === node.name) {\n              currentCode.children.splice(_i2, 1);\n            }\n          }\n        }\n\n        for (var _i3 = code.length - 1; _i3 >= 0; _i3--) {\n          var _c = code[_i3];\n\n          if (_c.name === node.name) {\n            if (_c.children.length === 0) {\n              code.splice(_i3, 1);\n            } else {\n              currentIndent = indent;\n              currentCode = _c;\n            }\n          }\n        }\n\n        if (indent < currentIndent) {\n          currentIndent = 0;\n          currentCode = undefined;\n        }\n      },\n      post: function post() {\n        indent--;\n      }\n    });\n\n    var _loop = function _loop(_i4) {\n      if (code[_i4].children.length === 0) {\n        var original = originalCode.filter(function (o) {\n          return o.name === code[_i4].name;\n        });\n\n        if (original[0]) {\n          if (original[0].children.length > 0) {\n            code.splice(_i4, 1);\n          }\n        }\n      }\n    };\n\n    for (var _i4 = code.length - 1; _i4 >= 0; _i4--) {\n      _loop(_i4);\n    }\n\n    return {\n      isValid: code.length === 0,\n      result: {\n        code: code,\n        spriteName: spriteId\n      }\n    };\n  }\n\n  return {\n    isValid: false,\n    result: {\n      code: [],\n      spriteName: spriteId\n    }\n  };\n};","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Tutorial/ConditionChecker.js"],"names":["stringify","checkConditions","videoclass","state","successHandler","failureHandler","stage","stages","currentStageNum","conditions","i","length","checkCondition","j","permanent","condition","type","spriteExist","codeExist","sceneFirst","sceneSelected","playOnce","publishProject","spriteSelected","_scene","scene","scenes","sceneId","spriteIds","indexOf","spriteId","result","checkCodeAdded","isValid","sceneIds","interaction","selected","objects","name","didPlay","didPublish","data","sprites","sprite","code","checkCode","_code","userCode","JSON","parse","originalCode","acorn","require","tokens","ast","onToken","ecmaVersion","e","spriteName","traverse","indent","currentCode","undefined","currentIndent","pre","node","children","c","splice","post","original","filter","o"],"mappings":"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","sourcesContent":["import stringify from \"json-stringify-safe\";\n\nexport const checkConditions = (\n  videoclass,\n  state,\n  successHandler,\n  failureHandler\n) => {\n  // console.log(\"condition checker: checkConditions\", videoclass, state);\n  // 현재 스테이지의 모든 조건 검사\n  const stage = videoclass.stages[videoclass.currentStageNum];\n  const conditions = stage.conditions;\n  if (conditions) {\n    for (let i = 0; i < conditions.length; i++) {\n      if (checkCondition(conditions[i], state, stage)) {\n        continue;\n      } else {\n        failureHandler(conditions[i]);\n        return;\n      }\n    }\n  } else {\n    successHandler();\n    return;\n  }\n  // 이전 스테이지들의 영구 조건 검사\n  for (let i = 0; i < videoclass.currentStageNum; i++) {\n    const conditions = videoclass.stages[i].conditions;\n    if (conditions) {\n      for (let j = 0; j < conditions.length; j++) {\n        if (!conditions[j].permanent || checkCondition(conditions[j], state)) {\n          continue;\n        } else {\n          failureHandler(conditions[j]);\n          return;\n        }\n      }\n    }\n  }\n  successHandler();\n};\n\nfunction checkCondition(condition, state, stage) {\n  // console.log(\"condition checker: checkCondition\", condition);\n  switch (condition.type) {\n    case \"SPRITE_EXIST\":\n      return spriteExist(condition, state);\n    case \"CODE_EXIST\":\n      return codeExist(condition, state);\n    case \"SCENE_FIRST\":\n      return sceneFirst(condition, state);\n    case \"SCENE_SELECTED\":\n      return sceneSelected(condition, state);\n    case \"PLAY_ONCE\":\n      return playOnce(condition, stage);\n    case \"PUBLISH_PROJECT\":\n      return publishProject(condition, stage);\n    case \"SPRITE_SELECTED\":\n      return spriteSelected(condition, state);\n    default:\n      // console.log(\"condition checker: unknown type\", condition.type);\n      return false;\n  }\n}\n\nfunction spriteExist(condition, state) {\n  // console.log(\n  //   \"condition checker: spriteExist\",\n  //   condition.sceneId,\n  //   condition.spriteId\n  // );\n  const _scene = state.scene.scenes[condition.sceneId];\n  return _scene.spriteIds.indexOf(condition.spriteId) > -1;\n}\n\nfunction codeExist(condition, state) {\n  const result = checkCodeAdded(state.scene, condition);\n  return result.isValid;\n  // console.log(\n  //   \"condition checker: codeExist\",\n  //   condition.sceneId,\n  //   condition.spriteId,\n  //   condition.code\n  // );\n  // const _scene = state.scene.scenes[condition.sceneId];\n  // const _sprite = _scene.sprites[condition.spriteId];\n  // const _code = _sprite.code;\n  // // make ast of each condition code and sprite code\n  // let ast, _ast;\n  // try {\n  //   let options = { ecmaVersion: 8 };\n  //   ast = acorn.parse(condition.code, options);\n  //   _ast = acorn.parse(_code, options);\n  // } catch (e) {\n  //   console.log(\"condition checker: acore parse error\", e);\n  // }\n  // // make node range to zero to compare\n  // traverse(ast, {\n  //   pre: node => {\n  //     node.start = 0;\n  //     node.end = 0;\n  //   }\n  // });\n  // traverse(_ast, {\n  //   pre: node => {\n  //     node.start = 0;\n  //     node.end = 0;\n  //   }\n  // });\n  // // To log reason why comparing failed\n  // // console.log(compare(_ast.body, ast.body, { verboseWhenMismatches: true }));\n  // return compare(_ast.body, ast.body);\n}\n\nfunction sceneFirst(condition, state) {\n  // console.log(\"condition checker: sceneFirst\", condition.sceneId);\n  return state.scene.sceneIds[0] === condition.sceneId;\n}\n\nfunction sceneSelected(condition, state) {\n  // console.log(\"condition checker: sceneSelected\", condition.sceneId);\n  return state.interaction.selected.scene === condition.sceneId;\n}\n\nfunction spriteSelected(condition, state) {\n  // console.log(\"condition checker: spriteSelected\", condition.spriteId);\n  const sceneId = state.interaction.selected.scene;\n  return (\n    state.interaction.selected.objects[sceneId].name === condition.spriteId\n  );\n}\n\nfunction playOnce(condition, stage) {\n  // console.log(\"condition checker: playOnce\");\n  return stage.didPlay;\n}\n\nfunction publishProject(condition, stage) {\n  // console.log(\"condition checker: publishProject\");\n  return stage.didPublish;\n}\n\nconst checkCodeAdded = (state, data) => {\n  let spriteId;\n  for (let i = 0; i < state.sceneIds.length; i++) {\n    const sceneId = state.sceneIds[i];\n    const scene = state.scenes[sceneId];\n    const spriteIds = scene.spriteIds;\n    const sprites = scene.sprites;\n    for (let j = 0; j < spriteIds.length; j++) {\n      spriteId = spriteIds[j];\n      const sprite = sprites[spriteId];\n      const code = sprite.code;\n      if (data.spriteId === spriteId) {\n        return checkCode(data.code, code);\n      }\n    }\n  }\n\n  function checkCode(_code, userCode) {\n    let code = JSON.parse(stringify(_code));\n    const originalCode = JSON.parse(stringify(code));\n    const acorn = require(\"acorn\");\n    let tokens = [];\n    let ast;\n    try {\n      ast = acorn.parse(userCode, {\n        onToken: tokens,\n        ecmaVersion: 8\n      });\n    } catch (e) {\n      return {\n        isValid: false,\n        result: { code: [], spriteName: spriteId }\n      };\n    }\n    const traverse = require(\"ast-traverse\");\n    let indent = 0;\n    let currentCode = undefined;\n    let currentIndent = 0;\n    traverse(ast, {\n      pre: function(node) {\n        indent++;\n\n        if (currentCode) {\n          for (let i = currentCode.children.length - 1; i >= 0; i--) {\n            const c = currentCode.children[i];\n            if (c.name === node.name) {\n              currentCode.children.splice(i, 1);\n            }\n          }\n        }\n\n        for (let i = code.length - 1; i >= 0; i--) {\n          const c = code[i];\n          if (c.name === node.name) {\n            if (c.children.length === 0) {\n              code.splice(i, 1);\n            } else {\n              currentIndent = indent;\n              currentCode = c;\n            }\n          }\n        }\n        if (indent < currentIndent) {\n          currentIndent = 0;\n          currentCode = undefined;\n        }\n      },\n      post: function() {\n        indent--;\n      }\n    });\n    for (let i = code.length - 1; i >= 0; i--) {\n      if (code[i].children.length === 0) {\n        const original = originalCode.filter(o => o.name === code[i].name);\n        if (original[0]) {\n          if (original[0].children.length > 0) {\n            code.splice(i, 1);\n          }\n        }\n      }\n    }\n\n    return {\n      isValid: code.length === 0,\n      result: { code, spriteName: spriteId }\n    };\n  }\n\n  return {\n    isValid: false,\n    result: { code: [], spriteName: spriteId }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}