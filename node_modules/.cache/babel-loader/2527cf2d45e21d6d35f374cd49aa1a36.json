{"ast":null,"code":"import _objectSpread from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Chat/Component/ChatBot/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { injectIntl, FormattedMessage } from \"react-intl\";\nimport { ChatbotMsgType } from \"../../../../../../Common/Util/Constant\";\nimport * as projectActions from \"../../../../Store/Reducer/project\";\nimport * as chatbotActions from \"../../../../Store/Reducer/chatbot\";\nimport * as interactionActions from \"../../../../Store/Reducer/interaction\";\nimport \"./index.scss\";\nimport ChatbotMsgBot from \"./Component/ChatbotMsgBot\";\nimport ChatbotSelect from \"./Component/ChatbotSelect\";\nimport ChatbotConfirm from \"./Component/ChatbotConfirm\";\nimport ChatbotScript from \"./Component/ChatbotScript\";\nimport ChatbotMultiple from \"./Component/ChatbotMultiple\";\nimport ChatbotError from \"./Component/ChatbotError\";\nimport ChatbotButton from \"./Component/ChatbotButton\";\nimport ChatbotLecture from \"./Component/ChatbotLecture\";\nimport sendImg from \"../../../../../../Image/builder/arrow-up-2.svg\";\nimport * as ChatbotUtil from \"../../../../utils/ChatbotUtil\";\nimport { getGuestId } from \"../../../../../../Common/Util/GuestIdUtil\";\nvar BOT_SELECT = ChatbotMsgType.BOT_SELECT;\nvar BOT_CONFIRM = ChatbotMsgType.BOT_CONFIRM;\nvar BOT_API_SCRIPT = ChatbotMsgType.BOT_API_SCRIPT;\nvar GAME_PRINT = ChatbotMsgType.GAME_PRINT;\nvar REQUEST_SOLUTION = ChatbotMsgType.REQUEST_SOLUTION;\nvar BOT_ERROR = ChatbotMsgType.BOT_ERROR;\nvar BOT_BUTTON = ChatbotMsgType.BOT_BUTTON;\nvar BOT_CLASS = ChatbotMsgType.BOT_CLASS;\n\nvar Chatbot = /*#__PURE__*/function (_Component) {\n  _inherits(Chatbot, _Component);\n\n  var _super = _createSuper(Chatbot);\n\n  function Chatbot(props) {\n    var _this;\n\n    _classCallCheck(this, Chatbot);\n\n    _this = _super.call(this, props);\n\n    _this.gamePrintHandler = function (e) {\n      if (e.data.source) {\n        if (e.data.source === \"wizlab\") {\n          if (e.data.type === \"chatbot\") {\n            var msg = {\n              sender: \"GAME\",\n              type: GAME_PRINT,\n              text: e.data.message\n            };\n\n            _this.props.addNewMsg([msg]);\n          }\n        }\n      }\n    };\n\n    _this.handleOption = function (option) {\n      var newMsgs = [];\n\n      if (option.text) {\n        var userMsg = {\n          sender: _this.props.name,\n          text: option.text\n        };\n        newMsgs.push(userMsg);\n      }\n    };\n\n    _this.handleCancel = function (cancelText) {\n      var confirmUserMsg = {\n        sender: _this.props.name,\n        text: cancelText\n      };\n      var msg = {\n        sender: \"WIZBOT\",\n        text: React.createElement(FormattedMessage, {\n          id: \"ID_DRAWER_CHAT_WIZBOT_CANCEL\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        })\n      };\n\n      _this.props.addNewMsg([confirmUserMsg, msg]);\n    };\n\n    _this.socketOnChatbot = function (msg) {\n      var type = msg.type;\n\n      switch (type) {\n        case REQUEST_SOLUTION:\n          _this.handleOption(_objectSpread({}, msg, {\n            optionType: type\n          }));\n\n          break;\n\n        default:\n          _this.props.addNewMsg([msg]);\n\n          break;\n      }\n    };\n\n    _this.handleInputChange = function (e) {\n      var target = e.target;\n\n      _this.setState({\n        userInput: target.value\n      });\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n      var text = _this.state.userInput;\n      if (text.length < 1) return;\n      var sender = _this.props.name || null;\n      var email = _this.props.email || getGuestId();\n      var type = \"USER_QUESTION\";\n\n      _this.props.addNewMsg([{\n        text: text,\n        sender: sender,\n        email: email,\n        type: type\n      }]);\n\n      _this.setState({\n        userInput: \"\"\n      });\n\n      ChatbotUtil.sendMsg({\n        userId: email,\n        description: text\n      }, function (messages) {\n        //add messages\n        if (messages && messages.length > 0) {\n          _this.props.addNewMsg(messages);\n        }\n      }, function (error) {\n        console.error(error);\n      });\n    };\n\n    _this.listRef = null;\n\n    _this.setListRef = function (elem) {\n      _this.listRef = elem;\n    };\n\n    _this.submitRef = null;\n\n    _this.setSubmitRef = function (elem) {\n      _this.submitRef = elem;\n    };\n\n    _this.state = {\n      userInput: \"\",\n      // tutor\n      tutorScriptIndex: -1,\n      tutorScriptActions: []\n    };\n    return _this;\n  }\n\n  _createClass(Chatbot, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.submitRef.addEventListener(\"keyup\", function (e) {\n        if (e.keyCode === 13) {\n          _this2.handleSubmit(e);\n        }\n      }); //socket set\n      // const options = {}; //options reference : https://socket.io/docs/client-api/#new-Manager-url-options\n      // this.socket = io(URL.SOCKET_SERVER, options);\n      // this.socket.on(\"connection\");\n      // this.socket.on(\"chatbot\", this.socketOnChatbot);\n\n      window.addEventListener(\"message\", this.gamePrintHandler, false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // this.socket.off(\"chatbot\", this.socketOnChatbot);\n      // this.socket.disconnect();\n      window.removeEventListener(\"message\", this.gamePrintHandler);\n      clearTimeout(this.tutorTimer);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.messages.length !== prevProps.messages.length) {\n        this.listRef.scrollTop = this.listRef.scrollHeight;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var userInput = this.state.userInput;\n      var _this$props = this.props,\n          name = _this$props.name,\n          messages = _this$props.messages;\n      return React.createElement(\"div\", {\n        className: \"Chatbot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ChatContentMainMessages\",\n        ref: this.setListRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, messages.map(function (item, index) {\n        // TODO: set msgId\n        item = _objectSpread({}, item, {\n          msgId: index\n        });\n        var _item = item,\n            sender = _item.sender,\n            type = _item.type,\n            errors = _item.errors;\n\n        if (sender === name || !sender) {\n          if (type === BOT_BUTTON) {\n            return React.createElement(ChatbotButton, {\n              key: index,\n              keyword: item.keyword,\n              questionType: item.questionType,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 177\n              },\n              __self: this\n            });\n          } else {\n            return React.createElement(\"div\", {\n              className: \"ChatContentMainMessage\",\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 180\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"ChatContentMainMessageContentLine ChatContentMainMessageContentLineMy\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 181\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"ChatContentMainMessageContent\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 182\n              },\n              __self: this\n            }, item.text)));\n          }\n        } else if (sender === \"GAME\") {\n          if (type === GAME_PRINT) {\n            return React.createElement(\"div\", {\n              className: \"ChatContentMainMessage\",\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 192\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"ChatContentMainMessageContentLine ChatContentMainMessageContentLineMy\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 193\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"ChatContentMainMessageContent ChatContentMainMessageContentPrint\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 194\n              },\n              __self: this\n            }, item.text)));\n          } else {\n            return null;\n          }\n        } else if (sender === \"WIZBOT\") {\n          // if (!!item.component) {\n          //   return (\n          //     <React.Fragment key={index}>{item.component}</React.Fragment>\n          //   );\n          // }\n          if (type === BOT_ERROR) {\n            return React.createElement(ChatbotError, {\n              key: index,\n              errors: errors,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 210\n              },\n              __self: this\n            });\n          } else if (type === BOT_SELECT) {\n            return React.createElement(ChatbotMsgBot, {\n              key: index,\n              item: item,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 213\n              },\n              __self: this\n            }, React.createElement(ChatbotSelect, {\n              options: item.options,\n              handleOption: _this3.handleOption,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 214\n              },\n              __self: this\n            }));\n          } else if (type === BOT_CONFIRM) {\n            return React.createElement(ChatbotConfirm, {\n              key: index,\n              handleConfirm: item.handleConfirm,\n              handleCancel: item.handleCancel,\n              confirmText: item.confirmText,\n              cancelText: item.cancelText,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 222\n              },\n              __self: this\n            });\n          } else if (type === BOT_API_SCRIPT) {\n            return React.createElement(ChatbotMsgBot, {\n              key: index,\n              item: item,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 232\n              },\n              __self: this\n            }, React.createElement(ChatbotScript, {\n              msgId: item.msgId,\n              script: item.script,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 233\n              },\n              __self: this\n            }));\n          } else if (type === \"BOT_MULTIPLE\") {\n            return React.createElement(ChatbotMsgBot, {\n              key: index,\n              item: item,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 238\n              },\n              __self: this\n            }, React.createElement(ChatbotMultiple, {\n              item: item,\n              handleSelect: item.checkFunc,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 239\n              },\n              __self: this\n            }));\n          } else if (type === BOT_CLASS) {\n            return React.createElement(ChatbotLecture, {\n              key: index,\n              lectures: item.lectures,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 246\n              },\n              __self: this\n            });\n          } else {\n            return React.createElement(ChatbotMsgBot, {\n              key: index,\n              item: item,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 248\n              },\n              __self: this\n            });\n          }\n        } else {\n          return null;\n        }\n      })), React.createElement(\"div\", {\n        className: \"ChatContentMainInputWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        ref: this.setSubmitRef,\n        className: \"ChatContentMainInput\",\n        type: \"text\",\n        value: userInput,\n        onChange: this.handleInputChange,\n        placeholder: this.props.intl.formatMessage({\n          id: \"ID_DRAWER_CHAT_INPUT_PLACE_HOLDER\"\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"ChatContentMainInputBtn\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: sendImg,\n        alt: \"img\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Chatbot;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    name: state.userinfo.name,\n    email: state.userinfo.email,\n    project: state.project,\n    basicClass: state.project.basicClass,\n    tutorMode: state.project.tutorMode,\n    tutorScript: state.project.tutorScript,\n    chatbot: state.chatbot,\n    messages: state.chatbot.messages,\n    tutor: state.chatbot.tutor,\n    videoStatus: state.video.status,\n    // videoURL: state.video.videoURL,\n    isFullScreen: state.preview.isFullScreen,\n    isPlaying: state.preview.isPlaying,\n    errors: state.chatbot.errors,\n    scene: state.scene,\n    selectedSceneId: state.interaction.selected.scene,\n    selectedObject: state.interaction.selected.objects[state.interaction.selected.scene]\n  };\n}, {\n  setProject: projectActions.setProject,\n  // setVideoStatus: videoActions.setVideoStatus,\n  initChatbot: chatbotActions.initChatbot,\n  addNewMsg: chatbotActions.addNewMsg,\n  selectSprite: interactionActions.selectSprite // setVideoURL: videoActions.setVideoURL\n\n})(injectIntl(Chatbot));","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Chat/Component/ChatBot/index.js"],"names":["React","Component","connect","injectIntl","FormattedMessage","ChatbotMsgType","projectActions","chatbotActions","interactionActions","ChatbotMsgBot","ChatbotSelect","ChatbotConfirm","ChatbotScript","ChatbotMultiple","ChatbotError","ChatbotButton","ChatbotLecture","ChatbotUtil","getGuestId","BOT_SELECT","BOT_CONFIRM","BOT_API_SCRIPT","GAME_PRINT","REQUEST_SOLUTION","BOT_ERROR","BOT_BUTTON","BOT_CLASS","Chatbot","props","gamePrintHandler","e","data","source","type","msg","sender","text","message","addNewMsg","handleOption","option","newMsgs","userMsg","name","push","handleCancel","cancelText","confirmUserMsg","socketOnChatbot","optionType","handleInputChange","target","setState","userInput","value","handleSubmit","preventDefault","state","length","email","sendMsg","userId","description","messages","error","console","listRef","setListRef","elem","submitRef","setSubmitRef","tutorScriptIndex","tutorScriptActions","addEventListener","keyCode","window","removeEventListener","clearTimeout","tutorTimer","prevProps","prevState","scrollTop","scrollHeight","map","item","index","msgId","errors","keyword","questionType","options","handleConfirm","confirmText","script","checkFunc","lectures","intl","formatMessage","id","sendImg","userinfo","project","basicClass","tutorMode","tutorScript","chatbot","tutor","videoStatus","video","status","isFullScreen","preview","isPlaying","scene","selectedSceneId","interaction","selected","selectedObject","objects","setProject","initChatbot","selectSprite"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { injectIntl, FormattedMessage } from \"react-intl\";\nimport { ChatbotMsgType } from \"../../../../../../Common/Util/Constant\";\nimport * as projectActions from \"../../../../Store/Reducer/project\";\nimport * as chatbotActions from \"../../../../Store/Reducer/chatbot\";\nimport * as interactionActions from \"../../../../Store/Reducer/interaction\";\n\nimport \"./index.scss\";\nimport ChatbotMsgBot from \"./Component/ChatbotMsgBot\";\nimport ChatbotSelect from \"./Component/ChatbotSelect\";\nimport ChatbotConfirm from \"./Component/ChatbotConfirm\";\nimport ChatbotScript from \"./Component/ChatbotScript\";\nimport ChatbotMultiple from \"./Component/ChatbotMultiple\";\nimport ChatbotError from \"./Component/ChatbotError\";\nimport ChatbotButton from \"./Component/ChatbotButton\";\nimport ChatbotLecture from \"./Component/ChatbotLecture\";\nimport sendImg from \"../../../../../../Image/builder/arrow-up-2.svg\";\n\nimport * as ChatbotUtil from \"../../../../utils/ChatbotUtil\";\nimport { getGuestId } from \"../../../../../../Common/Util/GuestIdUtil\";\n\nconst BOT_SELECT = ChatbotMsgType.BOT_SELECT;\nconst BOT_CONFIRM = ChatbotMsgType.BOT_CONFIRM;\nconst BOT_API_SCRIPT = ChatbotMsgType.BOT_API_SCRIPT;\nconst GAME_PRINT = ChatbotMsgType.GAME_PRINT;\nconst REQUEST_SOLUTION = ChatbotMsgType.REQUEST_SOLUTION;\nconst BOT_ERROR = ChatbotMsgType.BOT_ERROR;\nconst BOT_BUTTON = ChatbotMsgType.BOT_BUTTON;\nconst BOT_CLASS = ChatbotMsgType.BOT_CLASS;\n\nclass Chatbot extends Component {\n  constructor(props) {\n    super(props);\n\n    this.listRef = null;\n    this.setListRef = elem => {\n      this.listRef = elem;\n    };\n    this.submitRef = null;\n    this.setSubmitRef = elem => {\n      this.submitRef = elem;\n    };\n\n    this.state = {\n      userInput: \"\",\n      // tutor\n      tutorScriptIndex: -1,\n      tutorScriptActions: []\n    };\n  }\n\n  componentDidMount() {\n    this.submitRef.addEventListener(\"keyup\", e => {\n      if (e.keyCode === 13) {\n        this.handleSubmit(e);\n      }\n    });\n\n    //socket set\n    // const options = {}; //options reference : https://socket.io/docs/client-api/#new-Manager-url-options\n    // this.socket = io(URL.SOCKET_SERVER, options);\n    // this.socket.on(\"connection\");\n    // this.socket.on(\"chatbot\", this.socketOnChatbot);\n    window.addEventListener(\"message\", this.gamePrintHandler, false);\n  }\n\n  componentWillUnmount() {\n    // this.socket.off(\"chatbot\", this.socketOnChatbot);\n    // this.socket.disconnect();\n    window.removeEventListener(\"message\", this.gamePrintHandler);\n    clearTimeout(this.tutorTimer);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.messages.length !== prevProps.messages.length) {\n      this.listRef.scrollTop = this.listRef.scrollHeight;\n    }\n  }\n\n  gamePrintHandler = e => {\n    if (e.data.source) {\n      if (e.data.source === \"wizlab\") {\n        if (e.data.type === \"chatbot\") {\n          let msg = {\n            sender: \"GAME\",\n            type: GAME_PRINT,\n            text: e.data.message\n          };\n          this.props.addNewMsg([msg]);\n        }\n      }\n    }\n  };\n\n  handleOption = option => {\n    const newMsgs = [];\n    if (option.text) {\n      let userMsg = {\n        sender: this.props.name,\n        text: option.text\n      };\n      newMsgs.push(userMsg);\n    }\n  };\n\n  handleCancel = cancelText => {\n    let confirmUserMsg = {\n      sender: this.props.name,\n      text: cancelText\n    };\n    let msg = {\n      sender: \"WIZBOT\",\n      text: <FormattedMessage id=\"ID_DRAWER_CHAT_WIZBOT_CANCEL\" />\n    };\n    this.props.addNewMsg([confirmUserMsg, msg]);\n  };\n\n  socketOnChatbot = msg => {\n    const type = msg.type;\n    switch (type) {\n      case REQUEST_SOLUTION:\n        this.handleOption({ ...msg, optionType: type });\n        break;\n      default:\n        this.props.addNewMsg([msg]);\n        break;\n    }\n  };\n\n  handleInputChange = e => {\n    const target = e.target;\n    this.setState({\n      userInput: target.value\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const text = this.state.userInput;\n    if (text.length < 1) return;\n    const sender = this.props.name || null;\n    const email = this.props.email || getGuestId();\n    let type = \"USER_QUESTION\";\n    this.props.addNewMsg([{text, sender, email, type}]);\n\n    this.setState({\n      userInput: \"\"\n    });\n    ChatbotUtil.sendMsg(\n      { userId: email, description: text },\n      messages => {\n        //add messages\n        if (messages && messages.length > 0) {\n           this.props.addNewMsg(messages);\n        }\n      },\n      error => {\n        console.error(error);\n      }\n    )\n  };\n\n  render() {\n    const { userInput } = this.state;\n    const { name, messages } = this.props;\n\n    return (\n      <div className=\"Chatbot\">\n        <div className=\"ChatContentMainMessages\" ref={this.setListRef}>\n          {messages.map((item, index) => {\n            // TODO: set msgId\n            item = { ...item, msgId: index };\n            const { sender, type, errors } = item;\n            if (sender === name || !sender) {\n              if (type === BOT_BUTTON) {\n                return <ChatbotButton key={index} keyword={item.keyword} questionType={item.questionType} />\n              } else {\n                return (\n                  <div className=\"ChatContentMainMessage\" key={index}>\n                    <div className=\"ChatContentMainMessageContentLine ChatContentMainMessageContentLineMy\">\n                      <div className=\"ChatContentMainMessageContent\">\n                        {item.text}\n                      </div>\n                    </div>\n                  </div>\n                );\n              }\n            } else if (sender === \"GAME\") {\n              if (type === GAME_PRINT) {\n                return (\n                  <div className=\"ChatContentMainMessage\" key={index}>\n                    <div className=\"ChatContentMainMessageContentLine ChatContentMainMessageContentLineMy\">\n                      <div className=\"ChatContentMainMessageContent ChatContentMainMessageContentPrint\">\n                        {item.text}\n                      </div>\n                    </div>\n                  </div>\n                );\n              } else {\n                return null;\n              }\n            } else if (sender === \"WIZBOT\") {\n              // if (!!item.component) {\n              //   return (\n              //     <React.Fragment key={index}>{item.component}</React.Fragment>\n              //   );\n              // }\n              if (type === BOT_ERROR) {\n                return <ChatbotError key={index} errors={errors} />;\n              } else if (type === BOT_SELECT) {\n                return (\n                  <ChatbotMsgBot key={index} item={item}>\n                    <ChatbotSelect\n                      options={item.options}\n                      handleOption={this.handleOption}\n                    />\n                  </ChatbotMsgBot>\n                );\n              } else if (type === BOT_CONFIRM) {\n                return (\n                  <ChatbotConfirm\n                    key={index}\n                    handleConfirm={item.handleConfirm}\n                    handleCancel={item.handleCancel}\n                    confirmText={item.confirmText}\n                    cancelText={item.cancelText}\n                  />\n                );\n              } else if (type === BOT_API_SCRIPT) {\n                return (\n                  <ChatbotMsgBot key={index} item={item}>\n                    <ChatbotScript msgId={item.msgId} script={item.script} />\n                  </ChatbotMsgBot>\n                );\n              } else if (type === \"BOT_MULTIPLE\") {\n                return (\n                  <ChatbotMsgBot key={index} item={item}>\n                    <ChatbotMultiple\n                      item={item}\n                      handleSelect={item.checkFunc}\n                    />\n                  </ChatbotMsgBot>\n                );\n              } else if (type === BOT_CLASS) {\n                return <ChatbotLecture key={index} lectures={item.lectures} />\n              } else {\n                return <ChatbotMsgBot key={index} item={item} />;\n              }\n            } else {\n              return null;\n            }\n          })}\n        </div>\n        <div className=\"ChatContentMainInputWrapper\">\n          <input\n            ref={this.setSubmitRef}\n            className=\"ChatContentMainInput\"\n            type=\"text\"\n            value={userInput}\n            onChange={this.handleInputChange}\n            placeholder={this.props.intl.formatMessage({\n              id: \"ID_DRAWER_CHAT_INPUT_PLACE_HOLDER\"\n            })}\n          />\n          <div className=\"ChatContentMainInputBtn\" onClick={this.handleSubmit}>\n            <img src={sendImg} alt=\"img\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    name: state.userinfo.name,\n    email: state.userinfo.email,\n    project: state.project,\n    basicClass: state.project.basicClass,\n    tutorMode: state.project.tutorMode,\n    tutorScript: state.project.tutorScript,\n    chatbot: state.chatbot,\n    messages: state.chatbot.messages,\n    tutor: state.chatbot.tutor,\n    videoStatus: state.video.status,\n    // videoURL: state.video.videoURL,\n    isFullScreen: state.preview.isFullScreen,\n    isPlaying: state.preview.isPlaying,\n    errors: state.chatbot.errors,\n    scene: state.scene,\n    selectedSceneId: state.interaction.selected.scene,\n    selectedObject:\n      state.interaction.selected.objects[state.interaction.selected.scene]\n  }),\n  {\n    setProject: projectActions.setProject,\n    // setVideoStatus: videoActions.setVideoStatus,\n    initChatbot: chatbotActions.initChatbot,\n    addNewMsg: chatbotActions.addNewMsg,\n    selectSprite: interactionActions.selectSprite\n    // setVideoURL: videoActions.setVideoURL\n  }\n)(injectIntl(Chatbot));\n"]},"metadata":{},"sourceType":"module"}