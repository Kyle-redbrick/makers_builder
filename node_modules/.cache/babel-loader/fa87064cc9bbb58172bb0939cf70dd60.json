{"ast":null,"code":"import _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Context from \"./context\";\nimport Block, { GameObject, Variable, FunctionBlock, Util, Callback } from \"./block\";\nimport { STATE } from \"./type\";\n\nvar Line =\n/*#__PURE__*/\nfunction () {\n  function Line() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Line);\n\n    this.id = props.id || Context.generateId();\n    this.parent = props.parent;\n    this.block = props.block || new Block({\n      parent: this,\n      state: STATE.INSTANCE\n    });\n    this.lineNum = props.lineNum || null;\n    this.folded = props.folded || false;\n    this.disabled = props.disabled || false;\n    this.comment = props.comment || null;\n  }\n\n  _createClass(Line, [{\n    key: \"clone\",\n    value: function clone(parent) {\n      var clone = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n      clone.id = Context.generateId();\n      clone.parent = parent;\n      clone.block = this.block.clone(clone);\n      return clone;\n    }\n  }, {\n    key: \"fold\",\n    value: function fold() {\n      this.folded = true;\n    }\n  }, {\n    key: \"unfold\",\n    value: function unfold() {\n      this.folded = false;\n    }\n  }, {\n    key: \"isFoldable\",\n    value: function isFoldable() {\n      var callbackBlock = this.getCallbackBlock();\n      return !!callbackBlock;\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      this.disabled = false;\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.disabled = true;\n    }\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled() {\n      if (this.disabled) {\n        return true;\n      } else {\n        var disabledParentLine = this.findParent({\n          type: \"Line\",\n          disabled: true\n        });\n        return !!disabledParentLine;\n      }\n    }\n  }, {\n    key: \"isLastSibling\",\n    value: function isLastSibling() {\n      var siblings = this.getSiblings();\n      var lastSibling = siblings[siblings.length - 1];\n      return this === lastSibling;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      if (this.block) {\n        return !this.block.data && !this.block.children;\n      } else {\n        return true;\n      }\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(line) {\n      if (!(line instanceof Line)) {\n        return false;\n      }\n\n      var blocks = this.getDisplayBlocks();\n      var targetBlocks = line.getDisplayBlocks();\n\n      if (blocks.length !== targetBlocks.length) {\n        return false;\n      }\n\n      for (var i = 0; i < blocks.length; i++) {\n        var block = blocks[i];\n        var targetBlock = targetBlocks[i];\n\n        if (!block.isEqual(targetBlock)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"moveBefore\",\n    value: function moveBefore(targetLine) {\n      var sourceParent = this.parent;\n      var targetParent = targetLine.parent;\n      var sourceSiblings = sourceParent.getLines();\n      var sourceIndex = sourceSiblings.indexOf(this);\n      sourceSiblings.splice(sourceIndex, 1);\n\n      if (sourceParent === targetParent) {\n        var targetIndex = sourceSiblings.indexOf(targetLine);\n        sourceSiblings.splice(targetIndex, 0, this);\n        return sourceIndex !== targetIndex;\n      } else {\n        var targetSiblings = targetParent.getLines();\n\n        var _targetIndex = targetSiblings.indexOf(targetLine);\n\n        targetSiblings.splice(_targetIndex, 0, this);\n        this.parent = targetParent;\n        return true;\n      }\n    }\n  }, {\n    key: \"moveAfter\",\n    value: function moveAfter(targetLine) {\n      var sourceParent = this.parent;\n      var targetParent = targetLine.parent;\n      var sourceSiblings = sourceParent.getLines();\n      var sourceIndex = sourceSiblings.indexOf(this);\n      sourceSiblings.splice(sourceIndex, 1);\n      var callbackBlock = targetLine.getCallbackBlock();\n\n      if (callbackBlock && !targetLine.folded) {\n        var targetSiblings = callbackBlock.getLines();\n        targetSiblings.splice(0, 0, this);\n        this.parent = callbackBlock;\n        return !(sourceParent === callbackBlock && sourceIndex === 0);\n      } else {\n        var _targetSiblings = targetParent.getLines();\n\n        var targetIndex = _targetSiblings.indexOf(targetLine) + 1;\n\n        _targetSiblings.splice(targetIndex, 0, this);\n\n        this.parent = targetParent;\n        return !(sourceParent === targetParent && sourceIndex === targetIndex);\n      }\n    }\n  }, {\n    key: \"moveToLastOfContext\",\n    value: function moveToLastOfContext() {\n      var context = this.getParentContext();\n      if (!context) return false;\n      var sourceParent = this.parent;\n      var sourceSiblings = sourceParent.getLines();\n      var sourceIndex = sourceSiblings.indexOf(this);\n      sourceSiblings.splice(sourceIndex, 1);\n      var targetSiblings = context.getLines();\n      var targetIndex = targetSiblings.length;\n      targetSiblings.splice(targetIndex, 0, this);\n      this.parent = context;\n      return !(sourceParent === context && sourceIndex === targetIndex);\n    }\n  }, {\n    key: \"addEmptyAfter\",\n    value: function addEmptyAfter() {\n      var line = new Line();\n      this.addAfter(line);\n      return line;\n    }\n  }, {\n    key: \"addAfter\",\n    value: function addAfter(line) {\n      var callbackBlock = this.getCallbackBlock();\n\n      if (callbackBlock && !this.folded) {\n        callbackBlock.addLineAt(line, 0);\n      } else {\n        var siblings = this.getSiblings();\n        var targetIndex = siblings.indexOf(this) + 1;\n        siblings.splice(targetIndex, 0, line);\n        line.parent = this.parent;\n      }\n    }\n  }, {\n    key: \"getAvailableRootBlockTypes\",\n    value: function getAvailableRootBlockTypes() {\n      return [GameObject, Variable, FunctionBlock, Util];\n    }\n  }, {\n    key: \"checkAvailableForRootBlock\",\n    value: function checkAvailableForRootBlock(block) {\n      var availableRootBlockTypes = this.getAvailableRootBlockTypes();\n\n      for (var i in availableRootBlockTypes) {\n        var availableRootBlockType = availableRootBlockTypes[i];\n\n        if (block instanceof availableRootBlockType) {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isAvailableParentFor\",\n    value: function isAvailableParentFor(block) {\n      var availableParentTypes = block.getAvailableParentTypes();\n      return availableParentTypes.includes(Line);\n    }\n  }, {\n    key: \"addSibling\",\n    value: function addSibling() {\n      var sibling = new Line({\n        parent: this.parent\n      });\n\n      if (this.parent instanceof Context) {\n        this.parent.lines.push(sibling);\n      } else if (this.parent instanceof Callback) {\n        this.parent.children.push(sibling);\n      }\n    }\n  }, {\n    key: \"getSiblings\",\n    value: function getSiblings() {\n      if (this.parent instanceof Context) {\n        return this.parent.lines;\n      } else if (this.parent instanceof Callback) {\n        return this.parent.children;\n      } else {\n        return [];\n      }\n    }\n  }, {\n    key: \"getNextDisplayLine\",\n    value: function getNextDisplayLine() {\n      var context = this.getParentContext();\n      if (!context) return;\n      var displayLines = context.getDisplayLines();\n      var index = displayLines.indexOf(this);\n\n      if (index >= 0) {\n        return displayLines[index + 1];\n      } else {\n        return;\n      }\n    }\n  }, {\n    key: \"getCallbackBlock\",\n    value: function getCallbackBlock() {\n      var displayBlocks = this.getDisplayBlocks();\n      var callbackBlock = displayBlocks.find(function (block) {\n        return block instanceof Callback;\n      });\n      return callbackBlock;\n    }\n  }, {\n    key: \"getDisplayBlocks\",\n    value: function getDisplayBlocks() {\n      var blocks = [];\n      var lineId = this.id;\n      Context.traverse(this, {\n        onBlock: function onBlock(block) {\n          var parentLine = block.getParentLine();\n\n          if (parentLine.id === lineId) {\n            blocks.push(block);\n          }\n        }\n      });\n      return blocks;\n    }\n  }, {\n    key: \"getDepth\",\n    value: function getDepth() {\n      var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.parent instanceof Callback) {\n        var parentLine = this.parent.getParentLine();\n        return parentLine.getDepth(depth + 1);\n      } else {\n        return depth;\n      }\n    }\n  }, {\n    key: \"getParentContext\",\n    value: function getParentContext() {\n      return this.findParent({\n        type: \"Context\"\n      });\n    }\n  }, {\n    key: \"findParent\",\n    value: function findParent(where) {\n      if (!this.parent) return;\n\n      if (this.parent.match(where)) {\n        return this.parent;\n      } else {\n        return this.parent.findParent(where);\n      }\n    }\n  }, {\n    key: \"match\",\n    value: function match(where) {\n      var type = where.type,\n          id = where.id,\n          lineNum = where.lineNum,\n          disabled = where.disabled;\n      if (type && type !== this.type) return false;\n      if (id && id !== this.id) return false;\n      if (lineNum && lineNum !== this.lineNum) return false;\n      if (disabled && disabled !== this.disabled) return false;\n      return true;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        block: this.block.toJSON(),\n        folded: this.folded,\n        disabled: this.disabled\n      };\n    }\n  }, {\n    key: \"toJavascript\",\n    value: function toJavascript() {\n      if (this.disabled) {\n        return;\n      } else {\n        return this.block.toJavascript();\n      }\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"Line\";\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(json, parent) {\n      var line = new Line({\n        parent: parent,\n        folded: json.folded,\n        disabled: json.disabled,\n        comment: json.comment\n      });\n      line.block = Block.fromJSON(json.block, line);\n      return line;\n    }\n  }]);\n\n  return Line;\n}();\n\nexport default Line;","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Common/Component/OOBCEditor/OOBC/line.js"],"names":["Context","Block","GameObject","Variable","FunctionBlock","Util","Callback","STATE","Line","props","id","generateId","parent","block","state","INSTANCE","lineNum","folded","disabled","comment","clone","Object","assign","create","getPrototypeOf","callbackBlock","getCallbackBlock","disabledParentLine","findParent","type","siblings","getSiblings","lastSibling","length","data","children","line","blocks","getDisplayBlocks","targetBlocks","i","targetBlock","isEqual","targetLine","sourceParent","targetParent","sourceSiblings","getLines","sourceIndex","indexOf","splice","targetIndex","targetSiblings","context","getParentContext","addAfter","addLineAt","availableRootBlockTypes","getAvailableRootBlockTypes","availableRootBlockType","availableParentTypes","getAvailableParentTypes","includes","sibling","lines","push","displayLines","getDisplayLines","index","displayBlocks","find","lineId","traverse","onBlock","parentLine","getParentLine","depth","getDepth","where","match","toJSON","toJavascript","json","fromJSON"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,IACEC,UADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,IAJF,EAKEC,QALF,QAMO,SANP;AAOA,SAASC,KAAT,QAAsB,QAAtB;;IAEMC,I;;;AACJ,kBAAwB;AAAA,QAAZC,KAAY,uEAAJ,EAAI;;AAAA;;AACtB,SAAKC,EAAL,GAAUD,KAAK,CAACC,EAAN,IAAYV,OAAO,CAACW,UAAR,EAAtB;AACA,SAAKC,MAAL,GAAcH,KAAK,CAACG,MAApB;AACA,SAAKC,KAAL,GACEJ,KAAK,CAACI,KAAN,IACA,IAAIZ,KAAJ,CAAU;AACRW,MAAAA,MAAM,EAAE,IADA;AAERE,MAAAA,KAAK,EAAEP,KAAK,CAACQ;AAFL,KAAV,CAFF;AAMA,SAAKC,OAAL,GAAeP,KAAK,CAACO,OAAN,IAAiB,IAAhC;AACA,SAAKC,MAAL,GAAcR,KAAK,CAACQ,MAAN,IAAgB,KAA9B;AACA,SAAKC,QAAL,GAAgBT,KAAK,CAACS,QAAN,IAAkB,KAAlC;AACA,SAAKC,OAAL,GAAeV,KAAK,CAACU,OAAN,IAAiB,IAAhC;AACD;;;;0BAMKP,M,EAAQ;AACZ,UAAMQ,KAAK,GAAGC,MAAM,CAACC,MAAP,CACZD,MAAM,CAACE,MAAP,CAAcF,MAAM,CAACG,cAAP,CAAsB,IAAtB,CAAd,CADY,EAEZ,IAFY,CAAd;AAIAJ,MAAAA,KAAK,CAACV,EAAN,GAAWV,OAAO,CAACW,UAAR,EAAX;AACAS,MAAAA,KAAK,CAACR,MAAN,GAAeA,MAAf;AACAQ,MAAAA,KAAK,CAACP,KAAN,GAAc,KAAKA,KAAL,CAAWO,KAAX,CAAiBA,KAAjB,CAAd;AACA,aAAOA,KAAP;AACD;;;2BACM;AACL,WAAKH,MAAL,GAAc,IAAd;AACD;;;6BACQ;AACP,WAAKA,MAAL,GAAc,KAAd;AACD;;;iCACY;AACX,UAAMQ,aAAa,GAAG,KAAKC,gBAAL,EAAtB;AACA,aAAO,CAAC,CAACD,aAAT;AACD;;;6BACQ;AACP,WAAKP,QAAL,GAAgB,KAAhB;AACD;;;8BACS;AACR,WAAKA,QAAL,GAAgB,IAAhB;AACD;;;iCACY;AACX,UAAI,KAAKA,QAAT,EAAmB;AACjB,eAAO,IAAP;AACD,OAFD,MAEO;AACL,YAAMS,kBAAkB,GAAG,KAAKC,UAAL,CAAgB;AACzCC,UAAAA,IAAI,EAAE,MADmC;AAEzCX,UAAAA,QAAQ,EAAE;AAF+B,SAAhB,CAA3B;AAIA,eAAO,CAAC,CAACS,kBAAT;AACD;AACF;;;oCACe;AACd,UAAMG,QAAQ,GAAG,KAAKC,WAAL,EAAjB;AACA,UAAMC,WAAW,GAAGF,QAAQ,CAACA,QAAQ,CAACG,MAAT,GAAkB,CAAnB,CAA5B;AACA,aAAO,SAASD,WAAhB;AACD;;;8BACS;AACR,UAAI,KAAKnB,KAAT,EAAgB;AACd,eAAO,CAAC,KAAKA,KAAL,CAAWqB,IAAZ,IAAoB,CAAC,KAAKrB,KAAL,CAAWsB,QAAvC;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF;;;4BACOC,I,EAAM;AACZ,UAAG,EAAEA,IAAI,YAAY5B,IAAlB,CAAH,EAA4B;AAC1B,eAAO,KAAP;AACD;;AAED,UAAM6B,MAAM,GAAG,KAAKC,gBAAL,EAAf;AACA,UAAMC,YAAY,GAAGH,IAAI,CAACE,gBAAL,EAArB;;AACA,UAAGD,MAAM,CAACJ,MAAP,KAAkBM,YAAY,CAACN,MAAlC,EAA0C;AACxC,eAAO,KAAP;AACD;;AAED,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACJ,MAA3B,EAAmCO,CAAC,EAApC,EAAwC;AACtC,YAAM3B,KAAK,GAAGwB,MAAM,CAACG,CAAD,CAApB;AACA,YAAMC,WAAW,GAAGF,YAAY,CAACC,CAAD,CAAhC;;AACA,YAAG,CAAC3B,KAAK,CAAC6B,OAAN,CAAcD,WAAd,CAAJ,EAAgC;AAC9B,iBAAO,KAAP;AACD;AACF;;AACD,aAAO,IAAP;AACD;;;+BAEUE,U,EAAY;AACrB,UAAMC,YAAY,GAAG,KAAKhC,MAA1B;AACA,UAAMiC,YAAY,GAAGF,UAAU,CAAC/B,MAAhC;AAEA,UAAMkC,cAAc,GAAGF,YAAY,CAACG,QAAb,EAAvB;AACA,UAAMC,WAAW,GAAGF,cAAc,CAACG,OAAf,CAAuB,IAAvB,CAApB;AACAH,MAAAA,cAAc,CAACI,MAAf,CAAsBF,WAAtB,EAAmC,CAAnC;;AAEA,UAAIJ,YAAY,KAAKC,YAArB,EAAmC;AACjC,YAAMM,WAAW,GAAGL,cAAc,CAACG,OAAf,CAAuBN,UAAvB,CAApB;AACAG,QAAAA,cAAc,CAACI,MAAf,CAAsBC,WAAtB,EAAmC,CAAnC,EAAsC,IAAtC;AACA,eAAOH,WAAW,KAAKG,WAAvB;AACD,OAJD,MAIO;AACL,YAAMC,cAAc,GAAGP,YAAY,CAACE,QAAb,EAAvB;;AACA,YAAMI,YAAW,GAAGC,cAAc,CAACH,OAAf,CAAuBN,UAAvB,CAApB;;AACAS,QAAAA,cAAc,CAACF,MAAf,CAAsBC,YAAtB,EAAmC,CAAnC,EAAsC,IAAtC;AACA,aAAKvC,MAAL,GAAciC,YAAd;AACA,eAAO,IAAP;AACD;AACF;;;8BACSF,U,EAAY;AACpB,UAAMC,YAAY,GAAG,KAAKhC,MAA1B;AACA,UAAMiC,YAAY,GAAGF,UAAU,CAAC/B,MAAhC;AAEA,UAAMkC,cAAc,GAAGF,YAAY,CAACG,QAAb,EAAvB;AACA,UAAMC,WAAW,GAAGF,cAAc,CAACG,OAAf,CAAuB,IAAvB,CAApB;AACAH,MAAAA,cAAc,CAACI,MAAf,CAAsBF,WAAtB,EAAmC,CAAnC;AAEA,UAAMvB,aAAa,GAAGkB,UAAU,CAACjB,gBAAX,EAAtB;;AACA,UAAID,aAAa,IAAI,CAACkB,UAAU,CAAC1B,MAAjC,EAAyC;AACvC,YAAMmC,cAAc,GAAG3B,aAAa,CAACsB,QAAd,EAAvB;AACAK,QAAAA,cAAc,CAACF,MAAf,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B,IAA5B;AACA,aAAKtC,MAAL,GAAca,aAAd;AACA,eAAO,EAAEmB,YAAY,KAAKnB,aAAjB,IAAkCuB,WAAW,KAAK,CAApD,CAAP;AACD,OALD,MAKO;AACL,YAAMI,eAAc,GAAGP,YAAY,CAACE,QAAb,EAAvB;;AACA,YAAMI,WAAW,GAAGC,eAAc,CAACH,OAAf,CAAuBN,UAAvB,IAAqC,CAAzD;;AACAS,QAAAA,eAAc,CAACF,MAAf,CAAsBC,WAAtB,EAAmC,CAAnC,EAAsC,IAAtC;;AACA,aAAKvC,MAAL,GAAciC,YAAd;AACA,eAAO,EAAED,YAAY,KAAKC,YAAjB,IAAiCG,WAAW,KAAKG,WAAnD,CAAP;AACD;AACF;;;0CACqB;AACpB,UAAME,OAAO,GAAG,KAAKC,gBAAL,EAAhB;AACA,UAAI,CAACD,OAAL,EAAc,OAAO,KAAP;AAEd,UAAMT,YAAY,GAAG,KAAKhC,MAA1B;AACA,UAAMkC,cAAc,GAAGF,YAAY,CAACG,QAAb,EAAvB;AACA,UAAMC,WAAW,GAAGF,cAAc,CAACG,OAAf,CAAuB,IAAvB,CAApB;AACAH,MAAAA,cAAc,CAACI,MAAf,CAAsBF,WAAtB,EAAmC,CAAnC;AAEA,UAAMI,cAAc,GAAGC,OAAO,CAACN,QAAR,EAAvB;AACA,UAAMI,WAAW,GAAGC,cAAc,CAACnB,MAAnC;AACAmB,MAAAA,cAAc,CAACF,MAAf,CAAsBC,WAAtB,EAAmC,CAAnC,EAAsC,IAAtC;AACA,WAAKvC,MAAL,GAAcyC,OAAd;AAEA,aAAO,EAAET,YAAY,KAAKS,OAAjB,IAA4BL,WAAW,KAAKG,WAA9C,CAAP;AACD;;;oCAEe;AACd,UAAMf,IAAI,GAAG,IAAI5B,IAAJ,EAAb;AACA,WAAK+C,QAAL,CAAcnB,IAAd;AACA,aAAOA,IAAP;AACD;;;6BACQA,I,EAAM;AACb,UAAMX,aAAa,GAAG,KAAKC,gBAAL,EAAtB;;AACA,UAAID,aAAa,IAAI,CAAC,KAAKR,MAA3B,EAAmC;AACjCQ,QAAAA,aAAa,CAAC+B,SAAd,CAAwBpB,IAAxB,EAA8B,CAA9B;AACD,OAFD,MAEO;AACL,YAAMN,QAAQ,GAAG,KAAKC,WAAL,EAAjB;AACA,YAAMoB,WAAW,GAAGrB,QAAQ,CAACmB,OAAT,CAAiB,IAAjB,IAAyB,CAA7C;AACAnB,QAAAA,QAAQ,CAACoB,MAAT,CAAgBC,WAAhB,EAA6B,CAA7B,EAAgCf,IAAhC;AACAA,QAAAA,IAAI,CAACxB,MAAL,GAAc,KAAKA,MAAnB;AACD;AACF;;;iDAE4B;AAC3B,aAAO,CAACV,UAAD,EAAaC,QAAb,EAAuBC,aAAvB,EAAsCC,IAAtC,CAAP;AACD;;;+CAC0BQ,K,EAAO;AAChC,UAAM4C,uBAAuB,GAAG,KAAKC,0BAAL,EAAhC;;AACA,WAAK,IAAIlB,CAAT,IAAciB,uBAAd,EAAuC;AACrC,YAAME,sBAAsB,GAAGF,uBAAuB,CAACjB,CAAD,CAAtD;;AACA,YAAI3B,KAAK,YAAY8C,sBAArB,EAA6C;AAC3C,iBAAO,IAAP;AACD;AACF;AACF;;;yCACoB9C,K,EAAO;AAC1B,UAAM+C,oBAAoB,GAAG/C,KAAK,CAACgD,uBAAN,EAA7B;AACA,aAAOD,oBAAoB,CAACE,QAArB,CAA8BtD,IAA9B,CAAP;AACD;;;iCAEY;AACX,UAAMuD,OAAO,GAAG,IAAIvD,IAAJ,CAAS;AAAEI,QAAAA,MAAM,EAAE,KAAKA;AAAf,OAAT,CAAhB;;AACA,UAAI,KAAKA,MAAL,YAAuBZ,OAA3B,EAAoC;AAClC,aAAKY,MAAL,CAAYoD,KAAZ,CAAkBC,IAAlB,CAAuBF,OAAvB;AACD,OAFD,MAEO,IAAI,KAAKnD,MAAL,YAAuBN,QAA3B,EAAqC;AAC1C,aAAKM,MAAL,CAAYuB,QAAZ,CAAqB8B,IAArB,CAA0BF,OAA1B;AACD;AACF;;;kCACa;AACZ,UAAI,KAAKnD,MAAL,YAAuBZ,OAA3B,EAAoC;AAClC,eAAO,KAAKY,MAAL,CAAYoD,KAAnB;AACD,OAFD,MAEO,IAAI,KAAKpD,MAAL,YAAuBN,QAA3B,EAAqC;AAC1C,eAAO,KAAKM,MAAL,CAAYuB,QAAnB;AACD,OAFM,MAEA;AACL,eAAO,EAAP;AACD;AACF;;;yCACoB;AACnB,UAAMkB,OAAO,GAAG,KAAKC,gBAAL,EAAhB;AACA,UAAI,CAACD,OAAL,EAAc;AACd,UAAMa,YAAY,GAAGb,OAAO,CAACc,eAAR,EAArB;AACA,UAAMC,KAAK,GAAGF,YAAY,CAACjB,OAAb,CAAqB,IAArB,CAAd;;AACA,UAAImB,KAAK,IAAI,CAAb,EAAgB;AACd,eAAOF,YAAY,CAACE,KAAK,GAAG,CAAT,CAAnB;AACD,OAFD,MAEO;AACL;AACD;AACF;;;uCACkB;AACjB,UAAMC,aAAa,GAAG,KAAK/B,gBAAL,EAAtB;AACA,UAAMb,aAAa,GAAG4C,aAAa,CAACC,IAAd,CACpB,UAAAzD,KAAK;AAAA,eAAIA,KAAK,YAAYP,QAArB;AAAA,OADe,CAAtB;AAGA,aAAOmB,aAAP;AACD;;;uCACkB;AACjB,UAAMY,MAAM,GAAG,EAAf;AACA,UAAMkC,MAAM,GAAG,KAAK7D,EAApB;AACAV,MAAAA,OAAO,CAACwE,QAAR,CAAiB,IAAjB,EAAuB;AACrBC,QAAAA,OADqB,mBACb5D,KADa,EACN;AACb,cAAM6D,UAAU,GAAG7D,KAAK,CAAC8D,aAAN,EAAnB;;AACA,cAAID,UAAU,CAAChE,EAAX,KAAkB6D,MAAtB,EAA8B;AAC5BlC,YAAAA,MAAM,CAAC4B,IAAP,CAAYpD,KAAZ;AACD;AACF;AANoB,OAAvB;AAQA,aAAOwB,MAAP;AACD;;;+BACmB;AAAA,UAAXuC,KAAW,uEAAH,CAAG;;AAClB,UAAI,KAAKhE,MAAL,YAAuBN,QAA3B,EAAqC;AACnC,YAAMoE,UAAU,GAAG,KAAK9D,MAAL,CAAY+D,aAAZ,EAAnB;AACA,eAAOD,UAAU,CAACG,QAAX,CAAoBD,KAAK,GAAG,CAA5B,CAAP;AACD,OAHD,MAGO;AACL,eAAOA,KAAP;AACD;AACF;;;uCACkB;AACjB,aAAO,KAAKhD,UAAL,CAAgB;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAhB,CAAP;AACD;;;+BACUiD,K,EAAO;AAChB,UAAI,CAAC,KAAKlE,MAAV,EAAkB;;AAClB,UAAI,KAAKA,MAAL,CAAYmE,KAAZ,CAAkBD,KAAlB,CAAJ,EAA8B;AAC5B,eAAO,KAAKlE,MAAZ;AACD,OAFD,MAEO;AACL,eAAO,KAAKA,MAAL,CAAYgB,UAAZ,CAAuBkD,KAAvB,CAAP;AACD;AACF;;;0BACKA,K,EAAO;AAAA,UACHjD,IADG,GAC6BiD,KAD7B,CACHjD,IADG;AAAA,UACGnB,EADH,GAC6BoE,KAD7B,CACGpE,EADH;AAAA,UACOM,OADP,GAC6B8D,KAD7B,CACO9D,OADP;AAAA,UACgBE,QADhB,GAC6B4D,KAD7B,CACgB5D,QADhB;AAEX,UAAIW,IAAI,IAAIA,IAAI,KAAK,KAAKA,IAA1B,EACE,OAAO,KAAP;AACF,UAAInB,EAAE,IAAIA,EAAE,KAAK,KAAKA,EAAtB,EAA0B,OAAO,KAAP;AAC1B,UAAIM,OAAO,IAAIA,OAAO,KAAK,KAAKA,OAAhC,EAAyC,OAAO,KAAP;AACzC,UAAIE,QAAQ,IAAIA,QAAQ,KAAK,KAAKA,QAAlC,EAA4C,OAAO,KAAP;AAC5C,aAAO,IAAP;AACD;;;6BAYQ;AACP,aAAO;AACLL,QAAAA,KAAK,EAAE,KAAKA,KAAL,CAAWmE,MAAX,EADF;AAEL/D,QAAAA,MAAM,EAAE,KAAKA,MAFR;AAGLC,QAAAA,QAAQ,EAAE,KAAKA;AAHV,OAAP;AAKD;;;mCACc;AACb,UAAI,KAAKA,QAAT,EAAmB;AACjB;AACD,OAFD,MAEO;AACL,eAAO,KAAKL,KAAL,CAAWoE,YAAX,EAAP;AACD;AACF;;;wBA3QU;AACT,aAAO,MAAP;AACD;;;6BAkPeC,I,EAAMtE,M,EAAQ;AAC5B,UAAMwB,IAAI,GAAG,IAAI5B,IAAJ,CAAS;AACpBI,QAAAA,MAAM,EAANA,MADoB;AAEpBK,QAAAA,MAAM,EAAEiE,IAAI,CAACjE,MAFO;AAGpBC,QAAAA,QAAQ,EAAEgE,IAAI,CAAChE,QAHK;AAIpBC,QAAAA,OAAO,EAAE+D,IAAI,CAAC/D;AAJM,OAAT,CAAb;AAMAiB,MAAAA,IAAI,CAACvB,KAAL,GAAaZ,KAAK,CAACkF,QAAN,CAAeD,IAAI,CAACrE,KAApB,EAA2BuB,IAA3B,CAAb;AACA,aAAOA,IAAP;AACD;;;;;;AAiBH,eAAe5B,IAAf","sourcesContent":["import Context from \"./context\";\nimport Block, {\n  GameObject,\n  Variable,\n  FunctionBlock,\n  Util,\n  Callback\n} from \"./block\";\nimport { STATE } from \"./type\";\n\nclass Line {\n  constructor(props = {}) {\n    this.id = props.id || Context.generateId();\n    this.parent = props.parent;\n    this.block =\n      props.block ||\n      new Block({\n        parent: this,\n        state: STATE.INSTANCE\n      });\n    this.lineNum = props.lineNum || null;\n    this.folded = props.folded || false;\n    this.disabled = props.disabled || false;\n    this.comment = props.comment || null;\n  }\n\n  get type() {\n    return \"Line\"\n  }\n\n  clone(parent) {\n    const clone = Object.assign(\n      Object.create(Object.getPrototypeOf(this)),\n      this\n    );\n    clone.id = Context.generateId();\n    clone.parent = parent;\n    clone.block = this.block.clone(clone);\n    return clone;\n  }\n  fold() {\n    this.folded = true;\n  }\n  unfold() {\n    this.folded = false;\n  }\n  isFoldable() {\n    const callbackBlock = this.getCallbackBlock();\n    return !!callbackBlock;\n  }\n  enable() {\n    this.disabled = false;\n  }\n  disable() {\n    this.disabled = true;\n  }\n  isDisabled() {\n    if (this.disabled) {\n      return true;\n    } else {\n      const disabledParentLine = this.findParent({\n        type: \"Line\",\n        disabled: true\n      });\n      return !!disabledParentLine;\n    }\n  }\n  isLastSibling() {\n    const siblings = this.getSiblings();\n    const lastSibling = siblings[siblings.length - 1];\n    return this === lastSibling;\n  }\n  isEmpty() {\n    if (this.block) {\n      return !this.block.data && !this.block.children;\n    } else {\n      return true;\n    }\n  }\n  isEqual(line) {\n    if(!(line instanceof Line)) {\n      return false;\n    }\n    \n    const blocks = this.getDisplayBlocks();\n    const targetBlocks = line.getDisplayBlocks();\n    if(blocks.length !== targetBlocks.length) {\n      return false;\n    }\n\n    for (let i = 0; i < blocks.length; i++) {\n      const block = blocks[i];\n      const targetBlock = targetBlocks[i];\n      if(!block.isEqual(targetBlock)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  moveBefore(targetLine) {\n    const sourceParent = this.parent;\n    const targetParent = targetLine.parent;\n\n    const sourceSiblings = sourceParent.getLines();\n    const sourceIndex = sourceSiblings.indexOf(this);\n    sourceSiblings.splice(sourceIndex, 1);\n\n    if (sourceParent === targetParent) {\n      const targetIndex = sourceSiblings.indexOf(targetLine);\n      sourceSiblings.splice(targetIndex, 0, this);\n      return sourceIndex !== targetIndex;\n    } else {\n      const targetSiblings = targetParent.getLines();\n      const targetIndex = targetSiblings.indexOf(targetLine);\n      targetSiblings.splice(targetIndex, 0, this);\n      this.parent = targetParent;\n      return true;\n    }\n  }\n  moveAfter(targetLine) {\n    const sourceParent = this.parent;\n    const targetParent = targetLine.parent;\n\n    const sourceSiblings = sourceParent.getLines();\n    const sourceIndex = sourceSiblings.indexOf(this);\n    sourceSiblings.splice(sourceIndex, 1);\n\n    const callbackBlock = targetLine.getCallbackBlock();\n    if (callbackBlock && !targetLine.folded) {\n      const targetSiblings = callbackBlock.getLines();\n      targetSiblings.splice(0, 0, this);\n      this.parent = callbackBlock;\n      return !(sourceParent === callbackBlock && sourceIndex === 0);\n    } else {\n      const targetSiblings = targetParent.getLines();\n      const targetIndex = targetSiblings.indexOf(targetLine) + 1;\n      targetSiblings.splice(targetIndex, 0, this);\n      this.parent = targetParent;\n      return !(sourceParent === targetParent && sourceIndex === targetIndex);\n    }\n  }\n  moveToLastOfContext() {\n    const context = this.getParentContext();\n    if (!context) return false;\n\n    const sourceParent = this.parent;\n    const sourceSiblings = sourceParent.getLines();\n    const sourceIndex = sourceSiblings.indexOf(this);\n    sourceSiblings.splice(sourceIndex, 1);\n\n    const targetSiblings = context.getLines();\n    const targetIndex = targetSiblings.length;\n    targetSiblings.splice(targetIndex, 0, this);\n    this.parent = context;\n\n    return !(sourceParent === context && sourceIndex === targetIndex);\n  }\n\n  addEmptyAfter() {\n    const line = new Line();\n    this.addAfter(line);\n    return line;\n  }\n  addAfter(line) {\n    const callbackBlock = this.getCallbackBlock();\n    if (callbackBlock && !this.folded) {\n      callbackBlock.addLineAt(line, 0);\n    } else {\n      const siblings = this.getSiblings();\n      const targetIndex = siblings.indexOf(this) + 1;\n      siblings.splice(targetIndex, 0, line);\n      line.parent = this.parent;\n    }\n  }\n\n  getAvailableRootBlockTypes() {\n    return [GameObject, Variable, FunctionBlock, Util];\n  }\n  checkAvailableForRootBlock(block) {\n    const availableRootBlockTypes = this.getAvailableRootBlockTypes();\n    for (let i in availableRootBlockTypes) {\n      const availableRootBlockType = availableRootBlockTypes[i];\n      if (block instanceof availableRootBlockType) {\n        return true;\n      }\n    }\n  }\n  isAvailableParentFor(block) {\n    const availableParentTypes = block.getAvailableParentTypes();\n    return availableParentTypes.includes(Line);\n  }\n\n  addSibling() {\n    const sibling = new Line({ parent: this.parent });\n    if (this.parent instanceof Context) {\n      this.parent.lines.push(sibling);\n    } else if (this.parent instanceof Callback) {\n      this.parent.children.push(sibling);\n    }\n  }\n  getSiblings() {\n    if (this.parent instanceof Context) {\n      return this.parent.lines;\n    } else if (this.parent instanceof Callback) {\n      return this.parent.children;\n    } else {\n      return [];\n    }\n  }\n  getNextDisplayLine() {\n    const context = this.getParentContext();\n    if (!context) return;\n    const displayLines = context.getDisplayLines();\n    const index = displayLines.indexOf(this);\n    if (index >= 0) {\n      return displayLines[index + 1];\n    } else {\n      return;\n    }\n  }\n  getCallbackBlock() {\n    const displayBlocks = this.getDisplayBlocks();\n    const callbackBlock = displayBlocks.find(\n      block => block instanceof Callback\n    );\n    return callbackBlock;\n  }\n  getDisplayBlocks() {\n    const blocks = [];\n    const lineId = this.id;\n    Context.traverse(this, {\n      onBlock(block) {\n        const parentLine = block.getParentLine();\n        if (parentLine.id === lineId) {\n          blocks.push(block);\n        }\n      }\n    });\n    return blocks;\n  }\n  getDepth(depth = 0) {\n    if (this.parent instanceof Callback) {\n      const parentLine = this.parent.getParentLine();\n      return parentLine.getDepth(depth + 1);\n    } else {\n      return depth;\n    }\n  }\n  getParentContext() {\n    return this.findParent({ type: \"Context\" });\n  }\n  findParent(where) {\n    if (!this.parent) return;\n    if (this.parent.match(where)) {\n      return this.parent;\n    } else {\n      return this.parent.findParent(where);\n    }\n  }\n  match(where) {\n    const { type, id, lineNum, disabled } = where;\n    if (type && type !== this.type)\n      return false;\n    if (id && id !== this.id) return false;\n    if (lineNum && lineNum !== this.lineNum) return false;\n    if (disabled && disabled !== this.disabled) return false;\n    return true;\n  }\n\n  static fromJSON(json, parent) {\n    const line = new Line({\n      parent,\n      folded: json.folded,\n      disabled: json.disabled,\n      comment: json.comment\n    });\n    line.block = Block.fromJSON(json.block, line);\n    return line;\n  }\n  toJSON() {\n    return {\n      block: this.block.toJSON(),\n      folded: this.folded,\n      disabled: this.disabled\n    };\n  }\n  toJavascript() {\n    if (this.disabled) {\n      return;\n    } else {\n      return this.block.toJavascript();\n    }\n  }\n}\n\nexport default Line;\n"]},"metadata":{},"sourceType":"module"}