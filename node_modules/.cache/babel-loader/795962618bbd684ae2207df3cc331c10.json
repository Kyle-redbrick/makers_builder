{"ast":null,"code":"import _defineProperty from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n// user interaction\nimport { ActionType } from \"../../../../Common/Util/Constant\";\nvar SET_PROJECT = ActionType.SET_PROJECT,\n    SET_TEMPLATE = ActionType.SET_TEMPLATE,\n    RESET_PROJECT = ActionType.RESET_PROJECT,\n    PUBLISH_PROJECT = ActionType.PUBLISH_PROJECT,\n    ADD_SPRITES = ActionType.ADD_SPRITES,\n    SELECT_SPRITE = ActionType.SELECT_SPRITE,\n    SELECT_SCENE = ActionType.SELECT_SCENE,\n    REMOVE_SCENE = ActionType.REMOVE_SCENE,\n    ADD_SCENE = ActionType.ADD_SCENE,\n    COPY_SCENE = ActionType.COPY_SCENE,\n    PLAY_SOUND = ActionType.PLAY_SOUND,\n    PAUSE_SOUND = ActionType.PAUSE_SOUND,\n    STOP_SOUND = ActionType.STOP_SOUND,\n    SET_IS_PLAYING = ActionType.SET_IS_PLAYING,\n    SET_SCREEN_MODE = ActionType.SET_SCREEN_MODE,\n    REMOVE_ALL_SPRITE = ActionType.REMOVE_ALL_SPRITE,\n    SET_BTN_HIGHLIGHT = ActionType.SET_BTN_HIGHLIGHT,\n    ADD_SOUNDS = ActionType.ADD_SOUNDS,\n    SET_BLOCK_CATEGORY = ActionType.SET_BLOCK_CATEGORY;\nexport var selectSprite = function selectSprite(sceneId, spriteName, spriteType, from) {\n  return {\n    type: SELECT_SPRITE,\n    sceneId: sceneId,\n    spriteName: spriteName,\n    spriteType: spriteType,\n    from: from\n  };\n};\nexport var selectScene = function selectScene(sceneId) {\n  return {\n    type: SELECT_SCENE,\n    sceneId: sceneId\n  };\n};\nexport var playSound = function playSound(jukeboxInfo) {\n  return {\n    type: PLAY_SOUND,\n    jukeboxInfo: jukeboxInfo\n  };\n};\nexport var pauseSound = function pauseSound() {\n  return {\n    type: PAUSE_SOUND\n  };\n};\nexport var stopSound = function stopSound() {\n  return {\n    type: STOP_SOUND\n  };\n};\nexport var setBtnHighlight = function setBtnHighlight(buttonId) {\n  return {\n    type: SET_BTN_HIGHLIGHT,\n    buttonId: buttonId\n  };\n};\nexport var setBlockCategory = function setBlockCategory(category) {\n  return {\n    type: SET_BLOCK_CATEGORY,\n    category: category\n  };\n};\n\nvar deleteByKey = function deleteByKey(obj, deleteKey) {\n  return Object.keys(obj).reduce(function (acc, key) {\n    if (key !== deleteKey) {\n      return _objectSpread({}, acc, _defineProperty({}, key, obj[key]));\n    }\n\n    return acc;\n  }, {});\n};\n\nvar initialJukebox = {\n  isPlaying: false,\n  path: null,\n  type: null,\n  id: null,\n  listName: null\n};\nvar initialState = {\n  selected: {\n    objects: {},\n    scene: \"scene1\",\n    blockCategory: undefined\n  },\n  jukebox: {\n    isPlaying: false\n  },\n  highlightBtnId: undefined,\n  addSoundsTimeStamp: undefined,\n  isPublished: undefined\n};\n\nvar interaction = function interaction() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case RESET_PROJECT:\n      return initialState;\n\n    case SET_PROJECT:\n    case SET_TEMPLATE:\n      var _interaction = action.project.state && action.project.state.interaction;\n\n      if (_interaction) {\n        return _objectSpread({}, state, _interaction);\n      } else {\n        return state;\n      }\n\n    case PUBLISH_PROJECT:\n      return _objectSpread({}, state, {\n        isPublished: true\n      });\n\n    case ADD_SPRITES:\n      var sprite = action.spriteInfos[action.spriteInfos.length - 1];\n      return _objectSpread({}, state, {\n        selected: _objectSpread({}, state.selected, {\n          objects: _objectSpread({}, state.selected.objects, _defineProperty({}, action.sceneId, {\n            name: sprite.name,\n            type: sprite.type\n          }))\n        })\n      });\n\n    case SELECT_SPRITE:\n      return _objectSpread({}, state, {\n        selected: _objectSpread({}, state.selected, {\n          objects: _objectSpread({}, state.selected.objects, _defineProperty({}, action.sceneId, {\n            name: action.spriteName,\n            type: action.spriteType\n          }))\n        })\n      });\n\n    case SELECT_SCENE:\n      return _objectSpread({}, state, {\n        selected: _objectSpread({}, state.selected, {\n          scene: action.sceneId\n        })\n      });\n\n    case ADD_SCENE:\n      return _objectSpread({}, state, {\n        selected: _objectSpread({}, state.selected, {\n          objects: _objectSpread({}, state.selected.objects, _defineProperty({}, action.sceneId, {}))\n        })\n      });\n\n    case COPY_SCENE:\n      return _objectSpread({}, state, {\n        selected: _objectSpread({}, state.selected, {\n          objects: _objectSpread({}, state.selected.objects, _defineProperty({}, action.sceneId, {}))\n        })\n      });\n\n    case REMOVE_SCENE:\n      return _objectSpread({}, state, {\n        selected: _objectSpread({}, state.selected, {\n          objects: deleteByKey(state.selected.objects, action.sceneId)\n        })\n      });\n\n    case PLAY_SOUND:\n      return _objectSpread({}, state, {\n        jukebox: _objectSpread({}, state.jukebox, action.jukeboxInfo, {\n          isPlaying: true\n        })\n      });\n\n    case PAUSE_SOUND:\n      return _objectSpread({}, state, {\n        jukebox: _objectSpread({}, state.jukebox, {\n          isPlaying: false\n        })\n      });\n\n    case STOP_SOUND:\n    case SET_IS_PLAYING:\n    case SET_SCREEN_MODE:\n      // jukebox should be initialized via destructing assignment to make a shallow copy in this case.\n      // Otherwise the initialJukebox, which has to keep the default value, could be mutated by this operation.\n      return _objectSpread({}, state, {\n        jukebox: initialJukebox\n      });\n\n    case REMOVE_ALL_SPRITE:\n      return _objectSpread({}, state, {\n        selected: _objectSpread({}, state.selected, {\n          objects: _objectSpread({}, state.selected.objects, _defineProperty({}, state.selected.scene, {\n            name: undefined,\n            type: undefined\n          }))\n        })\n      });\n\n    case SET_BTN_HIGHLIGHT:\n      return _objectSpread({}, state, {\n        highlightBtnId: action.buttonId\n      });\n\n    case ADD_SOUNDS:\n      return _objectSpread({}, state, {\n        addSoundsTimeStamp: new Date().getTime()\n      });\n\n    case SET_BLOCK_CATEGORY:\n      return _objectSpread({}, state, {\n        selected: _objectSpread({}, state.selected, {\n          blockCategory: action.category\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default interaction;","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Store/Reducer/interaction.js"],"names":["ActionType","SET_PROJECT","SET_TEMPLATE","RESET_PROJECT","PUBLISH_PROJECT","ADD_SPRITES","SELECT_SPRITE","SELECT_SCENE","REMOVE_SCENE","ADD_SCENE","COPY_SCENE","PLAY_SOUND","PAUSE_SOUND","STOP_SOUND","SET_IS_PLAYING","SET_SCREEN_MODE","REMOVE_ALL_SPRITE","SET_BTN_HIGHLIGHT","ADD_SOUNDS","SET_BLOCK_CATEGORY","selectSprite","sceneId","spriteName","spriteType","from","type","selectScene","playSound","jukeboxInfo","pauseSound","stopSound","setBtnHighlight","buttonId","setBlockCategory","category","deleteByKey","obj","deleteKey","Object","keys","reduce","acc","key","initialJukebox","isPlaying","path","id","listName","initialState","selected","objects","scene","blockCategory","undefined","jukebox","highlightBtnId","addSoundsTimeStamp","isPublished","interaction","state","action","project","sprite","spriteInfos","length","name","Date","getTime"],"mappings":"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","sourcesContent":["// user interaction\nimport { ActionType } from \"../../../../Common/Util/Constant\";\nconst {\n  SET_PROJECT,\n  SET_TEMPLATE,\n  RESET_PROJECT,\n  PUBLISH_PROJECT,\n  ADD_SPRITES,\n  SELECT_SPRITE,\n  SELECT_SCENE,\n  REMOVE_SCENE,\n  ADD_SCENE,\n  COPY_SCENE,\n  // jukebox related\n  PLAY_SOUND,\n  PAUSE_SOUND,\n  STOP_SOUND,\n  SET_IS_PLAYING,\n  SET_SCREEN_MODE,\n  REMOVE_ALL_SPRITE,\n  SET_BTN_HIGHLIGHT,\n  ADD_SOUNDS,\n  SET_BLOCK_CATEGORY\n} = ActionType;\n\nexport const selectSprite = (sceneId, spriteName, spriteType, from) => ({\n  type: SELECT_SPRITE,\n  sceneId: sceneId,\n  spriteName: spriteName,\n  spriteType: spriteType,\n  from\n});\n\nexport const selectScene = sceneId => ({\n  type: SELECT_SCENE,\n  sceneId: sceneId\n});\n\nexport const playSound = jukeboxInfo => ({\n  type: PLAY_SOUND,\n  jukeboxInfo\n});\n\nexport const pauseSound = () => ({\n  type: PAUSE_SOUND\n});\n\nexport const stopSound = () => ({\n  type: STOP_SOUND\n});\n\nexport const setBtnHighlight = buttonId => ({\n  type: SET_BTN_HIGHLIGHT,\n  buttonId\n});\n\nexport const setBlockCategory = category => ({\n  type: SET_BLOCK_CATEGORY,\n  category\n});\n\nconst deleteByKey = (obj, deleteKey) => {\n  return Object.keys(obj).reduce((acc, key) => {\n    if (key !== deleteKey) {\n      return { ...acc, [key]: obj[key] };\n    }\n    return acc;\n  }, {});\n};\n\nconst initialJukebox = {\n  isPlaying: false,\n  path: null,\n  type: null,\n  id: null,\n  listName: null\n};\n\nconst initialState = {\n  selected: {\n    objects: {},\n    scene: \"scene1\",\n    blockCategory: undefined\n  },\n  jukebox: {\n    isPlaying: false\n  },\n  highlightBtnId: undefined,\n  addSoundsTimeStamp: undefined,\n  isPublished: undefined\n};\n\nconst interaction = (state = initialState, action) => {\n  switch (action.type) {\n    case RESET_PROJECT:\n      return initialState;\n    case SET_PROJECT:\n    case SET_TEMPLATE:\n      const interaction =\n        action.project.state && action.project.state.interaction;\n      if (interaction) {\n        return { ...state, ...interaction };\n      } else {\n        return state;\n      }\n    case PUBLISH_PROJECT:\n      return { ...state, isPublished: true };\n    case ADD_SPRITES:\n      const sprite = action.spriteInfos[action.spriteInfos.length - 1];\n      return {\n        ...state,\n        selected: {\n          ...state.selected,\n          objects: {\n            ...state.selected.objects,\n            [action.sceneId]: {\n              name: sprite.name,\n              type: sprite.type\n            }\n          }\n        }\n      };\n    case SELECT_SPRITE:\n      return {\n        ...state,\n        selected: {\n          ...state.selected,\n          objects: {\n            ...state.selected.objects,\n            [action.sceneId]: {\n              name: action.spriteName,\n              type: action.spriteType\n            }\n          }\n        }\n      };\n    case SELECT_SCENE:\n      return {\n        ...state,\n        selected: {\n          ...state.selected,\n          scene: action.sceneId\n        }\n      };\n    case ADD_SCENE:\n      return {\n        ...state,\n        selected: {\n          ...state.selected,\n          objects: {\n            ...state.selected.objects,\n            [action.sceneId]: {}\n          }\n        }\n      };\n    case COPY_SCENE:\n      return {\n        ...state,\n        selected: {\n          ...state.selected,\n          objects: {\n            ...state.selected.objects,\n            [action.sceneId]: {}\n          }\n        }\n      };\n    case REMOVE_SCENE:\n      return {\n        ...state,\n        selected: {\n          ...state.selected,\n          objects: deleteByKey(state.selected.objects, action.sceneId)\n        }\n      };\n    case PLAY_SOUND:\n      return {\n        ...state,\n        jukebox: {\n          ...state.jukebox,\n          ...action.jukeboxInfo,\n          isPlaying: true\n        }\n      };\n    case PAUSE_SOUND:\n      return {\n        ...state,\n        jukebox: {\n          ...state.jukebox,\n          isPlaying: false\n        }\n      };\n    case STOP_SOUND:\n    case SET_IS_PLAYING:\n    case SET_SCREEN_MODE:\n      // jukebox should be initialized via destructing assignment to make a shallow copy in this case.\n      // Otherwise the initialJukebox, which has to keep the default value, could be mutated by this operation.\n      return {\n        ...state,\n        jukebox: initialJukebox\n      };\n    case REMOVE_ALL_SPRITE:\n      return {\n        ...state,\n        selected: {\n          ...state.selected,\n          objects: {\n            ...state.selected.objects,\n            [state.selected.scene]: { name: undefined, type: undefined }\n          }\n        }\n      };\n    case SET_BTN_HIGHLIGHT:\n      return {\n        ...state,\n        highlightBtnId: action.buttonId\n      };\n    case ADD_SOUNDS:\n      return {\n        ...state,\n        addSoundsTimeStamp: new Date().getTime()\n      };\n    case SET_BLOCK_CATEGORY:\n      return {\n        ...state,\n        selected: { ...state.selected, blockCategory: action.category }\n      };\n    default:\n      return state;\n  }\n};\n\nexport default interaction;\n"]},"metadata":{},"sourceType":"module"}