{"ast":null,"code":"import _objectSpread from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Socket/Container.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport io from \"socket.io-client\"; // import uuidv4 from \"uuid/v4\";\n\nimport { URL, PAGETYPE } from \"../../../../Common/Util/Constant\";\nimport * as socketActions from \"../../Store/Reducer/socket\";\nimport * as chatActions from \"../../Store/Reducer/chat\";\nimport { showPopUp } from \"../../../../Common/Component/PopUp\"; // import { FormattedMessage } from \"react-intl\";\n\nimport { setMyProject } from \"../MultiSocket/Container\"; // import AssetLibrary from \"../../utils/assetLibrary\";\n\nvar socket = null; //io(URL.SOCKET_SERVER, {});\n\nexport var socketUtil = {// socket: socket,\n  // sendSocketEvent: (event, data = {}) => {\n  //   socket.emit(event, data);\n  // }\n};\n\nvar Container = /*#__PURE__*/function (_Component) {\n  _inherits(Container, _Component);\n\n  var _super = _createSuper(Container);\n\n  //chat\n  function Container(props) {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _super.call(this, props);\n    _this.socketTimer = undefined;\n    _this.EVENT_CONNECT = \"connect\";\n    _this.EVENT_JOIN = \"join\";\n    _this.EVENT_JOIN_ROOM = \"joinRoom\";\n    _this.EVENT_INSTANT_RUN_ACK = \"instantRunAck\";\n    _this.EVENT_INSTANT_RUN = \"instantRun\";\n    _this.EVENT_STATE = _this.props.pageType === PAGETYPE.WIZLIVE_1V4 ? \"multiState\" : \"state\";\n    _this.EVENT_STATE_TUTORIAL = \"stateTutorial\";\n    _this.EVENT_REQUEST_IMAGE = \"requestImage\";\n    _this.EVENT_RESPONSE_IMAGE = \"responseImage\";\n    _this.EVENT_TIMER = _this.props.pageType === PAGETYPE.WIZLIVE_1V4 ? 500 : 2000;\n    _this.EVENT_MULTI_STATE = \"multiState\";\n    _this.EVENT_LEAVE = \"leave\";\n    _this.EVENT_HIGHLIGHT = \"highlight\";\n    _this.EVENT_CHAT_MESSAGE = \"chatMessage\";\n\n    _this.setSocket = function () {// // const options = {}; //options reference : https://socket.io/docs/client-api/#new-Manager-url-options\n      // this.socket = socket;\n      // let roomId = \"all\";\n      // if (this.props.pageType === PAGETYPE.WIZLIVE_1V4) {\n      //   roomId = this.props.roomId;\n      // }\n      // if (this.props.email) {\n      //   this.socket.emit(this.EVENT_JOIN, { email: this.props.email });\n      // }\n      // this.socket.emit(this.EVENT_JOIN_ROOM, { roomId }); // global chat room\n      // this.joinedRoom.push(roomId);\n      // this.socket.on(this.EVENT_INSTANT_RUN_ACK, data => {\n      //   setTimeout(() => {\n      //     showPopUp(null);\n      //   }, 1000);\n      // });\n      // this.socket.on(this.EVENT_RESPONSE_IMAGE, data => {\n      //   this.props.setResponseImage(data.url);\n      //   this.props.setRequestImage(false);\n      // });\n    };\n\n    var pageType = props.pageType;\n    _this.codeSync = pageType !== PAGETYPE.VIDEOCLASS && pageType !== PAGETYPE.OCP && pageType !== PAGETYPE.TUTORIAL && pageType !== PAGETYPE.MONITOR && pageType !== PAGETYPE.QNA_READONLY && pageType !== PAGETYPE.BUILDER_READONLY;\n    _this.isTutorial = pageType === PAGETYPE.TUTORIAL;\n    _this.joinedRoom = [];\n    _this.currentUser = null;\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {//this.setSocket();\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (this.props.email) {\n        if (this.props.instantRunURL !== nextProps.instantRunURL) {\n          this.socket.emit(this.EVENT_INSTANT_RUN, {\n            email: this.props.email,\n            url: nextProps.instantRunURL\n          });\n          return false;\n        }\n\n        if (this.props.requestImage !== nextProps.requestImage) {\n          if (nextProps.requestImage === true) {\n            this.socket.emit(this.EVENT_REQUEST_IMAGE, {\n              email: this.props.email\n            });\n          }\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {// chatting\n      // if (this.props.messageQueue.length > 0) {\n      //   this.props.messageQueue.forEach(msg => {\n      //     let _msg = msg;\n      //     if (this.props.pageType === PAGETYPE.WIZLIVE_1V4) {\n      //       _msg = { ..._msg, roomId: this.props.roomId };\n      //     }\n      //     this.socket.emit(this.EVENT_CHAT_MESSAGE, _msg);\n      //   });\n      //   this.props.clearMsgQueue();\n      // }\n      // // code sync\n      // if (!this.props.email) {\n      //   return;\n      // }\n      // if (this.codeSync) {\n      //   if (this.socketTimer) {\n      //     clearTimeout(this.socketTimer);\n      //   }\n      //   this.socketTimer = setTimeout(() => {\n      //     const { pId, scene, interaction, preview } = this.props;\n      //     const state = JSON.stringify({\n      //       scene,\n      //       interaction: { ...interaction, isPublished: undefined },\n      //       preview: { ...preview, isPlaying: false }\n      //     });\n      //     const data = { pId, state, email: this.props.email };\n      //     if (this.isTutorial) {\n      //       const { scenes } = scene;\n      //       const { selectedSceneId, selectedObject } = this.props;\n      //       const _sprite = scenes[selectedSceneId].sprites[selectedObject.name];\n      //       // this.socket.emit(this.EVENT_STATE_TUTORIAL, {\n      //       //   email: this.props.email,\n      //       //   code: _sprite.code\n      //       // });\n      //     } else {\n      //       // 1:4 수업\n      //       if (this.props.pageType === PAGETYPE.WIZLIVE_1V4) {\n      //         if (this.props.currentUser.email === this.props.email) {\n      //           // console.log(\n      //           //   3333,\n      //           //   \" ---- Set My Project to localStorage : \" +\n      //           //     this.props.currentUser.email\n      //           // );\n      //           //setMyProject({ scene, interaction, preview });\n      //           // console.log(\n      //           //   3333,\n      //           //   `sending ${\n      //           //     this.props.currentUser.email\n      //           //   }'s project state --- socket event: ${this.EVENT_STATE} `\n      //           // );\n      //           //this.socket.emit(this.EVENT_STATE, data);s\n      //         }\n      //         // 1:1 수업\n      //       } else {\n      //         //this.socket.emit(this.EVENT_STATE, data);\n      //       }\n      //     }\n      //   }, this.EVENT_TIMER);\n      // } else if (this.isTutorial) {\n      //   // const { pId, scene, interaction, preview } = this.props;\n      //   // const state = JSON.stringify({\n      //   //   scene,\n      //   //   interaction: { ...interaction, isPublished: undefined },\n      //   //   preview: { ...preview, isPlaying: false }\n      //   // });\n      //   // const data = { pId, state };\n      //   // if (this.isTutorial) {\n      //   //   const { scenes } = scene;\n      //   //   const { selectedSceneId, selectedObject } = this.props;\n      //   //   const _sprite = scenes[selectedSceneId].sprites[selectedObject.name];\n      //   //   if (!_sprite) return;\n      //   //   const _code = _sprite.code;\n      //   //   if (this.lastSentCode === _code) {\n      //   //     return;\n      //   //   }\n      //   //   this.lastSentCode = _code;\n      //   //   this.socket.emit(this.EVENT_STATE_TUTORIAL, {\n      //   //     email: this.props.email,\n      //   //     code: _sprite.code\n      //   //   });\n      //   // } else {\n      //   //   this.socket.emit(this.EVENT_STATE, data);\n      //   // }\n      // }\n      // if (this.props.pageType === PAGETYPE.WIZLIVE_1V4) return;\n      // // if (this.joinedRoom.length !== Object.keys(this.props.rooms).length) {\n      // //   Object.keys(this.props.rooms).forEach(roomId => {\n      // //     if (this.joinedRoom.indexOf(roomId) === -1) {\n      // //       this.socket.emit(this.EVENT_JOIN_ROOM, { roomId });\n      // //       this.joinedRoom.push(roomId);\n      // //     }\n      // //   });\n      // // }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.socket.off(this.EVENT_INSTANT_RUN_ACK);\n      this.socket.off(this.EVENT_RESPONSE_IMAGE);\n      this.socket.off(this.EVENT_CHAT_MESSAGE);\n      this.socket.disconnect();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        style: {\n          display: \"none\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport default connect(function (state) {\n  var _state$scene = state.scene,\n      history = _state$scene.history,\n      historyIndex = _state$scene.historyIndex,\n      _scene = _objectWithoutProperties(_state$scene, [\"history\", \"historyIndex\"]);\n\n  return {\n    selectedSceneId: state.interaction.selected.scene,\n    selectedObject: state.interaction.selected.objects[state.interaction.selected.scene],\n    pId: state.project.pId,\n    scene: _scene,\n    interaction: _objectSpread({}, state.interaction, {\n      jukebox: {\n        isPlaying: false\n      },\n      addSoundsTimeStamp: undefined\n    }),\n    preview: state.preview,\n    email: state.userinfo.email,\n    project: state.project,\n    instantRunURL: state.socket.url,\n    requestImage: state.socket.requestImage,\n    messageQueue: state.chat.messageQueue,\n    rooms: state.chat.rooms,\n    currentUser: state.tabs.currentUser\n  };\n}, {\n  setRequestImage: socketActions.setRequestImage,\n  setResponseImage: socketActions.setResponseImage,\n  clearMsgQueue: chatActions.clearMsgQueue,\n  addMsg: chatActions.addMsg,\n  addUnreadMsgCount: chatActions.addUnreadMsgCount\n})(Container);","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Socket/Container.js"],"names":["React","Component","connect","io","URL","PAGETYPE","socketActions","chatActions","showPopUp","setMyProject","socket","socketUtil","Container","props","socketTimer","undefined","EVENT_CONNECT","EVENT_JOIN","EVENT_JOIN_ROOM","EVENT_INSTANT_RUN_ACK","EVENT_INSTANT_RUN","EVENT_STATE","pageType","WIZLIVE_1V4","EVENT_STATE_TUTORIAL","EVENT_REQUEST_IMAGE","EVENT_RESPONSE_IMAGE","EVENT_TIMER","EVENT_MULTI_STATE","EVENT_LEAVE","EVENT_HIGHLIGHT","EVENT_CHAT_MESSAGE","setSocket","codeSync","VIDEOCLASS","OCP","TUTORIAL","MONITOR","QNA_READONLY","BUILDER_READONLY","isTutorial","joinedRoom","currentUser","nextProps","nextState","email","instantRunURL","emit","url","requestImage","prevProps","off","disconnect","display","state","scene","history","historyIndex","_scene","selectedSceneId","interaction","selected","selectedObject","objects","pId","project","jukebox","isPlaying","addSoundsTimeStamp","preview","userinfo","messageQueue","chat","rooms","tabs","setRequestImage","setResponseImage","clearMsgQueue","addMsg","addUnreadMsgCount"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport io from \"socket.io-client\";\n// import uuidv4 from \"uuid/v4\";\nimport { URL, PAGETYPE } from \"../../../../Common/Util/Constant\";\nimport * as socketActions from \"../../Store/Reducer/socket\";\nimport * as chatActions from \"../../Store/Reducer/chat\";\nimport { showPopUp } from \"../../../../Common/Component/PopUp\";\n// import { FormattedMessage } from \"react-intl\";\nimport { setMyProject } from \"../MultiSocket/Container\";\n// import AssetLibrary from \"../../utils/assetLibrary\";\n\nconst socket = null//io(URL.SOCKET_SERVER, {});\nexport const socketUtil = {\n  // socket: socket,\n  // sendSocketEvent: (event, data = {}) => {\n  //   socket.emit(event, data);\n  // }\n};\n\nclass Container extends Component {\n  socketTimer = undefined;\n  EVENT_CONNECT = \"connect\";\n  EVENT_JOIN = \"join\";\n  EVENT_JOIN_ROOM = \"joinRoom\";\n  EVENT_INSTANT_RUN_ACK = \"instantRunAck\";\n  EVENT_INSTANT_RUN = \"instantRun\";\n  EVENT_STATE =\n    this.props.pageType === PAGETYPE.WIZLIVE_1V4 ? \"multiState\" : \"state\";\n  EVENT_STATE_TUTORIAL = \"stateTutorial\";\n  EVENT_REQUEST_IMAGE = \"requestImage\";\n  EVENT_RESPONSE_IMAGE = \"responseImage\";\n  EVENT_TIMER = this.props.pageType === PAGETYPE.WIZLIVE_1V4 ? 500 : 2000;\n  EVENT_MULTI_STATE = \"multiState\";\n  EVENT_LEAVE = \"leave\";\n  EVENT_HIGHLIGHT = \"highlight\";\n  //chat\n  EVENT_CHAT_MESSAGE = \"chatMessage\";\n\n  constructor(props) {\n    super(props);\n    const { pageType } = props;\n    this.codeSync =\n      pageType !== PAGETYPE.VIDEOCLASS &&\n      pageType !== PAGETYPE.OCP &&\n      pageType !== PAGETYPE.TUTORIAL &&\n      pageType !== PAGETYPE.MONITOR &&\n      pageType !== PAGETYPE.QNA_READONLY &&\n      pageType !== PAGETYPE.BUILDER_READONLY;\n    this.isTutorial = pageType === PAGETYPE.TUTORIAL;\n    this.joinedRoom = [];\n    this.currentUser = null;\n  }\n\n  componentDidMount() {\n    //this.setSocket();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.email) {\n      if (this.props.instantRunURL !== nextProps.instantRunURL) {\n        this.socket.emit(this.EVENT_INSTANT_RUN, {\n          email: this.props.email,\n          url: nextProps.instantRunURL\n        });\n        return false;\n      }\n\n      if (this.props.requestImage !== nextProps.requestImage) {\n        if (nextProps.requestImage === true) {\n          this.socket.emit(this.EVENT_REQUEST_IMAGE, {\n            email: this.props.email\n          });\n        }\n      }\n    }\n    return true;\n  }\n\n  componentDidUpdate(prevProps) {\n    // chatting\n    // if (this.props.messageQueue.length > 0) {\n    //   this.props.messageQueue.forEach(msg => {\n    //     let _msg = msg;\n    //     if (this.props.pageType === PAGETYPE.WIZLIVE_1V4) {\n    //       _msg = { ..._msg, roomId: this.props.roomId };\n    //     }\n    //     this.socket.emit(this.EVENT_CHAT_MESSAGE, _msg);\n    //   });\n    //   this.props.clearMsgQueue();\n    // }\n\n    // // code sync\n    // if (!this.props.email) {\n    //   return;\n    // }\n    // if (this.codeSync) {\n    //   if (this.socketTimer) {\n    //     clearTimeout(this.socketTimer);\n    //   }\n    //   this.socketTimer = setTimeout(() => {\n    //     const { pId, scene, interaction, preview } = this.props;\n    //     const state = JSON.stringify({\n    //       scene,\n    //       interaction: { ...interaction, isPublished: undefined },\n    //       preview: { ...preview, isPlaying: false }\n    //     });\n    //     const data = { pId, state, email: this.props.email };\n\n    //     if (this.isTutorial) {\n    //       const { scenes } = scene;\n    //       const { selectedSceneId, selectedObject } = this.props;\n    //       const _sprite = scenes[selectedSceneId].sprites[selectedObject.name];\n    //       // this.socket.emit(this.EVENT_STATE_TUTORIAL, {\n    //       //   email: this.props.email,\n    //       //   code: _sprite.code\n    //       // });\n    //     } else {\n    //       // 1:4 수업\n    //       if (this.props.pageType === PAGETYPE.WIZLIVE_1V4) {\n    //         if (this.props.currentUser.email === this.props.email) {\n    //           // console.log(\n    //           //   3333,\n    //           //   \" ---- Set My Project to localStorage : \" +\n    //           //     this.props.currentUser.email\n    //           // );\n    //           //setMyProject({ scene, interaction, preview });\n\n    //           // console.log(\n    //           //   3333,\n    //           //   `sending ${\n    //           //     this.props.currentUser.email\n    //           //   }'s project state --- socket event: ${this.EVENT_STATE} `\n    //           // );\n    //           //this.socket.emit(this.EVENT_STATE, data);s\n    //         }\n    //         // 1:1 수업\n    //       } else {\n    //         //this.socket.emit(this.EVENT_STATE, data);\n    //       }\n    //     }\n    //   }, this.EVENT_TIMER);\n    // } else if (this.isTutorial) {\n    //   // const { pId, scene, interaction, preview } = this.props;\n    //   // const state = JSON.stringify({\n    //   //   scene,\n    //   //   interaction: { ...interaction, isPublished: undefined },\n    //   //   preview: { ...preview, isPlaying: false }\n    //   // });\n    //   // const data = { pId, state };\n    //   // if (this.isTutorial) {\n    //   //   const { scenes } = scene;\n    //   //   const { selectedSceneId, selectedObject } = this.props;\n    //   //   const _sprite = scenes[selectedSceneId].sprites[selectedObject.name];\n    //   //   if (!_sprite) return;\n    //   //   const _code = _sprite.code;\n    //   //   if (this.lastSentCode === _code) {\n    //   //     return;\n    //   //   }\n    //   //   this.lastSentCode = _code;\n    //   //   this.socket.emit(this.EVENT_STATE_TUTORIAL, {\n    //   //     email: this.props.email,\n    //   //     code: _sprite.code\n    //   //   });\n    //   // } else {\n    //   //   this.socket.emit(this.EVENT_STATE, data);\n    //   // }\n    // }\n    // if (this.props.pageType === PAGETYPE.WIZLIVE_1V4) return;\n\n    // // if (this.joinedRoom.length !== Object.keys(this.props.rooms).length) {\n    // //   Object.keys(this.props.rooms).forEach(roomId => {\n    // //     if (this.joinedRoom.indexOf(roomId) === -1) {\n    // //       this.socket.emit(this.EVENT_JOIN_ROOM, { roomId });\n    // //       this.joinedRoom.push(roomId);\n    // //     }\n    // //   });\n    // // }\n  }\n\n  componentWillUnmount() {\n    this.socket.off(this.EVENT_INSTANT_RUN_ACK);\n    this.socket.off(this.EVENT_RESPONSE_IMAGE);\n    this.socket.off(this.EVENT_CHAT_MESSAGE);\n    this.socket.disconnect();\n  }\n\n  setSocket = () => {\n    // // const options = {}; //options reference : https://socket.io/docs/client-api/#new-Manager-url-options\n    // this.socket = socket;\n    // let roomId = \"all\";\n\n    // if (this.props.pageType === PAGETYPE.WIZLIVE_1V4) {\n    //   roomId = this.props.roomId;\n    // }\n\n    // if (this.props.email) {\n    //   this.socket.emit(this.EVENT_JOIN, { email: this.props.email });\n    // }\n\n    // this.socket.emit(this.EVENT_JOIN_ROOM, { roomId }); // global chat room\n    // this.joinedRoom.push(roomId);\n\n    // this.socket.on(this.EVENT_INSTANT_RUN_ACK, data => {\n    //   setTimeout(() => {\n    //     showPopUp(null);\n    //   }, 1000);\n    // });\n    // this.socket.on(this.EVENT_RESPONSE_IMAGE, data => {\n    //   this.props.setResponseImage(data.url);\n    //   this.props.setRequestImage(false);\n    // });\n  };\n\n  render() {\n    return <div style={{ display: \"none\" }} />;\n  }\n}\n\nexport default connect(\n  state => {\n    const { history, historyIndex, ..._scene } = state.scene;\n\n    return {\n      selectedSceneId: state.interaction.selected.scene,\n      selectedObject:\n        state.interaction.selected.objects[state.interaction.selected.scene],\n      pId: state.project.pId,\n      scene: _scene,\n      interaction: {\n        ...state.interaction,\n        jukebox: {\n          isPlaying: false\n        },\n        addSoundsTimeStamp: undefined\n      },\n      preview: state.preview,\n      email: state.userinfo.email,\n      project: state.project,\n      instantRunURL: state.socket.url,\n      requestImage: state.socket.requestImage,\n      messageQueue: state.chat.messageQueue,\n      rooms: state.chat.rooms,\n      currentUser: state.tabs.currentUser\n    };\n  },\n  {\n    setRequestImage: socketActions.setRequestImage,\n    setResponseImage: socketActions.setResponseImage,\n    clearMsgQueue: chatActions.clearMsgQueue,\n    addMsg: chatActions.addMsg,\n    addUnreadMsgCount: chatActions.addUnreadMsgCount\n  }\n)(Container);\n"]},"metadata":{},"sourceType":"module"}