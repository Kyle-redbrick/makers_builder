{"ast":null,"code":"import _classCallCheck from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/astroboy/src/Page/Builder/Component/Chat/Component/ChatBot/Component/ChatbotButton.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { injectIntl } from \"react-intl\";\nimport * as ChatbotUtil from \"../../../../../utils/ChatbotUtil\";\nimport { getGuestId } from \"../../../../../../../Common/Util/GuestIdUtil\";\nimport * as chatbotActions from \"../../../../../Store/Reducer/chatbot\";\n\nvar ChatbotButton = /*#__PURE__*/function (_Component) {\n  _inherits(ChatbotButton, _Component);\n\n  var _super = _createSuper(ChatbotButton);\n\n  function ChatbotButton() {\n    var _this;\n\n    _classCallCheck(this, ChatbotButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.createMessage = function () {\n      var formatMessage = _this.props.intl.formatMessage;\n      var _this$props = _this.props,\n          questionType = _this$props.questionType,\n          keyword = _this$props.keyword;\n\n      switch (questionType) {\n        case \"api\":\n          return formatMessage({\n            id: \"ID_CHATBOT_API_QUESTION\"\n          }, {\n            api: keyword\n          });\n\n        case \"class\":\n          return formatMessage({\n            id: \"ID_CHATBOT_CLASS_QUESTION\"\n          }, {\n            class: keyword\n          });\n\n        default:\n          return null;\n      }\n    };\n\n    _this.handleOnClick = function () {\n      var sender = _this.props.name || null;\n      var email = _this.props.email || getGuestId();\n      var keyword = _this.props.keyword; //create msg\n\n      var msg = _this.createMessage(keyword);\n\n      if (!msg) return;\n\n      _this.props.addNewMsg([{\n        text: msg,\n        sender: sender,\n        email: email,\n        type: \"USER_QUESTION\"\n      }]);\n\n      ChatbotUtil.sendMsg({\n        userId: email,\n        description: msg\n      }, function (messages) {\n        //add messages\n        if (messages && messages.length > 0) {\n          _this.props.addNewMsg(messages);\n        }\n      }, function (error) {\n        console.error(error);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ChatbotButton, [{\n    key: \"render\",\n    value: function render() {\n      var handleOnClick = this.handleOnClick,\n          createMessage = this.createMessage;\n      var message = createMessage();\n      return React.createElement(\"div\", {\n        className: \"ChatbotButtonsWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ChatbotButtons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ChatbotButton\",\n        onClick: handleOnClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, message))));\n    }\n  }]);\n\n  return ChatbotButton;\n}(Component);\n\nexport default connect(function (state) {\n  return {};\n}, {\n  addNewMsg: chatbotActions.addNewMsg\n})(injectIntl(ChatbotButton));","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/astroboy/src/Page/Builder/Component/Chat/Component/ChatBot/Component/ChatbotButton.js"],"names":["React","Component","connect","injectIntl","ChatbotUtil","getGuestId","chatbotActions","ChatbotButton","createMessage","formatMessage","props","intl","questionType","keyword","id","api","class","handleOnClick","sender","name","email","msg","addNewMsg","text","type","sendMsg","userId","description","messages","length","error","console","message","state"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,OAAO,KAAKC,WAAZ,MAA6B,kCAA7B;AACA,SAASC,UAAT,QAA2B,8CAA3B;AACA,OAAO,KAAKC,cAAZ,MAAgC,sCAAhC;;IAEMC,a;;;;;;;;;;;;;;;;UACJC,a,GAAgB,YAAM;AAAA,UACZC,aADY,GACM,MAAKC,KAAL,CAAWC,IADjB,CACZF,aADY;AAAA,wBAEc,MAAKC,KAFnB;AAAA,UAEZE,YAFY,eAEZA,YAFY;AAAA,UAEEC,OAFF,eAEEA,OAFF;;AAGpB,cAAQD,YAAR;AACE,aAAK,KAAL;AACE,iBAAOH,aAAa,CAAC;AAAEK,YAAAA,EAAE,EAAE;AAAN,WAAD,EAAoC;AAAEC,YAAAA,GAAG,EAAEF;AAAP,WAApC,CAApB;;AACF,aAAK,OAAL;AACE,iBAAOJ,aAAa,CAAC;AAAEK,YAAAA,EAAE,EAAE;AAAN,WAAD,EAAsC;AAAEE,YAAAA,KAAK,EAAEH;AAAT,WAAtC,CAApB;;AACF;AACE,iBAAO,IAAP;AANJ;AAQD,K;;UAEDI,a,GAAgB,YAAM;AACpB,UAAMC,MAAM,GAAG,MAAKR,KAAL,CAAWS,IAAX,IAAmB,IAAlC;AACA,UAAMC,KAAK,GAAG,MAAKV,KAAL,CAAWU,KAAX,IAAoBf,UAAU,EAA5C;AAFoB,UAGZQ,OAHY,GAGA,MAAKH,KAHL,CAGZG,OAHY,EAKpB;;AACA,UAAMQ,GAAG,GAAG,MAAKb,aAAL,CAAmBK,OAAnB,CAAZ;;AACA,UAAI,CAACQ,GAAL,EAAU;;AAEV,YAAKX,KAAL,CAAWY,SAAX,CAAqB,CAAC;AAAEC,QAAAA,IAAI,EAAEF,GAAR;AAAaH,QAAAA,MAAM,EAANA,MAAb;AAAqBE,QAAAA,KAAK,EAALA,KAArB;AAA4BI,QAAAA,IAAI,EAAE;AAAlC,OAAD,CAArB;;AAEApB,MAAAA,WAAW,CAACqB,OAAZ,CACE;AAAEC,QAAAA,MAAM,EAAEN,KAAV;AAAiBO,QAAAA,WAAW,EAAEN;AAA9B,OADF,EAEE,UAAAO,QAAQ,EAAI;AACV;AACA,YAAIA,QAAQ,IAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAlC,EAAoC;AAClC,gBAAKnB,KAAL,CAAWY,SAAX,CAAqBM,QAArB;AACD;AACF,OAPH,EAQE,UAAAE,KAAK,EAAI;AACPC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,OAVH;AAYD,K;;;;;;;WAED,kBAAS;AAAA,UACCb,aADD,GACkC,IADlC,CACCA,aADD;AAAA,UACgBT,aADhB,GACkC,IADlC,CACgBA,aADhB;AAEP,UAAMwB,OAAO,GAAGxB,aAAa,EAA7B;AACA,aACE;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAA+B,QAAA,OAAO,EAAES,aAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOe,OAAP,CADF,CADF,CADF,CADF;AASD;;;;EAnDyB/B,S;;AAsD5B,eAAeC,OAAO,CACpB,UAAA+B,KAAK;AAAA,SAAK,EAAL;AAAA,CADe,EAEpB;AACEX,EAAAA,SAAS,EAAEhB,cAAc,CAACgB;AAD5B,CAFoB,CAAP,CAKbnB,UAAU,CAACI,aAAD,CALG,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { injectIntl } from \"react-intl\";\nimport * as ChatbotUtil from \"../../../../../utils/ChatbotUtil\";\nimport { getGuestId } from \"../../../../../../../Common/Util/GuestIdUtil\";\nimport * as chatbotActions from \"../../../../../Store/Reducer/chatbot\";\n\nclass ChatbotButton extends Component {\n  createMessage = () => {\n    const { formatMessage } = this.props.intl;\n    const { questionType, keyword } = this.props;\n    switch (questionType) {\n      case \"api\":\n        return formatMessage({ id: \"ID_CHATBOT_API_QUESTION\" }, { api: keyword });\n      case \"class\":\n        return formatMessage({ id: \"ID_CHATBOT_CLASS_QUESTION\" }, { class: keyword });\n      default:\n        return null;\n    }\n  }\n\n  handleOnClick = () => {\n    const sender = this.props.name || null;\n    const email = this.props.email || getGuestId();\n    const { keyword } = this.props;\n\n    //create msg\n    const msg = this.createMessage(keyword);\n    if (!msg) return;\n\n    this.props.addNewMsg([{ text: msg, sender, email, type: \"USER_QUESTION\" }]);\n\n    ChatbotUtil.sendMsg(\n      { userId: email, description: msg },\n      messages => {\n        //add messages\n        if (messages && messages.length > 0){\n          this.props.addNewMsg(messages);\n        }\n      },\n      error => {\n        console.error(error);\n      }\n    )\n  }\n\n  render() {\n    const { handleOnClick, createMessage } = this;\n    const message = createMessage();\n    return (\n      <div className=\"ChatbotButtonsWrapper\">\n        <div className=\"ChatbotButtons\">\n          <div className=\"ChatbotButton\" onClick={handleOnClick}>\n            <span>{message}</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  state => ({}),\n  {\n    addNewMsg: chatbotActions.addNewMsg\n  }\n)(injectIntl(ChatbotButton));\n"]},"metadata":{},"sourceType":"module"}