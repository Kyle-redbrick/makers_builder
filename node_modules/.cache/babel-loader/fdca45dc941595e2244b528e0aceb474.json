{"ast":null,"code":"import _toConsumableArray from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport stringify from \"json-stringify-safe\";\nexport var SPRITE_ADDED = \"SPRITE_ADDED\";\nexport var CODE_ADDED = \"CODE_ADDED\";\nexport var isValidate = function isValidate(type, state, data) {\n  switch (type) {\n    case SPRITE_ADDED:\n      return checkSpriteAdded(state, data);\n\n    case CODE_ADDED:\n      return checkCodeAdded(state, data);\n\n    default:\n      break;\n  }\n\n  return true;\n};\n\nvar checkSpriteAdded = function checkSpriteAdded(state, spriteNames) {\n  var addedSpriteNames = [];\n  var missingSpriteNames = [];\n\n  for (var i = 0; i < state.sceneIds.length; i++) {\n    var sceneId = state.sceneIds[i];\n    var scene = state.scenes[sceneId];\n    var spriteIds = scene.spriteIds;\n    addedSpriteNames = [].concat(_toConsumableArray(addedSpriteNames), _toConsumableArray(spriteIds));\n  }\n\n  for (var _i = 0; _i < spriteNames.length; _i++) {\n    if (addedSpriteNames.indexOf(spriteNames[_i]) === -1) {\n      missingSpriteNames.push(spriteNames[_i]);\n    }\n  }\n\n  return {\n    isValid: missingSpriteNames.length === 0,\n    result: missingSpriteNames\n  };\n};\n\nvar checkCodeAdded = function checkCodeAdded(state, data) {\n  var spriteId;\n\n  for (var i = 0; i < state.sceneIds.length; i++) {\n    var sceneId = state.sceneIds[i];\n    var scene = state.scenes[sceneId];\n    var spriteIds = scene.spriteIds;\n    var sprites = scene.sprites;\n\n    for (var j = 0; j < spriteIds.length; j++) {\n      spriteId = spriteIds[j];\n      var sprite = sprites[spriteId];\n      var code = sprite.code;\n\n      if (data.spriteName === spriteId) {\n        return checkCode(data.code, code);\n      }\n    }\n  }\n\n  function checkCode(_code, userCode) {\n    var code = JSON.parse(stringify(_code));\n    var originalCode = JSON.parse(stringify(code));\n\n    var acorn = require(\"acorn\");\n\n    var tokens = [];\n    var ast;\n\n    try {\n      ast = acorn.parse(userCode, {\n        onToken: tokens,\n        ecmaVersion: 8\n      });\n    } catch (e) {\n      return {\n        isValid: false,\n        result: {\n          code: [],\n          spriteName: spriteId\n        }\n      };\n    }\n\n    var traverse = require(\"ast-traverse\");\n\n    var indent = 0;\n    var currentCode = undefined;\n    var currentIndent = 0;\n    traverse(ast, {\n      pre: function pre(node) {\n        // console.log(\n        //   Array(indent + 1).join(\" \") + node.type,\n        //   prop,\n        //   node.name,\n        //   node.value,\n        //   indent\n        // );\n        indent++;\n\n        if (currentCode) {\n          for (var _i2 = currentCode.children.length - 1; _i2 >= 0; _i2--) {\n            var c = currentCode.children[_i2];\n\n            if (c.name === node.name) {\n              currentCode.children.splice(_i2, 1);\n            }\n          }\n        }\n\n        for (var _i3 = code.length - 1; _i3 >= 0; _i3--) {\n          var _c = code[_i3];\n\n          if (_c.name === node.name) {\n            if (_c.children.length === 0) {\n              code.splice(_i3, 1);\n            } else {\n              currentIndent = indent;\n              currentCode = _c;\n            }\n          }\n        }\n\n        if (indent < currentIndent) {\n          currentIndent = 0;\n          currentCode = undefined;\n        }\n      },\n      post: function post() {\n        indent--;\n      }\n    });\n\n    var _loop = function _loop(_i4) {\n      if (code[_i4].children.length === 0) {\n        var original = originalCode.filter(function (o) {\n          return o.name === code[_i4].name;\n        });\n\n        if (original[0]) {\n          if (original[0].children.length > 0) {\n            code.splice(_i4, 1);\n          }\n        }\n      }\n    };\n\n    for (var _i4 = code.length - 1; _i4 >= 0; _i4--) {\n      _loop(_i4);\n    }\n\n    return {\n      isValid: code.length === 0,\n      result: {\n        code: code,\n        spriteName: spriteId\n      }\n    };\n  }\n\n  return {\n    isValid: false,\n    result: {\n      code: [],\n      spriteName: spriteId\n    }\n  };\n};","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/utils/ConditionCheckUtil.js"],"names":["stringify","SPRITE_ADDED","CODE_ADDED","isValidate","type","state","data","checkSpriteAdded","checkCodeAdded","spriteNames","addedSpriteNames","missingSpriteNames","i","sceneIds","length","sceneId","scene","scenes","spriteIds","indexOf","push","isValid","result","spriteId","sprites","j","sprite","code","spriteName","checkCode","_code","userCode","JSON","parse","originalCode","acorn","require","tokens","ast","onToken","ecmaVersion","e","traverse","indent","currentCode","undefined","currentIndent","pre","node","children","c","name","splice","post","original","filter","o"],"mappings":"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","sourcesContent":["import stringify from \"json-stringify-safe\";\nexport const SPRITE_ADDED = \"SPRITE_ADDED\";\nexport const CODE_ADDED = \"CODE_ADDED\";\n\nexport const isValidate = (type, state, data) => {\n  switch (type) {\n    case SPRITE_ADDED:\n      return checkSpriteAdded(state, data);\n    case CODE_ADDED:\n      return checkCodeAdded(state, data);\n    default:\n      break;\n  }\n  return true;\n};\n\nconst checkSpriteAdded = (state, spriteNames) => {\n  let addedSpriteNames = [];\n  let missingSpriteNames = [];\n  for (let i = 0; i < state.sceneIds.length; i++) {\n    const sceneId = state.sceneIds[i];\n    const scene = state.scenes[sceneId];\n    const spriteIds = scene.spriteIds;\n    addedSpriteNames = [...addedSpriteNames, ...spriteIds];\n  }\n\n  for (let i = 0; i < spriteNames.length; i++) {\n    if (addedSpriteNames.indexOf(spriteNames[i]) === -1) {\n      missingSpriteNames.push(spriteNames[i]);\n    }\n  }\n\n  return {\n    isValid: missingSpriteNames.length === 0,\n    result: missingSpriteNames\n  };\n};\n\nconst checkCodeAdded = (state, data) => {\n  let spriteId;\n  for (let i = 0; i < state.sceneIds.length; i++) {\n    const sceneId = state.sceneIds[i];\n    const scene = state.scenes[sceneId];\n    const spriteIds = scene.spriteIds;\n    const sprites = scene.sprites;\n    for (let j = 0; j < spriteIds.length; j++) {\n      spriteId = spriteIds[j];\n      const sprite = sprites[spriteId];\n      const code = sprite.code;\n      if (data.spriteName === spriteId) {\n        return checkCode(data.code, code);\n      }\n    }\n  }\n\n  function checkCode(_code, userCode) {\n    let code = JSON.parse(stringify(_code));\n    const originalCode = JSON.parse(stringify(code));\n    const acorn = require(\"acorn\");\n    let tokens = [];\n    let ast;\n    try {\n      ast = acorn.parse(userCode, {\n        onToken: tokens,\n        ecmaVersion: 8\n      });\n    } catch (e) {\n      return {\n        isValid: false,\n        result: { code: [], spriteName: spriteId }\n      };\n    }\n    const traverse = require(\"ast-traverse\");\n    let indent = 0;\n    let currentCode = undefined;\n    let currentIndent = 0;\n    traverse(ast, {\n      pre: function(node) {\n        // console.log(\n        //   Array(indent + 1).join(\" \") + node.type,\n        //   prop,\n        //   node.name,\n        //   node.value,\n        //   indent\n        // );\n        indent++;\n\n        if (currentCode) {\n          for (let i = currentCode.children.length - 1; i >= 0; i--) {\n            const c = currentCode.children[i];\n            if (c.name === node.name) {\n              currentCode.children.splice(i, 1);\n            }\n          }\n        }\n\n        for (let i = code.length - 1; i >= 0; i--) {\n          const c = code[i];\n          if (c.name === node.name) {\n            if (c.children.length === 0) {\n              code.splice(i, 1);\n            } else {\n              currentIndent = indent;\n              currentCode = c;\n            }\n          }\n        }\n        if (indent < currentIndent) {\n          currentIndent = 0;\n          currentCode = undefined;\n        }\n      },\n      post: function() {\n        indent--;\n      }\n    });\n    for (let i = code.length - 1; i >= 0; i--) {\n      if (code[i].children.length === 0) {\n        const original = originalCode.filter(o => o.name === code[i].name);\n        if (original[0]) {\n          if (original[0].children.length > 0) {\n            code.splice(i, 1);\n          }\n        }\n      }\n    }\n\n    return {\n      isValid: code.length === 0,\n      result: { code, spriteName: spriteId }\n    };\n  }\n\n  return {\n    isValid: false,\n    result: { code: [], spriteName: spriteId }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}