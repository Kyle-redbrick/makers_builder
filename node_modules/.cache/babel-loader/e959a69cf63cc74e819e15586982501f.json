{"ast":null,"code":"import _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/** @license react-json-editor-ajrm v2.5.13\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport React, { Component } from 'react';\nimport themes from './themes';\nimport { identical, getType } from './mitsuketa';\nimport err from './err';\nimport { format } from './locale';\nimport defaultLocale from './locale/en';\n\nvar JSONInput = /*#__PURE__*/function (_Component) {\n  _inherits(JSONInput, _Component);\n\n  var _super = _createSuper(JSONInput);\n\n  function JSONInput(props) {\n    var _this;\n\n    _classCallCheck(this, JSONInput);\n\n    _this = _super.call(this, props);\n    _this.updateInternalProps = _this.updateInternalProps.bind(_assertThisInitialized(_this));\n    _this.createMarkup = _this.createMarkup.bind(_assertThisInitialized(_this));\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));\n    _this.onBlur = _this.onBlur.bind(_assertThisInitialized(_this));\n    _this.update = _this.update.bind(_assertThisInitialized(_this));\n    _this.getCursorPosition = _this.getCursorPosition.bind(_assertThisInitialized(_this));\n    _this.setCursorPosition = _this.setCursorPosition.bind(_assertThisInitialized(_this));\n    _this.scheduledUpdate = _this.scheduledUpdate.bind(_assertThisInitialized(_this));\n    _this.setUpdateTime = _this.setUpdateTime.bind(_assertThisInitialized(_this));\n    _this.renderLabels = _this.renderLabels.bind(_assertThisInitialized(_this));\n    _this.newSpan = _this.newSpan.bind(_assertThisInitialized(_this));\n    _this.renderErrorMessage = _this.renderErrorMessage.bind(_assertThisInitialized(_this));\n    _this.onScroll = _this.onScroll.bind(_assertThisInitialized(_this));\n    _this.showPlaceholder = _this.showPlaceholder.bind(_assertThisInitialized(_this));\n    _this.tokenize = _this.tokenize.bind(_assertThisInitialized(_this));\n    _this.onKeyPress = _this.onKeyPress.bind(_assertThisInitialized(_this));\n    _this.onKeyDown = _this.onKeyDown.bind(_assertThisInitialized(_this));\n    _this.onPaste = _this.onPaste.bind(_assertThisInitialized(_this));\n    _this.stopEvent = _this.stopEvent.bind(_assertThisInitialized(_this));\n    _this.refContent = null;\n    _this.refLabels = null;\n\n    _this.updateInternalProps();\n\n    _this.renderCount = 1;\n    _this.state = {\n      prevPlaceholder: '',\n      markupText: '',\n      plainText: '',\n      json: '',\n      jsObject: undefined,\n      lines: false,\n      error: false\n    };\n\n    if (!_this.props.locale) {\n      console.warn(\"[react-json-editor-ajrm - Deprecation Warning] You did not provide a 'locale' prop for your JSON input - This will be required in a future version. English has been set as a default.\");\n    }\n\n    return _this;\n  }\n\n  _createClass(JSONInput, [{\n    key: \"updateInternalProps\",\n    value: function updateInternalProps() {\n      var colors = {},\n          style = {},\n          theme = themes.dark_vscode_tribute;\n      if ('theme' in this.props) if (typeof this.props.theme === 'string') if (this.props.theme in themes) theme = themes[this.props.theme];\n      colors = theme;\n      if ('colors' in this.props) colors = {\n        default: 'default' in this.props.colors ? this.props.colors.default : colors.default,\n        string: 'string' in this.props.colors ? this.props.colors.string : colors.string,\n        number: 'number' in this.props.colors ? this.props.colors.number : colors.number,\n        colon: 'colon' in this.props.colors ? this.props.colors.colon : colors.colon,\n        keys: 'keys' in this.props.colors ? this.props.colors.keys : colors.keys,\n        keys_whiteSpace: 'keys_whiteSpace' in this.props.colors ? this.props.colors.keys_whiteSpace : colors.keys_whiteSpace,\n        primitive: 'primitive' in this.props.colors ? this.props.colors.primitive : colors.primitive,\n        error: 'error' in this.props.colors ? this.props.colors.error : colors.error,\n        background: 'background' in this.props.colors ? this.props.colors.background : colors.background,\n        background_warning: 'background_warning' in this.props.colors ? this.props.colors.background_warning : colors.background_warning\n      };\n      this.colors = colors;\n      if ('style' in this.props) style = {\n        outerBox: 'outerBox' in this.props.style ? this.props.style.outerBox : {},\n        container: 'container' in this.props.style ? this.props.style.container : {},\n        warningBox: 'warningBox' in this.props.style ? this.props.style.warningBox : {},\n        errorMessage: 'errorMessage' in this.props.style ? this.props.style.errorMessage : {},\n        body: 'body' in this.props.style ? this.props.style.body : {},\n        labelColumn: 'labelColumn' in this.props.style ? this.props.style.labelColumn : {},\n        labels: 'labels' in this.props.style ? this.props.style.labels : {},\n        contentBox: 'contentBox' in this.props.style ? this.props.style.contentBox : {}\n      };else style = {\n        outerBox: {},\n        container: {},\n        warningBox: {},\n        errorMessage: {},\n        body: {},\n        labelColumn: {},\n        labels: {},\n        contentBox: {}\n      };\n      this.style = style;\n      this.confirmGood = 'confirmGood' in this.props ? this.props.confirmGood : true;\n      var totalHeight = this.props.height || '610px',\n          totalWidth = this.props.width || '479px';\n      this.totalHeight = totalHeight;\n      this.totalWidth = totalWidth;\n\n      if (!('onKeyPressUpdate' in this.props) || this.props.onKeyPressUpdate) {\n        if (!this.timer) this.timer = setInterval(this.scheduledUpdate, 100);\n      } else if (this.timer) {\n        clearInterval(this.timer);\n        this.timer = false;\n      }\n\n      this.updateTime = false;\n      this.waitAfterKeyPress = 'waitAfterKeyPress' in this.props ? this.props.waitAfterKeyPress : 1000;\n      this.resetConfiguration = 'reset' in this.props ? this.props.reset : false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var id = this.props.id,\n          markupText = this.state.markupText,\n          error = this.props.error || this.state.error,\n          colors = this.colors,\n          style = this.style,\n          confirmGood = this.confirmGood,\n          totalHeight = this.totalHeight,\n          totalWidth = this.totalWidth,\n          hasError = !!this.props.error || (error ? 'token' in error : false);\n      this.renderCount++;\n      return React.createElement(\"div\", {\n        name: \"outer-box\",\n        id: id && id + '-outer-box',\n        style: _objectSpread({\n          display: 'block',\n          overflow: 'none',\n          height: totalHeight,\n          width: totalWidth,\n          margin: 0,\n          boxSizing: 'border-box',\n          position: 'relative'\n        }, style.outerBox)\n      }, confirmGood ? React.createElement(\"div\", {\n        style: {\n          opacity: hasError ? 0 : 1,\n          height: '30px',\n          width: '30px',\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          transform: 'translate(-25%,25%)',\n          pointerEvents: 'none',\n          transitionDuration: '0.2s',\n          transitionTimingFunction: 'cubic-bezier(0, 1, 0.5, 1)'\n        }\n      }, React.createElement(\"svg\", {\n        height: \"30px\",\n        width: \"30px\",\n        viewBox: \"0 0 100 100\"\n      }, React.createElement(\"path\", {\n        fillRule: \"evenodd\",\n        clipRule: \"evenodd\",\n        fill: \"green\",\n        opacity: \"0.85\",\n        d: \"M39.363,79L16,55.49l11.347-11.419L39.694,56.49L72.983,23L84,34.085L39.363,79z\"\n      }))) : void 0, React.createElement(\"div\", {\n        name: \"container\",\n        id: id && id + '-container',\n        style: _objectSpread({\n          display: 'block',\n          height: totalHeight,\n          width: totalWidth,\n          margin: 0,\n          boxSizing: 'border-box',\n          overflow: 'hidden',\n          fontFamily: 'Roboto, sans-serif'\n        }, style.container),\n        onClick: this.onClick\n      }, React.createElement(\"div\", {\n        name: \"warning-box\",\n        id: id && id + '-warning-box',\n        style: _objectSpread({\n          display: 'block',\n          overflow: 'hidden',\n          height: hasError ? '60px' : '0px',\n          width: '100%',\n          margin: 0,\n          backgroundColor: colors.background_warning,\n          transitionDuration: '0.2s',\n          transitionTimingFunction: 'cubic-bezier(0, 1, 0.5, 1)'\n        }, style.warningBox),\n        onClick: this.onClick\n      }, React.createElement(\"span\", {\n        style: {\n          display: 'inline-block',\n          height: '60px',\n          width: '60px',\n          margin: 0,\n          boxSizing: 'border-box',\n          overflow: 'hidden',\n          verticalAlign: 'top',\n          pointerEvents: 'none'\n        },\n        onClick: this.onClick\n      }, React.createElement(\"div\", {\n        style: {\n          position: 'relative',\n          top: 0,\n          left: 0,\n          height: '60px',\n          width: '60px',\n          margin: 0,\n          pointerEvents: 'none'\n        },\n        onClick: this.onClick\n      }, React.createElement(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          pointerEvents: 'none'\n        },\n        onClick: this.onClick\n      }, React.createElement(\"svg\", {\n        height: \"25px\",\n        width: \"25px\",\n        viewBox: \"0 0 100 100\"\n      }, React.createElement(\"path\", {\n        fillRule: \"evenodd\",\n        clipRule: \"evenodd\",\n        fill: \"red\",\n        d: \"M73.9,5.75c0.467-0.467,1.067-0.7,1.8-0.7c0.7,0,1.283,0.233,1.75,0.7l16.8,16.8  c0.467,0.5,0.7,1.084,0.7,1.75c0,0.733-0.233,1.334-0.7,1.801L70.35,50l23.9,23.95c0.5,0.467,0.75,1.066,0.75,1.8  c0,0.667-0.25,1.25-0.75,1.75l-16.8,16.75c-0.534,0.467-1.117,0.7-1.75,0.7s-1.233-0.233-1.8-0.7L50,70.351L26.1,94.25  c-0.567,0.467-1.167,0.7-1.8,0.7c-0.667,0-1.283-0.233-1.85-0.7L5.75,77.5C5.25,77,5,76.417,5,75.75c0-0.733,0.25-1.333,0.75-1.8  L29.65,50L5.75,26.101C5.25,25.667,5,25.066,5,24.3c0-0.666,0.25-1.25,0.75-1.75l16.8-16.8c0.467-0.467,1.05-0.7,1.75-0.7  c0.733,0,1.333,0.233,1.8,0.7L50,29.65L73.9,5.75z\"\n      }))))), React.createElement(\"span\", {\n        style: {\n          display: 'inline-block',\n          height: '60px',\n          width: 'calc(100% - 60px)',\n          margin: 0,\n          overflow: 'hidden',\n          verticalAlign: 'top',\n          position: 'absolute',\n          pointerEvents: 'none'\n        },\n        onClick: this.onClick\n      }, this.renderErrorMessage())), React.createElement(\"div\", {\n        name: \"body\",\n        id: id && id + '-body',\n        style: _objectSpread({\n          display: 'flex',\n          overflow: 'none',\n          height: hasError ? 'calc(100% - 60px)' : '100%',\n          width: '',\n          margin: 0,\n          resize: 'none',\n          fontFamily: 'Roboto Mono, Monaco, monospace',\n          fontSize: '11px',\n          backgroundColor: colors.background,\n          transitionDuration: '0.2s',\n          transitionTimingFunction: 'cubic-bezier(0, 1, 0.5, 1)'\n        }, style.body),\n        onClick: this.onClick\n      }, React.createElement(\"span\", {\n        name: \"labels\",\n        id: id && id + '-labels',\n        ref: function ref(_ref) {\n          return _this2.refLabels = _ref;\n        },\n        style: _objectSpread({\n          display: 'inline-block',\n          boxSizing: 'border-box',\n          verticalAlign: 'top',\n          height: '100%',\n          width: '44px',\n          margin: 0,\n          padding: '5px 0px 5px 10px',\n          overflow: 'hidden',\n          color: '#D4D4D4'\n        }, style.labelColumn),\n        onClick: this.onClick\n      }, this.renderLabels()), React.createElement(\"span\", {\n        id: id,\n        ref: function ref(_ref2) {\n          return _this2.refContent = _ref2;\n        },\n        contentEditable: true,\n        style: _objectSpread({\n          display: 'inline-block',\n          boxSizing: 'border-box',\n          verticalAlign: 'top',\n          height: '100%',\n          width: '',\n          flex: 1,\n          margin: 0,\n          padding: '5px',\n          overflowX: 'hidden',\n          overflowY: 'auto',\n          wordWrap: 'break-word',\n          whiteSpace: 'pre-line',\n          color: '#D4D4D4',\n          outline: 'none'\n        }, style.contentBox),\n        dangerouslySetInnerHTML: this.createMarkup(markupText),\n        onKeyPress: this.onKeyPress,\n        onKeyDown: this.onKeyDown,\n        onClick: this.onClick,\n        onBlur: this.onBlur,\n        onScroll: this.onScroll,\n        onPaste: this.onPaste,\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        autoCapitalize: \"off\",\n        spellCheck: false\n      }))));\n    }\n  }, {\n    key: \"renderErrorMessage\",\n    value: function renderErrorMessage() {\n      var locale = this.props.locale || defaultLocale,\n          error = this.props.error || this.state.error,\n          style = this.style;\n      if (!error) return void 0;\n      return React.createElement(\"p\", {\n        style: _objectSpread({\n          color: 'red',\n          fontSize: '12px',\n          position: 'absolute',\n          width: 'calc(100% - 60px)',\n          height: '60px',\n          boxSizing: 'border-box',\n          margin: 0,\n          padding: 0,\n          paddingRight: '10px',\n          overflowWrap: 'break-word',\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center'\n        }, style.errorMessage)\n      }, format(locale.format, error));\n    }\n  }, {\n    key: \"renderLabels\",\n    value: function renderLabels() {\n      var colors = this.colors,\n          style = this.style,\n          error = this.props.error || this.state.error,\n          errorLine = error ? error.line : -1,\n          lines = this.state.lines ? this.state.lines : 1;\n      var labels = new Array(lines);\n\n      for (var i = 0; i < lines - 1; i++) {\n        labels[i] = i + 1;\n      }\n\n      return labels.map(function (number) {\n        var color = number !== errorLine ? colors.default : 'red';\n        return React.createElement(\"div\", {\n          key: number,\n          style: _objectSpread({}, style.labels, {\n            color: color\n          })\n        }, number);\n      });\n    }\n  }, {\n    key: \"createMarkup\",\n    value: function createMarkup(markupText) {\n      if (markupText === undefined) return {\n        __html: ''\n      };\n      return {\n        __html: '' + markupText\n      };\n    }\n  }, {\n    key: \"newSpan\",\n    value: function newSpan(i, token, depth) {\n      var colors = this.colors,\n          type = token.type,\n          string = token.string;\n      var color = '';\n\n      switch (type) {\n        case 'string':\n        case 'number':\n        case 'primitive':\n        case 'error':\n          color = colors[token.type];\n          break;\n\n        case 'key':\n          if (string === ' ') color = colors.keys_whiteSpace;else color = colors.keys;\n          break;\n\n        case 'symbol':\n          if (string === ':') color = colors.colon;else color = colors.default;\n          break;\n\n        default:\n          color = colors.default;\n          break;\n      }\n\n      if (string.length !== string.replace(/</g, '').replace(/>/g, '').length) string = '<xmp style=display:inline;>' + string + '</xmp>';\n      return '<span' + ' type=\"' + type + '\"' + ' value=\"' + string + '\"' + ' depth=\"' + depth + '\"' + ' style=\"color:' + color + '\"' + '>' + string + '</span>';\n    }\n  }, {\n    key: \"getCursorPosition\",\n    value: function getCursorPosition(countBR) {\n      var _this3 = this;\n\n      /**\r\n       * Need to deprecate countBR\r\n       * It is used to differenciate between good markup render, and aux render when error found\r\n       * Adjustments based on coundBR account for usage of <br> instead of <span> for linebreaks to determine acurate cursor position\r\n       * Find a way to consolidate render styles\r\n       */\n      var isChildOf = function isChildOf(node) {\n        while (node !== null) {\n          if (node === _this3.refContent) return true;\n          node = node.parentNode;\n        }\n\n        return false;\n      };\n\n      var selection = window.getSelection(),\n          charCount = -1,\n          linebreakCount = 0,\n          node;\n\n      if (selection.focusNode && isChildOf(selection.focusNode)) {\n        node = selection.focusNode;\n        charCount = selection.focusOffset;\n\n        while (node) {\n          if (node === this.refContent) break;\n\n          if (node.previousSibling) {\n            node = node.previousSibling;\n            if (countBR) if (node.nodeName === 'BR') linebreakCount++;\n            charCount += node.textContent.length;\n          } else {\n            node = node.parentNode;\n            if (node === null) break;\n          }\n        }\n      }\n\n      return charCount + linebreakCount;\n    }\n  }, {\n    key: \"setCursorPosition\",\n    value: function setCursorPosition(nextPosition) {\n      var _this4 = this;\n\n      if ([false, null, undefined].indexOf(nextPosition) > -1) return;\n\n      var createRange = function createRange(node, chars, range) {\n        if (!range) {\n          range = document.createRange();\n          range.selectNode(node);\n          range.setStart(node, 0);\n        }\n\n        if (chars.count === 0) {\n          range.setEnd(node, chars.count);\n        } else if (node && chars.count > 0) {\n          if (node.nodeType === Node.TEXT_NODE) {\n            if (node.textContent.length < chars.count) chars.count -= node.textContent.length;else {\n              range.setEnd(node, chars.count);\n              chars.count = 0;\n            }\n          } else for (var lp = 0; lp < node.childNodes.length; lp++) {\n            range = createRange(node.childNodes[lp], chars, range);\n            if (chars.count === 0) break;\n          }\n        }\n\n        return range;\n      };\n\n      var setPosition = function setPosition(chars) {\n        if (chars < 0) return;\n        var selection = window.getSelection(),\n            range = createRange(_this4.refContent, {\n          count: chars\n        });\n        if (!range) return;\n        range.collapse(false);\n        selection.removeAllRanges();\n        selection.addRange(range);\n      };\n\n      if (nextPosition > 0) setPosition(nextPosition);else this.refContent.focus();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var cursorOffset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var updateCursorPosition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var container = this.refContent,\n          data = this.tokenize(container);\n      if ('onChange' in this.props) this.props.onChange({\n        plainText: data.indented,\n        markupText: data.markup,\n        json: data.json,\n        jsObject: data.jsObject,\n        lines: data.lines,\n        error: data.error\n      });\n      var cursorPosition = this.getCursorPosition(data.error) + cursorOffset;\n      this.setState({\n        plainText: data.indented,\n        markupText: data.markup,\n        json: data.json,\n        jsObject: data.jsObject,\n        lines: data.lines,\n        error: data.error\n      });\n      this.updateTime = false;\n      if (updateCursorPosition) this.setCursorPosition(cursorPosition);\n    }\n  }, {\n    key: \"scheduledUpdate\",\n    value: function scheduledUpdate() {\n      if ('onKeyPressUpdate' in this.props) if (this.props.onKeyPressUpdate === false) return;\n      var updateTime = this.updateTime;\n      if (updateTime === false) return;\n      if (updateTime > new Date().getTime()) return;\n      this.update();\n    }\n  }, {\n    key: \"setUpdateTime\",\n    value: function setUpdateTime() {\n      if ('onKeyPressUpdate' in this.props) if (this.props.onKeyPressUpdate === false) return;\n      this.updateTime = new Date().getTime() + this.waitAfterKeyPress;\n    }\n  }, {\n    key: \"stopEvent\",\n    value: function stopEvent(event) {\n      if (!event) return;\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }, {\n    key: \"onKeyPress\",\n    value: function onKeyPress(event) {\n      var ctrlOrMetaIsPressed = event.ctrlKey || event.metaKey;\n      if (this.props.viewOnly && !ctrlOrMetaIsPressed) this.stopEvent(event);\n      if (!ctrlOrMetaIsPressed) this.setUpdateTime();\n    }\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(event) {\n      var viewOnly = !!this.props.viewOnly;\n      var ctrlOrMetaIsPressed = event.ctrlKey || event.metaKey;\n\n      switch (event.key) {\n        case 'Tab':\n          this.stopEvent(event);\n          if (viewOnly) break;\n          document.execCommand(\"insertText\", false, \"  \");\n          this.setUpdateTime();\n          break;\n\n        case 'Backspace':\n        case 'Delete':\n          if (viewOnly) this.stopEvent(event);\n          this.setUpdateTime();\n          break;\n\n        case 'ArrowLeft':\n        case 'ArrowRight':\n        case 'ArrowUp':\n        case 'ArrowDown':\n          this.setUpdateTime();\n          break;\n\n        case 'a':\n        case 'c':\n          if (viewOnly && !ctrlOrMetaIsPressed) this.stopEvent(event);\n          break;\n\n        default:\n          if (viewOnly) this.stopEvent(event);\n          break;\n      }\n    }\n  }, {\n    key: \"onPaste\",\n    value: function onPaste(event) {\n      if (this.props.viewOnly) {\n        this.stopEvent(event);\n      } else {\n        event.preventDefault();\n        var text = event.clipboardData.getData('text/plain');\n        document.execCommand('insertText', false, text);\n      }\n\n      this.update();\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick() {\n      if ('viewOnly' in this.props) if (this.props.viewOnly) return;\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      if ('viewOnly' in this.props) if (this.props.viewOnly) return;\n      var container = this.refContent,\n          data = this.tokenize(container);\n      if ('onBlur' in this.props) this.props.onBlur({\n        plainText: data.indented,\n        markupText: data.markup,\n        json: data.json,\n        jsObject: data.jsObject,\n        lines: data.lines,\n        error: data.error\n      });\n    }\n  }, {\n    key: \"onScroll\",\n    value: function onScroll(event) {\n      this.refLabels.scrollTop = event.target.scrollTop;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.updateInternalProps();\n      this.showPlaceholder();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.showPlaceholder();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.timer) clearInterval(this.timer);\n    }\n  }, {\n    key: \"showPlaceholder\",\n    value: function showPlaceholder() {\n      var placeholderDoesNotExist = !('placeholder' in this.props);\n      if (placeholderDoesNotExist) return;\n      var placeholder = this.props.placeholder;\n      var placeholderHasEmptyValues = [undefined, null].indexOf(placeholder) > -1;\n      if (placeholderHasEmptyValues) return;\n      var _this$state = this.state,\n          prevPlaceholder = _this$state.prevPlaceholder,\n          jsObject = _this$state.jsObject;\n      var resetConfiguration = this.resetConfiguration;\n      var placeholderDataType = getType(placeholder);\n      var unexpectedDataType = ['object', 'array'].indexOf(placeholderDataType) === -1;\n      if (unexpectedDataType) err.throwError('showPlaceholder', 'placeholder', 'either an object or an array');\n      var samePlaceholderValues = identical(placeholder, prevPlaceholder); // Component will always re-render when new placeholder value is any different from previous placeholder value.\n\n      var componentShouldUpdate = !samePlaceholderValues;\n\n      if (!componentShouldUpdate) {\n        if (resetConfiguration) {\n          /**\r\n           * If 'reset' property is set true or is truthy,\r\n           * any difference between placeholder and current value\r\n           * should trigger component re-render\r\n           */\n          if (jsObject !== undefined) componentShouldUpdate = !identical(placeholder, jsObject);\n        }\n      }\n\n      if (!componentShouldUpdate) return;\n      var data = this.tokenize(placeholder);\n      this.setState({\n        prevPlaceholder: placeholder,\n        plainText: data.indentation,\n        markupText: data.markup,\n        lines: data.lines,\n        error: data.error\n      });\n    }\n  }, {\n    key: \"tokenize\",\n    value: function tokenize(something) {\n      if (typeof something !== 'object') return console.error('tokenize() expects object type properties only. Got \\'' + typeof something + '\\' type instead.');\n      var locale = this.props.locale || defaultLocale;\n      var newSpan = this.newSpan;\n      /**\r\n       *     DOM NODE || ONBLUR OR UPDATE\r\n       */\n\n      if ('nodeType' in something) {\n        var quarkize = function quarkize(text) {\n          var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n          var buffer = {\n            active: false,\n            string: '',\n            number: '',\n            symbol: '',\n            space: '',\n            delimiter: '',\n            quarks: []\n          };\n\n          function pushAndStore(char, type) {\n            switch (type) {\n              case 'symbol':\n              case 'delimiter':\n                if (buffer.active) buffer.quarks.push({\n                  string: buffer[buffer.active],\n                  type: prefix + '-' + buffer.active\n                });\n                buffer[buffer.active] = '';\n                buffer.active = type;\n                buffer[buffer.active] = char;\n                break;\n\n              default:\n                if (type !== buffer.active || [buffer.string, char].indexOf('\\n') > -1) {\n                  if (buffer.active) buffer.quarks.push({\n                    string: buffer[buffer.active],\n                    type: prefix + '-' + buffer.active\n                  });\n                  buffer[buffer.active] = '';\n                  buffer.active = type;\n                  buffer[buffer.active] = char;\n                } else buffer[type] += char;\n\n                break;\n            }\n          }\n\n          function finalPush() {\n            if (buffer.active) {\n              buffer.quarks.push({\n                string: buffer[buffer.active],\n                type: prefix + '-' + buffer.active\n              });\n              buffer[buffer.active] = '';\n              buffer.active = false;\n            }\n          }\n\n          for (var i = 0; i < text.length; i++) {\n            var char = text.charAt(i);\n\n            switch (char) {\n              case '\"':\n              case \"'\":\n                pushAndStore(char, 'delimiter');\n                break;\n\n              case ' ':\n              case \"\\xA0\":\n                pushAndStore(char, 'space');\n                break;\n\n              case '{':\n              case '}':\n              case '[':\n              case ']':\n              case ':':\n              case ',':\n                pushAndStore(char, 'symbol');\n                break;\n\n              case '0':\n              case '1':\n              case '2':\n              case '3':\n              case '4':\n              case '5':\n              case '6':\n              case '7':\n              case '8':\n              case '9':\n                if (buffer.active === 'string') pushAndStore(char, 'string');else pushAndStore(char, 'number');\n                break;\n\n              case '-':\n                if (i < text.length - 1) if ('0123456789'.indexOf(text.charAt(i + 1)) > -1) {\n                  pushAndStore(char, 'number');\n                  break;\n                }\n\n              case '.':\n                if (i < text.length - 1 && i > 0) if ('0123456789'.indexOf(text.charAt(i + 1)) > -1 && '0123456789'.indexOf(text.charAt(i - 1)) > -1) {\n                  pushAndStore(char, 'number');\n                  break;\n                }\n\n              default:\n                pushAndStore(char, 'string');\n                break;\n            }\n          }\n\n          finalPush();\n          return buffer.quarks;\n        };\n\n        var validToken = function validToken(string, type) {\n          var quotes = '\\'\"';\n          var firstChar = '',\n              lastChar = '',\n              quoteType = false;\n\n          switch (type) {\n            case 'primitive':\n              if (['true', 'false', 'null', 'undefined'].indexOf(string) === -1) return false;\n              break;\n\n            case 'string':\n              if (string.length < 2) return false;\n              firstChar = string.charAt(0), lastChar = string.charAt(string.length - 1), quoteType = quotes.indexOf(firstChar);\n              if (quoteType === -1) return false;\n              if (firstChar !== lastChar) return false;\n\n              for (var i = 0; i < string.length; i++) {\n                if (i > 0 && i < string.length - 1) if (string.charAt(i) === quotes[quoteType]) if (string.charAt(i - 1) !== '\\\\') return false;\n              }\n\n              break;\n\n            case 'key':\n              if (string.length === 0) return false;\n              firstChar = string.charAt(0), lastChar = string.charAt(string.length - 1), quoteType = quotes.indexOf(firstChar);\n\n              if (quoteType > -1) {\n                if (string.length === 1) return false;\n                if (firstChar !== lastChar) return false;\n\n                for (var i = 0; i < string.length; i++) {\n                  if (i > 0 && i < string.length - 1) if (string.charAt(i) === quotes[quoteType]) if (string.charAt(i - 1) !== '\\\\') return false;\n                }\n              } else {\n                var nonAlphanumeric = '\\'\"`.,:;{}[]&<>=~*%\\\\|/-+!?@^ \\xa0';\n\n                for (var i = 0; i < nonAlphanumeric.length; i++) {\n                  var nonAlpha = nonAlphanumeric.charAt(i);\n                  if (string.indexOf(nonAlpha) > -1) return false;\n                }\n              }\n\n              break;\n\n            case 'number':\n              for (var i = 0; i < string.length; i++) {\n                if ('0123456789'.indexOf(string.charAt(i)) === -1) if (i === 0) {\n                  if ('-' !== string.charAt(0)) return false;\n                } else if ('.' !== string.charAt(i)) return false;\n              }\n\n              break;\n\n            case 'symbol':\n              if (string.length > 1) return false;\n              if ('{[:]},'.indexOf(string) === -1) return false;\n              break;\n\n            case 'colon':\n              if (string.length > 1) return false;\n              if (':' !== string) return false;\n              break;\n\n            default:\n              return true;\n              break;\n          }\n\n          return true;\n        };\n\n        var tokenFollowed = function tokenFollowed() {\n          var last = buffer.tokens_normalize.length - 1;\n          if (last < 1) return false;\n\n          for (var i = last; i >= 0; i--) {\n            var previousToken = buffer.tokens_normalize[i];\n\n            switch (previousToken.type) {\n              case 'space':\n              case 'linebreak':\n                break;\n\n              default:\n                return previousToken;\n                break;\n            }\n          }\n\n          return false;\n        };\n\n        var setError = function setError(tokenID, reason) {\n          var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n          error = {\n            token: tokenID,\n            line: line,\n            reason: reason\n          };\n          buffer.tokens_merge[tokenID + offset].type = 'error';\n        };\n\n        var followedBySymbol = function followedBySymbol(tokenID, options) {\n          if (tokenID === undefined) console.error('tokenID argument must be an integer.');\n          if (options === undefined) console.error('options argument must be an array.');\n          if (tokenID === buffer.tokens_merge.length - 1) return false;\n\n          for (var i = tokenID + 1; i < buffer.tokens_merge.length; i++) {\n            var _nextToken = buffer.tokens_merge[i];\n\n            switch (_nextToken.type) {\n              case 'space':\n              case 'linebreak':\n                break;\n\n              case 'symbol':\n              case 'colon':\n                if (options.indexOf(_nextToken.string) > -1) return i;else return false;\n                break;\n\n              default:\n                return false;\n                break;\n            }\n          }\n\n          return false;\n        };\n\n        var followsSymbol = function followsSymbol(tokenID, options) {\n          if (tokenID === undefined) console.error('tokenID argument must be an integer.');\n          if (options === undefined) console.error('options argument must be an array.');\n          if (tokenID === 0) return false;\n\n          for (var i = tokenID - 1; i >= 0; i--) {\n            var _previousToken = buffer.tokens_merge[i];\n\n            switch (_previousToken.type) {\n              case 'space':\n              case 'linebreak':\n                break;\n\n              case 'symbol':\n              case 'colon':\n                if (options.indexOf(_previousToken.string) > -1) return true;\n                return false;\n                break;\n\n              default:\n                return false;\n                break;\n            }\n          }\n\n          return false;\n        };\n\n        var typeFollowed = function typeFollowed(tokenID) {\n          if (tokenID === undefined) console.error('tokenID argument must be an integer.');\n          if (tokenID === 0) return false;\n\n          for (var i = tokenID - 1; i >= 0; i--) {\n            var _previousToken2 = buffer.tokens_merge[i];\n\n            switch (_previousToken2.type) {\n              case 'space':\n              case 'linebreak':\n                break;\n\n              default:\n                return _previousToken2.type;\n                break;\n            }\n          }\n\n          return false;\n        };\n\n        var newIndent = function newIndent() {\n          var space = [];\n\n          for (var i = 0; i < _depth * 2; i++) {\n            space.push('&nbsp;');\n          }\n\n          return space.join('');\n        };\n\n        var newLineBreak = function newLineBreak() {\n          var byPass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n          _line++;\n\n          if (_depth > 0 || byPass) {\n            return '<br>';\n          }\n\n          return '';\n        };\n\n        var newLineBreakAndIndent = function newLineBreakAndIndent() {\n          var byPass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n          return newLineBreak(byPass) + newIndent();\n        };\n\n        var containerNode = something.cloneNode(true),\n            hasChildren = containerNode.hasChildNodes();\n        if (!hasChildren) return '';\n        var children = containerNode.childNodes;\n        var buffer = {\n          tokens_unknown: [],\n          tokens_proto: [],\n          tokens_split: [],\n          tokens_fallback: [],\n          tokens_normalize: [],\n          tokens_merge: [],\n          tokens_plainText: '',\n          indented: '',\n          json: '',\n          jsObject: undefined,\n          markup: ''\n        };\n\n        for (var i = 0; i < children.length; i++) {\n          var child = children[i];\n          var info = {};\n\n          switch (child.nodeName) {\n            case 'SPAN':\n              info = {\n                string: child.textContent,\n                type: child.attributes.type.textContent\n              };\n              buffer.tokens_unknown.push(info);\n              break;\n\n            case 'DIV':\n              buffer.tokens_unknown.push({\n                string: child.textContent,\n                type: 'unknown'\n              });\n              break;\n\n            case 'BR':\n              if (child.textContent === '') buffer.tokens_unknown.push({\n                string: '\\n',\n                type: 'unknown'\n              });\n              break;\n\n            case '#text':\n              buffer.tokens_unknown.push({\n                string: child.wholeText,\n                type: 'unknown'\n              });\n              break;\n\n            case 'FONT':\n              buffer.tokens_unknown.push({\n                string: child.textContent,\n                type: 'unknown'\n              });\n              break;\n\n            default:\n              console.error('Unrecognized node:', {\n                child: child\n              });\n              break;\n          }\n        }\n\n        for (var i = 0; i < buffer.tokens_unknown.length; i++) {\n          var token = buffer.tokens_unknown[i];\n          buffer.tokens_proto = buffer.tokens_proto.concat(quarkize(token.string, 'proto'));\n        }\n\n        for (var i = 0; i < buffer.tokens_proto.length; i++) {\n          var _token = buffer.tokens_proto[i];\n\n          if (_token.type.indexOf('proto') === -1) {\n            if (!validToken(_token.string, _token.type)) {\n              buffer.tokens_split = buffer.tokens_split.concat(quarkize(_token.string, 'split'));\n            } else buffer.tokens_split.push(_token);\n          } else buffer.tokens_split.push(_token);\n        }\n\n        for (var i = 0; i < buffer.tokens_split.length; i++) {\n          var _token2 = buffer.tokens_split[i];\n          var type = _token2.type,\n              string = _token2.string,\n              length = string.length,\n              fallback = [];\n\n          if (type.indexOf('-') > -1) {\n            type = type.slice(type.indexOf('-') + 1);\n            if (type !== 'string') fallback.push('string');\n            fallback.push('key');\n            fallback.push('error');\n          }\n\n          var tokul = {\n            string: string,\n            length: length,\n            type: type,\n            fallback: fallback\n          };\n          buffer.tokens_fallback.push(tokul);\n        }\n\n        var buffer2 = {\n          brackets: [],\n          stringOpen: false,\n          isValue: false\n        };\n\n        for (var i = 0; i < buffer.tokens_fallback.length; i++) {\n          var _token3 = buffer.tokens_fallback[i];\n          var _type2 = _token3.type,\n              _string2 = _token3.string;\n          var normalToken = {\n            type: _type2,\n            string: _string2\n          };\n\n          switch (_type2) {\n            case 'symbol':\n            case 'colon':\n              if (buffer2.stringOpen) {\n                if (buffer2.isValue) normalToken.type = 'string';else normalToken.type = 'key';\n                break;\n              }\n\n              switch (_string2) {\n                case '[':\n                case '{':\n                  buffer2.brackets.push(_string2);\n                  buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === '[';\n                  break;\n\n                case ']':\n                case '}':\n                  buffer2.brackets.pop();\n                  buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === '[';\n                  break;\n\n                case ',':\n                  if (tokenFollowed().type === 'colon') break;\n                  buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === '[';\n                  break;\n\n                case ':':\n                  normalToken.type = 'colon';\n                  buffer2.isValue = true;\n                  break;\n              }\n\n              break;\n\n            case 'delimiter':\n              if (buffer2.isValue) normalToken.type = 'string';else normalToken.type = 'key';\n\n              if (!buffer2.stringOpen) {\n                buffer2.stringOpen = _string2;\n                break;\n              }\n\n              if (i > 0) {\n                var previousToken = buffer.tokens_fallback[i - 1],\n                    _string = previousToken.string,\n                    _type = previousToken.type,\n                    _char = _string.charAt(_string.length - 1);\n\n                if (_type === 'string' && _char === '\\\\') break;\n              }\n\n              if (buffer2.stringOpen === _string2) {\n                buffer2.stringOpen = false;\n                break;\n              }\n\n              break;\n\n            case 'primitive':\n            case 'string':\n              if (['false', 'true', 'null', 'undefined'].indexOf(_string2) > -1) {\n                var lastIndex = buffer.tokens_normalize.length - 1;\n\n                if (lastIndex >= 0) {\n                  if (buffer.tokens_normalize[lastIndex].type !== 'string') {\n                    normalToken.type = 'primitive';\n                    break;\n                  }\n\n                  normalToken.type = 'string';\n                  break;\n                }\n\n                normalToken.type = 'primitive';\n                break;\n              }\n\n              if (_string2 === '\\n') if (!buffer2.stringOpen) {\n                normalToken.type = 'linebreak';\n                break;\n              }\n              if (buffer2.isValue) normalToken.type = 'string';else normalToken.type = 'key';\n              break;\n\n            case 'space':\n              if (buffer2.stringOpen) if (buffer2.isValue) normalToken.type = 'string';else normalToken.type = 'key';\n              break;\n\n            case 'number':\n              if (buffer2.stringOpen) if (buffer2.isValue) normalToken.type = 'string';else normalToken.type = 'key';\n              break;\n\n            default:\n              break;\n          }\n\n          buffer.tokens_normalize.push(normalToken);\n        }\n\n        for (var i = 0; i < buffer.tokens_normalize.length; i++) {\n          var _token4 = buffer.tokens_normalize[i];\n          var mergedToken = {\n            string: _token4.string,\n            type: _token4.type,\n            tokens: [i]\n          };\n          if (['symbol', 'colon'].indexOf(_token4.type) === -1) if (i + 1 < buffer.tokens_normalize.length) {\n            var count = 0;\n\n            for (var u = i + 1; u < buffer.tokens_normalize.length; u++) {\n              var nextToken = buffer.tokens_normalize[u];\n              if (_token4.type !== nextToken.type) break;\n              mergedToken.string += nextToken.string;\n              mergedToken.tokens.push(u);\n              count++;\n            }\n\n            i += count;\n          }\n          buffer.tokens_merge.push(mergedToken);\n        }\n\n        var quotes = '\\'\"',\n            alphanumeric = 'abcdefghijklmnopqrstuvwxyz' + 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + '0123456789' + '_$';\n        var error = false,\n            line = buffer.tokens_merge.length > 0 ? 1 : 0;\n        buffer2 = {\n          brackets: [],\n          stringOpen: false,\n          isValue: false\n        };\n        var bracketList = [];\n\n        for (var i = 0; i < buffer.tokens_merge.length; i++) {\n          if (error) break;\n          var _token5 = buffer.tokens_merge[i],\n              _string3 = _token5.string,\n              _type3 = _token5.type,\n              found = false;\n\n          switch (_type3) {\n            case 'space':\n              break;\n\n            case 'linebreak':\n              line++;\n              break;\n\n            case 'symbol':\n              switch (_string3) {\n                case '{':\n                case '[':\n                  found = followsSymbol(i, ['}', ']']);\n\n                  if (found) {\n                    setError(i, format(locale.invalidToken.tokenSequence.prohibited, {\n                      firstToken: buffer.tokens_merge[found].string,\n                      secondToken: _string3\n                    }));\n                    break;\n                  }\n\n                  if (_string3 === '[' && i > 0) if (!followsSymbol(i, [':', '[', ','])) {\n                    setError(i, format(locale.invalidToken.tokenSequence.permitted, {\n                      firstToken: \"[\",\n                      secondToken: [\":\", \"[\", \",\"]\n                    }));\n                    break;\n                  }\n                  if (_string3 === '{') if (followsSymbol(i, ['{'])) {\n                    setError(i, format(locale.invalidToken.double, {\n                      token: \"{\"\n                    }));\n                    break;\n                  }\n                  buffer2.brackets.push(_string3);\n                  buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === '[';\n                  bracketList.push({\n                    i: i,\n                    line: line,\n                    string: _string3\n                  });\n                  break;\n\n                case '}':\n                case ']':\n                  if (_string3 === '}') if (buffer2.brackets[buffer2.brackets.length - 1] !== '{') {\n                    setError(i, format(locale.brace.curly.missingOpen));\n                    break;\n                  }\n                  if (_string3 === '}') if (followsSymbol(i, [','])) {\n                    setError(i, format(locale.invalidToken.tokenSequence.prohibited, {\n                      firstToken: \",\",\n                      secondToken: \"}\"\n                    }));\n                    break;\n                  }\n                  if (_string3 === ']') if (buffer2.brackets[buffer2.brackets.length - 1] !== '[') {\n                    setError(i, format(locale.brace.square.missingOpen));\n                    break;\n                  }\n                  if (_string3 === ']') if (followsSymbol(i, [':'])) {\n                    setError(i, format(locale.invalidToken.tokenSequence.prohibited, {\n                      firstToken: \":\",\n                      secondToken: \"]\"\n                    }));\n                    break;\n                  }\n                  buffer2.brackets.pop();\n                  buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === '[';\n                  bracketList.push({\n                    i: i,\n                    line: line,\n                    string: _string3\n                  });\n                  break;\n\n                case ',':\n                  found = followsSymbol(i, ['{']);\n\n                  if (found) {\n                    if (followedBySymbol(i, ['}'])) {\n                      setError(i, format(locale.brace.curly.cannotWrap, {\n                        token: \",\"\n                      }));\n                      break;\n                    }\n\n                    setError(i, format(locale.invalidToken.tokenSequence.prohibited, {\n                      firstToken: \"{\",\n                      secondToken: \",\"\n                    }));\n                    break;\n                  }\n\n                  if (followedBySymbol(i, ['}', ',', ']'])) {\n                    setError(i, format(locale.noTrailingOrLeadingComma));\n                    break;\n                  }\n\n                  found = typeFollowed(i);\n\n                  switch (found) {\n                    case 'key':\n                    case 'colon':\n                      setError(i, format(locale.invalidToken.termSequence.prohibited, {\n                        firstTerm: found === 'key' ? locale.types.key : locale.symbols.colon,\n                        secondTerm: locale.symbols.comma\n                      }));\n                      break;\n\n                    case 'symbol':\n                      if (followsSymbol(i, ['{'])) {\n                        setError(i, format(locale.invalidToken.tokenSequence.prohibited, {\n                          firstToken: \"{\",\n                          secondToken: \",\"\n                        }));\n                        break;\n                      }\n\n                      break;\n\n                    default:\n                      break;\n                  }\n\n                  buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === '[';\n                  break;\n\n                default:\n                  break;\n              }\n\n              buffer.json += _string3;\n              break;\n\n            case 'colon':\n              found = followsSymbol(i, ['[']);\n\n              if (found && followedBySymbol(i, [']'])) {\n                setError(i, format(locale.brace.square.cannotWrap, {\n                  token: \":\"\n                }));\n                break;\n              }\n\n              if (found) {\n                setError(i, format(locale.invalidToken.tokenSequence.prohibited, {\n                  firstToken: \"[\",\n                  secondToken: \":\"\n                }));\n                break;\n              }\n\n              if (typeFollowed(i) !== 'key') {\n                setError(i, format(locale.invalidToken.termSequence.permitted, {\n                  firstTerm: locale.symbols.colon,\n                  secondTerm: locale.types.key\n                }));\n                break;\n              }\n\n              if (followedBySymbol(i, ['}', ']'])) {\n                setError(i, format(locale.invalidToken.termSequence.permitted, {\n                  firstTerm: locale.symbols.colon,\n                  secondTerm: locale.types.value\n                }));\n                break;\n              }\n\n              buffer2.isValue = true;\n              buffer.json += _string3;\n              break;\n\n            case 'key':\n            case 'string':\n              var firstChar = _string3.charAt(0),\n                  lastChar = _string3.charAt(_string3.length - 1),\n                  quote_primary = quotes.indexOf(firstChar);\n\n              if (quotes.indexOf(firstChar) === -1) if (quotes.indexOf(lastChar) !== -1) {\n                setError(i, format(locale.string.missingOpen, {\n                  quote: firstChar\n                }));\n                break;\n              }\n              if (quotes.indexOf(lastChar) === -1) if (quotes.indexOf(firstChar) !== -1) {\n                setError(i, format(locale.string.missingClose, {\n                  quote: firstChar\n                }));\n                break;\n              }\n              if (quotes.indexOf(firstChar) > -1) if (firstChar !== lastChar) {\n                setError(i, format(locale.string.missingClose, {\n                  quote: firstChar\n                }));\n                break;\n              }\n              if ('string' === _type3) if (quotes.indexOf(firstChar) === -1 && quotes.indexOf(lastChar) === -1) {\n                setError(i, format(locale.string.mustBeWrappedByQuotes));\n                break;\n              }\n              if ('key' === _type3) if (followedBySymbol(i, ['}', ']'])) {\n                setError(i, format(locale.invalidToken.termSequence.permitted, {\n                  firstTerm: locale.types.key,\n                  secondTerm: locale.symbols.colon\n                }));\n              }\n              if (quotes.indexOf(firstChar) === -1 && quotes.indexOf(lastChar) === -1) for (var h = 0; h < _string3.length; h++) {\n                if (error) break;\n\n                var c = _string3.charAt(h);\n\n                if (alphanumeric.indexOf(c) === -1) {\n                  setError(i, format(locale.string.nonAlphanumeric, {\n                    token: c\n                  }));\n                  break;\n                }\n              }\n              if (firstChar === \"'\") _string3 = '\"' + _string3.slice(1, -1) + '\"';else if (firstChar !== '\"') _string3 = '\"' + _string3 + '\"';\n              if ('key' === _type3) if ('key' === typeFollowed(i)) {\n                if (i > 0) if (!isNaN(buffer.tokens_merge[i - 1])) {\n                  buffer.tokens_merge[i - 1] += buffer.tokens_merge[i];\n                  setError(i, format(locale.key.numberAndLetterMissingQuotes));\n                  break;\n                }\n                setError(i, format(locale.key.spaceMissingQuotes));\n                break;\n              }\n              if ('key' === _type3) if (!followsSymbol(i, ['{', ','])) {\n                setError(i, format(locale.invalidToken.tokenSequence.permitted, {\n                  firstToken: _type3,\n                  secondToken: [\"{\", \",\"]\n                }));\n                break;\n              }\n              if ('string' === _type3) if (!followsSymbol(i, ['[', ':', ','])) {\n                setError(i, format(locale.invalidToken.tokenSequence.permitted, {\n                  firstToken: _type3,\n                  secondToken: [\"[\", \":\", \",\"]\n                }));\n                break;\n              }\n              if ('key' === _type3) if (buffer2.isValue) {\n                setError(i, format(locale.string.unexpectedKey));\n                break;\n              }\n              if ('string' === _type3) if (!buffer2.isValue) {\n                setError(i, format(locale.key.unexpectedString));\n                break;\n              }\n              buffer.json += _string3;\n              break;\n\n            case 'number':\n            case 'primitive':\n              if (followsSymbol(i, ['{'])) {\n                buffer.tokens_merge[i].type = 'key';\n                _type3 = buffer.tokens_merge[i].type;\n                _string3 = '\"' + _string3 + '\"';\n              } else if (typeFollowed(i) === 'key') {\n                buffer.tokens_merge[i].type = 'key';\n                _type3 = buffer.tokens_merge[i].type;\n              } else if (!followsSymbol(i, ['[', ':', ','])) {\n                setError(i, format(locale.invalidToken.tokenSequence.permitted, {\n                  firstToken: _type3,\n                  secondToken: [\"[\", \":\", \",\"]\n                }));\n                break;\n              }\n\n              if (_type3 !== 'key') if (!buffer2.isValue) {\n                buffer.tokens_merge[i].type = 'key';\n                _type3 = buffer.tokens_merge[i].type;\n                _string3 = '\"' + _string3 + '\"';\n              }\n              if (_type3 === 'primitive') if (_string3 === 'undefined') setError(i, format(locale.invalidToken.useInstead, {\n                badToken: \"undefined\",\n                goodToken: \"null\"\n              }));\n              buffer.json += _string3;\n              break;\n          }\n        }\n\n        var noEscapedSingleQuote = '';\n\n        for (var i = 0; i < buffer.json.length; i++) {\n          var current = buffer.json.charAt(i),\n              next = '';\n\n          if (i + 1 < buffer.json.length) {\n            next = buffer.json.charAt(i + 1);\n\n            if (current === '\\\\' && next === \"'\") {\n              noEscapedSingleQuote += next;\n              i++;\n              continue;\n            }\n          }\n\n          noEscapedSingleQuote += current;\n        }\n\n        buffer.json = noEscapedSingleQuote;\n\n        if (!error) {\n          var removePair = function removePair(index) {\n            bracketList.splice(index + 1, 1);\n            bracketList.splice(index, 1);\n            if (!delta) delta = true;\n          };\n\n          var maxIterations = Math.ceil(bracketList.length / 2);\n          var round = 0,\n              delta = false;\n\n          while (bracketList.length > 0) {\n            delta = false;\n\n            for (var tokenCount = 0; tokenCount < bracketList.length - 1; tokenCount++) {\n              var pair = bracketList[tokenCount].string + bracketList[tokenCount + 1].string;\n              if (['[]', '{}'].indexOf(pair) > -1) removePair(tokenCount);\n            }\n\n            round++;\n            if (!delta) break;\n            if (round >= maxIterations) break;\n          }\n\n          if (bracketList.length > 0) {\n            var _tokenString = bracketList[0].string,\n                _tokenPosition = bracketList[0].i,\n                _closingBracketType = _tokenString === '[' ? ']' : '}';\n\n            line = bracketList[0].line;\n            setError(_tokenPosition, format(locale.brace[_closingBracketType === ']' ? 'square' : 'curly'].missingClose));\n          }\n        }\n\n        if (!error) if ([undefined, ''].indexOf(buffer.json) === -1) try {\n          buffer.jsObject = JSON.parse(buffer.json);\n        } catch (err) {\n          var errorMessage = err.message,\n              subsMark = errorMessage.indexOf('position');\n          if (subsMark === -1) throw new Error('Error parsing failed');\n          var errPositionStr = errorMessage.substring(subsMark + 9, errorMessage.length),\n              errPosition = parseInt(errPositionStr);\n          var charTotal = 0,\n              tokenIndex = 0,\n              _token6 = false,\n              _line2 = 1,\n              exitWhile = false;\n\n          while (charTotal < errPosition && !exitWhile) {\n            _token6 = buffer.tokens_merge[tokenIndex];\n            if ('linebreak' === _token6.type) _line2++;\n            if (['space', 'linebreak'].indexOf(_token6.type) === -1) charTotal += _token6.string.length;\n            if (charTotal >= errPosition) break;\n            tokenIndex++;\n            if (!buffer.tokens_merge[tokenIndex + 1]) exitWhile = true;\n          }\n\n          line = _line2;\n          var backslashCount = 0;\n\n          for (var _i = 0; _i < _token6.string.length; _i++) {\n            var char = _token6.string.charAt(_i);\n\n            if (char === '\\\\') backslashCount = backslashCount > 0 ? backslashCount + 1 : 1;else {\n              if (backslashCount % 2 !== 0 || backslashCount === 0) if ('\\'\"bfnrt'.indexOf(char) === -1) {\n                setError(tokenIndex, format(locale.invalidToken.unexpected, {\n                  token: '\\\\'\n                }));\n              }\n              backslashCount = 0;\n            }\n          }\n\n          if (!error) setError(tokenIndex, format(locale.invalidToken.unexpected, {\n            token: _token6.string\n          }));\n        }\n        var _line = 1,\n            _depth = 0;\n        ;\n        if (!error) for (var i = 0; i < buffer.tokens_merge.length; i++) {\n          var _token7 = buffer.tokens_merge[i],\n              _string4 = _token7.string,\n              _type4 = _token7.type;\n\n          switch (_type4) {\n            case 'space':\n            case 'linebreak':\n              break;\n\n            case 'string':\n            case 'number':\n            case 'primitive':\n            case 'error':\n              buffer.markup += (followsSymbol(i, [',', '[']) ? newLineBreakAndIndent() : '') + newSpan(i, _token7, _depth);\n              break;\n\n            case 'key':\n              buffer.markup += newLineBreakAndIndent() + newSpan(i, _token7, _depth);\n              break;\n\n            case 'colon':\n              buffer.markup += newSpan(i, _token7, _depth) + '&nbsp;';\n              break;\n\n            case 'symbol':\n              switch (_string4) {\n                case '[':\n                case '{':\n                  buffer.markup += (!followsSymbol(i, [':']) ? newLineBreakAndIndent() : '') + newSpan(i, _token7, _depth);\n                  _depth++;\n                  break;\n\n                case ']':\n                case '}':\n                  _depth--;\n\n                  var islastToken = i === buffer.tokens_merge.length - 1,\n                      _adjustment = i > 0 ? ['[', '{'].indexOf(buffer.tokens_merge[i - 1].string) > -1 ? '' : newLineBreakAndIndent(islastToken) : '';\n\n                  buffer.markup += _adjustment + newSpan(i, _token7, _depth);\n                  break;\n\n                case ',':\n                  buffer.markup += newSpan(i, _token7, _depth);\n                  break;\n              }\n\n              break;\n          }\n        }\n\n        if (error) {\n          var countCarrigeReturn = function countCarrigeReturn(string) {\n            var count = 0;\n\n            for (var i = 0; i < string.length; i++) {\n              if (['\\n', '\\r'].indexOf(string[i]) > -1) count++;\n            }\n\n            return count;\n          };\n\n          var _line_fallback = 1;\n          _line = 1;\n\n          for (var i = 0; i < buffer.tokens_merge.length; i++) {\n            var _token8 = buffer.tokens_merge[i],\n                _type5 = _token8.type,\n                _string5 = _token8.string;\n            if (_type5 === 'linebreak') _line++;\n            buffer.markup += newSpan(i, _token8, _depth);\n            _line_fallback += countCarrigeReturn(_string5);\n          }\n\n          _line++;\n          _line_fallback++;\n          if (_line < _line_fallback) _line = _line_fallback;\n        }\n\n        for (var i = 0; i < buffer.tokens_merge.length; i++) {\n          var _token9 = buffer.tokens_merge[i];\n          buffer.indented += _token9.string;\n          if (['space', 'linebreak'].indexOf(_token9.type) === -1) buffer.tokens_plainText += _token9.string;\n        }\n\n        if (error) {\n          var isFunction = function isFunction(functionToCheck) {\n            return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n          };\n\n          if ('modifyErrorText' in this.props) if (isFunction(this.props.modifyErrorText)) error.reason = this.props.modifyErrorText(error.reason);\n        }\n\n        return {\n          tokens: buffer.tokens_merge,\n          noSpaces: buffer.tokens_plainText,\n          indented: buffer.indented,\n          json: buffer.json,\n          jsObject: buffer.jsObject,\n          markup: buffer.markup,\n          lines: _line,\n          error: error\n        };\n      }\n\n      ;\n      /**\r\n       *     JS OBJECTS || PLACEHOLDER\r\n       */\n\n      if (!('nodeType' in something)) {\n        var escape_character = function escape_character() {\n          if (_buffer.currentChar !== '\\\\') return false;\n          return true;\n        };\n\n        var extract = function extract(string, position) {\n          return string.slice(0, position) + string.slice(position + 1);\n        };\n\n        var determine_string = function determine_string() {\n          if ('\\'\"'.indexOf(_buffer.currentChar) === -1) return false;\n\n          if (!_buffer.stringOpen) {\n            add_tokenSecondary();\n            _buffer.stringStart = _buffer.position;\n            _buffer.stringOpen = _buffer.currentChar;\n            return true;\n          }\n\n          if (_buffer.stringOpen === _buffer.currentChar) {\n            add_tokenSecondary();\n\n            var stringToken = _buffer.inputText.substring(_buffer.stringStart, _buffer.position + 1);\n\n            add_tokenPrimary(stringToken);\n            _buffer.stringOpen = false;\n            return true;\n          }\n\n          return false;\n        };\n\n        var determine_value = function determine_value() {\n          if (':,{}[]'.indexOf(_buffer.currentChar) === -1) return false;\n          if (_buffer.stringOpen) return false;\n          add_tokenSecondary();\n          add_tokenPrimary(_buffer.currentChar);\n\n          switch (_buffer.currentChar) {\n            case ':':\n              _buffer.isValue = true;\n              return true;\n              break;\n\n            case '{':\n            case '[':\n              _buffer.brackets.push(_buffer.currentChar);\n\n              break;\n\n            case '}':\n            case ']':\n              _buffer.brackets.pop();\n\n              break;\n          }\n\n          if (_buffer.currentChar !== ':') _buffer.isValue = _buffer.brackets[_buffer.brackets.length - 1] === '[';\n          return true;\n        };\n\n        var add_tokenSecondary = function add_tokenSecondary() {\n          if (_buffer.tokenSecondary.length === 0) return false;\n\n          _buffer.tokens.push(_buffer.tokenSecondary);\n\n          _buffer.tokenSecondary = '';\n          return true;\n        };\n\n        var add_tokenPrimary = function add_tokenPrimary(value) {\n          if (value.length === 0) return false;\n\n          _buffer.tokens.push(value);\n\n          return true;\n        };\n\n        var indent = function indent(number) {\n          var space = [];\n\n          for (var i = 0; i < number * 2; i++) {\n            space.push(' ');\n          }\n\n          return (number > 0 ? '\\n' : '') + space.join('');\n        };\n\n        var indentII = function indentII(number) {\n          var space = [];\n          if (number > 0) lines++;\n\n          for (var i = 0; i < number * 2; i++) {\n            space.push('&nbsp;');\n          }\n\n          return (number > 0 ? '<br>' : '') + space.join('');\n        };\n\n        var _buffer = {\n          inputText: JSON.stringify(something),\n          position: 0,\n          currentChar: '',\n          tokenPrimary: '',\n          tokenSecondary: '',\n          brackets: [],\n          isValue: false,\n          stringOpen: false,\n          stringStart: 0,\n          tokens: []\n        };\n\n        for (var i = 0; i < _buffer.inputText.length; i++) {\n          _buffer.position = i;\n          _buffer.currentChar = _buffer.inputText.charAt(_buffer.position);\n\n          var a = determine_value(),\n              b = determine_string(),\n              _c = escape_character();\n\n          if (!a && !b && !_c) if (!_buffer.stringOpen) _buffer.tokenSecondary += _buffer.currentChar;\n        }\n\n        var _buffer2 = {\n          brackets: [],\n          isValue: false,\n          tokens: []\n        };\n        _buffer2.tokens = _buffer.tokens.map(function (token) {\n          var type = '',\n              string = '',\n              value = '';\n\n          switch (token) {\n            case ',':\n              type = 'symbol';\n              string = token;\n              value = token;\n              _buffer2.isValue = _buffer2.brackets[_buffer2.brackets.length - 1] === '[';\n              break;\n\n            case ':':\n              type = 'symbol';\n              string = token;\n              value = token;\n              _buffer2.isValue = true;\n              break;\n\n            case '{':\n            case '[':\n              type = 'symbol';\n              string = token;\n              value = token;\n\n              _buffer2.brackets.push(token);\n\n              _buffer2.isValue = _buffer2.brackets[_buffer2.brackets.length - 1] === '[';\n              break;\n\n            case '}':\n            case ']':\n              type = 'symbol';\n              string = token;\n              value = token;\n\n              _buffer2.brackets.pop();\n\n              _buffer2.isValue = _buffer2.brackets[_buffer2.brackets.length - 1] === '[';\n              break;\n\n            case 'undefined':\n              type = 'primitive';\n              string = token;\n              value = undefined;\n              break;\n\n            case 'null':\n              type = 'primitive';\n              string = token;\n              value = null;\n              break;\n\n            case 'false':\n              type = 'primitive';\n              string = token;\n              value = false;\n              break;\n\n            case 'true':\n              type = 'primitive';\n              string = token;\n              value = true;\n              break;\n\n            default:\n              var C = token.charAt(0);\n\n              var stripQuotesFromKey = function stripQuotesFromKey(text) {\n                if (text.length === 0) return text;\n                if (['\"\"', \"''\"].indexOf(text) > -1) return \"''\";\n                var wrappedInQuotes = false;\n\n                for (var i = 0; i < 2; i++) {\n                  if ([text.charAt(0), text.charAt(text.length - 1)].indexOf(['\"', \"'\"][i]) > -1) {\n                    wrappedInQuotes = true;\n                    break;\n                  }\n                }\n\n                if (wrappedInQuotes && text.length >= 2) text = text.slice(1, -1);\n\n                var nonAlphaNumeric = text.replace(/\\w/g, ''),\n                    alphaNumeric = text.replace(/\\W+/g, ''),\n                    mayRemoveQuotes = function (nonAlphaNumeric, text) {\n                  var numberAndLetter = false;\n\n                  for (var i = 0; i < text.length; i++) {\n                    if (i === 0) if (isNaN(text.charAt(i))) break;\n\n                    if (isNaN(text.charAt(i))) {\n                      numberAndLetter = true;\n                      break;\n                    }\n                  }\n\n                  return !(nonAlphaNumeric.length > 0 || numberAndLetter);\n                }(nonAlphaNumeric, text),\n                    hasQuotes = function (string) {\n                  for (var i = 0; i < string.length; i++) {\n                    if ([\"'\", '\"'].indexOf(string.charAt(i)) > -1) return true;\n                  }\n\n                  return false;\n                }(nonAlphaNumeric);\n\n                if (hasQuotes) {\n                  var newText = '';\n                  var charList = text.split('');\n\n                  for (var ii = 0; ii < charList.length; ii++) {\n                    var _char2 = charList[ii];\n                    if ([\"'\", '\"'].indexOf(_char2) > -1) _char2 = '\\\\' + _char2;\n                    newText += _char2;\n                  }\n\n                  text = newText;\n                }\n\n                if (!mayRemoveQuotes) return \"'\" + text + \"'\";else return text;\n              };\n\n              if ('\\'\"'.indexOf(C) > -1) {\n                if (_buffer2.isValue) type = 'string';else type = 'key';\n                if (type === 'key') string = stripQuotesFromKey(token);\n\n                if (type === 'string') {\n                  string = '';\n                  var charList2 = token.slice(1, -1).split('');\n\n                  for (var ii = 0; ii < charList2.length; ii++) {\n                    var _char3 = charList2[ii];\n                    if ('\\'\\\"'.indexOf(_char3) > -1) _char3 = '\\\\' + _char3;\n                    string += _char3;\n                  }\n\n                  string = \"'\" + string + \"'\";\n                }\n\n                value = string;\n                break;\n              }\n\n              if (!isNaN(token)) {\n                type = 'number';\n                string = token;\n                value = Number(token);\n                break;\n              }\n\n              if (token.length > 0) if (!_buffer2.isValue) {\n                type = 'key';\n                string = token;\n                if (string.indexOf(' ') > -1) string = \"'\" + string + \"'\";\n                value = string;\n                break;\n              }\n          }\n\n          return {\n            type: type,\n            string: string,\n            value: value,\n            depth: _buffer2.brackets.length\n          };\n        });\n        var clean = '';\n\n        for (var i = 0; i < _buffer2.tokens.length; i++) {\n          var _token10 = _buffer2.tokens[i];\n          clean += _token10.string;\n        }\n\n        ;\n        var indentation = '';\n\n        for (var i = 0; i < _buffer2.tokens.length; i++) {\n          var _token11 = _buffer2.tokens[i];\n\n          switch (_token11.string) {\n            case '[':\n            case '{':\n              var _nextToken2 = i < _buffer2.tokens.length - 1 - 1 ? _buffer2.tokens[i + 1] : '';\n\n              if ('}]'.indexOf(_nextToken2.string) === -1) indentation += _token11.string + indent(_token11.depth);else indentation += _token11.string;\n              break;\n\n            case ']':\n            case '}':\n              var prevToken = i > 0 ? _buffer2.tokens[i - 1] : '';\n              if ('[{'.indexOf(prevToken.string) === -1) indentation += indent(_token11.depth) + _token11.string;else indentation += _token11.string;\n              break;\n\n            case ':':\n              indentation += _token11.string + ' ';\n              break;\n\n            case ',':\n              indentation += _token11.string + indent(_token11.depth);\n              break;\n\n            default:\n              indentation += _token11.string;\n              break;\n          }\n        }\n\n        var lines = 1;\n        ;\n        var markup = '';\n\n        var _lastIndex = _buffer2.tokens.length - 1;\n\n        for (var i = 0; i < _buffer2.tokens.length; i++) {\n          var _token12 = _buffer2.tokens[i];\n          var span = newSpan(i, _token12, _token12.depth);\n\n          switch (_token12.string) {\n            case '{':\n            case '[':\n              var _nextToken3 = i < _buffer2.tokens.length - 1 - 1 ? _buffer2.tokens[i + 1] : '';\n\n              if ('}]'.indexOf(_nextToken3.string) === -1) markup += span + indentII(_token12.depth);else markup += span;\n              break;\n\n            case '}':\n            case ']':\n              var _prevToken = i > 0 ? _buffer2.tokens[i - 1] : '';\n\n              if ('[{'.indexOf(_prevToken.string) === -1) markup += indentII(_token12.depth) + (_lastIndex === i ? '<br>' : '') + span;else markup += span;\n              break;\n\n            case ':':\n              markup += span + ' ';\n              break;\n\n            case ',':\n              markup += span + indentII(_token12.depth);\n              break;\n\n            default:\n              markup += span;\n              break;\n          }\n        }\n\n        lines += 2;\n        return {\n          tokens: _buffer2.tokens,\n          noSpaces: clean,\n          indented: indentation,\n          json: JSON.stringify(something),\n          jsObject: something,\n          markup: markup,\n          lines: lines\n        };\n      }\n    }\n  }]);\n\n  return JSONInput;\n}(Component);\n\nexport default JSONInput;","map":null,"metadata":{},"sourceType":"module"}