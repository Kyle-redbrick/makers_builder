{"ast":null,"code":"var _jsxFileName = \"/Users/jimmy/Documents/Wizschool/astroboy/src/Page/Mypage/Components/Subscribe/View.js\";\nimport React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport \"./index.scss\";\nexport default function View(props) {\n  var mode = props.mode,\n      users = props.users,\n      handleSubscribe = props.handleSubscribe,\n      subscribeInfo = props.subscribeInfo;\n  var titleId = mode === \"subscribe\" ? \"ID_MYPAGE_USERINFO_SUBSCRIBE\" : \"ID_MYPAGE_USERINFO_INTERESTED\";\n  return React.createElement(\"div\", {\n    className: \"SubscribeList\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"SubscribeListTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: titleId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"SubscribeUsers\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, users.map(function (user, i) {\n    var isSubscribe = subscribeInfo.emails.includes(user.email);\n    var subBtnClassName, subBtnTextId;\n\n    if (isSubscribe) {\n      subBtnClassName = \"SubscribeButton SubscribeButtonActive\";\n      subBtnTextId = \"ID_MYPAGE_SUBSCRIBE_SUBSCRIBING\";\n    } else {\n      subBtnClassName = \"SubscribeButton\";\n      subBtnTextId = \"ID_MYPAGE_SUBSCRIBE_SUBSCRIBE\";\n    }\n\n    return React.createElement(\"div\", {\n      className: \"SubscribeUser\",\n      key: user.email,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"SubscribeUserIcon\",\n      src: user.icon,\n      alt: \"user icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"SubscribeRightArea\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"SubscribeUserName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, user.name), React.createElement(\"div\", {\n      className: \"SubscribeCountWrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"SubscribeUserAppCount\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"ID_MYPAGE_SUBSCRIBE_USERINFO_GAME\",\n      values: {\n        count: user.publishedProjectCount\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"SubscribeUserSubCount\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: \"ID_MYPAGE_SUBSCRIBE_USERINFO_SUBSCRIBE\",\n      values: {\n        count: user.subscribeCount\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: subBtnClassName,\n      onClick: function onClick() {\n        return handleSubscribe(user.email, isSubscribe);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(FormattedMessage, {\n      id: subBtnTextId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }))));\n  })));\n}\n;","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/astroboy/src/Page/Mypage/Components/Subscribe/View.js"],"names":["React","FormattedMessage","View","props","mode","users","handleSubscribe","subscribeInfo","titleId","map","user","i","isSubscribe","emails","includes","email","subBtnClassName","subBtnTextId","icon","name","count","publishedProjectCount","subscribeCount"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport \"./index.scss\";\n\nexport default function View(props) {\n  const {\n    mode,\n    users,\n    handleSubscribe,\n    subscribeInfo\n  } = props;\n  const titleId = mode === \"subscribe\" ? \"ID_MYPAGE_USERINFO_SUBSCRIBE\" : \"ID_MYPAGE_USERINFO_INTERESTED\";\n  \n  return (\n    <div className=\"SubscribeList\">\n      <div className=\"SubscribeListTitle\"><FormattedMessage id={titleId} /></div>\n      <div className=\"SubscribeUsers\">\n        {users.map((user, i)=>{\n          const isSubscribe = subscribeInfo.emails.includes(user.email)\n          let subBtnClassName, subBtnTextId;\n          if(isSubscribe) {\n            subBtnClassName = \"SubscribeButton SubscribeButtonActive\";\n            subBtnTextId = \"ID_MYPAGE_SUBSCRIBE_SUBSCRIBING\";\n          } else {\n            subBtnClassName = \"SubscribeButton\";\n            subBtnTextId = \"ID_MYPAGE_SUBSCRIBE_SUBSCRIBE\";\n          }\n\n          return (\n            <div className=\"SubscribeUser\" key={user.email}>\n              <img className=\"SubscribeUserIcon\" src={user.icon} alt=\"user icon\" />\n              <div className=\"SubscribeRightArea\">\n                <div className=\"SubscribeUserName\">{user.name}</div>\n                <div className=\"SubscribeCountWrap\">\n                  <div className=\"SubscribeUserAppCount\"><FormattedMessage id=\"ID_MYPAGE_SUBSCRIBE_USERINFO_GAME\" values={{count: user.publishedProjectCount}} /></div>\n                  <div className=\"SubscribeUserSubCount\"><FormattedMessage id=\"ID_MYPAGE_SUBSCRIBE_USERINFO_SUBSCRIBE\" values={{count: user.subscribeCount}} /></div>\n                </div>\n                <div className={subBtnClassName} onClick={()=>handleSubscribe(user.email,isSubscribe)}><FormattedMessage id={subBtnTextId} /></div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};"]},"metadata":{},"sourceType":"module"}