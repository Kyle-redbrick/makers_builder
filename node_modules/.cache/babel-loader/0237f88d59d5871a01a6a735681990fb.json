{"ast":null,"code":"export default function sha256(ascii) {\n  function rightRotate(value, amount) {\n    return value >>> amount | value << 32 - amount;\n  }\n\n  var mathPow = Math.pow;\n  var maxWord = mathPow(2, 32);\n  var lengthProperty = \"length\";\n  var i, j; // Used as a counter across the whole file\n\n  var result = \"\";\n  var words = [];\n  var asciiBitLength = ascii[lengthProperty] * 8; //* caching results is optional - remove/add slash from front of this line to toggle\n  // Initial hash value: first 32 bits of the fractional parts of the square roots of the first 8 primes\n  // (we actually calculate the first 64, but extra values are just ignored)\n\n  var hash = sha256.h = sha256.h || []; // Round constants: first 32 bits of the fractional parts of the cube roots of the first 64 primes\n\n  var k = sha256.k = sha256.k || [];\n  var primeCounter = k[lengthProperty];\n  /*/\n  var hash = [], k = [];\n  var primeCounter = 0;\n  //*/\n\n  var isComposite = {};\n\n  for (var candidate = 2; primeCounter < 64; candidate++) {\n    if (!isComposite[candidate]) {\n      for (i = 0; i < 313; i += candidate) {\n        isComposite[i] = candidate;\n      }\n\n      hash[primeCounter] = mathPow(candidate, 0.5) * maxWord | 0;\n      k[primeCounter++] = mathPow(candidate, 1 / 3) * maxWord | 0;\n    }\n  }\n\n  ascii += \"\\x80\"; // Append Ƈ' bit (plus zero padding)\n\n  while (ascii[lengthProperty] % 64 - 56) {\n    ascii += \"\\x00\";\n  } // More zero padding\n\n\n  for (i = 0; i < ascii[lengthProperty]; i++) {\n    j = ascii.charCodeAt(i);\n    if (j >> 8) return; // ASCII check: only accept characters in range 0-255\n\n    words[i >> 2] |= j << (3 - i) % 4 * 8;\n  }\n\n  words[words[lengthProperty]] = asciiBitLength / maxWord | 0;\n  words[words[lengthProperty]] = asciiBitLength; // process each chunk\n\n  for (j = 0; j < words[lengthProperty];) {\n    var w = words.slice(j, j += 16); // The message is expanded into 64 words as part of the iteration\n\n    var oldHash = hash; // This is now the undefinedworking hash\", often labelled as variables a...g\n    // (we have to truncate as well, otherwise extra entries at the end accumulate\n\n    hash = hash.slice(0, 8);\n\n    for (i = 0; i < 64; i++) {\n      // var i2 = i + j;\n      // Expand the message into 64 words\n      // Used below if\n      var w15 = w[i - 15],\n          w2 = w[i - 2]; // Iterate\n\n      var a = hash[0],\n          e = hash[4];\n      var temp1 = hash[7] + (rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25)) + ( // S1\n      e & hash[5] ^ ~e & hash[6]) + // ch\n      k[i] + ( // Expand the message schedule if needed\n      w[i] = i < 16 ? w[i] : w[i - 16] + (rightRotate(w15, 7) ^ rightRotate(w15, 18) ^ w15 >>> 3) + // s0\n      w[i - 7] + (rightRotate(w2, 17) ^ rightRotate(w2, 19) ^ w2 >>> 10) | // s1\n      0); // This is only used once, so *could* be moved below, but it only saves 4 bytes and makes things unreadble\n\n      var temp2 = (rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22)) + ( // S0\n      a & hash[1] ^ a & hash[2] ^ hash[1] & hash[2]); // maj\n\n      hash = [temp1 + temp2 | 0].concat(hash); // We don't bother trimming off the extra ones, they're harmless as long as we're truncating when we do the slice()\n\n      hash[4] = hash[4] + temp1 | 0;\n    }\n\n    for (i = 0; i < 8; i++) {\n      hash[i] = hash[i] + oldHash[i] | 0;\n    }\n  }\n\n  for (i = 0; i < 8; i++) {\n    for (j = 3; j + 1; j--) {\n      var b = hash[i] >> j * 8 & 255;\n      result += (b < 16 ? 0 : \"\") + b.toString(16);\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Common/Util/SHA256.js"],"names":["sha256","ascii","rightRotate","value","amount","mathPow","Math","pow","maxWord","lengthProperty","i","j","result","words","asciiBitLength","hash","h","k","primeCounter","isComposite","candidate","charCodeAt","w","slice","oldHash","w15","w2","a","e","temp1","temp2","concat","b","toString"],"mappings":"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","sourcesContent":["export default function sha256(ascii) {\n  function rightRotate(value, amount) {\n    return (value >>> amount) | (value << (32 - amount));\n  }\n\n  var mathPow = Math.pow;\n  var maxWord = mathPow(2, 32);\n  var lengthProperty = \"length\";\n  var i, j; // Used as a counter across the whole file\n  var result = \"\";\n\n  var words = [];\n  var asciiBitLength = ascii[lengthProperty] * 8;\n\n  //* caching results is optional - remove/add slash from front of this line to toggle\n  // Initial hash value: first 32 bits of the fractional parts of the square roots of the first 8 primes\n  // (we actually calculate the first 64, but extra values are just ignored)\n  var hash = (sha256.h = sha256.h || []);\n  // Round constants: first 32 bits of the fractional parts of the cube roots of the first 64 primes\n  var k = (sha256.k = sha256.k || []);\n  var primeCounter = k[lengthProperty];\n  /*/\n\tvar hash = [], k = [];\n\tvar primeCounter = 0;\n\t//*/\n\n  var isComposite = {};\n  for (var candidate = 2; primeCounter < 64; candidate++) {\n    if (!isComposite[candidate]) {\n      for (i = 0; i < 313; i += candidate) {\n        isComposite[i] = candidate;\n      }\n      hash[primeCounter] = (mathPow(candidate, 0.5) * maxWord) | 0;\n      k[primeCounter++] = (mathPow(candidate, 1 / 3) * maxWord) | 0;\n    }\n  }\n\n  ascii += \"\\x80\"; // Append Ƈ' bit (plus zero padding)\n  while ((ascii[lengthProperty] % 64) - 56) ascii += \"\\x00\"; // More zero padding\n  for (i = 0; i < ascii[lengthProperty]; i++) {\n    j = ascii.charCodeAt(i);\n    if (j >> 8) return; // ASCII check: only accept characters in range 0-255\n    words[i >> 2] |= j << (((3 - i) % 4) * 8);\n  }\n  words[words[lengthProperty]] = (asciiBitLength / maxWord) | 0;\n  words[words[lengthProperty]] = asciiBitLength;\n\n  // process each chunk\n  for (j = 0; j < words[lengthProperty]; ) {\n    var w = words.slice(j, (j += 16)); // The message is expanded into 64 words as part of the iteration\n    var oldHash = hash;\n    // This is now the undefinedworking hash\", often labelled as variables a...g\n    // (we have to truncate as well, otherwise extra entries at the end accumulate\n    hash = hash.slice(0, 8);\n\n    for (i = 0; i < 64; i++) {\n      // var i2 = i + j;\n      // Expand the message into 64 words\n      // Used below if\n      var w15 = w[i - 15],\n        w2 = w[i - 2];\n\n      // Iterate\n      var a = hash[0],\n        e = hash[4];\n      var temp1 =\n        hash[7] +\n        (rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25)) + // S1\n        ((e & hash[5]) ^ (~e & hash[6])) + // ch\n        k[i] +\n        // Expand the message schedule if needed\n        (w[i] =\n          i < 16\n            ? w[i]\n            : (w[i - 16] +\n              (rightRotate(w15, 7) ^ rightRotate(w15, 18) ^ (w15 >>> 3)) + // s0\n                w[i - 7] +\n                (rightRotate(w2, 17) ^ rightRotate(w2, 19) ^ (w2 >>> 10))) | // s1\n              0);\n      // This is only used once, so *could* be moved below, but it only saves 4 bytes and makes things unreadble\n      var temp2 =\n        (rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22)) + // S0\n        ((a & hash[1]) ^ (a & hash[2]) ^ (hash[1] & hash[2])); // maj\n\n      hash = [(temp1 + temp2) | 0].concat(hash); // We don't bother trimming off the extra ones, they're harmless as long as we're truncating when we do the slice()\n      hash[4] = (hash[4] + temp1) | 0;\n    }\n\n    for (i = 0; i < 8; i++) {\n      hash[i] = (hash[i] + oldHash[i]) | 0;\n    }\n  }\n\n  for (i = 0; i < 8; i++) {\n    for (j = 3; j + 1; j--) {\n      var b = (hash[i] >> (j * 8)) & 255;\n      result += (b < 16 ? 0 : \"\") + b.toString(16);\n    }\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}