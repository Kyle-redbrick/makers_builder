{"ast":null,"code":"import _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder3D/Component/SceneList/Container.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as gameActions from \"../../Store/Reducer/game\";\nimport * as contextMenuActions from \"../../Store/Reducer/contextMenu\";\nimport * as interactionActions from \"../../Store/Reducer/interaction\";\nimport { defaultScene } from \"../../Util/Constant\";\nimport { createDefaultSceneId, createDefaultSceneName, createCopiedSceneName } from \"../../Util/NameApis\";\nimport View from \"./View\";\nimport copyIcon from \"../../../../Image/builder3d/icon-30-right-click-duplicate.svg\";\nimport deleteIcon from \"../../../../Image/builder3d/icon-30-right-click-delete.svg\";\nimport firstSceneIcon from \"../../../../Image/builder3d/icon-30-right-click-first-scene.svg\";\n\nvar Container =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Container, _Component);\n\n  function Container() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Container)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onClickScene = function (scene) {\n      _this.props.selectScene(scene.id);\n    };\n\n    _this.onClickAddScene = function () {\n      var sceneIds = _this.props.sceneIds;\n\n      if (sceneIds.length < 10) {\n        _this.addDefaultScene();\n      } else {\n        alert(\"더 이상 씬을 생성할 수 없어요..\");\n      }\n    };\n\n    _this.onBlurSceneNameInput = function (scene, input) {\n      var sceneName = input.value.trim();\n\n      if (_this.checkSceneNameValid(sceneName)) {\n        _this.props.renameScene(scene.id, sceneName);\n\n        input.value = sceneName;\n      } else {\n        input.value = scene.name;\n      }\n    };\n\n    _this.onRightClickScene = function (scene, e) {\n      var menus = _this.getSceneContextMenus(scene);\n\n      var position = {\n        x: e.clientX,\n        y: e.clientY\n      };\n\n      _this.props.showContextMenu(menus, position);\n    };\n\n    _this.onClickSetStartScene = function (scene) {\n      _this.props.selectStartScene(scene.id);\n    };\n\n    _this.onClickCopyScene = function (sceneToCopy) {\n      var _this$props = _this.props,\n          scenes = _this$props.scenes,\n          sceneIds = _this$props.sceneIds;\n      var sceneNames = sceneIds.map(function (sceneId) {\n        return scenes[sceneId].name;\n      });\n      var sceneId = createDefaultSceneId(sceneIds);\n      var sceneName = createCopiedSceneName(sceneNames, sceneToCopy.name);\n      var scene = JSON.parse(JSON.stringify(sceneToCopy));\n      scene.id = sceneId;\n      scene.name = sceneName;\n\n      _this.props.addScene(scene);\n    };\n\n    _this.onClickRemoveScene = function (scene) {\n      _this.confirmRemoveScene(function () {\n        var nextCurrentSceneId = _this.getNextCurrentSceneId();\n\n        _this.props.selectScene(nextCurrentSceneId);\n\n        if (scene.id === _this.props.startSceneId) {\n          _this.props.selectStartScene(nextCurrentSceneId);\n        }\n\n        _this.props.removeScene(scene.id);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"addDefaultScene\",\n    value: function addDefaultScene() {\n      var _this$props2 = this.props,\n          scenes = _this$props2.scenes,\n          sceneIds = _this$props2.sceneIds;\n      var sceneId = createDefaultSceneId(sceneIds);\n      var sceneNames = sceneIds.map(function (sceneId) {\n        return scenes[sceneId].name;\n      });\n      var sceneName = createDefaultSceneName(sceneNames);\n      var scene = JSON.parse(JSON.stringify(defaultScene));\n      scene.id = sceneId;\n      scene.name = sceneName;\n      this.props.addScene(scene);\n\n      if (sceneIds.length < 1) {\n        this.props.selectScene(sceneId);\n        this.props.selectStartScene(sceneId);\n      }\n    }\n  }, {\n    key: \"checkSceneNameValid\",\n    value: function checkSceneNameValid(sceneName) {\n      if (!sceneName || sceneName === \"\") {\n        return false;\n      }\n\n      var maxSceneNameLength = 20;\n\n      if (sceneName.length > maxSceneNameLength) {\n        alert(\"\".concat(maxSceneNameLength, \"\\uC790 \\uC774\\uB0B4\\uB85C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694!\"));\n        return false;\n      }\n\n      var _this$props3 = this.props,\n          scenes = _this$props3.scenes,\n          sceneIds = _this$props3.sceneIds,\n          currentSceneId = _this$props3.currentSceneId;\n      var sceneNames = sceneIds.filter(function (sceneId) {\n        return sceneId !== currentSceneId;\n      }).map(function (sceneId) {\n        return scenes[sceneId].name;\n      });\n\n      if (sceneNames.includes(sceneName)) {\n        alert(\"씬 이름은 중복해서 사용할 수 없어요!\");\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"getSceneContextMenus\",\n    value: function getSceneContextMenus(scene) {\n      var _this2 = this;\n\n      var contextMenus = [{\n        img: copyIcon,\n        name: \"복사\",\n        onClick: function onClick() {\n          return _this2.onClickCopyScene(scene);\n        }\n      }, {\n        img: deleteIcon,\n        name: \"삭제\",\n        onClick: function onClick() {\n          return _this2.onClickRemoveScene(scene);\n        }\n      }];\n      var startSceneId = this.props.startSceneId;\n      var isStartScene = scene.id === startSceneId;\n\n      if (!isStartScene) {\n        contextMenus.splice(0, 0, {\n          img: firstSceneIcon,\n          name: \"시작 장면 지정\",\n          onClick: function onClick() {\n            return _this2.onClickSetStartScene(scene);\n          }\n        });\n      }\n\n      return contextMenus;\n    }\n  }, {\n    key: \"getNextCurrentSceneId\",\n    value: function getNextCurrentSceneId() {\n      var _this$props4 = this.props,\n          sceneIds = _this$props4.sceneIds,\n          currentSceneId = _this$props4.currentSceneId;\n      var index = sceneIds.indexOf(currentSceneId);\n\n      if (index === 0) {\n        return sceneIds[1];\n      } else if (index > 0) {\n        return sceneIds[index - 1];\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"confirmRemoveScene\",\n    value: function confirmRemoveScene(onconfirm) {\n      var didConfirm = window.confirm(\"씬을 삭제하면 되돌릴 수 없어요! 정말 삭제할건가요?\");\n\n      if (didConfirm) {\n        if (onconfirm) {\n          onconfirm();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          scenes = _this$props5.scenes,\n          sceneIds = _this$props5.sceneIds,\n          currentSceneId = _this$props5.currentSceneId,\n          startSceneId = _this$props5.startSceneId;\n      return React.createElement(View, {\n        scenes: scenes,\n        sceneIds: sceneIds,\n        currentSceneId: currentSceneId,\n        startSceneId: startSceneId,\n        onClickScene: this.onClickScene,\n        onClickAddScene: this.onClickAddScene,\n        onBlurSceneNameInput: this.onBlurSceneNameInput,\n        onRightClickScene: this.onRightClickScene,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport default connect(function (state) {\n  var _state$game = state.game,\n      scenes = _state$game.scenes,\n      sceneIds = _state$game.sceneIds,\n      startSceneId = _state$game.startSceneId;\n  var currentSceneId = state.interaction.currentSceneId;\n  return {\n    scenes: scenes,\n    sceneIds: sceneIds,\n    currentSceneId: currentSceneId,\n    startSceneId: startSceneId\n  };\n}, {\n  addScene: gameActions.addScene,\n  removeScene: gameActions.removeScene,\n  renameScene: gameActions.renameScene,\n  selectStartScene: gameActions.selectStartScene,\n  selectScene: interactionActions.selectScene,\n  showContextMenu: contextMenuActions.showContextMenu\n})(Container);","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder3D/Component/SceneList/Container.js"],"names":["React","Component","connect","gameActions","contextMenuActions","interactionActions","defaultScene","createDefaultSceneId","createDefaultSceneName","createCopiedSceneName","View","Container","onClickScene","scene","props","selectScene","id","onClickAddScene","sceneIds","length","addDefaultScene","alert","onBlurSceneNameInput","input","sceneName","value","trim","checkSceneNameValid","renameScene","name","onRightClickScene","e","menus","getSceneContextMenus","position","x","clientX","y","clientY","showContextMenu","onClickSetStartScene","selectStartScene","onClickCopyScene","sceneToCopy","scenes","sceneNames","map","sceneId","JSON","parse","stringify","addScene","onClickRemoveScene","confirmRemoveScene","nextCurrentSceneId","getNextCurrentSceneId","startSceneId","removeScene","maxSceneNameLength","currentSceneId","filter","includes","contextMenus","img","copyIcon","onClick","deleteIcon","isStartScene","splice","firstSceneIcon","index","indexOf","onconfirm","didConfirm","window","confirm","state","game","interaction"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as gameActions from \"../../Store/Reducer/game\";\nimport * as contextMenuActions from \"../../Store/Reducer/contextMenu\";\nimport * as interactionActions from \"../../Store/Reducer/interaction\";\nimport { defaultScene } from \"../../Util/Constant\";\nimport {\n  createDefaultSceneId,\n  createDefaultSceneName,\n  createCopiedSceneName\n} from \"../../Util/NameApis\";\nimport View from \"./View\";\n\nimport copyIcon from \"../../../../Image/builder3d/icon-30-right-click-duplicate.svg\";\nimport deleteIcon from \"../../../../Image/builder3d/icon-30-right-click-delete.svg\";\nimport firstSceneIcon from \"../../../../Image/builder3d/icon-30-right-click-first-scene.svg\";\n\nclass Container extends Component {\n  onClickScene = scene => {\n    this.props.selectScene(scene.id);\n  };\n\n  onClickAddScene = () => {\n    const { sceneIds } = this.props;\n    if (sceneIds.length < 10) {\n      this.addDefaultScene();\n    } else {\n      alert(\"더 이상 씬을 생성할 수 없어요..\");\n    }\n  };\n  addDefaultScene() {\n    const { scenes, sceneIds } = this.props;\n    const sceneId = createDefaultSceneId(sceneIds);\n    const sceneNames = sceneIds.map(sceneId => scenes[sceneId].name);\n    const sceneName = createDefaultSceneName(sceneNames);\n    const scene = JSON.parse(JSON.stringify(defaultScene));\n    scene.id = sceneId;\n    scene.name = sceneName;\n    this.props.addScene(scene);\n    if (sceneIds.length < 1) {\n      this.props.selectScene(sceneId);\n      this.props.selectStartScene(sceneId);\n    }\n  }\n\n  onBlurSceneNameInput = (scene, input) => {\n    const sceneName = input.value.trim();\n    if (this.checkSceneNameValid(sceneName)) {\n      this.props.renameScene(scene.id, sceneName);\n      input.value = sceneName;\n    } else {\n      input.value = scene.name;\n    }\n  };\n  checkSceneNameValid(sceneName) {\n    if (!sceneName || sceneName === \"\") {\n      return false;\n    }\n\n    const maxSceneNameLength = 20;\n    if (sceneName.length > maxSceneNameLength) {\n      alert(`${maxSceneNameLength}자 이내로 입력해주세요!`);\n      return false;\n    }\n\n    const { scenes, sceneIds, currentSceneId } = this.props;\n    const sceneNames = sceneIds\n      .filter(sceneId => sceneId !== currentSceneId)\n      .map(sceneId => scenes[sceneId].name);\n    if (sceneNames.includes(sceneName)) {\n      alert(\"씬 이름은 중복해서 사용할 수 없어요!\");\n      return false;\n    }\n\n    return true;\n  }\n\n  onRightClickScene = (scene, e) => {\n    const menus = this.getSceneContextMenus(scene);\n    const position = { x: e.clientX, y: e.clientY };\n    this.props.showContextMenu(menus, position);\n  };\n  getSceneContextMenus(scene) {\n    const contextMenus = [\n      {\n        img: copyIcon,\n        name: \"복사\",\n        onClick: () => this.onClickCopyScene(scene)\n      },\n      {\n        img: deleteIcon,\n        name: \"삭제\",\n        onClick: () => this.onClickRemoveScene(scene)\n      }\n    ];\n\n    const { startSceneId } = this.props;\n    const isStartScene = scene.id === startSceneId;\n    if (!isStartScene) {\n      contextMenus.splice(0, 0, {\n        img: firstSceneIcon,\n        name: \"시작 장면 지정\",\n        onClick: () => this.onClickSetStartScene(scene)\n      });\n    }\n\n    return contextMenus;\n  }\n  onClickSetStartScene = scene => {\n    this.props.selectStartScene(scene.id);\n  };\n  onClickCopyScene = sceneToCopy => {\n    const { scenes, sceneIds } = this.props;\n    const sceneNames = sceneIds.map(sceneId => scenes[sceneId].name);\n    const sceneId = createDefaultSceneId(sceneIds);\n    const sceneName = createCopiedSceneName(sceneNames, sceneToCopy.name);\n    const scene = JSON.parse(JSON.stringify(sceneToCopy));\n    scene.id = sceneId;\n    scene.name = sceneName;\n    this.props.addScene(scene);\n  };\n  onClickRemoveScene = scene => {\n    this.confirmRemoveScene(() => {\n      const nextCurrentSceneId = this.getNextCurrentSceneId();\n      this.props.selectScene(nextCurrentSceneId);\n      if (scene.id === this.props.startSceneId) {\n        this.props.selectStartScene(nextCurrentSceneId);\n      }\n      this.props.removeScene(scene.id);\n    });\n  };\n  getNextCurrentSceneId() {\n    const { sceneIds, currentSceneId } = this.props;\n    const index = sceneIds.indexOf(currentSceneId);\n    if (index === 0) {\n      return sceneIds[1];\n    } else if (index > 0) {\n      return sceneIds[index - 1];\n    } else {\n      return null;\n    }\n  }\n  confirmRemoveScene(onconfirm) {\n    const didConfirm = window.confirm(\n      \"씬을 삭제하면 되돌릴 수 없어요! 정말 삭제할건가요?\"\n    );\n    if (didConfirm) {\n      if (onconfirm) {\n        onconfirm();\n      }\n    }\n  }\n\n  render() {\n    const { scenes, sceneIds, currentSceneId, startSceneId } = this.props;\n    return (\n      <View\n        scenes={scenes}\n        sceneIds={sceneIds}\n        currentSceneId={currentSceneId}\n        startSceneId={startSceneId}\n        onClickScene={this.onClickScene}\n        onClickAddScene={this.onClickAddScene}\n        onBlurSceneNameInput={this.onBlurSceneNameInput}\n        onRightClickScene={this.onRightClickScene}\n      />\n    );\n  }\n}\n\nexport default connect(\n  state => {\n    const { scenes, sceneIds, startSceneId } = state.game;\n    const { currentSceneId } = state.interaction;\n    return { scenes, sceneIds, currentSceneId, startSceneId };\n  },\n  {\n    addScene: gameActions.addScene,\n    removeScene: gameActions.removeScene,\n    renameScene: gameActions.renameScene,\n    selectStartScene: gameActions.selectStartScene,\n    selectScene: interactionActions.selectScene,\n    showContextMenu: contextMenuActions.showContextMenu\n  }\n)(Container);\n"]},"metadata":{},"sourceType":"module"}