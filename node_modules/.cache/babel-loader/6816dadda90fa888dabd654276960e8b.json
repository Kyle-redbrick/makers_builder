{"ast":null,"code":"import _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as dreamActions from \"../../../Store/Reducer/dream\";\nimport Condition from \"./condition\";\n\nvar ConditionChecker = /*#__PURE__*/function (_React$Component) {\n  _inherits(ConditionChecker, _React$Component);\n\n  var _super = _createSuper(ConditionChecker);\n\n  function ConditionChecker(props) {\n    var _this;\n\n    _classCallCheck(this, ConditionChecker);\n\n    _this = _super.call(this, props);\n\n    _this.onKeydown = function (e) {\n      if (!_this.keyPressed) {\n        _this.keyPressed = {};\n      }\n\n      _this.keyPressed[e.key] = true;\n\n      if (_this.keyPressed[\"Shift\"] && _this.keyPressed[\"W\"] && _this.keyPressed[\"ArrowRight\"]) {\n        _this.forceClear();\n      }\n    };\n\n    _this.onKeyup = function (e) {\n      delete _this.keyPressed[e.key];\n    };\n\n    _this.conditions = [];\n    return _this;\n  }\n\n  _createClass(ConditionChecker, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.init();\n      document.addEventListener(\"keydown\", this.onKeydown);\n      document.addEventListener(\"keyup\", this.onKeyup);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener(\"keydown\", this.onKeydown);\n      document.removeEventListener(\"keyup\", this.onKeyup);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.mission !== this.props.mission) {\n        this.init();\n      }\n\n      if (this.enabled && this.isConditionStateUpdated(prevProps)) {\n        this.check();\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var rawConditions = this.props.mission && this.props.mission.conditions || [];\n      this.conditions = rawConditions.map(function (rawCondition) {\n        return Condition.create(rawCondition);\n      });\n      this.props.setIsClear(false);\n      this.props.setIsCodeClear(false);\n    }\n  }, {\n    key: \"isConditionStateUpdated\",\n    value: function isConditionStateUpdated(prevProps) {\n      return prevProps.game !== this.props.game || prevProps.scene !== this.props.scene || prevProps.preview !== this.props.preview || prevProps.interaction !== this.props.interaction;\n    }\n  }, {\n    key: \"enabled\",\n    get: function get() {\n      return this.props.mission && (!this.props.mission.isCompleted || this.props.isReplaying);\n    }\n  }, {\n    key: \"check\",\n    value: function check() {\n      var _this2 = this;\n\n      this.conditions.forEach(function (condition) {\n        condition.check(_this2.conditionState);\n      });\n      this.checkClear();\n      this.conditions.forEach(function (condition) {\n        condition.dispose({\n          isPlaying: _this2.props.preview.isPlaying\n        });\n      });\n    }\n  }, {\n    key: \"checkClear\",\n    value: function checkClear() {\n      var isClear = true;\n      var isCodeClear = !this.conditions.find(function (condition) {\n        return condition.isCodeType;\n      });\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.conditions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var condition = _step.value;\n\n          if (isClear && !condition.isClear) {\n            isClear = false;\n          }\n\n          if (isCodeClear && condition.isCodeType && !condition.isClear) {\n            isCodeClear = false;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (isClear !== this.props.isClear) {\n        this.props.setIsClear(isClear);\n      }\n\n      if (isCodeClear !== this.props.isCodeClear) {\n        this.props.setIsCodeClear(isCodeClear);\n      }\n    }\n  }, {\n    key: \"conditionState\",\n    get: function get() {\n      return {\n        game: this.props.game,\n        scene: this.props.scene,\n        preview: this.props.preview,\n        interaction: this.props.interaction\n      };\n    }\n  }, {\n    key: \"forceClear\",\n    value: function forceClear() {\n      this.props.setIsClear(true);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return ConditionChecker;\n}(React.Component);\n\nexport default connect(function (state) {\n  return {\n    game: state.game,\n    scene: state.scene,\n    preview: state.preview,\n    interaction: state.interaction,\n    isReplaying: state.dream.isReplaying,\n    mission: state.dream.currentMission,\n    isClear: state.dream.isConditionsClear,\n    isCodeClear: state.dream.isCodeConditionsClear\n  };\n}, {\n  setIsClear: dreamActions.setIsConditionsClear,\n  setIsCodeClear: dreamActions.setIsCodeConditionsClear\n})(ConditionChecker);","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/DreamBuilder/ConditionChecker/index.js"],"names":["React","connect","dreamActions","Condition","ConditionChecker","props","onKeydown","e","keyPressed","key","forceClear","onKeyup","conditions","init","document","addEventListener","removeEventListener","prevProps","mission","enabled","isConditionStateUpdated","check","rawConditions","map","rawCondition","create","setIsClear","setIsCodeClear","game","scene","preview","interaction","isCompleted","isReplaying","forEach","condition","conditionState","checkClear","dispose","isPlaying","isClear","isCodeClear","find","isCodeType","Component","state","dream","currentMission","isConditionsClear","isCodeConditionsClear","setIsConditionsClear","setIsCodeConditionsClear"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as dreamActions from \"../../../Store/Reducer/dream\"\nimport Condition from \"./condition\";\n\nclass ConditionChecker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.conditions = [];\n  }\n\n  componentDidMount() {\n    this.init();\n    document.addEventListener(\"keydown\", this.onKeydown);\n    document.addEventListener(\"keyup\", this.onKeyup);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeydown);\n    document.removeEventListener(\"keyup\", this.onKeyup);\n  }\n  componentDidUpdate(prevProps) {\n    if(prevProps.mission !== this.props.mission) {\n      this.init();\n    }\n    if(this.enabled && this.isConditionStateUpdated(prevProps)) {\n      this.check();\n    }\n  }\n\n  init() {\n    const rawConditions = (this.props.mission && this.props.mission.conditions) || [];\n    this.conditions = rawConditions.map(rawCondition => Condition.create(rawCondition));\n    this.props.setIsClear(false);\n    this.props.setIsCodeClear(false);\n  }\n\n  isConditionStateUpdated(prevProps) {\n    return (\n      prevProps.game !== this.props.game\n      || prevProps.scene !== this.props.scene\n      || prevProps.preview !== this.props.preview\n      || prevProps.interaction !== this.props.interaction\n    );\n  }\n  get enabled() {\n    return this.props.mission\n      && (!this.props.mission.isCompleted || this.props.isReplaying);\n  }\n\n  check() {\n    this.conditions.forEach(condition => {\n      condition.check(this.conditionState);\n    })\n\n    this.checkClear();\n\n    this.conditions.forEach(condition => {\n      condition.dispose({ isPlaying: this.props.preview.isPlaying });\n    })\n  }\n  checkClear() {\n    let isClear = true;\n    let isCodeClear = !this.conditions.find(condition => condition.isCodeType);\n\n    for(let condition of this.conditions) {\n      if(isClear && !condition.isClear) {\n        isClear = false\n      }\n      if(isCodeClear && condition.isCodeType && !condition.isClear) {\n        isCodeClear = false\n      }\n    }\n\n    if(isClear !== this.props.isClear) {\n      this.props.setIsClear(isClear);\n    }\n    if(isCodeClear !== this.props.isCodeClear) {\n      this.props.setIsCodeClear(isCodeClear);\n    }\n  }\n  get conditionState() {\n    return  {\n      game: this.props.game,\n      scene: this.props.scene,\n      preview: this.props.preview,\n      interaction: this.props.interaction\n    }\n  }\n\n  onKeydown = e => {\n    if(!this.keyPressed) {\n      this.keyPressed = {};\n    }\n\n    this.keyPressed[e.key] = true;\n    if (\n      this.keyPressed[\"Shift\"] &&\n      this.keyPressed[\"W\"] &&\n      this.keyPressed[\"ArrowRight\"]\n    ) {\n      this.forceClear();\n    }\n  }\n  onKeyup = e => {\n    delete this.keyPressed[e.key];\n  }\n  forceClear() {\n    this.props.setIsClear(true);\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default connect(\n  state => ({\n    game: state.game,\n    scene: state.scene,\n    preview: state.preview,\n    interaction: state.interaction,\n    isReplaying: state.dream.isReplaying,\n    mission: state.dream.currentMission,\n    isClear: state.dream.isConditionsClear,\n    isCodeClear: state.dream.isCodeConditionsClear\n  }),\n  {\n    setIsClear: dreamActions.setIsConditionsClear,\n    setIsCodeClear: dreamActions.setIsCodeConditionsClear\n  }\n)(ConditionChecker);\n"]},"metadata":{},"sourceType":"module"}