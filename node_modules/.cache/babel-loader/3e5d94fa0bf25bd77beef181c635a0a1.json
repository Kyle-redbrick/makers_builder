{"ast":null,"code":"import _toConsumableArray from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/jimmy/Documents/Wizschool/astroboy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/astroboy/src/Page/Builder/Store/Reducer/chatbot.js\";\nimport React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { ActionType, ChatbotMsgType } from \"../../../../Common/Util/Constant\";\nvar ADD_NEW_MSG = ActionType.ADD_NEW_MSG,\n    SET_TUTOR = ActionType.SET_TUTOR,\n    SET_CHATBOT_ERRORS = ActionType.SET_CHATBOT_ERRORS,\n    REMOVE_CHATBOT_MESSAGES = ActionType.REMOVE_CHATBOT_MESSAGES,\n    INIT_CHATBOT = ActionType.INIT_CHATBOT,\n    SET_PROJECT = ActionType.SET_PROJECT;\nvar BOT_CONFIRM = ChatbotMsgType.BOT_CONFIRM;\nvar BOT_SELECT = ChatbotMsgType.BOT_SELECT;\nexport var addNewMsg = function addNewMsg(msgArr, startIndex) {\n  return {\n    type: ADD_NEW_MSG,\n    msgArr: msgArr,\n    startIndex: startIndex\n  };\n};\nexport var setChatbotErrors = function setChatbotErrors(errors) {\n  return {\n    type: SET_CHATBOT_ERRORS,\n    errors: errors\n  };\n};\nexport var removeChatbotMessages = function removeChatbotMessages(condition) {\n  return {\n    type: REMOVE_CHATBOT_MESSAGES,\n    condition: condition\n  };\n};\nexport var setTutor = function setTutor(tutor) {\n  return {\n    type: SET_TUTOR,\n    tutor: tutor\n  };\n};\nexport var initChatbot = function initChatbot(chatbot) {\n  return {\n    type: INIT_CHATBOT,\n    chatbot: chatbot\n  };\n};\nvar initialState = {\n  messages: [{\n    sender: \"WIZBOT\",\n    type: BOT_SELECT,\n    text: React.createElement(FormattedMessage, {\n      id: \"ID_STORE_REDUCER_CHATBOT_INIT_WIZBOT\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }),\n    options: []\n  }],\n  errors: [],\n  tutor: {\n    name: {\n      ko: \"오카\",\n      en: \"OCA\"\n    },\n    icon: \"https://s3.ap-northeast-2.amazonaws.com/wizschool-basic/running-tutor-oca.png\"\n  }\n};\n\nvar chatbot = function chatbot() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_PROJECT:\n      if (action.chatbot) {\n        return action.chatbot;\n      } else {\n        return state;\n      }\n\n    case INIT_CHATBOT:\n      if (action.chatbot) {\n        return action.chatbot;\n      } else {\n        return initialState;\n      }\n\n    case ADD_NEW_MSG:\n      var msgArr = action.msgArr,\n          _action$startIndex = action.startIndex,\n          startIndex = _action$startIndex === void 0 ? 0 : _action$startIndex;\n      var lastMsg = state.messages[state.messages.length - 1];\n\n      if (lastMsg && lastMsg.type === BOT_CONFIRM) {\n        return _objectSpread({}, state, {\n          messages: [].concat(_toConsumableArray(state.messages.slice(0, state.messages.length - 1 + startIndex)), _toConsumableArray(msgArr))\n        });\n      } else {\n        return _objectSpread({}, state, {\n          messages: [].concat(_toConsumableArray(state.messages.slice(0, state.messages.length + startIndex)), _toConsumableArray(msgArr))\n        });\n      }\n\n    case SET_CHATBOT_ERRORS:\n      return _objectSpread({}, state, {\n        errors: action.errors\n      });\n\n    case REMOVE_CHATBOT_MESSAGES:\n      var condition = action.condition;\n      return _objectSpread({}, state, {\n        messages: state.messages.filter(function (item) {\n          var keys = Object.keys(condition);\n\n          for (var i in keys) {\n            var key = keys[i];\n\n            if (item[key] === condition[key]) {\n              return false;\n            }\n          }\n\n          return true;\n        })\n      });\n\n    case SET_TUTOR:\n      var _action$tutor = action.tutor,\n          name = _action$tutor.name,\n          icon = _action$tutor.icon;\n      var nameObj = {};\n\n      if (/OCA/i.test(name)) {\n        nameObj.ko = \"오카\";\n        nameObj.en = \"OCA\";\n      } else if (/HOI/i.test(name)) {\n        nameObj.ko = \"호이\";\n        nameObj.en = \"HOI\";\n      } else if (/LOGURI/i.test(name)) {\n        nameObj.ko = \"로구리\";\n        nameObj.en = \"LOGURI\";\n      } else if (/DOT/i.test(name)) {\n        nameObj.ko = \"도트\";\n        nameObj.en = \"DOT\";\n      } else if (/EGO/i.test(name)) {\n        nameObj.ko = \"에고\";\n        nameObj.en = \"EGO\";\n      } else {\n        nameObj.ko = \"오카\";\n        nameObj.en = \"OCA\";\n      }\n\n      return _objectSpread({}, state, {\n        tutor: {\n          name: nameObj,\n          icon: icon\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default chatbot;","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/astroboy/src/Page/Builder/Store/Reducer/chatbot.js"],"names":["React","FormattedMessage","ActionType","ChatbotMsgType","ADD_NEW_MSG","SET_TUTOR","SET_CHATBOT_ERRORS","REMOVE_CHATBOT_MESSAGES","INIT_CHATBOT","SET_PROJECT","BOT_CONFIRM","BOT_SELECT","addNewMsg","msgArr","startIndex","type","setChatbotErrors","errors","removeChatbotMessages","condition","setTutor","tutor","initChatbot","chatbot","initialState","messages","sender","text","options","name","ko","en","icon","state","action","lastMsg","length","slice","filter","item","keys","Object","i","key","nameObj","test"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { ActionType, ChatbotMsgType } from \"../../../../Common/Util/Constant\";\n\nconst {\n  ADD_NEW_MSG,\n  SET_TUTOR,\n  SET_CHATBOT_ERRORS,\n  REMOVE_CHATBOT_MESSAGES,\n  INIT_CHATBOT,\n  SET_PROJECT\n} = ActionType;\n\nconst BOT_CONFIRM = ChatbotMsgType.BOT_CONFIRM;\nconst BOT_SELECT = ChatbotMsgType.BOT_SELECT;\n\nexport const addNewMsg = (msgArr, startIndex) => ({\n  type: ADD_NEW_MSG,\n  msgArr,\n  startIndex\n});\n\nexport const setChatbotErrors = errors => ({\n  type: SET_CHATBOT_ERRORS,\n  errors\n});\n\nexport const removeChatbotMessages = condition => ({\n  type: REMOVE_CHATBOT_MESSAGES,\n  condition\n});\n\nexport const setTutor = tutor => ({\n  type: SET_TUTOR,\n  tutor\n});\n\nexport const initChatbot = chatbot => ({\n  type: INIT_CHATBOT,\n  chatbot\n});\n\nconst initialState = {\n  messages: [\n    {\n      sender: \"WIZBOT\",\n      type: BOT_SELECT,\n      text: <FormattedMessage id=\"ID_STORE_REDUCER_CHATBOT_INIT_WIZBOT\" />,\n      options: []\n    }\n  ],\n  errors: [],\n  tutor: {\n    name: {\n      ko: \"오카\",\n      en: \"OCA\"\n    },\n    icon:\n      \"https://s3.ap-northeast-2.amazonaws.com/wizschool-basic/running-tutor-oca.png\"\n  }\n};\n\nconst chatbot = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_PROJECT:\n      if (action.chatbot) {\n        return action.chatbot;\n      } else {\n        return state;\n      }\n    case INIT_CHATBOT:\n      if (action.chatbot) {\n        return action.chatbot;\n      } else {\n        return initialState;\n      }\n\n    case ADD_NEW_MSG:\n      const { msgArr, startIndex = 0 } = action;\n      const lastMsg = state.messages[state.messages.length - 1];\n\n      if (lastMsg && lastMsg.type === BOT_CONFIRM) {\n        return {\n          ...state,\n          messages: [\n            ...state.messages.slice(0, state.messages.length - 1 + startIndex),\n            ...msgArr\n          ]\n        };\n      } else {\n        return {\n          ...state,\n          messages: [\n            ...state.messages.slice(0, state.messages.length + startIndex),\n            ...msgArr\n          ]\n        };\n      }\n    case SET_CHATBOT_ERRORS:\n      return {\n        ...state,\n        errors: action.errors\n      };\n\n    case REMOVE_CHATBOT_MESSAGES:\n      const { condition } = action;\n      return {\n        ...state,\n        messages: state.messages.filter(item => {\n          let keys = Object.keys(condition);\n          for (let i in keys) {\n            let key = keys[i];\n            if (item[key] === condition[key]) {\n              return false;\n            }\n          }\n          return true;\n        })\n      };\n\n    case SET_TUTOR:\n      const { name, icon } = action.tutor;\n      let nameObj = {};\n      if (/OCA/i.test(name)) {\n        nameObj.ko = \"오카\";\n        nameObj.en = \"OCA\";\n      } else if (/HOI/i.test(name)) {\n        nameObj.ko = \"호이\";\n        nameObj.en = \"HOI\";\n      } else if (/LOGURI/i.test(name)) {\n        nameObj.ko = \"로구리\";\n        nameObj.en = \"LOGURI\";\n      } else if (/DOT/i.test(name)) {\n        nameObj.ko = \"도트\";\n        nameObj.en = \"DOT\";\n      } else if (/EGO/i.test(name)) {\n        nameObj.ko = \"에고\";\n        nameObj.en = \"EGO\";\n      } else {\n        nameObj.ko = \"오카\";\n        nameObj.en = \"OCA\";\n      }\n      return {\n        ...state,\n        tutor: {\n          name: nameObj,\n          icon\n        }\n      };\n    default:\n      return state;\n  }\n};\n\nexport default chatbot;\n"]},"metadata":{},"sourceType":"module"}