{"ast":null,"code":"import _objectWithoutProperties from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Socket/Container.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport io from \"socket.io-client\"; // import uuidv4 from \"uuid/v4\";\n\nimport { URL, PAGETYPE, spamType } from \"../../../../Common/Util/Constant\";\nimport * as socketActions from \"../../Store/Reducer/socket\";\nimport * as chatActions from \"../../Store/Reducer/chat\";\nimport PopUp, { showPopUp } from \"../../../../Common/Component/PopUp\";\nimport { FormattedMessage } from \"react-intl\";\nimport { setMyProject } from \"../MultiSocket/Container\"; // import AssetLibrary from \"../../utils/assetLibrary\";\n\nvar socket = io(URL.SOCKET_SERVER, {});\nexport var socketUtil = {\n  socket: socket,\n  sendSocketEvent: function sendSocketEvent(event) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    socket.emit(event, data);\n  }\n};\n\nvar Container =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Container, _Component);\n\n  //chat\n  function Container(props) {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Container).call(this, props));\n    _this.socketTimer = undefined;\n    _this.EVENT_CONNECT = \"connect\";\n    _this.EVENT_JOIN = \"join\";\n    _this.EVENT_JOIN_ROOM = \"joinRoom\";\n    _this.EVENT_INSTANT_RUN_ACK = \"instantRunAck\";\n    _this.EVENT_INSTANT_RUN = \"instantRun\";\n    _this.EVENT_STATE = _this.props.pageType === PAGETYPE.WIZLIVE_1V4 ? \"multiState\" : \"state\";\n    _this.EVENT_STATE_TUTORIAL = \"stateTutorial\";\n    _this.EVENT_REQUEST_IMAGE = \"requestImage\";\n    _this.EVENT_RESPONSE_IMAGE = \"responseImage\";\n    _this.EVENT_TIMER = _this.props.pageType === PAGETYPE.WIZLIVE_1V4 ? 15 : 2000;\n    _this.EVENT_MULTI_STATE = \"multiState\";\n    _this.EVENT_LEAVE = \"leave\";\n    _this.EVENT_HIGHLIGHT = \"highlight\";\n    _this.EVENT_CHAT_MESSAGE = \"chatMessage\";\n\n    _this.setSocket = function () {\n      // const options = {}; //options reference : https://socket.io/docs/client-api/#new-Manager-url-options\n      _this.socket = socket;\n      var roomId = \"all\";\n\n      if (_this.props.pageType === PAGETYPE.WIZLIVE_1V4) {\n        roomId = _this.props.roomId;\n      }\n\n      if (_this.props.email) {\n        _this.socket.emit(_this.EVENT_JOIN, {\n          email: _this.props.email\n        });\n      }\n\n      _this.socket.emit(_this.EVENT_JOIN_ROOM, {\n        roomId: roomId\n      }); // global chat room\n\n\n      _this.joinedRoom.push(roomId);\n\n      _this.socket.on(_this.EVENT_INSTANT_RUN_ACK, function (data) {\n        setTimeout(function () {\n          showPopUp(null);\n        }, 1000);\n      });\n\n      _this.socket.on(_this.EVENT_RESPONSE_IMAGE, function (data) {\n        _this.props.setResponseImage(data.url);\n\n        _this.props.setRequestImage(false);\n      }); //chat\n\n\n      _this.socket.on(_this.EVENT_CHAT_MESSAGE, function (msg) {\n        if (msg.spam) {\n          var title;\n\n          switch (msg.spam) {\n            case spamType.SPAM_BAD_WORD:\n              title = \"ID_SPAM_POPUP_TITLE_BAD_WORD\";\n              break;\n\n            case spamType.SPAM_DUPLICATION:\n              title = \"ID_SPAM_POPUP_TITLE_DUPLICATION\";\n              break;\n\n            case spamType.SPAM_TIME:\n              title = \"ID_SPAM_POPUP_TITLE_TIME\";\n              break;\n\n            default:\n              break;\n          }\n\n          showPopUp(React.createElement(PopUp.OneButton, {\n            title: React.createElement(FormattedMessage, {\n              id: title,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 246\n              },\n              __self: this\n            }),\n            buttonName: React.createElement(FormattedMessage, {\n              id: \"ID_SPAM_POPUP_CONFIRM\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 247\n              },\n              __self: this\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 245\n            },\n            __self: this\n          }), {\n            darkmode: true,\n            dismissButton: false,\n            dismissOverlay: true\n          });\n          var input = document.querySelector(\".ChatContentMainInput\");\n          if (input) input.blur();\n        } else {\n          var element = document.getElementsByClassName(\"ChatContentMainMessages\")[0];\n          if (!element) return;\n          var isScrolledBottom = element.scrollHeight === element.scrollTop + element.clientHeight;\n\n          _this.props.addMsg(msg);\n\n          _this.handleUnreadMsgCount(msg);\n\n          var isMyMsg = _this.checkMyMsg(msg);\n\n          if (isMyMsg || isScrolledBottom) {\n            setTimeout(function () {\n              if (element) {\n                element.scrollTo(0, element.scrollHeight - element.clientHeight);\n              }\n\n              if (isMyMsg) {\n                var _input = document.querySelector(\".ChatContentMainInput\");\n\n                if (_input) {\n                  _input.focus();\n                }\n              }\n            }, 200);\n          }\n        }\n      });\n    };\n\n    _this.checkMyMsg = function (msg) {\n      var email = _this.props.email;\n      var isMyMsg = false;\n\n      if (msg.user.email) {\n        if (msg.user.email === email) {\n          isMyMsg = true;\n        }\n      } else {\n        if (msg.user.name === _this.getGuestId()) {\n          isMyMsg = true;\n        }\n      }\n\n      return isMyMsg;\n    };\n\n    _this.handleUnreadMsgCount = function (msg) {\n      if (!_this.checkMyMsg(msg)) {\n        _this.props.addUnreadMsgCount(msg.roomId);\n      }\n    };\n\n    var pageType = props.pageType;\n    _this.codeSync = pageType !== PAGETYPE.VIDEOCLASS && pageType !== PAGETYPE.OCP && pageType !== PAGETYPE.TUTORIAL && pageType !== PAGETYPE.MONITOR && pageType !== PAGETYPE.QNA_READONLY && pageType !== PAGETYPE.BUILDER_READONLY;\n    _this.isTutorial = pageType === PAGETYPE.TUTORIAL;\n    _this.joinedRoom = [];\n    _this.currentUser = null;\n    _this.needEmit = true;\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setSocket();\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (this.props.email) {\n        if (this.props.instantRunURL !== nextProps.instantRunURL) {\n          this.socket.emit(this.EVENT_INSTANT_RUN, {\n            email: this.props.email,\n            url: nextProps.instantRunURL\n          });\n          return false;\n        }\n\n        if (this.props.requestImage !== nextProps.requestImage) {\n          if (nextProps.requestImage === true) {\n            this.socket.emit(this.EVENT_REQUEST_IMAGE, {\n              email: this.props.email\n            });\n          }\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      // if (prevProps.currentUser) {\n      //   if (prevProps.currentUser.email !== this.props.currentUser.email) {\n      //     this.needEmit = false;\n      //   } else {\n      //     this.needEmit = true;\n      //   }\n      // }\n      // chatting\n      if (this.props.messageQueue.length > 0) {\n        this.props.messageQueue.forEach(function (msg) {\n          var _msg = msg;\n\n          if (_this2.props.pageType === PAGETYPE.WIZLIVE_1V4) {\n            _msg = _objectSpread({}, _msg, {\n              roomId: _this2.props.roomId\n            });\n          }\n\n          _this2.socket.emit(_this2.EVENT_CHAT_MESSAGE, _msg);\n        });\n        this.props.clearMsgQueue();\n      } // code sync\n\n\n      if (!this.props.email) {\n        return;\n      }\n\n      if (this.codeSync) {\n        if (this.socketTimer) {\n          clearTimeout(this.socketTimer);\n        }\n\n        this.socketTimer = setTimeout(function () {\n          var _this2$props = _this2.props,\n              pId = _this2$props.pId,\n              scene = _this2$props.scene,\n              interaction = _this2$props.interaction,\n              preview = _this2$props.preview;\n          var state = JSON.stringify({\n            scene: scene,\n            interaction: _objectSpread({}, interaction, {\n              isPublished: undefined\n            }),\n            preview: _objectSpread({}, preview, {\n              isPlaying: false\n            })\n          });\n          var data = {\n            pId: pId,\n            state: state,\n            email: _this2.props.email\n          };\n\n          if (_this2.isTutorial) {\n            var scenes = scene.scenes;\n            var _this2$props2 = _this2.props,\n                selectedSceneId = _this2$props2.selectedSceneId,\n                selectedObject = _this2$props2.selectedObject;\n            var _sprite = scenes[selectedSceneId].sprites[selectedObject.name];\n\n            _this2.socket.emit(_this2.EVENT_STATE_TUTORIAL, {\n              email: _this2.props.email,\n              code: _sprite.code\n            });\n          } else {\n            // 1:4 수업\n            if (_this2.props.pageType === PAGETYPE.WIZLIVE_1V4) {\n              if (_this2.props.currentUser.email === _this2.props.email) {\n                setMyProject({\n                  scene: scene,\n                  interaction: interaction,\n                  preview: preview\n                }); // data.from = \"owner\";\n\n                _this2.socket.emit(_this2.EVENT_STATE, data); // console.log(1111, \"emit from owner\", data)\n\n              } // else if (\n              //   this.props.currentUser.email !== this.props.email &&\n              //   this.props.isTutor\n              // ) {\n              //   // 나의 계정이 아니지만, 튜터의 경유 모든 학생의 코드 싱크\n              //   const data = {\n              //     state,\n              //     ...this.props.currentUser,\n              //     from: \"tutor\"\n              //   }\n              //   if (this.needEmit === true) {\n              //     this.socket.emit(this.EVENT_STATE, data);\n              //     console.log(1111, \"emit from tutor\", data)\n              //   }\n              // }\n              // 1:1 수업\n\n            } else {\n              _this2.socket.emit(_this2.EVENT_STATE, data);\n            }\n          }\n        }, this.EVENT_TIMER);\n      } else if (this.isTutorial) {// const { pId, scene, interaction, preview } = this.props;\n        // const state = JSON.stringify({\n        //   scene,\n        //   interaction: { ...interaction, isPublished: undefined },\n        //   preview: { ...preview, isPlaying: false }\n        // });\n        // const data = { pId, state };\n        // if (this.isTutorial) {\n        //   const { scenes } = scene;\n        //   const { selectedSceneId, selectedObject } = this.props;\n        //   const _sprite = scenes[selectedSceneId].sprites[selectedObject.name];\n        //   if (!_sprite) return;\n        //   const _code = _sprite.code;\n        //   if (this.lastSentCode === _code) {\n        //     return;\n        //   }\n        //   this.lastSentCode = _code;\n        //   this.socket.emit(this.EVENT_STATE_TUTORIAL, {\n        //     email: this.props.email,\n        //     code: _sprite.code\n        //   });\n        // } else {\n        //   this.socket.emit(this.EVENT_STATE, data);\n        // }\n      }\n\n      if (this.props.pageType === PAGETYPE.WIZLIVE_1V4) return;\n\n      if (this.joinedRoom.length !== Object.keys(this.props.rooms).length) {\n        Object.keys(this.props.rooms).forEach(function (roomId) {\n          if (_this2.joinedRoom.indexOf(roomId) === -1) {\n            _this2.socket.emit(_this2.EVENT_JOIN_ROOM, {\n              roomId: roomId\n            });\n\n            _this2.joinedRoom.push(roomId);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.socket.off(this.EVENT_INSTANT_RUN_ACK);\n      this.socket.off(this.EVENT_RESPONSE_IMAGE);\n      this.socket.off(this.EVENT_CHAT_MESSAGE);\n      this.socket.disconnect();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        style: {\n          display: \"none\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport default connect(function (state) {\n  var _state$scene = state.scene,\n      history = _state$scene.history,\n      historyIndex = _state$scene.historyIndex,\n      _scene = _objectWithoutProperties(_state$scene, [\"history\", \"historyIndex\"]);\n\n  return {\n    selectedSceneId: state.interaction.selected.scene,\n    selectedObject: state.interaction.selected.objects[state.interaction.selected.scene],\n    pId: state.project.pId,\n    scene: _scene,\n    interaction: _objectSpread({}, state.interaction, {\n      jukebox: {\n        isPlaying: false\n      },\n      addSoundsTimeStamp: undefined\n    }),\n    preview: state.preview,\n    email: state.userinfo.email,\n    project: state.project,\n    instantRunURL: state.socket.url,\n    requestImage: state.socket.requestImage,\n    messageQueue: state.chat.messageQueue,\n    rooms: state.chat.rooms,\n    currentUser: state.tabs.currentUser\n  };\n}, {\n  setRequestImage: socketActions.setRequestImage,\n  setResponseImage: socketActions.setResponseImage,\n  clearMsgQueue: chatActions.clearMsgQueue,\n  addMsg: chatActions.addMsg,\n  addUnreadMsgCount: chatActions.addUnreadMsgCount\n})(Container);","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Socket/Container.js"],"names":["React","Component","connect","io","URL","PAGETYPE","spamType","socketActions","chatActions","PopUp","showPopUp","FormattedMessage","setMyProject","socket","SOCKET_SERVER","socketUtil","sendSocketEvent","event","data","emit","Container","props","socketTimer","undefined","EVENT_CONNECT","EVENT_JOIN","EVENT_JOIN_ROOM","EVENT_INSTANT_RUN_ACK","EVENT_INSTANT_RUN","EVENT_STATE","pageType","WIZLIVE_1V4","EVENT_STATE_TUTORIAL","EVENT_REQUEST_IMAGE","EVENT_RESPONSE_IMAGE","EVENT_TIMER","EVENT_MULTI_STATE","EVENT_LEAVE","EVENT_HIGHLIGHT","EVENT_CHAT_MESSAGE","setSocket","roomId","email","joinedRoom","push","on","setTimeout","setResponseImage","url","setRequestImage","msg","spam","title","SPAM_BAD_WORD","SPAM_DUPLICATION","SPAM_TIME","darkmode","dismissButton","dismissOverlay","input","document","querySelector","blur","element","getElementsByClassName","isScrolledBottom","scrollHeight","scrollTop","clientHeight","addMsg","handleUnreadMsgCount","isMyMsg","checkMyMsg","scrollTo","focus","user","name","getGuestId","addUnreadMsgCount","codeSync","VIDEOCLASS","OCP","TUTORIAL","MONITOR","QNA_READONLY","BUILDER_READONLY","isTutorial","currentUser","needEmit","nextProps","nextState","instantRunURL","requestImage","prevProps","messageQueue","length","forEach","_msg","clearMsgQueue","clearTimeout","pId","scene","interaction","preview","state","JSON","stringify","isPublished","isPlaying","scenes","selectedSceneId","selectedObject","_sprite","sprites","code","Object","keys","rooms","indexOf","off","disconnect","display","history","historyIndex","_scene","selected","objects","project","jukebox","addSoundsTimeStamp","userinfo","chat","tabs"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport io from \"socket.io-client\";\n// import uuidv4 from \"uuid/v4\";\nimport { URL, PAGETYPE, spamType } from \"../../../../Common/Util/Constant\";\nimport * as socketActions from \"../../Store/Reducer/socket\";\nimport * as chatActions from \"../../Store/Reducer/chat\";\nimport PopUp, { showPopUp } from \"../../../../Common/Component/PopUp\";\nimport { FormattedMessage } from \"react-intl\";\nimport { setMyProject } from \"../MultiSocket/Container\";\n// import AssetLibrary from \"../../utils/assetLibrary\";\n\nconst socket = io(URL.SOCKET_SERVER, {});\nexport const socketUtil = {\n  socket: socket,\n  sendSocketEvent: (event, data = {}) => {\n    socket.emit(event, data);\n  }\n};\n\nclass Container extends Component {\n  socketTimer = undefined;\n  EVENT_CONNECT = \"connect\";\n  EVENT_JOIN = \"join\";\n  EVENT_JOIN_ROOM = \"joinRoom\";\n  EVENT_INSTANT_RUN_ACK = \"instantRunAck\";\n  EVENT_INSTANT_RUN = \"instantRun\";\n  EVENT_STATE = this.props.pageType === PAGETYPE.WIZLIVE_1V4 ? \"multiState\" : \"state\";\n  EVENT_STATE_TUTORIAL = \"stateTutorial\";\n  EVENT_REQUEST_IMAGE = \"requestImage\";\n  EVENT_RESPONSE_IMAGE = \"responseImage\";\n  EVENT_TIMER = this.props.pageType === PAGETYPE.WIZLIVE_1V4 ? 15 : 2000;\n  EVENT_MULTI_STATE = \"multiState\";\n  EVENT_LEAVE = \"leave\";\n  EVENT_HIGHLIGHT = \"highlight\";\n  //chat\n  EVENT_CHAT_MESSAGE = \"chatMessage\";\n\n  constructor(props) {\n    super(props);\n    const { pageType } = props;\n    this.codeSync =\n      pageType !== PAGETYPE.VIDEOCLASS &&\n      pageType !== PAGETYPE.OCP &&\n      pageType !== PAGETYPE.TUTORIAL &&\n      pageType !== PAGETYPE.MONITOR &&\n      pageType !== PAGETYPE.QNA_READONLY &&\n      pageType !== PAGETYPE.BUILDER_READONLY;\n    this.isTutorial = pageType === PAGETYPE.TUTORIAL;\n    this.joinedRoom = [];\n    this.currentUser = null;\n    this.needEmit = true;\n  }\n\n  componentDidMount() {\n    this.setSocket();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.email) {\n      if (this.props.instantRunURL !== nextProps.instantRunURL) {\n        this.socket.emit(this.EVENT_INSTANT_RUN, {\n          email: this.props.email,\n          url: nextProps.instantRunURL\n        });\n        return false;\n      }\n\n      if (this.props.requestImage !== nextProps.requestImage) {\n        if (nextProps.requestImage === true) {\n          this.socket.emit(this.EVENT_REQUEST_IMAGE, {\n            email: this.props.email\n          });\n        }\n      }\n    }\n    return true;\n  }\n\n  componentDidUpdate(prevProps) {\n\n    // if (prevProps.currentUser) {\n    //   if (prevProps.currentUser.email !== this.props.currentUser.email) {\n    //     this.needEmit = false;\n    //   } else {\n    //     this.needEmit = true;\n    //   }\n    // }\n    // chatting\n    if (this.props.messageQueue.length > 0) {\n      this.props.messageQueue.forEach(msg => {\n        let _msg = msg;\n        if (this.props.pageType === PAGETYPE.WIZLIVE_1V4) {\n          _msg = { ..._msg, roomId: this.props.roomId };\n        }\n        this.socket.emit(this.EVENT_CHAT_MESSAGE, _msg);\n      });\n      this.props.clearMsgQueue();\n    }\n\n    // code sync\n    if (!this.props.email) {\n      return;\n    }\n    if (this.codeSync) {\n      if (this.socketTimer) {\n        clearTimeout(this.socketTimer);\n      }\n      this.socketTimer = setTimeout(() => {\n        const { pId, scene, interaction, preview } = this.props;\n        const state = JSON.stringify({\n          scene,\n          interaction: { ...interaction, isPublished: undefined },\n          preview: { ...preview, isPlaying: false }\n        });\n        const data = { pId, state, email: this.props.email };\n\n        if (this.isTutorial) {\n          const { scenes } = scene;\n          const { selectedSceneId, selectedObject } = this.props;\n          const _sprite = scenes[selectedSceneId].sprites[selectedObject.name];\n          this.socket.emit(this.EVENT_STATE_TUTORIAL, {\n            email: this.props.email,\n            code: _sprite.code\n          });\n        } else {\n          // 1:4 수업\n          if (this.props.pageType === PAGETYPE.WIZLIVE_1V4) {\n            if (this.props.currentUser.email === this.props.email) {\n              setMyProject({ scene, interaction, preview });\n              // data.from = \"owner\";\n              this.socket.emit(this.EVENT_STATE, data);\n              // console.log(1111, \"emit from owner\", data)\n            } \n            // else if (\n            //   this.props.currentUser.email !== this.props.email &&\n            //   this.props.isTutor\n            // ) {\n            //   // 나의 계정이 아니지만, 튜터의 경유 모든 학생의 코드 싱크\n            //   const data = {\n            //     state,\n            //     ...this.props.currentUser,\n            //     from: \"tutor\"\n            //   }\n            //   if (this.needEmit === true) {\n            //     this.socket.emit(this.EVENT_STATE, data);\n            //     console.log(1111, \"emit from tutor\", data)\n            //   }\n            // }\n            // 1:1 수업\n          } else {\n            this.socket.emit(this.EVENT_STATE, data);\n          }\n        }\n      }, this.EVENT_TIMER);\n    } else if (this.isTutorial) {\n      // const { pId, scene, interaction, preview } = this.props;\n      // const state = JSON.stringify({\n      //   scene,\n      //   interaction: { ...interaction, isPublished: undefined },\n      //   preview: { ...preview, isPlaying: false }\n      // });\n      // const data = { pId, state };\n      // if (this.isTutorial) {\n      //   const { scenes } = scene;\n      //   const { selectedSceneId, selectedObject } = this.props;\n      //   const _sprite = scenes[selectedSceneId].sprites[selectedObject.name];\n      //   if (!_sprite) return;\n      //   const _code = _sprite.code;\n      //   if (this.lastSentCode === _code) {\n      //     return;\n      //   }\n      //   this.lastSentCode = _code;\n      //   this.socket.emit(this.EVENT_STATE_TUTORIAL, {\n      //     email: this.props.email,\n      //     code: _sprite.code\n      //   });\n      // } else {\n      //   this.socket.emit(this.EVENT_STATE, data);\n      // }\n    }\n    if (this.props.pageType === PAGETYPE.WIZLIVE_1V4) return;\n\n    if (this.joinedRoom.length !== Object.keys(this.props.rooms).length) {\n      Object.keys(this.props.rooms).forEach(roomId => {\n        if (this.joinedRoom.indexOf(roomId) === -1) {\n          this.socket.emit(this.EVENT_JOIN_ROOM, { roomId });\n          this.joinedRoom.push(roomId);\n        }\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.socket.off(this.EVENT_INSTANT_RUN_ACK);\n    this.socket.off(this.EVENT_RESPONSE_IMAGE);\n    this.socket.off(this.EVENT_CHAT_MESSAGE);\n    this.socket.disconnect();\n  }\n\n  setSocket = () => {\n    // const options = {}; //options reference : https://socket.io/docs/client-api/#new-Manager-url-options\n    this.socket = socket;\n    let roomId = \"all\";\n\n    if (this.props.pageType === PAGETYPE.WIZLIVE_1V4) {\n      roomId = this.props.roomId;\n    }\n\n    if (this.props.email) {\n      this.socket.emit(this.EVENT_JOIN, { email: this.props.email });\n    }\n\n    this.socket.emit(this.EVENT_JOIN_ROOM, { roomId }); // global chat room\n    this.joinedRoom.push(roomId);\n\n    this.socket.on(this.EVENT_INSTANT_RUN_ACK, data => {\n      setTimeout(() => {\n        showPopUp(null);\n      }, 1000);\n    });\n    this.socket.on(this.EVENT_RESPONSE_IMAGE, data => {\n      this.props.setResponseImage(data.url);\n      this.props.setRequestImage(false);\n    });\n\n    //chat\n    this.socket.on(this.EVENT_CHAT_MESSAGE, msg => {\n      if (msg.spam) {\n        let title;\n        switch (msg.spam) {\n          case spamType.SPAM_BAD_WORD:\n            title = \"ID_SPAM_POPUP_TITLE_BAD_WORD\";\n            break;\n          case spamType.SPAM_DUPLICATION:\n            title = \"ID_SPAM_POPUP_TITLE_DUPLICATION\";\n            break;\n          case spamType.SPAM_TIME:\n            title = \"ID_SPAM_POPUP_TITLE_TIME\";\n            break;\n          default:\n            break;\n        }\n        showPopUp(\n          <PopUp.OneButton\n            title={<FormattedMessage id={title} />}\n            buttonName={<FormattedMessage id=\"ID_SPAM_POPUP_CONFIRM\" />}\n          />,\n          {\n            darkmode: true,\n            dismissButton: false,\n            dismissOverlay: true\n          }\n        );\n        const input = document.querySelector(\".ChatContentMainInput\");\n        if (input) input.blur();\n      } else {\n        const element = document.getElementsByClassName(\n          \"ChatContentMainMessages\"\n        )[0];\n        if (!element) return;\n        const isScrolledBottom =\n          element.scrollHeight === element.scrollTop + element.clientHeight;\n        this.props.addMsg(msg);\n        this.handleUnreadMsgCount(msg);\n\n        let isMyMsg = this.checkMyMsg(msg);\n\n        if (isMyMsg || isScrolledBottom) {\n          setTimeout(() => {\n            if (element) {\n              element.scrollTo(0, element.scrollHeight - element.clientHeight);\n            }\n\n            if (isMyMsg) {\n              const input = document.querySelector(\".ChatContentMainInput\");\n              if (input) {\n                input.focus();\n              }\n            }\n          }, 200);\n        }\n      }\n    });\n  };\n\n  checkMyMsg = msg => {\n    const { email } = this.props;\n    let isMyMsg = false;\n    if (msg.user.email) {\n      if (msg.user.email === email) {\n        isMyMsg = true;\n      }\n    } else {\n      if (msg.user.name === this.getGuestId()) {\n        isMyMsg = true;\n      }\n    }\n    return isMyMsg;\n  };\n\n  handleUnreadMsgCount = msg => {\n    if (!this.checkMyMsg(msg)) {\n      this.props.addUnreadMsgCount(msg.roomId);\n    }\n  };\n\n  render() {\n    return <div style={{ display: \"none\" }} />;\n  }\n}\n\nexport default connect(\n  state => {\n    const { history, historyIndex, ..._scene } = state.scene;\n\n    return {\n      selectedSceneId: state.interaction.selected.scene,\n      selectedObject:\n        state.interaction.selected.objects[state.interaction.selected.scene],\n      pId: state.project.pId,\n      scene: _scene,\n      interaction: {\n        ...state.interaction,\n        jukebox: {\n          isPlaying: false\n        },\n        addSoundsTimeStamp: undefined\n      },\n      preview: state.preview,\n      email: state.userinfo.email,\n      project: state.project,\n      instantRunURL: state.socket.url,\n      requestImage: state.socket.requestImage,\n      messageQueue: state.chat.messageQueue,\n      rooms: state.chat.rooms,\n      currentUser: state.tabs.currentUser\n    };\n  },\n  {\n    setRequestImage: socketActions.setRequestImage,\n    setResponseImage: socketActions.setResponseImage,\n    clearMsgQueue: chatActions.clearMsgQueue,\n    addMsg: chatActions.addMsg,\n    addUnreadMsgCount: chatActions.addUnreadMsgCount\n  }\n)(Container);\n"]},"metadata":{},"sourceType":"module"}