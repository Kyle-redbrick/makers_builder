{"ast":null,"code":"import { getType, locate } from './mitsuketa';\nvar err = {\n  getCaller: function getCaller() {\n    var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    // A somewhat hacky solution that will yield different results in different JS engines. \n    // Since we only call this function when an error will actually be thrown we typically don't \n    // rally mind the performance impact this might have if called too often.\n    // Lucky for us we use nodeJS and thus only V8.\n    var stackTrace = new Error().stack;\n    var callerName = stackTrace.replace(/^Error\\s+/, '');\n    callerName = callerName.split(\"\\n\")[skip];\n    callerName = callerName.replace(/^\\s+at Object./, '').replace(/^\\s+at /, '').replace(/ \\(.+\\)$/, '');\n    return callerName;\n  },\n  throwError: function throwError() {\n    var fxName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'unknown function';\n    var paramName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'unknown parameter';\n    var expectation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'to be defined';\n    throw ['@', fxName, '(): Expected parameter \\'', paramName, '\\' ', expectation].join('');\n  },\n  isUndefined: function isUndefined() {\n    var paramName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '<unknown parameter>';\n    var param = arguments.length > 1 ? arguments[1] : undefined;\n    if ([null, undefined].indexOf(param) > -1) err.throwError(err.getCaller(2), paramName);\n  },\n  isFalsy: function isFalsy() {\n    var paramName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '<unknown parameter>';\n    var param = arguments.length > 1 ? arguments[1] : undefined;\n    if (!param) err.throwError(err.getCaller(2), paramName);\n  },\n  isNoneOf: function isNoneOf() {\n    var paramName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '<unknown parameter>';\n    var param = arguments.length > 1 ? arguments[1] : undefined;\n    var contains = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    if (contains.indexOf(param) === -1) err.throwError(err.getCaller(2), paramName, 'to be any of' + JSON.stringify(contains));\n  },\n  isAnyOf: function isAnyOf() {\n    var paramName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '<unknown parameter>';\n    var param = arguments.length > 1 ? arguments[1] : undefined;\n    var contains = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    if (contains.indexOf(param) > -1) err.throwError(err.getCaller(2), paramName, 'not to be any of' + JSON.stringify(contains));\n  },\n  isNotType: function isNotType() {\n    var paramName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '<unknown parameter>';\n    var param = arguments.length > 1 ? arguments[1] : undefined;\n    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    if (getType(param) !== type.toLowerCase()) err.throwError(err.getCaller(2), paramName, 'to be type ' + type.toLowerCase());\n  },\n  isAnyTypeOf: function isAnyTypeOf() {\n    var paramName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '<unknown parameter>';\n    var param = arguments.length > 1 ? arguments[1] : undefined;\n    var types = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    types.forEach(function (type) {\n      if (getType(param) === type) err.throwError(err.getCaller(2), paramName, 'not to be type of ' + type.toLowerCase());\n    });\n  },\n  missingKey: function missingKey() {\n    var paramName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '<unknown parameter>';\n    var param = arguments.length > 1 ? arguments[1] : undefined;\n    var keyName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    err.isUndefined(paramName, param);\n    if (Object.keys(param).indexOf(keyName) === -1) err.throwError(err.getCaller(2), paramName, 'to contain \\'' + keyName + '\\' key');\n  },\n  missingAnyKeys: function missingAnyKeys() {\n    var paramName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '<unknown parameter>';\n    var param = arguments.length > 1 ? arguments[1] : undefined;\n    var keyNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [''];\n    err.isUndefined(paramName, param);\n    var keyList = Object.keys(param);\n    keyNames.forEach(function (keyName) {\n      if (keyList.indexOf(keyName) === -1) err.throwError(err.getCaller(2), paramName, 'to contain \\'' + keyName + '\\' key');\n    });\n  },\n  containsUndefined: function containsUndefined() {\n    var paramName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '<unknown parameter>';\n    var param = arguments.length > 1 ? arguments[1] : undefined;\n    [undefined, null].forEach(function (value) {\n      var location = locate(param, value);\n      if (location) err.throwError(err.getCaller(2), paramName, 'not to contain \\'' + JSON.stringify(value) + '\\' at ' + location);\n    });\n  },\n  isInvalidPath: function isInvalidPath() {\n    var paramName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '<unknown parameter>';\n    var param = arguments.length > 1 ? arguments[1] : undefined;\n    err.isUndefined(paramName, param);\n    err.isNotType(paramName, param, 'string');\n    err.isAnyOf(paramName, param, ['', '/']);\n    '.$[]#'.split().forEach(function (invalidChar) {\n      if (param.indexOf(invalidChar) > -1) err.throwError(err.getCaller(2), paramName, 'not to contain invalid character \\'' + invalidChar + '\\'');\n    });\n    if (param.match(/\\/{2,}/g)) err.throwError(err.getCaller(2), paramName, 'not to contain consecutive forward slash characters');\n  },\n  isInvalidWriteData: function isInvalidWriteData() {\n    var paramName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '<unknown parameter>';\n    var param = arguments.length > 1 ? arguments[1] : undefined;\n    err.isUndefined(paramName, param);\n    err.containsUndefined(paramName, param);\n  }\n};\nexport default err;","map":null,"metadata":{},"sourceType":"module"}