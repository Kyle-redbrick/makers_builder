{"ast":null,"code":"import _objectSpread from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jimmy/Documents/Wizschool/wizlab_web2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Preview/Container.js\";\nimport React, { Component } from \"react\";\nimport { injectIntl } from \"react-intl\";\nimport { connect } from \"react-redux\";\nimport * as TrackingUtil from \"../../../../Common/Util/TrackingUtil\";\nimport * as previewActions from \"../../Store/Reducer/preview\";\nimport RndWrapper from \"../../utils/RndWrapper\";\nimport View from \"./View\";\n\nvar Container =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Container, _Component);\n\n  function Container(props) {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Container).call(this, props));\n\n    _this.handleChangeScreenMode = function () {\n      TrackingUtil.sendGAEvent({\n        category: \"Builder\",\n        action: \"RotatePreview\"\n      });\n      var targetMode = _this.props.screenMode === \"VERTICAL\" ? \"HORIZONTAL\" : \"VERTICAL\";\n\n      _this.props.setScreenMode(targetMode);\n    };\n\n    _this.onResize = function (e) {\n      if (_this.previewCanvasRef) {\n        _this.previewCanvasRef.onResize(e);\n      }\n    };\n\n    _this.setPreivewCanvasRef = function (ref) {\n      _this.previewCanvasRef = ref;\n    };\n\n    var defaultSize = _this.getDefaultRndSize();\n\n    _this.state = _objectSpread({}, defaultSize);\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"getDefaultRndSize\",\n    value: function getDefaultRndSize() {\n      var isHorizontal = this.props.screenMode === \"HORIZONTAL\";\n      var w = 16 * 30;\n      var h = 9 * 30;\n      var offset = 150;\n      var headerHight = 35;\n      var width = isHorizontal ? w : h;\n      var height = isHorizontal ? h + headerHight : w + headerHight;\n      var minWidth = isHorizontal ? width : 0;\n      var minHeight = isHorizontal ? 0 : height;\n      var lockAspectRatio = isHorizontal ? w / h : h / w;\n      var lockAspectRatioExtraHeight = headerHight;\n      var x = document.body.clientWidth - width - offset;\n      var y = document.body.clientHeight - height - offset;\n      return {\n        width: width,\n        height: height,\n        x: x,\n        y: y,\n        minWidth: minWidth,\n        minHeight: minHeight,\n        lockAspectRatio: lockAspectRatio,\n        lockAspectRatioExtraHeight: lockAspectRatioExtraHeight\n      };\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.screenMode !== prevProps.screenMode) {\n        var defaultSize = this.getDefaultRndSize();\n        this.setState(_objectSpread({}, defaultSize));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          screenMode = _this$props.screenMode,\n          handleChangeZIndex = _this$props.handleChangeZIndex,\n          zIndex = _this$props.zIndex,\n          handleSelectTab = _this$props.handleSelectTab,\n          selectedSceneId = _this$props.selectedSceneId,\n          selectedScene = _this$props.selectedScene,\n          intl = _this$props.intl,\n          fixed = _this$props.fixed;\n      var handleChangeScreenMode = this.handleChangeScreenMode,\n          setPreivewCanvasRef = this.setPreivewCanvasRef;\n      var preview = React.createElement(View, {\n        screenMode: screenMode,\n        handleChangeZIndex: handleChangeZIndex,\n        handleSelectTab: handleSelectTab,\n        handleChangeScreenMode: handleChangeScreenMode,\n        selectedSceneId: selectedSceneId,\n        selectedScene: selectedScene,\n        setPreivewCanvasRef: setPreivewCanvasRef,\n        intl: intl,\n        fixed: fixed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      });\n\n      if (fixed) {\n        return preview;\n      }\n\n      return React.createElement(RndWrapper, {\n        id: \"preview\",\n        style: {\n          zIndex: zIndex\n        },\n        defaultWidth: this.state.width,\n        defaultHeight: this.state.height,\n        defaultX: this.state.x,\n        defaultY: this.state.y,\n        minWidth: this.state.minWidth,\n        minHeight: this.state.minHeight,\n        lockAspectRatio: this.state.lockAspectRatio,\n        lockAspectRatioExtraHeight: this.state.lockAspectRatioExtraHeight,\n        screenMode: this.props.screenMode,\n        onResize: this.onResize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, preview);\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport default connect(function (state) {\n  var screenMode = state.preview.screenMode;\n  var selectedSceneId = state.interaction.selected.scene;\n  var selectedScene = state.scene.scenes[selectedSceneId];\n  return {\n    screenMode: screenMode,\n    selectedSceneId: selectedSceneId,\n    selectedScene: selectedScene\n  };\n}, {\n  setIsPlaying: previewActions.setIsPlaying,\n  setScreenMode: previewActions.setScreenMode\n})(injectIntl(Container));","map":{"version":3,"sources":["/Users/jimmy/Documents/Wizschool/wizlab_web2/src/Page/Builder/Component/Preview/Container.js"],"names":["React","Component","injectIntl","connect","TrackingUtil","previewActions","RndWrapper","View","Container","props","handleChangeScreenMode","sendGAEvent","category","action","targetMode","screenMode","setScreenMode","onResize","e","previewCanvasRef","setPreivewCanvasRef","ref","defaultSize","getDefaultRndSize","state","isHorizontal","w","h","offset","headerHight","width","height","minWidth","minHeight","lockAspectRatio","lockAspectRatioExtraHeight","x","document","body","clientWidth","y","clientHeight","prevProps","setState","handleChangeZIndex","zIndex","handleSelectTab","selectedSceneId","selectedScene","intl","fixed","preview","interaction","selected","scene","scenes","setIsPlaying"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { injectIntl } from \"react-intl\";\nimport { connect } from \"react-redux\";\n\nimport * as TrackingUtil from \"../../../../Common/Util/TrackingUtil\";\nimport * as previewActions from \"../../Store/Reducer/preview\";\nimport RndWrapper from \"../../utils/RndWrapper\";\nimport View from \"./View\";\n\nclass Container extends Component {\n  constructor(props) {\n    super(props);\n    const defaultSize = this.getDefaultRndSize();\n    this.state = { ...defaultSize };\n  }\n\n  getDefaultRndSize() {\n    const isHorizontal = this.props.screenMode === \"HORIZONTAL\";\n    const w = 16 * 30;\n    const h = 9 * 30;\n    const offset = 150;\n    const headerHight = 35;\n\n    const width = isHorizontal ? w : h;\n    const height = isHorizontal ? h + headerHight : w + headerHight;\n    const minWidth = isHorizontal ? width : 0;\n    const minHeight = isHorizontal ? 0 : height;\n    const lockAspectRatio = isHorizontal ? w / h : h / w;\n    const lockAspectRatioExtraHeight = headerHight;\n    const x = document.body.clientWidth - width - offset;\n    const y = document.body.clientHeight - height - offset;\n\n    return {\n      width,\n      height,\n      x,\n      y,\n      minWidth,\n      minHeight,\n      lockAspectRatio,\n      lockAspectRatioExtraHeight\n    };\n  }\n\n  handleChangeScreenMode = () => {\n    TrackingUtil.sendGAEvent({\n      category: \"Builder\",\n      action: `RotatePreview`\n    });\n    const targetMode =\n      this.props.screenMode === \"VERTICAL\" ? \"HORIZONTAL\" : \"VERTICAL\";\n    this.props.setScreenMode(targetMode);\n  };\n\n  componentDidUpdate(prevProps) {\n    if (this.props.screenMode !== prevProps.screenMode) {\n      const defaultSize = this.getDefaultRndSize();\n      this.setState({ ...defaultSize });\n    }\n  }\n\n  onResize = e => {\n    if (this.previewCanvasRef) {\n      this.previewCanvasRef.onResize(e);\n    }\n  };\n  setPreivewCanvasRef = ref => {\n    this.previewCanvasRef = ref;\n  };\n\n  render() {\n    const {\n      screenMode,\n      handleChangeZIndex,\n      zIndex,\n      handleSelectTab,\n      selectedSceneId,\n      selectedScene,\n      intl,\n      fixed\n    } = this.props;\n    const { handleChangeScreenMode, setPreivewCanvasRef } = this;\n    const preview = (\n      <View\n        screenMode={screenMode}\n        handleChangeZIndex={handleChangeZIndex}\n        handleSelectTab={handleSelectTab}\n        handleChangeScreenMode={handleChangeScreenMode}\n        selectedSceneId={selectedSceneId}\n        selectedScene={selectedScene}\n        setPreivewCanvasRef={setPreivewCanvasRef}\n        intl={intl}\n        fixed={fixed}\n      />\n    );\n\n    if (fixed) {\n      return preview;\n    }\n\n    return (\n      <RndWrapper\n        id=\"preview\"\n        style={{ zIndex }}\n        defaultWidth={this.state.width}\n        defaultHeight={this.state.height}\n        defaultX={this.state.x}\n        defaultY={this.state.y}\n        minWidth={this.state.minWidth}\n        minHeight={this.state.minHeight}\n        lockAspectRatio={this.state.lockAspectRatio}\n        lockAspectRatioExtraHeight={this.state.lockAspectRatioExtraHeight}\n        screenMode={this.props.screenMode}\n        onResize={this.onResize}\n      >\n        {preview}\n      </RndWrapper>\n    );\n  }\n}\n\nexport default connect(\n  state => {\n    const { screenMode } = state.preview;\n    const selectedSceneId = state.interaction.selected.scene;\n    const selectedScene = state.scene.scenes[selectedSceneId];\n    return { screenMode, selectedSceneId, selectedScene };\n  },\n  {\n    setIsPlaying: previewActions.setIsPlaying,\n    setScreenMode: previewActions.setScreenMode\n  }\n)(injectIntl(Container));\n"]},"metadata":{},"sourceType":"module"}